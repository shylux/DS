/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 26);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(32);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();

/**
 * Colors.
 */

exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (window && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
  // is firebug? http://stackoverflow.com/a/398120/376773
  window && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
  // is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
  // double check webkit in userAgent just in case we are in a worker
  navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit');

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === (typeof console === 'undefined' ? 'undefined' : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch (e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch (e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.__esModule = true;
exports.extend = extend;
exports.indexOf = indexOf;
exports.escapeExpression = escapeExpression;
exports.isEmpty = isEmpty;
exports.createFrame = createFrame;
exports.blockParams = blockParams;
exports.appendContextPath = appendContextPath;
var escape = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

var badChars = /[&<>"'`=]/g,
    possible = /[&<>"'`=]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

var toString = Object.prototype.toString;

exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
/* eslint-disable func-style */
var isFunction = function isFunction(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  exports.isFunction = isFunction = function isFunction(value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
exports.isFunction = isFunction;

/* eslint-enable func-style */

/* istanbul ignore next */
var isArray = Array.isArray || function (value) {
  return value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? toString.call(value) === '[object Array]' : false;
};

exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.

function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

function escapeExpression(string) {
  if (typeof string !== 'string') {
    // don't escape SafeStrings, since they're already safe
    if (string && string.toHTML) {
      return string.toHTML();
    } else if (string == null) {
      return '';
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = '' + string;
  }

  if (!possible.test(string)) {
    return string;
  }
  return string.replace(badChars, escapeChar);
}

function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

function createFrame(object) {
  var frame = extend({}, object);
  frame._parent = object;
  return frame;
}

function blockParams(params, ids) {
  params.path = ids;
  return params;
}

function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function (event, fn) {
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function (event) {
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1),
      callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function (event) {
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function (event) {
  return !!this.listeners(event).length;
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module dependencies.
 */

var keys = __webpack_require__(42);
var hasBinary = __webpack_require__(13);
var sliceBuffer = __webpack_require__(43);
var after = __webpack_require__(44);
var utf8 = __webpack_require__(45);

var base64encoder;
if (global && global.ArrayBuffer) {
  base64encoder = __webpack_require__(46);
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
  open: 0 // non-ws
  , close: 1 // non-ws
  , ping: 2,
  pong: 3,
  message: 4,
  upgrade: 5,
  noop: 6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = __webpack_require__(47);

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if (typeof utf8encode === 'function') {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;

  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (Blob && data instanceof global.Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
  }

  return callback('' + encoded);
};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i + 1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function () {
    packet.data = fr.result;
    exports.encodePacket(packet, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function (packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (Blob && packet.data instanceof global.Blob) {
    var fr = new FileReader();
    fr.onload = function () {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += global.btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data === 'string') {
    if (data.charAt(0) === 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data, { strict: false });
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function (msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function (message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function (err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function eachWithIndex(i, el, cb) {
    each(el, function (error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data !== 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data === '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = '',
      n,
      msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (chr !== ':') {
      length += chr;
      continue;
    }

    if (length === '' || length != (n = Number(length))) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    msg = data.substr(i + 1, n);

    if (length != msg.length) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    if (msg.length) {
      packet = exports.decodePacket(msg, binaryType, false);

      if (err.type === packet.type && err.data === packet.data) {
        // parser error in individual packet - ignoring payload
        return callback(err, 0, 1);
      }

      var ret = callback(packet, i + n, l);
      if (false === ret) return;
    }

    // advance cursor
    i += n;
    length = '';
  }

  if (length !== '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }
};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function (packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function (data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function (err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function (acc, p) {
      var len;
      if (typeof p === 'string') {
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function (p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) {
        // not true binary
        resultArray[bufferIndex++] = 0;
      } else {
        // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function (packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function (encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function (err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1;; i++) {
      if (tailArray[i] === 255) break;

      // 310 = char length of Number.MAX_VALUE
      if (msgLength.length > 310) {
        return callback(err, 0, 1);
      }

      msgLength += tailArray[i];
    }

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function (buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line = undefined,
      column = undefined;
  if (loc) {
    line = loc.start.line;
    column = loc.start.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  /* istanbul ignore else */
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, Exception);
  }

  try {
    if (loc) {
      this.lineNumber = line;

      // Work around issue under safari where we can't directly set the column value
      /* istanbul ignore next */
      if (Object.defineProperty) {
        Object.defineProperty(this, 'column', {
          value: column,
          enumerable: true
        });
      } else {
        this.column = column;
      }
    }
  } catch (nop) {
    /* Ignore if the browser is very particular */
  }
}

Exception.prototype = new Error();

exports['default'] = Exception;
module.exports = exports['default'];

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function (qs) {
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (a, b) {
  var fn = function fn() {};
  fn.prototype = b.prototype;
  a.prototype = new fn();
  a.prototype.constructor = a;
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */

var debug = __webpack_require__(1)('socket.io-parser');
var Emitter = __webpack_require__(3);
var hasBin = __webpack_require__(13);
var binary = __webpack_require__(35);
var isBuf = __webpack_require__(14);

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'ACK', 'ERROR', 'BINARY_EVENT', 'BINARY_ACK'];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function (obj, callback) {
  if ((obj.type === exports.EVENT || obj.type === exports.ACK) && hasBin(obj.data)) {
    obj.type = obj.type === exports.EVENT ? exports.BINARY_EVENT : exports.BINARY_ACK;
  }

  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  } else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {

  // first is type
  var str = '' + obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  }

  // immediately followed by the id
  if (null != obj.id) {
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    str += JSON.stringify(obj.data);
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an ecoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function (obj) {
  var packet;
  if (typeof obj === 'string') {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) {
      // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else {
      // non-binary full packet
      this.emit('decoded', packet);
    }
  } else if (isBuf(obj) || obj.base64) {
    // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) {
        // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  } else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var i = 0;
  // look up type
  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) return error();

  // look up attachments if type binary
  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var buf = '';
    while (str.charAt(++i) !== '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' === str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      p.nsp += c;
      if (i === str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i === str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    p = tryParse(p, str.substr(i));
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(p, str) {
  try {
    p.data = JSON.parse(str);
  } catch (e) {
    return error();
  }
  return p;
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function () {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function (binData) {
  this.buffers.push(binData);
  if (this.buffers.length === this.reconPack.attachments) {
    // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function () {
  this.reconPack = null;
  this.buffers = [];
};

function error() {
  return {
    type: exports.ERROR,
    data: 'parser error'
  };
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// browser shim for xmlhttprequest module

var hasCORS = __webpack_require__(40);

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) {}

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) {}

  if (!xdomain) {
    try {
      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) {}
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */

var parser = __webpack_require__(4);
var Emitter = __webpack_require__(3);

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport(opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* global Blob File */

/*
 * Module requirements.
 */

var isArray = __webpack_require__(34);

var toString = Object.prototype.toString;
var withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';
var withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(obj) {
  if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
    return false;
  }

  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }
    return false;
  }

  if (typeof global.Buffer === 'function' && global.Buffer.isBuffer && global.Buffer.isBuffer(obj) || typeof global.ArrayBuffer === 'function' && obj instanceof ArrayBuffer || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
    return true;
  }

  // see: https://github.com/Automattic/has-binary/pull/4
  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }

  return false;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

module.exports = isBuf;

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Module dependencies.
 */

var eio = __webpack_require__(37);
var Socket = __webpack_require__(21);
var Emitter = __webpack_require__(3);
var parser = __webpack_require__(8);
var on = __webpack_require__(22);
var bind = __webpack_require__(23);
var debug = __webpack_require__(1)('socket.io-client:manager');
var indexOf = __webpack_require__(20);
var Backoff = __webpack_require__(53);

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager(uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && 'object' === (typeof uri === 'undefined' ? 'undefined' : _typeof(uri))) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  var _parser = opts.parser || parser;
  this.encoder = new _parser.Encoder();
  this.decoder = new _parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.generateId(nsp);
    }
  }
};

/**
 * generate `socket.id` for the given `nsp`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */

Manager.prototype.generateId = function (nsp) {
  return (nsp === '/' ? '' : nsp + '#') + this.engine.id;
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open = Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function destroy() {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.generateId(nsp);
    });

    if (this.autoConnect) {
      // manually call here since connecting event is fired before listening
      onConnecting();
    }
  }

  function onConnecting() {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else {
    // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close = Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function destroy() {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module dependencies
 */

var XMLHttpRequest = __webpack_require__(9);
var XHR = __webpack_require__(41);
var JSONP = __webpack_require__(48);
var websocket = __webpack_require__(49);

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling(opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */

var Transport = __webpack_require__(10);
var parseqs = __webpack_require__(6);
var parser = __webpack_require__(4);
var inherit = __webpack_require__(7);
var yeast = __webpack_require__(19);
var debug = __webpack_require__(1)('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = function () {
  var XMLHttpRequest = __webpack_require__(9);
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
}();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling(opts) {
  var forceBase64 = opts && opts.forceBase64;
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause() {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function callback(packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close() {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function callbackfn() {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && ('https' === schema && Number(this.port) !== 443 || 'http' === schema && Number(this.port) !== 80)) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/***/ }),
/* 18 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),
    length = 64,
    map = {},
    seed = 0,
    i = 0,
    prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now + '.' + encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) {
  map[alphabet[i]] = i;
} //
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var indexOf = [].indexOf;

module.exports = function (arr, obj) {
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Module dependencies.
 */

var parser = __webpack_require__(8);
var Emitter = __webpack_require__(3);
var toArray = __webpack_require__(52);
var on = __webpack_require__(22);
var bind = __webpack_require__(23);
var debug = __webpack_require__(1)('socket.io-client:socket');
var parseqs = __webpack_require__(6);

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket(io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open = Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var packet = { type: parser.EVENT, data: args };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  delete this.flags;

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      var query = _typeof(this.query) === 'object' ? parseqs.encode(this.query) : this.query;
      debug('sending connect packet with query %s', query);
      this.packet({ type: parser.CONNECT, query: query });
    } else {
      this.packet({ type: parser.CONNECT });
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  if (packet.nsp !== this.nsp) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    self.packet({
      type: parser.ACK,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close = Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags = this.flags || {};
  this.flags.compress = compress;
  return this;
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on(obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function destroy() {
      obj.removeListener(ev, fn);
    }
  };
}

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function (obj, fn) {
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function () {
    return fn.apply(obj, args.concat(slice.call(arguments)));
  };
};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
module.exports = __webpack_require__(58)['default'];

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.HandlebarsEnvironment = HandlebarsEnvironment;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _utils = __webpack_require__(2);

var _exception = __webpack_require__(5);

var _exception2 = _interopRequireDefault(_exception);

var _helpers = __webpack_require__(59);

var _decorators = __webpack_require__(67);

var _logger = __webpack_require__(69);

var _logger2 = _interopRequireDefault(_logger);

var VERSION = '4.0.10';
exports.VERSION = VERSION;
var COMPILER_REVISION = 7;

exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1',
  7: '>= 4.0.0'
};

exports.REVISION_CHANGES = REVISION_CHANGES;
var objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials, decorators) {
  this.helpers = helpers || {};
  this.partials = partials || {};
  this.decorators = decorators || {};

  _helpers.registerDefaultHelpers(this);
  _decorators.registerDefaultDecorators(this);
}

HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: _logger2['default'],
  log: _logger2['default'].log,

  registerHelper: function registerHelper(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple helpers');
      }
      _utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function unregisterHelper(name) {
    delete this.helpers[name];
  },

  registerPartial: function registerPartial(name, partial) {
    if (_utils.toString.call(name) === objectType) {
      _utils.extend(this.partials, name);
    } else {
      if (typeof partial === 'undefined') {
        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function unregisterPartial(name) {
    delete this.partials[name];
  },

  registerDecorator: function registerDecorator(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple decorators');
      }
      _utils.extend(this.decorators, name);
    } else {
      this.decorators[name] = fn;
    }
  },
  unregisterDecorator: function unregisterDecorator(name) {
    delete this.decorators[name];
  }
};

var log = _logger2['default'].log;

exports.log = log;
exports.createFrame = _utils.createFrame;
exports.logger = _logger2['default'];

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(27);
module.exports = __webpack_require__(77);


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($, io) {

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _player = __webpack_require__(54);

var _player2 = _interopRequireDefault(_player);

var _game = __webpack_require__(55);

var _game2 = _interopRequireDefault(_game);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Gamemaster = function () {
    function Gamemaster() {
        _classCallCheck(this, Gamemaster);

        this.admin = true; // admin can move both pieces
        this.localPlayer = new _player2.default("Bisaflor");
        var player2 = new _player2.default("Mewtwo");

        this.game = new _game2.default({}, this.localPlayer, player2);

        $('body').append(this.game.render());
        $('#board td').on('click', function () {
            gm.handleClick(gm.getCell($(this)));
        });

        this.socket = io();
        this.socket.on('make move', function (data) {
            console.log(data);
            this.game.execute(data);
            this.executeAction(data);
        }.bind(this));
    }

    _createClass(Gamemaster, [{
        key: 'handleClick',
        value: function handleClick(cell) {
            // execute move
            if (this.getjqCell(cell).hasClass('possibleMove')) {
                var sourceJqCell = $('#board td.selected');
                var sourceCell = this.getCell(sourceJqCell);

                var logEntry = this.game.prepareMove(sourceCell, cell);

                this.game.execute(logEntry);
                this.executeAction(logEntry);
                this.deselectPiece();

                this.socket.emit('make move', logEntry);

                return;
            }

            // show possible moves
            if (cell.piece && (cell.piece.owner === this.localPlayer || this.admin)) {
                if (this.getjqCell(cell).hasClass('selected')) {
                    // a click on a selected piece deselects it
                    this.deselectPiece();
                } else {
                    // selected his own piece
                    this.selectPiece(cell);
                }
            }
        }
    }, {
        key: 'executeAction',
        value: function executeAction(logEntry) {
            if (logEntry.action === 'move') {
                var sourceJqCell = this.getjqCell(logEntry.source);
                var targetJqCell = this.getjqCell(logEntry.target);

                sourceJqCell.removeClass(logEntry.movedPieceClass);
                if (logEntry.killedPieceClass) targetJqCell.removeClass(logEntry.killedPieceClass);
                targetJqCell.addClass(logEntry.movedPieceClass);
            }
        }
    }, {
        key: 'getCell',
        value: function getCell(jqcell) {
            var x = jqcell.data('x');
            var y = jqcell.data('y');
            return this.game.board[y][x];
        }
    }, {
        key: 'getjqCell',
        value: function getjqCell(cell) {
            return $('#board td[data-x="' + cell.x + '"][data-y="' + cell.y + '"]');
        }
    }, {
        key: 'selectPiece',
        value: function selectPiece(cell) {
            $('#board .selected').removeClass('selected');
            this.getjqCell(cell).addClass('selected');

            $('#board .possibleMove').removeClass('possibleMove');
            var possibleMoves = this.game.getPossibleMoves(cell);
            for (var i = 0; i < possibleMoves.length; i++) {
                var move = possibleMoves[i];
                var jqcell = this.getjqCell(move);
                jqcell.addClass('possibleMove');
            }
        }
    }, {
        key: 'deselectPiece',
        value: function deselectPiece() {
            $('#board .selected').removeClass('selected');
            $('#board .possibleMove').removeClass('possibleMove');
        }
    }]);

    return Gamemaster;
}();

var gm = new Gamemaster();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28), __webpack_require__(29)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
(function (global, factory) {

	"use strict";

	if (( false ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("jQuery requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}

	// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : undefined, function (window, noGlobal) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var _slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call(Object);

	var support = {};

	function DOMEval(code, doc) {
		doc = doc || document;

		var script = doc.createElement("script");

		script.text = code;
		doc.head.appendChild(script).parentNode.removeChild(script);
	}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module


	var version = "3.2.1",


	// Define a local copy of jQuery
	jQuery = function jQuery(selector, context) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init(selector, context);
	},


	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([a-z])/g,


	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function fcamelCase(all, letter) {
		return letter.toUpperCase();
	};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function toArray() {
			return _slice.call(this);
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function get(num) {

			// Return all the elements in a clean array
			if (num == null) {
				return _slice.call(this);
			}

			// Return just the one element from the set
			return num < 0 ? this[num + this.length] : this[num];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function pushStack(elems) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge(this.constructor(), elems);

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function each(callback) {
			return jQuery.each(this, callback);
		},

		map: function map(callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function slice() {
			return this.pushStack(_slice.apply(this, arguments));
		},

		first: function first() {
			return this.eq(0);
		},

		last: function last() {
			return this.eq(-1);
		},

		eq: function eq(i) {
			var len = this.length,
			    j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function end() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var options,
		    name,
		    src,
		    copy,
		    copyIsArray,
		    clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;

			// Skip the boolean and the target
			target = arguments[i] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {

			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {

				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {

						if (copyIsArray) {
							copyIsArray = false;
							clone = src && Array.isArray(src) ? src : [];
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = jQuery.extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function error(msg) {
			throw new Error(msg);
		},

		noop: function noop() {},

		isFunction: function isFunction(obj) {
			return jQuery.type(obj) === "function";
		},

		isWindow: function isWindow(obj) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function isNumeric(obj) {

			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type(obj);
			return (type === "number" || type === "string") &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN(obj - parseFloat(obj));
		},

		isPlainObject: function isPlainObject(obj) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if (!obj || toString.call(obj) !== "[object Object]") {
				return false;
			}

			proto = getProto(obj);

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if (!proto) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
			return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
		},

		isEmptyObject: function isEmptyObject(obj) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for (name in obj) {
				return false;
			}
			return true;
		},

		type: function type(obj) {
			if (obj == null) {
				return obj + "";
			}

			// Support: Android <=2.3 only (functionish RegExp)
			return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
		},

		// Evaluates a script in a global context
		globalEval: function globalEval(code) {
			DOMEval(code);
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function camelCase(string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},

		each: function each(obj, callback) {
			var length,
			    i = 0;

			if (isArrayLike(obj)) {
				length = obj.length;
				for (; i < length; i++) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			} else {
				for (i in obj) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function trim(text) {
			return text == null ? "" : (text + "").replace(rtrim, "");
		},

		// results is for internal usage only
		makeArray: function makeArray(arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArrayLike(Object(arr))) {
					jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function inArray(elem, arr, i) {
			return arr == null ? -1 : indexOf.call(arr, elem, i);
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function merge(first, second) {
			var len = +second.length,
			    j = 0,
			    i = first.length;

			for (; j < len; j++) {
				first[i++] = second[j];
			}

			first.length = i;

			return first;
		},

		grep: function grep(elems, callback, invert) {
			var callbackInverse,
			    matches = [],
			    i = 0,
			    length = elems.length,
			    callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function map(elems, callback, arg) {
			var length,
			    value,
			    i = 0,
			    ret = [];

			// Go through the array, translating each of the items to their new values
			if (isArrayLike(elems)) {
				length = elems.length;
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}

				// Go through every key on the object,
			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply([], ret);
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function proxy(fn, context) {
			var tmp, args, proxy;

			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if (!jQuery.isFunction(fn)) {
				return undefined;
			}

			// Simulated bind
			args = _slice.call(arguments, 2);
			proxy = function proxy() {
				return fn.apply(context || this, args.concat(_slice.call(arguments)));
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	if (typeof Symbol === "function") {
		jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
	}

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArrayLike(obj) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
		    type = jQuery.type(obj);

		if (type === "function" || jQuery.isWindow(obj)) {
			return false;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}
	var Sizzle =
	/*!
  * Sizzle CSS Selector Engine v2.3.3
  * https://sizzlejs.com/
  *
  * Copyright jQuery Foundation and other contributors
  * Released under the MIT license
  * http://jquery.org/license
  *
  * Date: 2016-08-08
  */
	function (window) {

		var i,
		    support,
		    Expr,
		    getText,
		    isXML,
		    tokenize,
		    compile,
		    select,
		    outermostContext,
		    sortInput,
		    hasDuplicate,


		// Local document vars
		setDocument,
		    document,
		    docElem,
		    documentIsHTML,
		    rbuggyQSA,
		    rbuggyMatches,
		    matches,
		    contains,


		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		    preferredDoc = window.document,
		    dirruns = 0,
		    done = 0,
		    classCache = createCache(),
		    tokenCache = createCache(),
		    compilerCache = createCache(),
		    sortOrder = function sortOrder(a, b) {
			if (a === b) {
				hasDuplicate = true;
			}
			return 0;
		},


		// Instance methods
		hasOwn = {}.hasOwnProperty,
		    arr = [],
		    pop = arr.pop,
		    push_native = arr.push,
		    push = arr.push,
		    slice = arr.slice,

		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function indexOf(list, elem) {
			var i = 0,
			    len = list.length;
			for (; i < len; i++) {
				if (list[i] === elem) {
					return i;
				}
			}
			return -1;
		},
		    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",


		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",


		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
		    pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" + ")\\)|)",


		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp(whitespace + "+", "g"),
		    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
		    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
		    rpseudo = new RegExp(pseudos),
		    ridentifier = new RegExp("^" + identifier + "$"),
		    matchExpr = {
			"ID": new RegExp("^#(" + identifier + ")"),
			"CLASS": new RegExp("^\\.(" + identifier + ")"),
			"TAG": new RegExp("^(" + identifier + "|[*])"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			"bool": new RegExp("^(?:" + booleans + ")$", "i"),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
		},
		    rinputs = /^(?:input|select|textarea|button)$/i,
		    rheader = /^h\d$/i,
		    rnative = /^[^{]+\{\s*\[native \w/,


		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
		    rsibling = /[+~]/,


		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
		    funescape = function funescape(_, escaped, escapedWhitespace) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ? escaped : high < 0 ?
			// BMP codepoint
			String.fromCharCode(high + 0x10000) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
		},


		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		    fcssescape = function fcssescape(ch, asCodePoint) {
			if (asCodePoint) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if (ch === "\0") {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},


		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function unloadHandler() {
			setDocument();
		},
		    disabledAncestor = addCombinator(function (elem) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		}, { dir: "parentNode", next: "legend" });

		// Optimize for push.apply( _, NodeList )
		try {
			push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
			// Support: Android<4.0
			// Detect silently failing push.apply
			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = { apply: arr.length ?

				// Leverage slice if possible
				function (target, els) {
					push_native.apply(target, slice.call(els));
				} :

				// Support: IE<9
				// Otherwise append directly
				function (target, els) {
					var j = target.length,
					    i = 0;
					// Can't trust NodeList.length
					while (target[j++] = els[i++]) {}
					target.length = j - 1;
				}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var m,
			    i,
			    elem,
			    nid,
			    match,
			    groups,
			    newSelector,
			    newContext = context && context.ownerDocument,


			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

			results = results || [];

			// Return early from calls with invalid selector or context
			if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			// Try to shortcut find operations (as opposed to filters) in HTML documents
			if (!seed) {

				if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
					setDocument(context);
				}
				context = context || document;

				if (documentIsHTML) {

					// If the selector is sufficiently simple, try using a "get*By*" DOM method
					// (excepting DocumentFragment context, where the methods don't exist)
					if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

						// ID selector
						if (m = match[1]) {

							// Document context
							if (nodeType === 9) {
								if (elem = context.getElementById(m)) {

									// Support: IE, Opera, Webkit
									// TODO: identify versions
									// getElementById can match elements by name instead of ID
									if (elem.id === m) {
										results.push(elem);
										return results;
									}
								} else {
									return results;
								}

								// Element context
							} else {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

									results.push(elem);
									return results;
								}
							}

							// Type selector
						} else if (match[2]) {
							push.apply(results, context.getElementsByTagName(selector));
							return results;

							// Class selector
						} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

							push.apply(results, context.getElementsByClassName(m));
							return results;
						}
					}

					// Take advantage of querySelectorAll
					if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {

						if (nodeType !== 1) {
							newContext = context;
							newSelector = selector;

							// qSA looks outside Element context, which is not what we want
							// Thanks to Andrew Dupont for this workaround technique
							// Support: IE <=8
							// Exclude object elements
						} else if (context.nodeName.toLowerCase() !== "object") {

							// Capture the context ID, setting it first if necessary
							if (nid = context.getAttribute("id")) {
								nid = nid.replace(rcssescape, fcssescape);
							} else {
								context.setAttribute("id", nid = expando);
							}

							// Prefix every selector in the list
							groups = tokenize(selector);
							i = groups.length;
							while (i--) {
								groups[i] = "#" + nid + " " + toSelector(groups[i]);
							}
							newSelector = groups.join(",");

							// Expand context for sibling selectors
							newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
						}

						if (newSelector) {
							try {
								push.apply(results, newContext.querySelectorAll(newSelector));
								return results;
							} catch (qsaError) {} finally {
								if (nid === expando) {
									context.removeAttribute("id");
								}
							}
						}
					}
				}
			}

			// All others
			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		/**
   * Create key-value caches of limited size
   * @returns {function(string, object)} Returns the Object data after storing it on itself with
   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *	deleting the oldest entry
   */
		function createCache() {
			var keys = [];

			function cache(key, value) {
				// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
				if (keys.push(key + " ") > Expr.cacheLength) {
					// Only keep the most recent entries
					delete cache[keys.shift()];
				}
				return cache[key + " "] = value;
			}
			return cache;
		}

		/**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */
		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		/**
   * Support testing using an element
   * @param {Function} fn Passed the created element and returns a boolean result
   */
		function assert(fn) {
			var el = document.createElement("fieldset");

			try {
				return !!fn(el);
			} catch (e) {
				return false;
			} finally {
				// Remove from its parent by default
				if (el.parentNode) {
					el.parentNode.removeChild(el);
				}
				// release memory in IE
				el = null;
			}
		}

		/**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */
		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
			    i = arr.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		/**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */
		function siblingCheck(a, b) {
			var cur = b && a,
			    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;

			// Use IE sourceIndex if available on both nodes
			if (diff) {
				return diff;
			}

			// Check if b follows a
			if (cur) {
				while (cur = cur.nextSibling) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		/**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for :enabled/:disabled
   * @param {Boolean} disabled true for :disabled; false for :enabled
   */
		function createDisabledPseudo(disabled) {

			// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
			return function (elem) {

				// Only certain elements can match :enabled or :disabled
				// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
				// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
				if ("form" in elem) {

					// Check for inherited disabledness on relevant non-disabled elements:
					// * listed form-associated elements in a disabled fieldset
					//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
					//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
					// * option elements in a disabled optgroup
					//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
					// All such elements have a "form" property.
					if (elem.parentNode && elem.disabled === false) {

						// Option elements defer to a parent optgroup if present
						if ("label" in elem) {
							if ("label" in elem.parentNode) {
								return elem.parentNode.disabled === disabled;
							} else {
								return elem.disabled === disabled;
							}
						}

						// Support: IE 6 - 11
						// Use the isDisabled shortcut property to check for disabled fieldset ancestors
						return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
					}

					return elem.disabled === disabled;

					// Try to winnow out elements that can't be disabled before trusting the disabled property.
					// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
					// even exist on them, let alone have a boolean value.
				} else if ("label" in elem) {
					return elem.disabled === disabled;
				}

				// Remaining elements are neither :enabled nor :disabled
				return false;
			};
		}

		/**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					    matchIndexes = fn([], seed.length, argument),
					    i = matchIndexes.length;

					// Match elements found at the specified indexes
					while (i--) {
						if (seed[j = matchIndexes[i]]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		/**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */
		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		// Expose support vars for convenience
		support = Sizzle.support = {};

		/**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */
		isXML = Sizzle.isXML = function (elem) {
			// documentElement is verified for cases where it doesn't yet exist
			// (such as loading iframes in IE - #4833)
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};

		/**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */
		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare,
			    subWindow,
			    doc = node ? node.ownerDocument || node : preferredDoc;

			// Return early if doc is invalid or already selected
			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			// Update global variables
			document = doc;
			docElem = document.documentElement;
			documentIsHTML = !isXML(document);

			// Support: IE 9-11, Edge
			// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
			if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {

				// Support: IE 11, Edge
				if (subWindow.addEventListener) {
					subWindow.addEventListener("unload", unloadHandler, false);

					// Support: IE 9 - 10 only
				} else if (subWindow.attachEvent) {
					subWindow.attachEvent("onunload", unloadHandler);
				}
			}

			/* Attributes
   ---------------------------------------------------------------------- */

			// Support: IE<8
			// Verify that getAttribute really returns attributes and not properties
			// (excepting IE8 booleans)
			support.attributes = assert(function (el) {
				el.className = "i";
				return !el.getAttribute("className");
			});

			/* getElement(s)By*
   ---------------------------------------------------------------------- */

			// Check if getElementsByTagName("*") returns only elements
			support.getElementsByTagName = assert(function (el) {
				el.appendChild(document.createComment(""));
				return !el.getElementsByTagName("*").length;
			});

			// Support: IE<9
			support.getElementsByClassName = rnative.test(document.getElementsByClassName);

			// Support: IE<10
			// Check if getElementById returns elements by name
			// The broken getElementById methods don't pick up programmatically-set names,
			// so use a roundabout getElementsByName test
			support.getById = assert(function (el) {
				docElem.appendChild(el).id = expando;
				return !document.getElementsByName || !document.getElementsByName(expando).length;
			});

			// ID filter and find
			if (support.getById) {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var elem = context.getElementById(id);
						return elem ? [elem] : [];
					}
				};
			} else {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};

				// Support: IE 6 - 7 only
				// getElementById is not reliable as a find shortcut
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var node,
						    i,
						    elems,
						    elem = context.getElementById(id);

						if (elem) {

							// Verify the id attribute
							node = elem.getAttributeNode("id");
							if (node && node.value === id) {
								return [elem];
							}

							// Fall back on getElementsByName
							elems = context.getElementsByName(id);
							i = 0;
							while (elem = elems[i++]) {
								node = elem.getAttributeNode("id");
								if (node && node.value === id) {
									return [elem];
								}
							}
						}

						return [];
					}
				};
			}

			// Tag
			Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
				if (typeof context.getElementsByTagName !== "undefined") {
					return context.getElementsByTagName(tag);

					// DocumentFragment nodes don't have gEBTN
				} else if (support.qsa) {
					return context.querySelectorAll(tag);
				}
			} : function (tag, context) {
				var elem,
				    tmp = [],
				    i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName(tag);

				// Filter out possible comments
				if (tag === "*") {
					while (elem = results[i++]) {
						if (elem.nodeType === 1) {
							tmp.push(elem);
						}
					}

					return tmp;
				}
				return results;
			};

			// Class
			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};

			/* QSA/matchesSelector
   ---------------------------------------------------------------------- */

			// QSA and matchesSelector support

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			rbuggyMatches = [];

			// qSa(:focus) reports false when true (Chrome 21)
			// We allow this because of a bug in IE8/9 that throws an error
			// whenever `document.activeElement` is accessed on an iframe
			// So, we allow :focus to pass through QSA all the time to avoid the IE error
			// See https://bugs.jquery.com/ticket/13378
			rbuggyQSA = [];

			if (support.qsa = rnative.test(document.querySelectorAll)) {
				// Build QSA regex
				// Regex strategy adopted from Diego Perini
				assert(function (el) {
					// Select is set to empty string on purpose
					// This is to test IE's treatment of not explicitly
					// setting a boolean content attribute,
					// since its presence should be enough
					// https://bugs.jquery.com/ticket/12359
					docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

					// Support: IE8, Opera 11-12.16
					// Nothing should be selected when empty strings follow ^= or $= or *=
					// The test attribute must be unknown in Opera but "safe" for WinRT
					// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
					if (el.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					// Support: IE8
					// Boolean attributes and "value" are not treated correctly
					if (!el.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
					if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					// Webkit/Opera - :checked should return selected option elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					// IE8 throws error here and will not see later tests
					if (!el.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					// Support: Safari 8+, iOS 8+
					// https://bugs.webkit.org/show_bug.cgi?id=136851
					// In-page `selector#id sibling-combinator selector` fails
					if (!el.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (el) {
					el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";

					// Support: Windows 8 Native Apps
					// The type and name attributes are restricted during .innerHTML assignment
					var input = document.createElement("input");
					input.setAttribute("type", "hidden");
					el.appendChild(input).setAttribute("name", "D");

					// Support: IE8
					// Enforce case-sensitivity of name attribute
					if (el.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
					// IE8 throws error here and will not see later tests
					if (el.querySelectorAll(":enabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Support: IE9-11+
					// IE's :disabled selector does not pick up the children of disabled fieldsets
					docElem.appendChild(el).disabled = true;
					if (el.querySelectorAll(":disabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Opera 10-11 does not throw on post-comma invalid pseudos
					el.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

				assert(function (el) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					support.disconnectedMatch = matches.call(el, "*");

					// This should fail with an exception
					// Gecko does not error, returns false instead
					matches.call(el, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			/* Contains
   ---------------------------------------------------------------------- */
			hasCompare = rnative.test(docElem.compareDocumentPosition);

			// Element contains another
			// Purposefully self-exclusive
			// As in, an element does not contain itself
			contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
				    bup = b && b.parentNode;
				return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
			} : function (a, b) {
				if (b) {
					while (b = b.parentNode) {
						if (b === a) {
							return true;
						}
					}
				}
				return false;
			};

			/* Sorting
   ---------------------------------------------------------------------- */

			// Document order sorting
			sortOrder = hasCompare ? function (a, b) {

				// Flag for duplicate removal
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				// Sort on method existence if only one input has compareDocumentPosition
				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				// Calculate position if both inputs belong to the same document
				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

				// Otherwise we know they are disconnected
				1;

				// Disconnected nodes
				if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

					// Choose the first element that is related to our preferred document
					if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					// Maintain original order
					return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				}

				return compare & 4 ? -1 : 1;
			} : function (a, b) {
				// Exit early if the nodes are identical
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
				    i = 0,
				    aup = a.parentNode,
				    bup = b.parentNode,
				    ap = [a],
				    bp = [b];

				// Parentless nodes are either documents or disconnected
				if (!aup || !bup) {
					return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

					// If the nodes are siblings, we can do a quick check
				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				// Otherwise we need full lists of their ancestors for comparison
				cur = a;
				while (cur = cur.parentNode) {
					ap.unshift(cur);
				}
				cur = b;
				while (cur = cur.parentNode) {
					bp.unshift(cur);
				}

				// Walk down the tree looking for a discrepancy
				while (ap[i] === bp[i]) {
					i++;
				}

				return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck(ap[i], bp[i]) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
			};

			return document;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			// Make sure that attribute selectors are quoted
			expr = expr.replace(rattributeQuotes, "='$1']");

			if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					// IE 9's matchesSelector returns false on disconnected nodes
					if (ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) {}
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			// Set document vars if needed
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],

			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

			return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
		};

		Sizzle.escape = function (sel) {
			return (sel + "").replace(rcssescape, fcssescape);
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		/**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */
		Sizzle.uniqueSort = function (results) {
			var elem,
			    duplicates = [],
			    j = 0,
			    i = 0;

			// Unless we *know* we can detect duplicates, assume their presence
			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while (elem = results[i++]) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			// Clear input after sorting to release objects
			// See https://github.com/jquery/sizzle/pull/225
			sortInput = null;

			return results;
		};

		/**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */
		getText = Sizzle.getText = function (elem) {
			var node,
			    ret = "",
			    i = 0,
			    nodeType = elem.nodeType;

			if (!nodeType) {
				// If no nodeType, this is expected to be an array
				while (node = elem[i++]) {
					// Do not traverse comment nodes
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (jQuery #11153)
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					// Traverse its children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes

			return ret;
		};

		Expr = Sizzle.selectors = {

			// Can be adjusted by the user
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function ATTR(match) {
					match[1] = match[1].replace(runescape, funescape);

					// Move the given value to match[3] whether quoted or unquoted
					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function CHILD(match) {
					/* matches from matchExpr["CHILD"]
     	1 type (only|nth|...)
     	2 what (child|of-type)
     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
     	4 xn-component of xn+y argument ([+-]?\d*n|)
     	5 sign of xn-component
     	6 x of xn-component
     	7 sign of y-component
     	8 y of y-component
     */
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						// nth-* requires argument
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						// numeric x and y parameters for Expr.filter.CHILD
						// remember that false/true cast respectively to 0/1
						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +(match[7] + match[8] || match[3] === "odd");

						// other types prohibit arguments
					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function PSEUDO(match) {
					var excess,
					    unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					// Accept quoted arguments as-is
					if (match[3]) {
						match[2] = match[4] || match[5] || "";

						// Strip excess characters from unquoted arguments
					} else if (unquoted && rpseudo.test(unquoted) && (
					// Get excess from tokenize (recursively)
					excess = tokenize(unquoted, true)) && (
					// advance to the next closing parenthesis
					excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

						// excess is a negative index
						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					// Return only captures needed by the pseudo filter method (type and argument)
					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function TAG(nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ? function () {
						return true;
					} : function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function CLASS(className) {
					var pattern = classCache[className + " "];

					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
					});
				},

				"ATTR": function ATTR(name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
					};
				},

				"CHILD": function CHILD(type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
					    forward = type.slice(-4) !== "last",
					    ofType = what === "of-type";

					return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function (elem) {
						return !!elem.parentNode;
					} : function (elem, context, xml) {
						var cache,
						    uniqueCache,
						    outerCache,
						    node,
						    nodeIndex,
						    start,
						    dir = simple !== forward ? "nextSibling" : "previousSibling",
						    parent = elem.parentNode,
						    name = ofType && elem.nodeName.toLowerCase(),
						    useCache = !xml && !ofType,
						    diff = false;

						if (parent) {

							// :(first|last|only)-(child|of-type)
							if (simple) {
								while (dir) {
									node = elem;
									while (node = node[dir]) {
										if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [forward ? parent.firstChild : parent.lastChild];

							// non-xml :nth-child(...) stores cache data on `parent`
							if (forward && useCache) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[expando] || (node[expando] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

								cache = uniqueCache[type] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = nodeIndex && cache[2];
								node = nodeIndex && parent.childNodes[nodeIndex];

								while (node = ++nodeIndex && node && node[dir] || (

								// Fallback to seeking `elem` from the start
								diff = nodeIndex = 0) || start.pop()) {

									// When found, cache indexes on `parent` and break
									if (node.nodeType === 1 && ++diff && node === elem) {
										uniqueCache[type] = [dirruns, nodeIndex, diff];
										break;
									}
								}
							} else {
								// Use previously-cached element index if available
								if (useCache) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[expando] || (node[expando] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

									cache = uniqueCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if (diff === false) {
									// Use the same loop as above to seek `elem` from the start
									while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

										if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

											// Cache the index of each encountered element
											if (useCache) {
												outerCache = node[expando] || (node[expando] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

												uniqueCache[type] = [dirruns, diff];
											}

											if (node === elem) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || diff % first === 0 && diff / first >= 0;
						}
					};
				},

				"PSEUDO": function PSEUDO(pseudo, argument) {
					// pseudo-class names are case-insensitive
					// http://www.w3.org/TR/selectors/#pseudo-classes
					// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
					// Remember that setFilters inherits from pseudos
					var args,
					    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

					// The user may use createPseudo to indicate that
					// arguments are needed to create the filter function
					// just as Sizzle does
					if (fn[expando]) {
						return fn(argument);
					}

					// But maintain support for old signatures
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							    matched = fn(seed, argument),
							    i = matched.length;
							while (i--) {
								idx = indexOf(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) : function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				// Potentially complex pseudos
				"not": markFunction(function (selector) {
					// Trim the selector passed to compile
					// to avoid treating leading and trailing
					// spaces as combinators
					var input = [],
					    results = [],
					    matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						    unmatched = matcher(seed, null, xml, []),
						    i = seed.length;

						// Match elements unmatched by `matcher`
						while (i--) {
							if (elem = unmatched[i]) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
					};
				}),

				// "Whether an element is represented by a :lang() selector
				// is based solely on the element's language value
				// being equal to the identifier C,
				// or beginning with the identifier C immediately followed by "-".
				// The matching of C against the element's language value is performed case-insensitively.
				// The identifier C does not have to be a valid language name."
				// http://www.w3.org/TR/selectors/#lang-pseudo
				"lang": markFunction(function (lang) {
					// lang value must be a valid identifier
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				// Miscellaneous
				"target": function target(elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function root(elem) {
					return elem === docElem;
				},

				"focus": function focus(elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				// Boolean properties
				"enabled": createDisabledPseudo(false),
				"disabled": createDisabledPseudo(true),

				"checked": function checked(elem) {
					// In CSS3, :checked should return both checked and selected elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					var nodeName = elem.nodeName.toLowerCase();
					return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
				},

				"selected": function selected(elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				// Contents
				"empty": function empty(elem) {
					// http://www.w3.org/TR/selectors/#empty-pseudo
					// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
					//   but not by others (comment: 8; processing instruction: 7; etc.)
					// nodeType < 6 works because attributes (2) do not appear as children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function parent(elem) {
					return !Expr.pseudos["empty"](elem);
				},

				// Element/input types
				"header": function header(elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function input(elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function button(elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function text(elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				// Position-in-collection
				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		// Add button/input type pseudos
		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		// Easy API for creating new setFilters
		function setFilters() {}
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched,
			    match,
			    tokens,
			    type,
			    soFar,
			    groups,
			    preFilters,
			    cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {

				// Comma and first run
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						// Don't consume trailing commas as valid
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				// Combinators
				if (match = rcombinators.exec(soFar)) {
					matched = match.shift();
					tokens.push({
						value: matched,
						// Cast descendant combinators to space
						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				// Filters
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			// Return the length of the invalid excess
			// if we're just parsing
			// Otherwise, throw an error or return tokens
			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
			// Cache the tokens
			tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
			    len = tokens.length,
			    selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			    skip = combinator.next,
			    key = skip || dir,
			    checkNonElements = base && key === "parentNode",
			    doneName = done++;

			return combinator.first ?
			// Check against closest ancestor/preceding element
			function (elem, context, xml) {
				while (elem = elem[dir]) {
					if (elem.nodeType === 1 || checkNonElements) {
						return matcher(elem, context, xml);
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function (elem, context, xml) {
				var oldCache,
				    uniqueCache,
				    outerCache,
				    newCache = [dirruns, doneName];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if (xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							if (matcher(elem, context, xml)) {
								return true;
							}
						}
					}
				} else {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							outerCache = elem[expando] || (elem[expando] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

							if (skip && skip === elem.nodeName.toLowerCase()) {
								elem = elem[dir] || elem;
							} else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

								// Assign to newCache so results back-propagate to previous elements
								return newCache[2] = oldCache[2];
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[key] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if (newCache[2] = matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			} : matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			    len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			    newUnmatched = [],
			    i = 0,
			    len = unmatched.length,
			    mapped = map != null;

			for (; i < len; i++) {
				if (elem = unmatched[i]) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				    i,
				    elem,
				    preMap = [],
				    postMap = [],
				    preexisting = results.length,


				// Get initial elements from seed or context
				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				    matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || (seed ? preFilter : preexisting || postFilter) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results : matcherIn;

				// Find primary matches
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				// Apply postFilter
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					// Un-match failing elements by moving them back to matcherIn
					i = temp.length;
					while (i--) {
						if (elem = temp[i]) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							// Get the final matcherOut by condensing this intermediate into postFinder contexts
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if (elem = matcherOut[i]) {
									// Restore matcherIn since elem is not yet a final match
									temp.push(matcherIn[i] = elem);
								}
							}
							postFinder(null, matcherOut = [], temp, xml);
						}

						// Move matched elements from seed to results to keep them synchronized
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

					// Add elements to results, through postFinder if defined
				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			    matcher,
			    j,
			    len = tokens.length,
			    leadingRelative = Expr.relative[tokens[0].type],
			    implicitRelative = leadingRelative || Expr.relative[" "],
			    i = leadingRelative ? 1 : 0,


			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator(function (elem) {
				return elem === checkContext;
			}, implicitRelative, true),
			    matchAnyContext = addCombinator(function (elem) {
				return indexOf(checkContext, elem) > -1;
			}, implicitRelative, true),
			    matchers = [function (elem, context, xml) {
				var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			}];

			for (; i < len; i++) {
				if (matcher = Expr.relative[tokens[i].type]) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					// Return special upon seeing a positional matcher
					if (matcher[expando]) {
						// Find the next relative operator (if any) for proper handling
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			    byElement = elementMatchers.length > 0,
			    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
				var elem,
				    j,
				    matcher,
				    matchedCount = 0,
				    i = "0",
				    unmatched = seed && [],
				    setMatched = [],
				    contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]("*", outermost),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
				    len = elems.length;

				if (outermost) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for (; i !== len && (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						j = 0;
						if (!context && elem.ownerDocument !== document) {
							setDocument(elem);
							xml = !documentIsHTML;
						}
						while (matcher = elementMatchers[j++]) {
							if (matcher(elem, context || document, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if (bySet) {
						// They will have gone through all possible matchers
						if (elem = !matcher && elem) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if (bySet && i !== matchedCount) {
					j = 0;
					while (matcher = setMatchers[j++]) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						// Reintegrate element matches to eliminate the need for sorting
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense(setMatched);
					}

					// Add matches to results
					push.apply(results, setMatched);

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				// Override manipulation of globals by nested matchers
				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			return bySet ? markFunction(superMatcher) : superMatcher;
		}

		compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
			var i,
			    setMatchers = [],
			    elementMatchers = [],
			    cached = compilerCache[selector + " "];

			if (!cached) {
				// Generate a function of recursive functions that can be used to check each element
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				// Cache the compiled function
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				// Save selector and tokenization
				cached.selector = selector;
			}
			return cached;
		};

		/**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */
		select = Sizzle.select = function (selector, context, results, seed) {
			var i,
			    tokens,
			    token,
			    type,
			    find,
			    compiled = typeof selector === "function" && selector,
			    match = !seed && tokenize(selector = compiled.selector || selector);

			results = results || [];

			// Try to minimize operations if there is only one selector in the list and no seed
			// (the latter of which guarantees us context)
			if (match.length === 1) {

				// Reduce context if the leading compound selector is an ID
				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;

						// Precompiled matchers will still verify ancestry, so step up a level
					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				// Fetch a seed set for right-to-left matching
				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					// Abort if we hit a combinator
					if (Expr.relative[type = token.type]) {
						break;
					}
					if (find = Expr.find[type]) {
						// Search, expanding context for leading sibling combinators
						if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

							// If seed is empty or no tokens remain, we can return early
							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			// Compile and execute a filtering function if one is not provided
			// Provide `match` to avoid retokenization if we modified the selector above
			(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
			return results;
		};

		// One-time assignments

		// Sort stability
		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		// Support: Chrome 14-35+
		// Always assume duplicates if they aren't passed to the comparison function
		support.detectDuplicates = !!hasDuplicate;

		// Initialize against the default document
		setDocument();

		// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
		// Detached nodes confoundingly follow *each other*
		support.sortDetached = assert(function (el) {
			// Should return 1, but returns 4 (following)
			return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
		});

		// Support: IE<8
		// Prevent attribute/property "interpolation"
		// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if (!assert(function (el) {
			el.innerHTML = "<a href='#'></a>";
			return el.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		// Support: IE<9
		// Use defaultValue in place of getAttribute("value")
		if (!support.attributes || !assert(function (el) {
			el.innerHTML = "<input/>";
			el.firstChild.setAttribute("value", "");
			return el.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		// Support: IE<9
		// Use getAttributeNode to fetch booleans when getAttribute lies
		if (!assert(function (el) {
			return el.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
				}
			});
		}

		return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;

	var dir = function dir(elem, _dir, until) {
		var matched = [],
		    truncate = until !== undefined;

		while ((elem = elem[_dir]) && elem.nodeType !== 9) {
			if (elem.nodeType === 1) {
				if (truncate && jQuery(elem).is(until)) {
					break;
				}
				matched.push(elem);
			}
		}
		return matched;
	};

	var _siblings = function _siblings(n, elem) {
		var matched = [];

		for (; n; n = n.nextSibling) {
			if (n.nodeType === 1 && n !== elem) {
				matched.push(n);
			}
		}

		return matched;
	};

	var rneedsContext = jQuery.expr.match.needsContext;

	function nodeName(elem, name) {

		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	};
	var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, not) {
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				return !!qualifier.call(elem, i, elem) !== not;
			});
		}

		// Single element
		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return elem === qualifier !== not;
			});
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if (typeof qualifier !== "string") {
			return jQuery.grep(elements, function (elem) {
				return indexOf.call(qualifier, elem) > -1 !== not;
			});
		}

		// Simple selector that can be filtered directly, removing non-Elements
		if (risSimple.test(qualifier)) {
			return jQuery.filter(qualifier, elements, not);
		}

		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter(qualifier, elements);
		return jQuery.grep(elements, function (elem) {
			return indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1;
		});
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		if (elems.length === 1 && elem.nodeType === 1) {
			return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
		}

		return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
			return elem.nodeType === 1;
		}));
	};

	jQuery.fn.extend({
		find: function find(selector) {
			var i,
			    ret,
			    len = this.length,
			    self = this;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			ret = this.pushStack([]);

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			return len > 1 ? jQuery.uniqueSort(ret) : ret;
		},
		filter: function filter(selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function not(selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function is(selector) {
			return !!winnow(this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
		}
	});

	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,


	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	    init = jQuery.fn.init = function (selector, context, root) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if (!selector) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if (typeof selector === "string") {
			if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [null, selector, null];
			} else {
				match = rquickExpr.exec(selector);
			}

			// Match html or make sure no context is specified for #id
			if (match && (match[1] || !context)) {

				// HANDLE: $(html) -> $(array)
				if (match[1]) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

					// HANDLE: $(html, props)
					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
						for (match in context) {

							// Properties of context are called as methods if possible
							if (jQuery.isFunction(this[match])) {
								this[match](context[match]);

								// ...and otherwise set as attributes
							} else {
								this.attr(match, context[match]);
							}
						}
					}

					return this;

					// HANDLE: $(#id)
				} else {
					elem = document.getElementById(match[2]);

					if (elem) {

						// Inject the element directly into the jQuery object
						this[0] = elem;
						this.length = 1;
					}
					return this;
				}

				// HANDLE: $(expr, $(...))
			} else if (!context || context.jquery) {
				return (context || root).find(selector);

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor(context).find(selector);
			}

			// HANDLE: $(DOMElement)
		} else if (selector.nodeType) {
			this[0] = selector;
			this.length = 1;
			return this;

			// HANDLE: $(function)
			// Shortcut for document ready
		} else if (jQuery.isFunction(selector)) {
			return root.ready !== undefined ? root.ready(selector) :

			// Execute immediately if ready is not present
			selector(jQuery);
		}

		return jQuery.makeArray(selector, this);
	};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery(document);

	var rparentsprev = /^(?:parents|prev(?:Until|All))/,


	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.fn.extend({
		has: function has(target) {
			var targets = jQuery(target, this),
			    l = targets.length;

			return this.filter(function () {
				var i = 0;
				for (; i < l; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function closest(selectors, context) {
			var cur,
			    i = 0,
			    l = this.length,
			    matched = [],
			    targets = typeof selectors !== "string" && jQuery(selectors);

			// Positional selectors never match, since there's no _selection_ context
			if (!rneedsContext.test(selectors)) {
				for (; i < l; i++) {
					for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

						// Always skip document fragments
						if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

							matched.push(cur);
							break;
						}
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
		},

		// Determine the position of an element within the set
		index: function index(elem) {

			// No argument, return index in parent
			if (!elem) {
				return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if (typeof elem === "string") {
				return indexOf.call(jQuery(elem), this[0]);
			}

			// Locate the position of the desired element
			return indexOf.call(this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem);
		},

		add: function add(selector, context) {
			return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
		},

		addBack: function addBack(selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
		}
	});

	function sibling(cur, dir) {
		while ((cur = cur[dir]) && cur.nodeType !== 1) {}
		return cur;
	}

	jQuery.each({
		parent: function parent(elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function parents(elem) {
			return dir(elem, "parentNode");
		},
		parentsUntil: function parentsUntil(elem, i, until) {
			return dir(elem, "parentNode", until);
		},
		next: function next(elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function prev(elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function nextAll(elem) {
			return dir(elem, "nextSibling");
		},
		prevAll: function prevAll(elem) {
			return dir(elem, "previousSibling");
		},
		nextUntil: function nextUntil(elem, i, until) {
			return dir(elem, "nextSibling", until);
		},
		prevUntil: function prevUntil(elem, i, until) {
			return dir(elem, "previousSibling", until);
		},
		siblings: function siblings(elem) {
			return _siblings((elem.parentNode || {}).firstChild, elem);
		},
		children: function children(elem) {
			return _siblings(elem.firstChild);
		},
		contents: function contents(elem) {
			if (nodeName(elem, "iframe")) {
				return elem.contentDocument;
			}

			// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
			// Treat the template element as a regular one in browsers that
			// don't support it.
			if (nodeName(elem, "template")) {
				elem = elem.content || elem;
			}

			return jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var matched = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				matched = jQuery.filter(selector, matched);
			}

			if (this.length > 1) {

				// Remove duplicates
				if (!guaranteedUnique[name]) {
					jQuery.uniqueSort(matched);
				}

				// Reverse order for parents* and prev-derivatives
				if (rparentsprev.test(name)) {
					matched.reverse();
				}
			}

			return this.pushStack(matched);
		};
	});
	var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

	// Convert String-formatted options into Object-formatted ones
	function createOptions(options) {
		var object = {};
		jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	/*
  * Create a callback list using the following parameters:
  *
  *	options: an optional list of space-separated options that will change how
  *			the callback list behaves or a more traditional option object
  *
  * By default a callback list will act like an event callback list and can be
  * "fired" multiple times.
  *
  * Possible options:
  *
  *	once:			will ensure the callback list can only be fired once (like a Deferred)
  *
  *	memory:			will keep track of previous values and will call any callback added
  *					after the list has been fired right away with the latest "memorized"
  *					values (like a Deferred)
  *
  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
  *
  *	stopOnFalse:	interrupt callings when a callback returns false
  *
  */
	jQuery.Callbacks = function (options) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

		var // Flag to know if list is currently firing
		firing,


		// Last fire value for non-forgettable lists
		memory,


		// Flag to know if list was already fired
		_fired,


		// Flag to prevent firing
		_locked,


		// Actual callback list
		list = [],


		// Queue of execution data for repeatable lists
		queue = [],


		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,


		// Fire callbacks
		fire = function fire() {

			// Enforce single-firing
			_locked = _locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			_fired = firing = true;
			for (; queue.length; firingIndex = -1) {
				memory = queue.shift();
				while (++firingIndex < list.length) {

					// Run callback and check for early termination
					if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if (!options.memory) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if (_locked) {

				// Keep an empty list if we have data for future add calls
				if (memory) {
					list = [];

					// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},


		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function add() {
				if (list) {

					// If we have memory from a past run, we should fire after adding
					if (memory && !firing) {
						firingIndex = list.length - 1;
						queue.push(memory);
					}

					(function add(args) {
						jQuery.each(args, function (_, arg) {
							if (jQuery.isFunction(arg)) {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && jQuery.type(arg) !== "string") {

								// Inspect recursively
								add(arg);
							}
						});
					})(arguments);

					if (memory && !firing) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function remove() {
				jQuery.each(arguments, function (_, arg) {
					var index;
					while ((index = jQuery.inArray(arg, list, index)) > -1) {
						list.splice(index, 1);

						// Handle firing indexes
						if (index <= firingIndex) {
							firingIndex--;
						}
					}
				});
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function has(fn) {
				return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function empty() {
				if (list) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function disable() {
				_locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function disabled() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function lock() {
				_locked = queue = [];
				if (!memory && !firing) {
					list = memory = "";
				}
				return this;
			},
			locked: function locked() {
				return !!_locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function fireWith(context, args) {
				if (!_locked) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					queue.push(args);
					if (!firing) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function fire() {
				self.fireWith(this, arguments);
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function fired() {
				return !!_fired;
			}
		};

		return self;
	};

	function Identity(v) {
		return v;
	}
	function Thrower(ex) {
		throw ex;
	}

	function adoptValue(value, resolve, reject, noValue) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if (value && jQuery.isFunction(method = value.promise)) {
				method.call(value).done(resolve).fail(reject);

				// Other thenables
			} else if (value && jQuery.isFunction(method = value.then)) {
				method.call(value, resolve, reject);

				// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply(undefined, [value].slice(noValue));
			}

			// For Promises/A+, convert exceptions into rejections
			// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
			// Deferred#then to conditionally suppress rejection.
		} catch (value) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply(undefined, [value]);
		}
	}

	jQuery.extend({

		Deferred: function Deferred(func) {
			var tuples = [

			// action, add listener, callbacks,
			// ... .then handlers, argument index, [final state]
			["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
			    _state = "pending",
			    _promise = {
				state: function state() {
					return _state;
				},
				always: function always() {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				"catch": function _catch(fn) {
					return _promise.then(null, fn);
				},

				// Keep pipe for back-compat
				pipe: function pipe() /* fnDone, fnFail, fnProgress */{
					var fns = arguments;

					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[tuple[1]](function () {
								var returned = fn && fn.apply(this, arguments);
								if (returned && jQuery.isFunction(returned.promise)) {
									returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
								} else {
									newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
								}
							});
						});
						fns = null;
					}).promise();
				},
				then: function then(onFulfilled, onRejected, onProgress) {
					var maxDepth = 0;
					function resolve(depth, deferred, handler, special) {
						return function () {
							var that = this,
							    args = arguments,
							    mightThrow = function mightThrow() {
								var returned, then;

								// Support: Promises/A+ section 2.3.3.3.3
								// https://promisesaplus.com/#point-59
								// Ignore double-resolution attempts
								if (depth < maxDepth) {
									return;
								}

								returned = handler.apply(that, args);

								// Support: Promises/A+ section 2.3.1
								// https://promisesaplus.com/#point-48
								if (returned === deferred.promise()) {
									throw new TypeError("Thenable self-resolution");
								}

								// Support: Promises/A+ sections 2.3.3.1, 3.5
								// https://promisesaplus.com/#point-54
								// https://promisesaplus.com/#point-75
								// Retrieve `then` only once
								then = returned && (

								// Support: Promises/A+ section 2.3.4
								// https://promisesaplus.com/#point-64
								// Only check objects and functions for thenability
								(typeof returned === "undefined" ? "undefined" : _typeof(returned)) === "object" || typeof returned === "function") && returned.then;

								// Handle a returned thenable
								if (jQuery.isFunction(then)) {

									// Special processors (notify) just wait for resolution
									if (special) {
										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

										// Normal processors (resolve) also hook into progress
									} else {

										// ...and disregard older resolution values
										maxDepth++;

										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
									}

									// Handle all other returned values
								} else {

									// Only substitute handlers pass on context
									// and multiple values (non-spec behavior)
									if (handler !== Identity) {
										that = undefined;
										args = [returned];
									}

									// Process the value(s)
									// Default process is resolve
									(special || deferred.resolveWith)(that, args);
								}
							},


							// Only normal processors (resolve) catch and reject exceptions
							process = special ? mightThrow : function () {
								try {
									mightThrow();
								} catch (e) {

									if (jQuery.Deferred.exceptionHook) {
										jQuery.Deferred.exceptionHook(e, process.stackTrace);
									}

									// Support: Promises/A+ section 2.3.3.3.4.1
									// https://promisesaplus.com/#point-61
									// Ignore post-resolution exceptions
									if (depth + 1 >= maxDepth) {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if (handler !== Thrower) {
											that = undefined;
											args = [e];
										}

										deferred.rejectWith(that, args);
									}
								}
							};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if (depth) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if (jQuery.Deferred.getStackHook) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout(process);
							}
						};
					}

					return jQuery.Deferred(function (newDefer) {

						// progress_handlers.add( ... )
						tuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

						// fulfilled_handlers.add( ... )
						tuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));

						// rejected_handlers.add( ... )
						tuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower));
					}).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function promise(obj) {
					return obj != null ? jQuery.extend(obj, _promise) : _promise;
				}
			},
			    deferred = {};

			// Add list-specific methods
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				    stateString = tuple[5];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				_promise[tuple[1]] = list.add;

				// Handle state
				if (stateString) {
					list.add(function () {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						_state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[3 - i][2].disable,

					// progress_callbacks.lock
					tuples[0][2].lock);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add(tuple[3].fire);

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			// Make the deferred a promise
			_promise.promise(deferred);

			// Call given func if any
			if (func) {
				func.call(deferred, deferred);
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function when(singleValue) {
			var

			// count of uncompleted subordinates
			remaining = arguments.length,


			// count of unprocessed arguments
			i = remaining,


			// subordinate fulfillment data
			resolveContexts = Array(i),
			    resolveValues = _slice.call(arguments),


			// the master Deferred
			master = jQuery.Deferred(),


			// subordinate callback factory
			updateFunc = function updateFunc(i) {
				return function (value) {
					resolveContexts[i] = this;
					resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;
					if (! --remaining) {
						master.resolveWith(resolveContexts, resolveValues);
					}
				};
			};

			// Single- and empty arguments are adopted like Promise.resolve
			if (remaining <= 1) {
				adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if (master.state() === "pending" || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while (i--) {
				adoptValue(resolveValues[i], updateFunc(i), master.reject);
			}

			return master.promise();
		}
	});

	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function (error, stack) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
			window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
		}
	};

	jQuery.readyException = function (error) {
		window.setTimeout(function () {
			throw error;
		});
	};

	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function (fn) {

		readyList.then(fn)

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch(function (error) {
			jQuery.readyException(error);
		});

		return this;
	};

	jQuery.extend({

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function ready(wait) {

			// Abort if there are pending holds or we're already ready
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith(document, [jQuery]);
		}
	});

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener("DOMContentLoaded", completed);
		window.removeEventListener("load", completed);
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout(jQuery.ready);
	} else {

		// Use the handy event callback
		document.addEventListener("DOMContentLoaded", completed);

		// A fallback to window.onload, that will always work
		window.addEventListener("load", completed);
	}

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    len = elems.length,
		    bulk = key == null;

		// Sets many values
		if (jQuery.type(key) === "object") {
			chainable = true;
			for (i in key) {
				access(elems, fn, i, key[i], true, emptyGet, raw);
			}

			// Sets one value
		} else if (value !== undefined) {
			chainable = true;

			if (!jQuery.isFunction(value)) {
				raw = true;
			}

			if (bulk) {

				// Bulk operations run against the entire set
				if (raw) {
					fn.call(elems, value);
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function fn(elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < len; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		if (chainable) {
			return elems;
		}

		// Gets
		if (bulk) {
			return fn.call(elems);
		}

		return len ? fn(elems[0], key) : emptyGet;
	};
	var acceptData = function acceptData(owner) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
	};

	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function cache(owner) {

			// Check if the owner object already has a cache
			var value = owner[this.expando];

			// If not, create one
			if (!value) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if (acceptData(owner)) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if (owner.nodeType) {
						owner[this.expando] = value;

						// Otherwise secure it in a non-enumerable property
						// configurable must be true to allow the property to be
						// deleted when data is removed
					} else {
						Object.defineProperty(owner, this.expando, {
							value: value,
							configurable: true
						});
					}
				}
			}

			return value;
		},
		set: function set(owner, data, value) {
			var prop,
			    cache = this.cache(owner);

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if (typeof data === "string") {
				cache[jQuery.camelCase(data)] = value;

				// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for (prop in data) {
					cache[jQuery.camelCase(prop)] = data[prop];
				}
			}
			return cache;
		},
		get: function get(owner, key) {
			return key === undefined ? this.cache(owner) :

			// Always use camelCase key (gh-2257)
			owner[this.expando] && owner[this.expando][jQuery.camelCase(key)];
		},
		access: function access(owner, key, value) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if (key === undefined || key && typeof key === "string" && value === undefined) {

				return this.get(owner, key);
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set(owner, key, value);

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function remove(owner, key) {
			var i,
			    cache = owner[this.expando];

			if (cache === undefined) {
				return;
			}

			if (key !== undefined) {

				// Support array or space separated string of keys
				if (Array.isArray(key)) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map(jQuery.camelCase);
				} else {
					key = jQuery.camelCase(key);

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
				}

				i = key.length;

				while (i--) {
					delete cache[key[i]];
				}
			}

			// Remove the expando if there's no more data
			if (key === undefined || jQuery.isEmptyObject(cache)) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if (owner.nodeType) {
					owner[this.expando] = undefined;
				} else {
					delete owner[this.expando];
				}
			}
		},
		hasData: function hasData(owner) {
			var cache = owner[this.expando];
			return cache !== undefined && !jQuery.isEmptyObject(cache);
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();

	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /[A-Z]/g;

	function getData(data) {
		if (data === "true") {
			return true;
		}

		if (data === "false") {
			return false;
		}

		if (data === "null") {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if (data === +data + "") {
			return +data;
		}

		if (rbrace.test(data)) {
			return JSON.parse(data);
		}

		return data;
	}

	function dataAttr(elem, key, data) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if (data === undefined && elem.nodeType === 1) {
			name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = getData(data);
				} catch (e) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set(elem, key, data);
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function hasData(elem) {
			return dataUser.hasData(elem) || dataPriv.hasData(elem);
		},

		data: function data(elem, name, _data) {
			return dataUser.access(elem, name, _data);
		},

		removeData: function removeData(elem, name) {
			dataUser.remove(elem, name);
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function _data(elem, name, data) {
			return dataPriv.access(elem, name, data);
		},

		_removeData: function _removeData(elem, name) {
			dataPriv.remove(elem, name);
		}
	});

	jQuery.fn.extend({
		data: function data(key, value) {
			var i,
			    name,
			    data,
			    elem = this[0],
			    attrs = elem && elem.attributes;

			// Gets all values
			if (key === undefined) {
				if (this.length) {
					data = dataUser.get(elem);

					if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
						i = attrs.length;
						while (i--) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = jQuery.camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						dataPriv.set(elem, "hasDataAttrs", true);
					}
				}

				return data;
			}

			// Sets multiple values
			if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
				return this.each(function () {
					dataUser.set(this, key);
				});
			}

			return access(this, function (value) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if (elem && value === undefined) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get(elem, key);
					if (data !== undefined) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr(elem, key);
					if (data !== undefined) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each(function () {

					// We always store the camelCased key
					dataUser.set(this, key, value);
				});
			}, null, value, arguments.length > 1, null, true);
		},

		removeData: function removeData(key) {
			return this.each(function () {
				dataUser.remove(this, key);
			});
		}
	});

	jQuery.extend({
		queue: function queue(elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = dataPriv.get(elem, type);

				// Speed up dequeue by getting out quickly if this is just a lookup
				if (data) {
					if (!queue || Array.isArray(data)) {
						queue = dataPriv.access(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function dequeue(elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			    startLength = queue.length,
			    fn = queue.shift(),
			    hooks = jQuery._queueHooks(elem, type),
			    next = function next() {
				jQuery.dequeue(elem, type);
			};

			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function _queueHooks(elem, type) {
			var key = type + "queueHooks";
			return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					dataPriv.remove(elem, [type + "queue", key]);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function queue(type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);

				// Ensure a hooks for this queue
				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function dequeue(type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function clearQueue(type) {
			return this.queue(type || "fx", []);
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function promise(type, obj) {
			var tmp,
			    count = 1,
			    defer = jQuery.Deferred(),
			    elements = this,
			    i = this.length,
			    resolve = function resolve() {
				if (! --count) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = dataPriv.get(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" || elem.style.display === "" &&

		// Otherwise, check computed style
		// Support: Firefox <=43 - 45
		// Disconnected elements can have computed display: none, so first confirm that elem is
		// in the document.
		jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
	};

	var swap = function swap(elem, options, callback, args) {
		var ret,
		    name,
		    old = {};

		// Remember the old values, and insert the new ones
		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		// Revert the old values
		for (name in options) {
			elem.style[name] = old[name];
		}

		return ret;
	};

	function adjustCSS(elem, prop, valueParts, tween) {
		var adjusted,
		    scale = 1,
		    maxIterations = 20,
		    currentValue = tween ? function () {
			return tween.cur();
		} : function () {
			return jQuery.css(elem, prop, "");
		},
		    initial = currentValue(),
		    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


		// Starting value computation is required for potential unit mismatches
		initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

		if (initialInUnit && initialInUnit[3] !== unit) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[3];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style(elem, prop, initialInUnit + unit);

				// Update scale, tolerating zero or NaN from tween.cur()
				// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
		}

		if (valueParts) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
			if (tween) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}

	var defaultDisplayMap = {};

	function getDefaultDisplay(elem) {
		var temp,
		    doc = elem.ownerDocument,
		    nodeName = elem.nodeName,
		    display = defaultDisplayMap[nodeName];

		if (display) {
			return display;
		}

		temp = doc.body.appendChild(doc.createElement(nodeName));
		display = jQuery.css(temp, "display");

		temp.parentNode.removeChild(temp);

		if (display === "none") {
			display = "block";
		}
		defaultDisplayMap[nodeName] = display;

		return display;
	}

	function showHide(elements, show) {
		var display,
		    elem,
		    values = [],
		    index = 0,
		    length = elements.length;

		// Determine new display value for elements that need to change
		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			display = elem.style.display;
			if (show) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if (display === "none") {
					values[index] = dataPriv.get(elem, "display") || null;
					if (!values[index]) {
						elem.style.display = "";
					}
				}
				if (elem.style.display === "" && isHiddenWithinTree(elem)) {
					values[index] = getDefaultDisplay(elem);
				}
			} else {
				if (display !== "none") {
					values[index] = "none";

					// Remember what we're overwriting
					dataPriv.set(elem, "display", display);
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for (index = 0; index < length; index++) {
			if (values[index] != null) {
				elements[index].style.display = values[index];
			}
		}

		return elements;
	}

	jQuery.fn.extend({
		show: function show() {
			return showHide(this, true);
		},
		hide: function hide() {
			return showHide(this);
		},
		toggle: function toggle(state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHiddenWithinTree(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});
	var rcheckableType = /^(?:checkbox|radio)$/i;

	var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;

	var rscriptType = /^$|\/(?:java|ecma)script/i;

	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [1, "<select multiple='multiple'>", "</select>"],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [1, "<table>", "</table>"],
		col: [2, "<table><colgroup>", "</colgroup></table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		_default: [0, "", ""]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll(context, tag) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if (typeof context.getElementsByTagName !== "undefined") {
			ret = context.getElementsByTagName(tag || "*");
		} else if (typeof context.querySelectorAll !== "undefined") {
			ret = context.querySelectorAll(tag || "*");
		} else {
			ret = [];
		}

		if (tag === undefined || tag && nodeName(context, tag)) {
			return jQuery.merge([context], ret);
		}

		return ret;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval(elems, refElements) {
		var i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
		}
	}

	var rhtml = /<|&#?\w+;/;

	function buildFragment(elems, context, scripts, selection, ignored) {
		var elem,
		    tmp,
		    tag,
		    wrap,
		    contains,
		    j,
		    fragment = context.createDocumentFragment(),
		    nodes = [],
		    i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			elem = elems[i];

			if (elem || elem === 0) {

				// Add nodes directly
				if (jQuery.type(elem) === "object") {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

					// Convert non-html into a text node
				} else if (!rhtml.test(elem)) {
					nodes.push(context.createTextNode(elem));

					// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild(context.createElement("div"));

					// Deserialize a standard representation
					tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
					wrap = wrapMap[tag] || wrapMap._default;
					tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while (j--) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, tmp.childNodes);

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while (elem = nodes[i++]) {

			// Skip elements already in the context collection (trac-4087)
			if (selection && jQuery.inArray(elem, selection) > -1) {
				if (ignored) {
					ignored.push(elem);
				}
				continue;
			}

			contains = jQuery.contains(elem.ownerDocument, elem);

			// Append to fragment
			tmp = getAll(fragment.appendChild(elem), "script");

			// Preserve script evaluation history
			if (contains) {
				setGlobalEval(tmp);
			}

			// Capture executables
			if (scripts) {
				j = 0;
				while (elem = tmp[j++]) {
					if (rscriptType.test(elem.type || "")) {
						scripts.push(elem);
					}
				}
			}
		}

		return fragment;
	}

	(function () {
		var fragment = document.createDocumentFragment(),
		    div = fragment.appendChild(document.createElement("div")),
		    input = document.createElement("input");

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute("type", "radio");
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");

		div.appendChild(input);

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	})();
	var documentElement = document.documentElement;

	var rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) {}
	}

	function _on(elem, types, selector, data, fn, one) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

			// ( types-Object, selector, data )
			if (typeof selector !== "string") {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for (type in types) {
				_on(elem, type, selector, data, types[type], one);
			}
			return elem;
		}

		if (data == null && fn == null) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if (fn == null) {
			if (typeof selector === "string") {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if (fn === false) {
			fn = returnFalse;
		} else if (!fn) {
			return elem;
		}

		if (one === 1) {
			origFn = fn;
			fn = function fn(event) {

				// Can use an empty set, since event contains the info
				jQuery().off(event);
				return origFn.apply(this, arguments);
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
		}
		return elem.each(function () {
			jQuery.event.add(this, types, fn, data, selector);
		});
	}

	/*
  * Helper functions for managing events -- not part of the public interface.
  * Props to Dean Edwards' addEvent library for many of the ideas.
  */
	jQuery.event = {

		global: {},

		add: function add(elem, types, handler, data, selector) {

			var handleObjIn,
			    eventHandle,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.get(elem);

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if (!elemData) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if (selector) {
				jQuery.find.matchesSelector(documentElement, selector);
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// There *must* be a type, no attaching namespace-only handlers
				if (!type) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[type] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = (selector ? special.delegateType : special.bindType) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[type] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				// Init the event handler queue if we're the first
				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[type] = true;
			}
		},

		// Detach an event or set of events from an element
		remove: function remove(elem, types, handler, selector, mappedTypes) {

			var j,
			    origCount,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// Unbind all events (on this namespace, if provided) for the element
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				// Remove matching events
				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if (origCount && !handlers.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			// Remove data and the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				dataPriv.remove(elem, "handle events");
			}
		},

		dispatch: function dispatch(nativeEvent) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix(nativeEvent);

			var i,
			    j,
			    ret,
			    matched,
			    handleObj,
			    handlerQueue,
			    args = new Array(arguments.length),
			    handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
			    special = jQuery.event.special[event.type] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;

			for (i = 1; i < arguments.length; i++) {
				args[i] = arguments[i];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function handlers(event, _handlers) {
			var i,
			    handleObj,
			    sel,
			    matchedHandlers,
			    matchedSelectors,
			    handlerQueue = [],
			    delegateCount = _handlers.delegateCount,
			    cur = event.target;

			// Find delegate handlers
			if (delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!(event.type === "click" && event.button >= 1)) {

				for (; cur !== this; cur = cur.parentNode || this) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
						matchedHandlers = [];
						matchedSelectors = {};
						for (i = 0; i < delegateCount; i++) {
							handleObj = _handlers[i];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if (matchedSelectors[sel] === undefined) {
								matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
							}
							if (matchedSelectors[sel]) {
								matchedHandlers.push(handleObj);
							}
						}
						if (matchedHandlers.length) {
							handlerQueue.push({ elem: cur, handlers: matchedHandlers });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if (delegateCount < _handlers.length) {
				handlerQueue.push({ elem: cur, handlers: _handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		addProp: function addProp(name, hook) {
			Object.defineProperty(jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: jQuery.isFunction(hook) ? function () {
					if (this.originalEvent) {
						return hook(this.originalEvent);
					}
				} : function () {
					if (this.originalEvent) {
						return this.originalEvent[name];
					}
				},

				set: function set(value) {
					Object.defineProperty(this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					});
				}
			});
		},

		fix: function fix(originalEvent) {
			return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function trigger() {
					if (this !== safeActiveElement() && this.focus) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function trigger() {
					if (this === safeActiveElement() && this.blur) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function trigger() {
					if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function _default(event) {
					return nodeName(event.target, "a");
				}
			},

			beforeunload: {
				postDispatch: function postDispatch(event) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function (elem, type, handle) {

		// This "if" is needed for plain objects
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle);
		}
	};

	jQuery.Event = function (src, props) {

		// Allow instantiation without the 'new' keyword
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

			// Support: Android <=2.3 only
			src.returnValue === false ? returnTrue : returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if (props) {
			jQuery.extend(this, props);
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[jQuery.expando] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function preventDefault() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if (e && !this.isSimulated) {
				e.preventDefault();
			}
		},
		stopPropagation: function stopPropagation() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function stopImmediatePropagation() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each({
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function which(event) {
			var button = event.button;

			// Add which for key events
			if (event.which == null && rkeyEvent.test(event.type)) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
				if (button & 1) {
					return 1;
				}

				if (button & 2) {
					return 3;
				}

				if (button & 4) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp);

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function handle(event) {
				var ret,
				    target = this,
				    related = event.relatedTarget,
				    handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if (!related || related !== target && !jQuery.contains(target, related)) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	jQuery.fn.extend({

		on: function on(types, selector, data, fn) {
			return _on(this, types, selector, data, fn);
		},
		one: function one(types, selector, data, fn) {
			return _on(this, types, selector, data, fn, 1);
		},
		off: function off(types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this;
			}
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

				// ( types-object [, selector] )
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		}
	});

	var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,


	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,


	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rscriptTypeMasked = /^true\/(.*)/,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget(elem, content) {
		if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

			return jQuery(">tbody", elem)[0] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript(elem) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		var match = rscriptTypeMasked.exec(elem.type);

		if (match) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	function cloneCopyEvent(src, dest) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if (dest.nodeType !== 1) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if (dataPriv.hasData(src)) {
			pdataOld = dataPriv.access(src);
			pdataCur = dataPriv.set(dest, pdataOld);
			events = pdataOld.events;

			if (events) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for (type in events) {
					for (i = 0, l = events[type].length; i < l; i++) {
						jQuery.event.add(dest, type, events[type][i]);
					}
				}
			}
		}

		// 2. Copy user data
		if (dataUser.hasData(src)) {
			udataOld = dataUser.access(src);
			udataCur = jQuery.extend({}, udataOld);

			dataUser.set(dest, udataCur);
		}
	}

	// Fix IE bugs, see support tests
	function fixInput(src, dest) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if (nodeName === "input" && rcheckableType.test(src.type)) {
			dest.checked = src.checked;

			// Fails to return the selected option to the default selected state when cloning options
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip(collection, args, callback, ignored) {

		// Flatten any nested arrays
		args = concat.apply([], args);

		var fragment,
		    first,
		    scripts,
		    hasScripts,
		    node,
		    doc,
		    i = 0,
		    l = collection.length,
		    iNoClone = l - 1,
		    value = args[0],
		    isFunction = jQuery.isFunction(value);

		// We can't cloneNode fragments that contain checked, in WebKit
		if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
			return collection.each(function (index) {
				var self = collection.eq(index);
				if (isFunction) {
					args[0] = value.call(this, index, self.html());
				}
				domManip(self, args, callback, ignored);
			});
		}

		if (l) {
			fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
			first = fragment.firstChild;

			if (fragment.childNodes.length === 1) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if (first || ignored) {
				scripts = jQuery.map(getAll(fragment, "script"), disableScript);
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for (; i < l; i++) {
					node = fragment;

					if (i !== iNoClone) {
						node = jQuery.clone(node, true, true);

						// Keep references to cloned scripts for later restoration
						if (hasScripts) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge(scripts, getAll(node, "script"));
						}
					}

					callback.call(collection[i], node, i);
				}

				if (hasScripts) {
					doc = scripts[scripts.length - 1].ownerDocument;

					// Reenable scripts
					jQuery.map(scripts, restoreScript);

					// Evaluate executable scripts on first document insertion
					for (i = 0; i < hasScripts; i++) {
						node = scripts[i];
						if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {

							if (node.src) {

								// Optional AJAX dependency, but won't run scripts if not present
								if (jQuery._evalUrl) {
									jQuery._evalUrl(node.src);
								}
							} else {
								DOMEval(node.textContent.replace(rcleanScript, ""), doc);
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function _remove(elem, selector, keepData) {
		var node,
		    nodes = selector ? jQuery.filter(selector, elem) : elem,
		    i = 0;

		for (; (node = nodes[i]) != null; i++) {
			if (!keepData && node.nodeType === 1) {
				jQuery.cleanData(getAll(node));
			}

			if (node.parentNode) {
				if (keepData && jQuery.contains(node.ownerDocument, node)) {
					setGlobalEval(getAll(node, "script"));
				}
				node.parentNode.removeChild(node);
			}
		}

		return elem;
	}

	jQuery.extend({
		htmlPrefilter: function htmlPrefilter(html) {
			return html.replace(rxhtmlTag, "<$1></$2>");
		},

		clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
			var i,
			    l,
			    srcElements,
			    destElements,
			    clone = elem.cloneNode(true),
			    inPage = jQuery.contains(elem.ownerDocument, elem);

			// Fix IE cloning issues
			if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll(clone);
				srcElements = getAll(elem);

				for (i = 0, l = srcElements.length; i < l; i++) {
					fixInput(srcElements[i], destElements[i]);
				}
			}

			// Copy the events from the original to the clone
			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0, l = srcElements.length; i < l; i++) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			// Preserve script evaluation history
			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function cleanData(elems) {
			var data,
			    elem,
			    type,
			    special = jQuery.event.special,
			    i = 0;

			for (; (elem = elems[i]) !== undefined; i++) {
				if (acceptData(elem)) {
					if (data = elem[dataPriv.expando]) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataPriv.expando] = undefined;
					}
					if (elem[dataUser.expando]) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataUser.expando] = undefined;
					}
				}
			}
		}
	});

	jQuery.fn.extend({
		detach: function detach(selector) {
			return _remove(this, selector, true);
		},

		remove: function remove(selector) {
			return _remove(this, selector);
		},

		text: function text(value) {
			return access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().each(function () {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						this.textContent = value;
					}
				});
			}, null, value, arguments.length);
		},

		append: function append() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function prepend() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function before() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function after() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		empty: function empty() {
			var elem,
			    i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {

					// Prevent memory leaks
					jQuery.cleanData(getAll(elem, false));

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function clone(dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function html(value) {
			return access(this, function (value) {
				var elem = this[0] || {},
				    i = 0,
				    l = this.length;

				if (value === undefined && elem.nodeType === 1) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = jQuery.htmlPrefilter(value);

					try {
						for (; i < l; i++) {
							elem = this[i] || {};

							// Remove element nodes and prevent memory leaks
							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function replaceWith() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip(this, arguments, function (elem) {
				var parent = this.parentNode;

				if (jQuery.inArray(this, ignored) < 0) {
					jQuery.cleanData(getAll(this));
					if (parent) {
						parent.replaceChild(elem, this);
					}
				}

				// Force callback invocation
			}, ignored);
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			    ret = [],
			    insert = jQuery(selector),
			    last = insert.length - 1,
			    i = 0;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});
	var rmargin = /^margin/;

	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles = function getStyles(elem) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if (!view || !view.opener) {
			view = window;
		}

		return view.getComputedStyle(elem);
	};

	(function () {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if (!div) {
				return;
			}

			div.style.cssText = "box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild(container);

			var divStyle = window.getComputedStyle(div);
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild(container);

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		var pixelPositionVal,
		    boxSizingReliableVal,
		    pixelMarginRightVal,
		    reliableMarginLeftVal,
		    container = document.createElement("div"),
		    div = document.createElement("div");

		// Finish early in limited (non-browser) environments
		if (!div.style) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
		container.appendChild(div);

		jQuery.extend(support, {
			pixelPosition: function pixelPosition() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function boxSizingReliable() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function pixelMarginRight() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function reliableMarginLeft() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		});
	})();

	function curCSS(elem, name, computed) {
		var width,
		    minWidth,
		    maxWidth,
		    ret,


		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

		computed = computed || getStyles(elem);

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if (computed) {
			ret = computed.getPropertyValue(name) || computed[name];

			if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
				ret = jQuery.style(elem, name);
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" : ret;
	}

	function addGetHookIf(conditionFn, hookFn) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function get() {
				if (conditionFn()) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return (this.get = hookFn).apply(this, arguments);
			}
		};
	}

	var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    rcustomProp = /^--/,
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},
	    cssPrefixes = ["Webkit", "Moz", "ms"],
	    emptyStyle = document.createElement("div").style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName(name) {

		// Shortcut for names that are not vendor prefixed
		if (name in emptyStyle) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
		    i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in emptyStyle) {
				return name;
			}
		}
	}

	// Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.
	function finalPropName(name) {
		var ret = jQuery.cssProps[name];
		if (!ret) {
			ret = jQuery.cssProps[name] = vendorPropName(name) || name;
		}
		return ret;
	}

	function setPositiveNumber(elem, value, subtract) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec(value);
		return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
		var i,
		    val = 0;

		// If we already have the right measurement, avoid augmentation
		if (extra === (isBorderBox ? "border" : "content")) {
			i = 4;

			// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}

		for (; i < 4; i += 2) {

			// Both box models exclude margin, so add it if we want it
			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true, styles);
			}

			if (isBorderBox) {

				// border-box includes padding, so remove it if we want content
				if (extra === "content") {
					val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				// At this point, extra isn't border nor margin, so remove border
				if (extra !== "margin") {
					val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				// At this point, extra isn't content nor padding, so add border
				if (extra !== "padding") {
					val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		return val;
	}

	function getWidthOrHeight(elem, name, extra) {

		// Start with computed style
		var valueIsBorderBox,
		    styles = getStyles(elem),
		    val = curCSS(elem, name, styles),
		    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

		// Computed unit is not pixels. Stop here and return.
		if (rnumnonpx.test(val)) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

		// Fall back to offsetWidth/Height when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		if (val === "auto") {
			val = elem["offset" + name[0].toUpperCase() + name.slice(1)];
		}

		// Normalize "", auto, and prepare for extra
		val = parseFloat(val) || 0;

		// Use the active box-sizing model to add/subtract irrelevant styles
		return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
	}

	jQuery.extend({

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function get(elem, computed) {
					if (computed) {

						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function style(elem, name, value, extra) {

			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			// Make sure that we're working with the right name
			var ret,
			    type,
			    hooks,
			    origName = jQuery.camelCase(name),
			    isCustomProp = rcustomProp.test(name),
			    style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// Check if we're setting a value
			if (value !== undefined) {
				type = typeof value === "undefined" ? "undefined" : _typeof(value);

				// Convert "+=" or "-=" to relative numbers (#7345)
				if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
					value = adjustCSS(elem, name, ret);

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if (value == null || value !== value) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if (type === "number") {
					value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
				}

				// background-* props affect original clone's values
				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

					if (isCustomProp) {
						style.setProperty(name, value);
					} else {
						style[name] = value;
					}
				}
			} else {

				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[name];
			}
		},

		css: function css(elem, name, extra, styles) {
			var val,
			    num,
			    hooks,
			    origName = jQuery.camelCase(name),
			    isCustomProp = rcustomProp.test(name);

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			// Otherwise, if a way to get the computed value exists, use that
			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			// Convert "normal" to computed value
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || isFinite(num) ? num || 0 : val;
			}

			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function get(elem, computed, extra) {
				if (computed) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test(jQuery.css(elem, "display")) && (

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
						return getWidthOrHeight(elem, name, extra);
					}) : getWidthOrHeight(elem, name, extra);
				}
			},

			set: function set(elem, value, extra) {
				var matches,
				    styles = extra && getStyles(elem),
				    subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles);

				// Convert to pixels if value adjustment is needed
				if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {

					elem.style[name] = value;
					value = jQuery.css(elem, name);
				}

				return setPositiveNumber(elem, value, subtract);
			}
		};
	});

	jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
		if (computed) {
			return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
				return elem.getBoundingClientRect().left;
			})) + "px";
		}
	});

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function expand(value) {
				var i = 0,
				    expanded = {},


				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function css(name, value) {
			return access(this, function (elem, name, value) {
				var styles,
				    len,
				    map = {},
				    i = 0;

				if (Array.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		}
	});

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function init(elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function cur() {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function run(percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function get(tween) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
					return tween.elem[tween.prop];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css(tween.elem, tween.prop, "");

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function set(tween) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function set(tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function linear(p) {
			return p;
		},
		swing: function swing(p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};

	var fxNow,
	    inProgress,
	    rfxtypes = /^(?:toggle|show|hide)$/,
	    rrun = /queueHooks$/;

	function schedule() {
		if (inProgress) {
			if (document.hidden === false && window.requestAnimationFrame) {
				window.requestAnimationFrame(schedule);
			} else {
				window.setTimeout(schedule, jQuery.fx.interval);
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout(function () {
			fxNow = undefined;
		});
		return fxNow = jQuery.now();
	}

	// Generate parameters to create a standard animation
	function genFx(type, includeWidth) {
		var which,
		    i = 0,
		    attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
		    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
		    index = 0,
		    length = collection.length;
		for (; index < length; index++) {
			if (tween = collection[index].call(animation, prop, value)) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		var prop,
		    value,
		    toggle,
		    hooks,
		    oldfire,
		    propTween,
		    restoreDisplay,
		    display,
		    isBox = "width" in props || "height" in props,
		    anim = this,
		    orig = {},
		    style = elem.style,
		    hidden = elem.nodeType && isHiddenWithinTree(elem),
		    dataShow = dataPriv.get(elem, "fxshow");

		// Queue-skipping animations hijack the fx hooks
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {

				// Ensure the complete handler is called before this completes
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		// Detect show/hide animations
		for (prop in props) {
			value = props[prop];
			if (rfxtypes.test(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;

						// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject(props);
		if (!propTween && jQuery.isEmptyObject(orig)) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if (isBox && elem.nodeType === 1) {

			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if (restoreDisplay == null) {
				restoreDisplay = dataPriv.get(elem, "display");
			}
			display = jQuery.css(elem, "display");
			if (display === "none") {
				if (restoreDisplay) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide([elem], true);
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css(elem, "display");
					showHide([elem]);
				}
			}

			// Animate inline elements as inline-block
			if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
				if (jQuery.css(elem, "float") === "none") {

					// Restore the original display value at the end of pure show/hide animations
					if (!propTween) {
						anim.done(function () {
							style.display = restoreDisplay;
						});
						if (restoreDisplay == null) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			anim.always(function () {
				style.overflow = opts.overflow[0];
				style.overflowX = opts.overflow[1];
				style.overflowY = opts.overflow[2];
			});
		}

		// Implement show/hide animations
		propTween = false;
		for (prop in orig) {

			// General show/hide setup for this element animation
			if (!propTween) {
				if (dataShow) {
					if ("hidden" in dataShow) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if (toggle) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if (hidden) {
					showHide([elem], true);
				}

				/* eslint-disable no-loop-func */

				anim.done(function () {

					/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if (!hidden) {
						showHide([elem]);
					}
					dataPriv.remove(elem, "fxshow");
					for (prop in orig) {
						jQuery.style(elem, prop, orig[prop]);
					}
				});
			}

			// Per-property setup
			propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
			if (!(prop in dataShow)) {
				dataShow[prop] = propTween.start;
				if (hidden) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (Array.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
		    stopped,
		    index = 0,
		    length = Animation.prefilters.length,
		    deferred = jQuery.Deferred().always(function () {

			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		    tick = function tick() {
			if (stopped) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
			    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


			// Support: Android 2.3 only
			// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
			temp = remaining / animation.duration || 0,
			    percent = 1 - temp,
			    index = 0,
			    length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			// If there's more to do, yield
			if (percent < 1 && length) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if (!length) {
				deferred.notifyWith(elem, [animation, 1, 0]);
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith(elem, [animation]);
			return false;
		},
		    animation = deferred.promise({
			elem: elem,
			props: jQuery.extend({}, properties),
			opts: jQuery.extend(true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function createTween(prop, end) {
				var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
				animation.tweens.push(tween);
				return tween;
			},
			stop: function stop(gotoEnd) {
				var index = 0,


				// If we are going to the end, we want to run all the tweens
				// otherwise we skip this part
				length = gotoEnd ? animation.tweens.length : 0;
				if (stopped) {
					return this;
				}
				stopped = true;
				for (; index < length; index++) {
					animation.tweens[index].run(1);
				}

				// Resolve when we played the last frame; otherwise, reject
				if (gotoEnd) {
					deferred.notifyWith(elem, [animation, 1, 0]);
					deferred.resolveWith(elem, [animation, gotoEnd]);
				} else {
					deferred.rejectWith(elem, [animation, gotoEnd]);
				}
				return this;
			}
		}),
		    props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				if (jQuery.isFunction(result.stop)) {
					jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
				}
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		// Attach callbacks from options
		animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);

		jQuery.fx.timer(jQuery.extend(tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		}));

		return animation;
	}

	jQuery.Animation = jQuery.extend(Animation, {

		tweeners: {
			"*": [function (prop, value) {
				var tween = this.createTween(prop, value);
				adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
				return tween;
			}]
		},

		tweener: function tweener(props, callback) {
			if (jQuery.isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.match(rnothtmlwhite);
			}

			var prop,
			    index = 0,
			    length = props.length;

			for (; index < length; index++) {
				prop = props[index];
				Animation.tweeners[prop] = Animation.tweeners[prop] || [];
				Animation.tweeners[prop].unshift(callback);
			}
		},

		prefilters: [defaultPrefilter],

		prefilter: function prefilter(callback, prepend) {
			if (prepend) {
				Animation.prefilters.unshift(callback);
			} else {
				Animation.prefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		// Go to the end state if fx are off
		if (jQuery.fx.off) {
			opt.duration = 0;
		} else {
			if (typeof opt.duration !== "number") {
				if (opt.duration in jQuery.fx.speeds) {
					opt.duration = jQuery.fx.speeds[opt.duration];
				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function fadeTo(speed, to, easing, callback) {

			// Show any hidden elements after setting opacity to 0
			return this.filter(isHiddenWithinTree).css("opacity", 0).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function animate(prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			    optall = jQuery.speed(speed, easing, callback),
			    doAnimation = function doAnimation() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation(this, jQuery.extend({}, prop), optall);

				// Empty animations, or finishing resolves immediately
				if (empty || dataPriv.get(this, "finish")) {
					anim.stop(true);
				}
			};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
		},
		stop: function stop(type, clearQueue, gotoEnd) {
			var stopQueue = function stopQueue(hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				    index = type != null && type + "queueHooks",
				    timers = jQuery.timers,
				    data = dataPriv.get(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function finish(type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
				    data = dataPriv.get(this),
				    queue = data[type + "queue"],
				    hooks = data[type + "queueHooks"],
				    timers = jQuery.timers,
				    length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				// Look for any active animations, and finish them
				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				// Look for any animations in the old queue and finish them
				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				// Turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
		    i = 0,
		    timers = jQuery.timers;

		fxNow = jQuery.now();

		for (; i < timers.length; i++) {
			timer = timers[i];

			// Run the timer and safely remove it when done (allowing for external removal)
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function () {
		if (inProgress) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function () {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};

	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = window.setTimeout(next, time);
			hooks.stop = function () {
				window.clearTimeout(timeout);
			};
		});
	};

	(function () {
		var input = document.createElement("input"),
		    select = document.createElement("select"),
		    opt = select.appendChild(document.createElement("option"));

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement("input");
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();

	var boolHook,
	    attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function attr(name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function removeAttr(name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function attr(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if (typeof elem.getAttribute === "undefined") {
				return jQuery.prop(elem, name, value);
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
			}

			if (value !== undefined) {
				if (value === null) {
					jQuery.removeAttr(elem, name);
					return;
				}

				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				elem.setAttribute(name, value + "");
				return value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			ret = jQuery.find.attr(elem, name);

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function set(elem, value) {
					if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function removeAttr(elem, value) {
			var name,
			    i = 0,


			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match(rnothtmlwhite);

			if (attrNames && elem.nodeType === 1) {
				while (name = attrNames[i++]) {
					elem.removeAttribute(name);
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function set(elem, value, name) {
			if (value === false) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr(elem, name);
			} else {
				elem.setAttribute(name, name);
			}
			return name;
		}
	};

	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = function (elem, name, isXML) {
			var ret,
			    handle,
			    lowercaseName = name.toLowerCase();

			if (!isXML) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[lowercaseName];
				attrHandle[lowercaseName] = ret;
				ret = getter(elem, name, isXML) != null ? lowercaseName : null;
				attrHandle[lowercaseName] = handle;
			}
			return ret;
		};
	});

	var rfocusable = /^(?:input|select|textarea|button)$/i,
	    rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function prop(name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function removeProp(name) {
			return this.each(function () {
				delete this[jQuery.propFix[name] || name];
			});
		}
	});

	jQuery.extend({
		prop: function prop(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

				// Fix name and attach hooks
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				return elem[name] = value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			return elem[name];
		},

		propHooks: {
			tabIndex: {
				get: function get(elem) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr(elem, "tabindex");

					if (tabindex) {
						return parseInt(tabindex, 10);
					}

					if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	});

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function get(elem) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if (parent && parent.parentNode) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function set(elem) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if (parent) {
					parent.selectedIndex;

					if (parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});

	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse(value) {
		var tokens = value.match(rnothtmlwhite) || [];
		return tokens.join(" ");
	}

	function getClass(elem) {
		return elem.getAttribute && elem.getAttribute("class") || "";
	}

	jQuery.fn.extend({
		addClass: function addClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, getClass(this)));
				});
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnothtmlwhite) || [];

				while (elem = this[i++]) {
					curValue = getClass(elem);
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		removeClass: function removeClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, getClass(this)));
				});
			}

			if (!arguments.length) {
				return this.attr("class", "");
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnothtmlwhite) || [];

				while (elem = this[i++]) {
					curValue = getClass(elem);

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {

							// Remove *all* instances
							while (cur.indexOf(" " + clazz + " ") > -1) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		toggleClass: function toggleClass(value, stateVal) {
			var type = typeof value === "undefined" ? "undefined" : _typeof(value);

			if (typeof stateVal === "boolean" && type === "string") {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
				});
			}

			return this.each(function () {
				var className, i, self, classNames;

				if (type === "string") {

					// Toggle individual class names
					i = 0;
					self = jQuery(this);
					classNames = value.match(rnothtmlwhite) || [];

					while (className = classNames[i++]) {

						// Check each className given, space separated list
						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}

					// Toggle whole class name
				} else if (value === undefined || type === "boolean") {
					className = getClass(this);
					if (className) {

						// Store className if set
						dataPriv.set(this, "__className__", className);
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if (this.setAttribute) {
						this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
					}
				}
			});
		},

		hasClass: function hasClass(selector) {
			var className,
			    elem,
			    i = 0;

			className = " " + selector + " ";
			while (elem = this[i++]) {
				if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
					return true;
				}
			}

			return false;
		}
	});

	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function val(value) {
			var hooks,
			    ret,
			    isFunction,
			    elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if (typeof ret === "string") {
						return ret.replace(rreturn, "");
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (isFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (Array.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				// If set returns undefined, fall back to normal setting
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function get(elem) {

					var val = jQuery.find.attr(elem, "value");
					return val != null ? val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse(jQuery.text(elem));
				}
			},
			select: {
				get: function get(elem) {
					var value,
					    option,
					    i,
					    options = elem.options,
					    index = elem.selectedIndex,
					    one = elem.type === "select-one",
					    values = one ? null : [],
					    max = one ? index + 1 : options.length;

					if (index < 0) {
						i = max;
					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for (; i < max; i++) {
						option = options[i];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ((option.selected || i === index) &&

						// Don't return options that are disabled or in a disabled optgroup
						!option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if (one) {
								return value;
							}

							// Multi-Selects return an array
							values.push(value);
						}
					}

					return values;
				},

				set: function set(elem, value) {
					var optionSet,
					    option,
					    options = elem.options,
					    values = jQuery.makeArray(value),
					    i = options.length;

					while (i--) {
						option = options[i];

						/* eslint-disable no-cond-assign */

						if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if (!optionSet) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function set(elem, value) {
				if (Array.isArray(value)) {
					return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});

	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend(jQuery.event, {

		trigger: function trigger(event, data, elem, onlyHandlers) {

			var i,
			    cur,
			    tmp,
			    bubbleType,
			    ontype,
			    handle,
			    special,
			    eventPath = [elem || document],
			    type = hasOwn.call(event, "type") ? event.type : event,
			    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") > -1) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ? [event] : jQuery.makeArray(data, [event]);

			// Allow special events to draw outside the lines
			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

				event.type = i > 1 ? bubbleType : special.bindType || type;

				// jQuery handler
				handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				// Native handler
				handle = ontype && cur[ontype];
				if (handle && handle.apply && acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[type]();
						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function simulate(type, elem, event) {
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true
			});

			jQuery.event.trigger(e, null, elem);
		}

	});

	jQuery.fn.extend({

		trigger: function trigger(type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function triggerHandler(type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});

	jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {

		// Handle event binding
		jQuery.fn[name] = function (data, fn) {
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};
	});

	jQuery.fn.extend({
		hover: function hover(fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		}
	});

	support.focusin = "onfocusin" in window;

	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if (!support.focusin) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function handler(event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
			};

			jQuery.event.special[fix] = {
				setup: function setup() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					dataPriv.access(doc, fix, (attaches || 0) + 1);
				},
				teardown: function teardown() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						dataPriv.remove(doc, fix);
					} else {
						dataPriv.access(doc, fix, attaches);
					}
				}
			};
		});
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = /\?/;

	// Cross-browser xml parsing
	jQuery.parseXML = function (data) {
		var xml;
		if (!data || typeof data !== "string") {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = new window.DOMParser().parseFromString(data, "text/xml");
		} catch (e) {
			xml = undefined;
		}

		if (!xml || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};

	var rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (Array.isArray(obj)) {

			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {

					// Treat each array item as a scalar.
					add(prefix, v);
				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" && v != null ? i : "") + "]", v, traditional, add);
				}
			});
		} else if (!traditional && jQuery.type(obj) === "object") {

			// Serialize object item.
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {

			// Serialize scalar item.
			add(prefix, obj);
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function (a, traditional) {
		var prefix,
		    s = [],
		    add = function add(key, valueOrFunction) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;

			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
		};

		// If an array was passed in, assume that it is an array of form elements.
		if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

			// Serialize the form elements
			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		// Return the resulting serialization
		return s.join("&");
	};

	jQuery.fn.extend({
		serialize: function serialize() {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function serializeArray() {
			return this.map(function () {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			}).filter(function () {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();

				if (val == null) {
					return null;
				}

				if (Array.isArray(val)) {
					return jQuery.map(val, function (val) {
						return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
					});
				}

				return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});

	var r20 = /%20/g,
	    rhash = /#.*$/,
	    rantiCache = /([?&])_=[^&]*/,
	    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,


	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	    rnoContent = /^(?:GET|HEAD)$/,
	    rprotocol = /^\/\//,


	/* Prefilters
  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
  * 2) These are called:
  *    - BEFORE asking for a transport
  *    - AFTER param serialization (s.data is a string if s.processData is true)
  * 3) key is the dataType
  * 4) the catchall symbol "*" can be used
  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
  */
	prefilters = {},


	/* Transports bindings
  * 1) key is the dataType
  * 2) the catchall symbol "*" can be used
  * 3) selection will start with transport dataType and THEN go to "*" if needed
  */
	transports = {},


	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*"),


	// Anchor tag for parsing the document origin
	originAnchor = document.createElement("a");
	originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure) {

		// dataTypeExpression is optional and defaults to "*"
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			    i = 0,
			    dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

			if (jQuery.isFunction(func)) {

				// For each dataType in the dataTypeExpression
				while (dataType = dataTypes[i++]) {

					// Prepend if requested
					if (dataType[0] === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);

						// Otherwise append
					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
		    seekingTransport = structure === transports;

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target, src) {
		var key,
		    deep,
		    flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	/* Handles responses to an ajax request:
  * - finds the right dataType (mediates between content-type and expected dataType)
  * - returns the corresponding response
  */
	function ajaxHandleResponses(s, jqXHR, responses) {

		var ct,
		    type,
		    finalDataType,
		    firstDataType,
		    contents = s.contents,
		    dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {

			// Try convertible dataTypes
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	/* Chain conversions given the request and the original response
  * Also sets the responseXXX fields on the jqXHR instance
  */
	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2,
		    current,
		    conv,
		    tmp,
		    prev,
		    converters = {},


		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			// Apply the dataFilter if provided
			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {

				// There's only work to do if current dataType is non-auto
				if (current === "*") {

					current = prev;

					// Convert response if prev dataType is non-auto and differs from current
				} else if (prev !== "*" && prev !== current) {

					// Seek a direct converter
					conv = converters[prev + " " + current] || converters["* " + current];

					// If none found, seek a pair
					if (!conv) {
						for (conv2 in converters) {

							// If conv2 outputs current
							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								// If prev can be converted to accepted input
								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {

									// Condense equivalence converters
									if (conv === true) {
										conv = converters[conv2];

										// Otherwise, insert the intermediate dataType
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if (conv !== true) {

						// Unless errors are allowed to bubble, catch and return them
						if (conv && s.throws) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test(location.protocol),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
   timeout: 0,
   data: null,
   dataType: null,
   username: null,
   password: null,
   cache: null,
   throws: false,
   traditional: false,
   headers: {},
   */

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function ajaxSetup(target, settings) {
			return settings ?

			// Building a settings object
			ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

			// Extending ajaxSettings
			ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		// Main method
		ajax: function ajax(url, options) {

			// If url is an object, simulate pre-1.5 signature
			if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,


			// URL without anti-cache param
			cacheURL,


			// Response headers
			responseHeadersString,
			    responseHeaders,


			// timeout handle
			timeoutTimer,


			// Url cleanup var
			urlAnchor,


			// Request state (becomes false upon send and true upon completion)
			completed,


			// To know if global events are to be dispatched
			fireGlobals,


			// Loop variable
			i,


			// uncached part of the url
			uncached,


			// Create the final options object
			s = jQuery.ajaxSetup({}, options),


			// Callbacks context
			callbackContext = s.context || s,


			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


			// Deferreds
			deferred = jQuery.Deferred(),
			    completeDeferred = jQuery.Callbacks("once memory"),


			// Status-dependent callbacks
			_statusCode = s.statusCode || {},


			// Headers (they are sent all at once)
			requestHeaders = {},
			    requestHeadersNames = {},


			// Default abort message
			strAbort = "canceled",


			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function getResponseHeader(key) {
					var match;
					if (completed) {
						if (!responseHeaders) {
							responseHeaders = {};
							while (match = rheaders.exec(responseHeadersString)) {
								responseHeaders[match[1].toLowerCase()] = match[2];
							}
						}
						match = responseHeaders[key.toLowerCase()];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function getAllResponseHeaders() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function setRequestHeader(name, value) {
					if (completed == null) {
						name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function overrideMimeType(type) {
					if (completed == null) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function statusCode(map) {
					var code;
					if (map) {
						if (completed) {

							// Execute the appropriate callbacks
							jqXHR.always(map[jqXHR.status]);
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for (code in map) {
								_statusCode[code] = [_statusCode[code], map[code]];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function abort(statusText) {
					var finalText = statusText || strAbort;
					if (transport) {
						transport.abort(finalText);
					}
					done(0, finalText);
					return this;
				}
			};

			// Attach deferreds
			deferred.promise(jqXHR);

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if (s.crossDomain == null) {
				urlAnchor = document.createElement("a");

				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
				} catch (e) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			// Apply prefilters
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			// If request was aborted inside a prefilter, stop there
			if (completed) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test(s.type);

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace(rhash, "");

			// More options handling for requests with no content
			if (!s.hasContent) {

				// Remember the hash so we can put it back
				uncached = s.url.slice(cacheURL.length);

				// If data is available, append data to url
				if (s.data) {
					cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if (s.cache === false) {
					cacheURL = cacheURL.replace(rantiCache, "$1");
					uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

				// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
				s.data = s.data.replace(r20, "+");
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			// Set the correct header, if data is being sent
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

			// Check for headers option
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add(s.complete);
			jqXHR.done(s.success);
			jqXHR.fail(s.error);

			// Get transport
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			// If no transport, we auto-abort
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}

				// If request was aborted inside ajaxSend, stop there
				if (completed) {
					return jqXHR;
				}

				// Timeout
				if (s.async && s.timeout > 0) {
					timeoutTimer = window.setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					completed = false;
					transport.send(requestHeaders, done);
				} catch (e) {

					// Rethrow post-completion exceptions
					if (completed) {
						throw e;
					}

					// Propagate others as results
					done(-1, e);
				}
			}

			// Callback for when everything is done
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				    success,
				    error,
				    response,
				    modified,
				    statusText = nativeStatusText;

				// Ignore repeat invocations
				if (completed) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if (timeoutTimer) {
					window.clearTimeout(timeoutTimer);
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert(s, response, jqXHR, isSuccess);

				// If successful, handle type chaining
				if (isSuccess) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					// if no content
					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";

						// if not modified
					} else if (status === 304) {
						statusText = "notmodified";

						// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				// Success/Error
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				// Status-dependent callbacks
				jqXHR.statusCode(_statusCode);
				_statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
				}

				// Complete
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

					// Handle the global AJAX counter
					if (! --jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function getJSON(url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function getScript(url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {

			// Shift arguments if data argument was omitted
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax(jQuery.extend({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject(url) && url));
		};
	});

	jQuery._evalUrl = function (url) {
		return jQuery.ajax({
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		});
	};

	jQuery.fn.extend({
		wrapAll: function wrapAll(html) {
			var wrap;

			if (this[0]) {
				if (jQuery.isFunction(html)) {
					html = html.call(this[0]);
				}

				// The elements to wrap the target around
				wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstElementChild) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function wrapInner(html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				    contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},

		wrap: function wrap(html) {
			var isFunction = jQuery.isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function unwrap(selector) {
			this.parent(selector).not("body").each(function () {
				jQuery(this).replaceWith(this.childNodes);
			});
			return this;
		}
	});

	jQuery.expr.pseudos.hidden = function (elem) {
		return !jQuery.expr.pseudos.visible(elem);
	};
	jQuery.expr.pseudos.visible = function (elem) {
		return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
	};

	jQuery.ajaxSettings.xhr = function () {
		try {
			return new window.XMLHttpRequest();
		} catch (e) {}
	};

	var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	    xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function (options) {
		var _callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if (support.cors || xhrSupported && !options.crossDomain) {
			return {
				send: function send(headers, complete) {
					var i,
					    xhr = options.xhr();

					xhr.open(options.type, options.url, options.async, options.username, options.password);

					// Apply custom fields if provided
					if (options.xhrFields) {
						for (i in options.xhrFields) {
							xhr[i] = options.xhrFields[i];
						}
					}

					// Override mime type if needed
					if (options.mimeType && xhr.overrideMimeType) {
						xhr.overrideMimeType(options.mimeType);
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if (!options.crossDomain && !headers["X-Requested-With"]) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for (i in headers) {
						xhr.setRequestHeader(i, headers[i]);
					}

					// Callback
					_callback = function callback(type) {
						return function () {
							if (_callback) {
								_callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if (type === "abort") {
									xhr.abort();
								} else if (type === "error") {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if (typeof xhr.status !== "number") {
										complete(0, "error");
									} else {
										complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status, xhr.statusText);
									}
								} else {
									complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									(xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
								}
							}
						};
					};

					// Listen to events
					xhr.onload = _callback();
					errorCallback = xhr.onerror = _callback("error");

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if (xhr.onabort !== undefined) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function () {

							// Check readyState before timeout as it changes
							if (xhr.readyState === 4) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout(function () {
									if (_callback) {
										errorCallback();
									}
								});
							}
						};
					}

					// Create the abort callback
					_callback = _callback("abort");

					try {

						// Do send the request (this may raise an exception)
						xhr.send(options.hasContent && options.data || null);
					} catch (e) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if (_callback) {
							throw e;
						}
					}
				},

				abort: function abort() {
					if (_callback) {
						_callback();
					}
				}
			};
		}
	});

	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter(function (s) {
		if (s.crossDomain) {
			s.contents.script = false;
		}
	});

	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function textScript(text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script", function (s) {

		// This transport only deals with cross domain requests
		if (s.crossDomain) {
			var script, _callback2;
			return {
				send: function send(_, complete) {
					script = jQuery("<script>").prop({
						charset: s.scriptCharset,
						src: s.url
					}).on("load error", _callback2 = function callback(evt) {
						script.remove();
						_callback2 = null;
						if (evt) {
							complete(evt.type === "error" ? 404 : 200, evt.type);
						}
					});

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild(script[0]);
				},
				abort: function abort() {
					if (_callback2) {
						_callback2();
					}
				}
			};
		}
	});

	var oldCallbacks = [],
	    rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function jsonpCallback() {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		    overwritten,
		    responseContainer,
		    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if (jsonProp || s.dataTypes[0] === "jsonp") {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

			// Insert callback into url or form data
			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			// Force json dataType
			s.dataTypes[0] = "json";

			// Install callback
			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function () {

				// If previous value didn't exist - remove it
				if (overwritten === undefined) {
					jQuery(window).removeProp(callbackName);

					// Otherwise restore preexisting value
				} else {
					window[callbackName] = overwritten;
				}

				// Save back as free
				if (s[callbackName]) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push(callbackName);
				}

				// Call if it was a function and we have a response
				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});

	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = function () {
		var body = document.implementation.createHTMLDocument("").body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	}();

	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function (data, context, keepScripts) {
		if (typeof data !== "string") {
			return [];
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if (!context) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if (support.createHTMLDocument) {
				context = document.implementation.createHTMLDocument("");

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement("base");
				base.href = document.location.href;
				context.head.appendChild(base);
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec(data);
		scripts = !keepScripts && [];

		// Single tag
		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};

	/**
  * Load a url into a page
  */
	jQuery.fn.load = function (url, params, callback) {
		var selector,
		    type,
		    response,
		    self = this,
		    off = url.indexOf(" ");

		if (off > -1) {
			selector = stripAndCollapse(url.slice(off));
			url = url.slice(0, off);
		}

		// If it's a function
		if (jQuery.isFunction(params)) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			}).done(function (responseText) {

				// Save response for use in complete callback
				response = arguments;

				self.html(selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

				// Otherwise use the full result
				responseText);

				// If the request succeeds, this function gets "data", "status", "jqXHR"
				// but they are ignored because response was set above.
				// If it fails, this function gets "jqXHR", "status", "error"
			}).always(callback && function (jqXHR, status) {
				self.each(function () {
					callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
				});
			});
		}

		return this;
	};

	// Attach a bunch of functions for handling common AJAX events
	jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});

	jQuery.expr.pseudos.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};

	jQuery.offset = {
		setOffset: function setOffset(elem, options, i) {
			var curPosition,
			    curLeft,
			    curCSSTop,
			    curTop,
			    curOffset,
			    curCSSLeft,
			    calculatePosition,
			    position = jQuery.css(elem, "position"),
			    curElem = jQuery(elem),
			    props = {};

			// Set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (jQuery.isFunction(options)) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call(elem, i, jQuery.extend({}, curOffset));
			}

			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({
		offset: function offset(options) {

			// Preserve chaining for setter
			if (arguments.length) {
				return options === undefined ? this : this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}

			var doc,
			    docElem,
			    rect,
			    win,
			    elem = this[0];

			if (!elem) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if (!elem.getClientRects().length) {
				return { top: 0, left: 0 };
			}

			rect = elem.getBoundingClientRect();

			doc = elem.ownerDocument;
			docElem = doc.documentElement;
			win = doc.defaultView;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function position() {
			if (!this[0]) {
				return;
			}

			var offsetParent,
			    offset,
			    elem = this[0],
			    parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if (jQuery.css(elem, "position") === "fixed") {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if (!nodeName(offsetParent[0], "html")) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css(offsetParent[0], "borderTopWidth", true),
					left: parentOffset.left + jQuery.css(offsetParent[0], "borderLeftWidth", true)
				};
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function offsetParent() {
			return this.map(function () {
				var offsetParent = this.offsetParent;

				while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = "pageYOffset" === prop;

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {

				// Coalesce documents and windows
				var win;
				if (jQuery.isWindow(elem)) {
					win = elem;
				} else if (elem.nodeType === 9) {
					win = elem.defaultView;
				}

				if (val === undefined) {
					return win ? win[prop] : elem[method];
				}

				if (win) {
					win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length);
		};
	});

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
			if (computed) {
				computed = curCSS(elem, prop);

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
			}
		});
	});

	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (jQuery.isWindow(elem)) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
					}

					// Get document width or height
					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
					}

					return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css(elem, type, extra) :

					// Set width or height on the element
					jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable);
			};
		});
	});

	jQuery.fn.extend({

		bind: function bind(types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function unbind(types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function delegate(selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function undelegate(selector, types, fn) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		}
	});

	jQuery.holdReady = function (hold) {
		if (hold) {
			jQuery.readyWait++;
		} else {
			jQuery.ready(true);
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}

	var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,


	// Map over the $ in case of overwrite
	_$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if (!noGlobal) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)(module)))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Module dependencies.
 */

var url = __webpack_require__(30);
var parser = __webpack_require__(8);
var Manager = __webpack_require__(15);
var debug = __webpack_require__(1)('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup(uri, opts) {
  if ((typeof uri === 'undefined' ? 'undefined' : _typeof(uri)) === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }
  return io.socket(parsed.path, opts);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = __webpack_require__(15);
exports.Socket = __webpack_require__(21);

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module dependencies.
 */

var parseuri = __webpack_require__(12);
var debug = __webpack_require__(1)('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url(uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || global.location;
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : ':' + obj.port);

  return obj;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(33);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0,
      i;

  for (i in namespace) {
    hash = (hash << 5) - hash + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val === 'undefined' ? 'undefined' : _typeof(val);
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = __webpack_require__(36);
var isBuf = __webpack_require__(14);
var toString = Object.prototype.toString;
var withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';
var withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function (packet) {
  var buffers = [];
  var packetData = packet.data;
  var pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return { packet: pack, buffers: buffers };
};

function _deconstructPacket(data, buffers) {
  if (!data) return data;

  if (isBuf(data)) {
    var placeholder = { _placeholder: true, num: buffers.length };
    buffers.push(data);
    return placeholder;
  } else if (isArray(data)) {
    var newData = new Array(data.length);
    for (var i = 0; i < data.length; i++) {
      newData[i] = _deconstructPacket(data[i], buffers);
    }
    return newData;
  } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && !(data instanceof Date)) {
    var newData = {};
    for (var key in data) {
      newData[key] = _deconstructPacket(data[key], buffers);
    }
    return newData;
  }
  return data;
}

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function (packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  packet.attachments = undefined; // no longer useful
  return packet;
};

function _reconstructPacket(data, buffers) {
  if (!data) return data;

  if (data && data._placeholder) {
    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
  } else if (isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _reconstructPacket(data[i], buffers);
    }
  } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
    for (var key in data) {
      data[key] = _reconstructPacket(data[key], buffers);
    }
  }

  return data;
}

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function (data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if (withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function () {
        // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        } else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if (! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) {
      // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && !isBuf(obj)) {
      // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(38);

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(39);

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = __webpack_require__(4);

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Module dependencies.
 */

var transports = __webpack_require__(16);
var Emitter = __webpack_require__(3);
var debug = __webpack_require__(1)('engine.io-client:socket');
var index = __webpack_require__(20);
var parser = __webpack_require__(4);
var parseuri = __webpack_require__(12);
var parsejson = __webpack_require__(51);
var parseqs = __webpack_require__(6);

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket(uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === (typeof uri === 'undefined' ? 'undefined' : _typeof(uri))) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure : global.location && 'https:' === location.protocol;

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname || (global.location ? location.hostname : 'localhost');
  this.port = opts.port || (global.location && location.port ? location.port : this.secure ? 443 : 80);
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.transportOptions = opts.transportOptions || {};
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // other options for Node.js client
  var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global;
  if (freeGlobal.global === freeGlobal) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = __webpack_require__(10);
Socket.transports = __webpack_require__(16);
Socket.parser = __webpack_require__(4);

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // per-transport options
  var options = this.transportOptions[name] || {};

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    query: query,
    socket: this,
    agent: options.agent || this.agent,
    hostname: options.hostname || this.hostname,
    port: options.port || this.port,
    secure: options.secure || this.secure,
    path: options.path || this.path,
    forceJSONP: options.forceJSONP || this.forceJSONP,
    jsonp: options.jsonp || this.jsonp,
    forceBase64: options.forceBase64 || this.forceBase64,
    enablesXDR: options.enablesXDR || this.enablesXDR,
    timestampRequests: options.timestampRequests || this.timestampRequests,
    timestampParam: options.timestampParam || this.timestampParam,
    policyPort: options.policyPort || this.policyPort,
    pfx: options.pfx || this.pfx,
    key: options.key || this.key,
    passphrase: options.passphrase || this.passphrase,
    cert: options.cert || this.cert,
    ca: options.ca || this.ca,
    ciphers: options.ciphers || this.ciphers,
    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
    extraHeaders: options.extraHeaders || this.extraHeaders,
    forceNode: options.forceNode || this.forceNode,
    localAddress: options.localAddress || this.localAddress,
    requestTimeout: options.requestTimeout || this.requestTimeout,
    protocols: options.protocols || void 0
  });

  return transport;
};

function clone(obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport.on('drain', function () {
    self.onDrain();
  }).on('packet', function (packet) {
    self.onPacket(packet);
  }).on('error', function (e) {
    self.onError(e);
  }).on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen() {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport() {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror(err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose() {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose() {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade(to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup() {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(parsejson(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || self.pingInterval + self.pingTimeout);
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close() {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose() {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade() {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module requirements.
 */

var XMLHttpRequest = __webpack_require__(9);
var Polling = __webpack_require__(17);
var Emitter = __webpack_require__(3);
var inherit = __webpack_require__(7);
var debug = __webpack_require__(1)('engine.io-client:polling-xhr');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty() {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR(opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;
  this.extraHeaders = opts.extraHeaders;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = opts.hostname !== global.location.hostname || port !== opts.port;
    this.xs = opts.secure !== isSSL;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request(opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 2) {
          var contentType;
          try {
            contentType = xhr.getResponseHeader('Content-Type');
          } catch (e) {}
          if (contentType === 'application/octet-stream') {
            xhr.responseType = 'arraybuffer';
          }
        }
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (global.document) {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (global.document) {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}
    if (contentType === 'application/octet-stream') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      data = this.xhr.responseText;
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (global.document) {
  if (global.attachEvent) {
    global.attachEvent('onunload', unloadHandler);
  } else if (global.addEventListener) {
    global.addEventListener('beforeunload', unloadHandler, false);
  }
}

function unloadHandler() {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys(obj) {
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function (arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) {
    return arraybuffer.slice(start, end);
  }

  if (start < 0) {
    start += bytes;
  }
  if (end < 0) {
    end += bytes;
  }
  if (end > bytes) {
    end = bytes;
  }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = after;

function after(count, callback, err_cb) {
    var bail = false;
    err_cb = err_cb || noop;
    proxy.count = count;

    return count === 0 ? callback() : proxy;

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times');
        }
        --proxy.count;

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true;
            callback(err);
            // future error callbacks will go to error handler
            callback = err_cb;
        } else if (proxy.count === 0 && !bail) {
            callback(null, result);
        }
    }
}

function noop() {}

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! https://mths.be/utf8js v2.1.2 by @mathias */
;(function (root) {

	// Detect free variables `exports`
	var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports;

	// Detect free variable `module`
	var freeModule = ( false ? 'undefined' : _typeof(module)) == 'object' && module && module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`
	var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) {
					// low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	function checkScalarValue(codePoint, strict) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			if (strict) {
				throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');
			}
			return false;
		}
		return true;
	}
	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
	}

	function encodeCodePoint(codePoint, strict) {
		if ((codePoint & 0xFFFFFF80) == 0) {
			// 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) {
			// 2-byte sequence
			symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
		} else if ((codePoint & 0xFFFF0000) == 0) {
			// 3-byte sequence
			if (!checkScalarValue(codePoint, strict)) {
				codePoint = 0xFFFD;
			}
			symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
			symbol += createByte(codePoint, 6);
		} else if ((codePoint & 0xFFE00000) == 0) {
			// 4-byte sequence
			symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
		return symbol;
	}

	function utf8encode(string, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint, strict);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol(strict) {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			byte2 = readContinuationByte();
			codePoint = (byte1 & 0x1F) << 6 | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;
			if (codePoint >= 0x0800) {
				return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = (byte1 & 0x07) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol(strict)) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	var utf8 = {
		'version': '2.1.2',
		'encode': utf8encode,
		'decode': utf8decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if ("function" == 'function' && _typeof(__webpack_require__(18)) == 'object' && __webpack_require__(18)) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
			return utf8;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && !freeExports.nodeType) {
		if (freeModule) {
			// in Node.js or RingoJS v0.8.0+
			freeModule.exports = utf8;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			for (var key in utf8) {
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.utf8 = utf8;
	}
})(undefined);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)(module), __webpack_require__(0)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function () {
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function (arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
        i,
        len = bytes.length,
        base64 = "";

    for (i = 0; i < len; i += 3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
      base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
      base64 += chars[bytes[i + 2] & 63];
    }

    if (len % 3 === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode = function (base64) {
    var bufferLength = base64.length * 0.75,
        len = base64.length,
        i,
        p = 0,
        encoded1,
        encoded2,
        encoded3,
        encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
        bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i += 4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i + 1)];
      encoded3 = lookup[base64.charCodeAt(i + 2)];
      encoded4 = lookup[base64.charCodeAt(i + 3)];

      bytes[p++] = encoded1 << 2 | encoded2 >> 4;
      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }

    return arraybuffer;
  };
})();

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MSBlobBuilder || global.MozBlobBuilder;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = function () {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch (e) {
    return false;
  }
}();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && function () {
  try {
    var b = new Blob([new Uint8Array([1, 2])]);
    return b.size === 2;
  } catch (e) {
    return false;
  }
}();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  for (var i = 0; i < ary.length; i++) {
    var chunk = ary[i];
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      ary[i] = buf;
    }
  }
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary);

  for (var i = 0; i < ary.length; i++) {
    bb.append(ary[i]);
  }

  return options.type ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  mapArrayBufferViews(ary);
  return new Blob(ary, options || {});
};

module.exports = function () {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
}();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module requirements.
 */

var Polling = __webpack_require__(17);
var inherit = __webpack_require__(7);

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty() {}

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling(opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    if (!global.___eio) global.___eio = [];
    callbacks = global.___eio;
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (global.document && global.addEventListener) {
    global.addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete() {
    initIframe();
    fn();
  }

  function initIframe() {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module dependencies.
 */

var Transport = __webpack_require__(10);
var parser = __webpack_require__(4);
var parseqs = __webpack_require__(6);
var inherit = __webpack_require__(7);
var yeast = __webpack_require__(19);
var debug = __webpack_require__(1)('engine.io-client:websocket');
var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
var NodeWebSocket;
if (typeof window === 'undefined') {
  try {
    NodeWebSocket = __webpack_require__(50);
  } catch (e) {}
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocket = BrowserWebSocket;
if (!WebSocket && typeof window === 'undefined') {
  WebSocket = NodeWebSocket;
}

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS(opts) {
  var forceBase64 = opts && opts.forceBase64;
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  this.protocols = opts.protocols;
  if (!this.usingBrowserWebSocket) {
    WebSocket = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = this.protocols;
  var opts = {
    agent: this.agent,
    perMessageDeflate: this.perMessageDeflate
  };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws = this.usingBrowserWebSocket ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done() {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && ('wss' === schema && Number(this.port) !== 443 || 'ws' === schema && Number(this.port) !== 80)) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 50 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * JSON parse.
 *
 * @see Based on jQuery#parseJSON (MIT) and JSON2
 * @api private
 */

var rvalidchars = /^[\],:{}\s]*$/;
var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
var rtrimLeft = /^\s+/;
var rtrimRight = /\s+$/;

module.exports = function parsejson(data) {
  if ('string' != typeof data || !data) {
    return null;
  }

  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

  // Attempt to parse using the native JSON parser first
  if (global.JSON && JSON.parse) {
    return JSON.parse(data);
  }

  if (rvalidchars.test(data.replace(rvalidescape, '@').replace(rvalidtokens, ']').replace(rvalidbraces, ''))) {
    return new Function('return ' + data)();
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = toArray;

function toArray(list, index) {
    var array = [];

    index = index || 0;

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i];
    }

    return array;
}

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function () {
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand = Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function () {
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function (min) {
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function (max) {
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function (jitter) {
  this.jitter = jitter;
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Player = function Player(name) {
    _classCallCheck(this, Player);

    this.name = name;
    this.number = -1;
};

exports.default = Player;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cell = __webpack_require__(56);

var _cell2 = _interopRequireDefault(_cell);

var _piece = __webpack_require__(73);

var _tile = __webpack_require__(74);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Game = function () {
    function Game(rules, player1, player2) {
        _classCallCheck(this, Game);

        this.rules = rules;
        this.gameLog = [];
        this.player1 = player1;
        this.player1.number = 1;
        this.player2 = player2;
        this.player2.number = 2;

        this.board = this.generateCheckedBoard(8, 8);

        for (var x = 0; x < 8; x++) {
            this.board[1][x].piece = new _piece.Pawn(this.player2);
            this.board[6][x].piece = new _piece.Pawn(this.player1);
        }
        this.board[0][0].piece = new _piece.Rook(this.player2);
        this.board[0][7].piece = new _piece.Rook(this.player2);
        this.board[7][0].piece = new _piece.Rook(this.player1);
        this.board[7][7].piece = new _piece.Rook(this.player1);
        this.board[0][1].piece = new _piece.Knight(this.player2);
        this.board[0][6].piece = new _piece.Knight(this.player2);
        this.board[7][1].piece = new _piece.Knight(this.player1);
        this.board[7][6].piece = new _piece.Knight(this.player1);
        this.board[0][2].piece = new _piece.Bishop(this.player2);
        this.board[0][5].piece = new _piece.Bishop(this.player2);
        this.board[7][2].piece = new _piece.Bishop(this.player1);
        this.board[7][5].piece = new _piece.Bishop(this.player1);
        this.board[0][4].piece = new _piece.Queen(this.player2);
        this.board[7][4].piece = new _piece.Queen(this.player1);
        this.board[0][3].piece = new _piece.King(this.player2);
        this.board[7][3].piece = new _piece.King(this.player1);

        // save coords on cell for easier lookup
        for (var y = 0; y < this.board.length; y++) {
            for (var _x = 0; _x < this.board[y].length; _x++) {
                var cell = this.board[y][_x];
                cell.x = _x;
                cell.y = y;
            }
        }
    }

    // generates a logEntry for a move
    // this logEntry can then be executed by all players


    _createClass(Game, [{
        key: 'prepareMove',
        value: function prepareMove(sourceCell, targetCell) {
            if (!sourceCell.piece) throw 'NoPieceToMove';

            var logEntry = {
                action: 'move',
                movedPieceClass: sourceCell.piece.class,
                source: { x: sourceCell.x, y: sourceCell.y },
                target: { x: targetCell.x, y: targetCell.y }
            };

            if (targetCell.piece) logEntry.killedPieceClass = targetCell.piece.class;

            return logEntry;
        }

        // checks if a move is valid
        // TODO: check with piece class

    }, {
        key: 'checkMove',
        value: function checkMove(logEntry) {
            var sourceCell = this.getCell(logEntry.source);
            var targetCell = this.getCell(logEntry.target);
            if (!sourceCell.piece) throw 'NoPieceToMove';
            if (sourceCell.piece.class !== logEntry.movedPieceClass) throw 'OutOfSyncError: wrong source piece class';
            if (logEntry.killedPieceClass && logEntry.killedPieceClass !== targetCell.piece.class) throw 'OutOfSyncError: wrong killed piece class';
        }
    }, {
        key: 'execute',
        value: function execute(logEntry) {
            if (logEntry.action === 'move') {
                this.checkMove(logEntry);

                var sourceCell = this.getCell(logEntry.source);
                var targetCell = this.getCell(logEntry.target);
                targetCell.piece = sourceCell.piece;
                delete sourceCell.piece;
                targetCell.piece.hasMoved = true;
            }

            this.gameLog.push(logEntry);
        }
    }, {
        key: 'getPossibleMoves',
        value: function getPossibleMoves(cell) {
            return cell.piece.getPossibleMoves(this, cell.x, cell.y);
        }
    }, {
        key: 'getCell',
        value: function getCell(x, y) {
            // pass only the x param to be handled as object: {x: 1, y: 1}
            if (y === undefined) {
                y = x.y;
                x = x.x;
            }

            if (y < 0 || y >= this.board.length) throw "OutsideOfBoard";
            var row = this.board[y];
            if (x < 0 || x >= row.length) throw "OutsideOfBoard";
            return row[x];
        }
    }, {
        key: 'render',
        value: function render() {
            var template = __webpack_require__(75);
            return template({ game: this });
        }
    }, {
        key: 'generateCheckedBoard',
        value: function generateCheckedBoard(width, height) {
            var board = [];
            for (var y = 0; y < height; y++) {
                board[y] = [];
                for (var x = 0; x < width; x++) {
                    board[y][x] = new _cell2.default((x + y) % 2 === 0 ? new _tile.BlackTile() : new _tile.WhiteTile());
                }
            }
            return board;
        }
    }]);

    return Game;
}();

exports.default = Game;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cell = function () {
    function Cell(tile, piece) {
        _classCallCheck(this, Cell);

        this._tile = tile;
        this.piece = piece;
        this.x = -1;
        this.y = -1;
    }

    _createClass(Cell, [{
        key: "render",
        value: function render() {
            var template = __webpack_require__(57);
            var params = { cell: this, classes: this.classes.join(' ') };
            return template(params);
        }
    }, {
        key: "tile",
        get: function get() {
            return this._tile;
        }
    }, {
        key: "classes",
        get: function get() {
            var cls = this.tile.classes;
            if (this.piece) cls.push(this.piece.class);
            return cls;
        }
    }]);

    return Cell;
}();

exports.default = Cell;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(24);
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    var helper;

  return "        <img src=\""
    + container.escapeExpression(((helper = (helper = helpers.image || (depth0 != null ? depth0.image : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"image","hash":{},"data":data}) : helper)))
    + "\" />\r\n";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.escapeExpression, alias3=container.lambda;

  return "<td class=\""
    + alias2(((helper = (helper = helpers.classes || (depth0 != null ? depth0.classes : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"classes","hash":{},"data":data}) : helper)))
    + "\" data-x=\""
    + alias2(alias3(((stack1 = (depth0 != null ? depth0.cell : depth0)) != null ? stack1.x : stack1), depth0))
    + "\" data-y=\""
    + alias2(alias3(((stack1 = (depth0 != null ? depth0.cell : depth0)) != null ? stack1.y : stack1), depth0))
    + "\">\r\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.image : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</td>";
},"useData":true});

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

// istanbul ignore next

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj['default'] = obj;return newObj;
  }
}

var _handlebarsBase = __webpack_require__(25);

var base = _interopRequireWildcard(_handlebarsBase);

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)

var _handlebarsSafeString = __webpack_require__(70);

var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

var _handlebarsException = __webpack_require__(5);

var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

var _handlebarsUtils = __webpack_require__(2);

var Utils = _interopRequireWildcard(_handlebarsUtils);

var _handlebarsRuntime = __webpack_require__(71);

var runtime = _interopRequireWildcard(_handlebarsRuntime);

var _handlebarsNoConflict = __webpack_require__(72);

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
function create() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = _handlebarsSafeString2['default'];
  hb.Exception = _handlebarsException2['default'];
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function (spec) {
    return runtime.template(spec, hb);
  };

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst['default'] = inst;

exports['default'] = inst;
module.exports = exports['default'];

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.registerDefaultHelpers = registerDefaultHelpers;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _helpersBlockHelperMissing = __webpack_require__(60);

var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

var _helpersEach = __webpack_require__(61);

var _helpersEach2 = _interopRequireDefault(_helpersEach);

var _helpersHelperMissing = __webpack_require__(62);

var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

var _helpersIf = __webpack_require__(63);

var _helpersIf2 = _interopRequireDefault(_helpersIf);

var _helpersLog = __webpack_require__(64);

var _helpersLog2 = _interopRequireDefault(_helpersLog);

var _helpersLookup = __webpack_require__(65);

var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

var _helpersWith = __webpack_require__(66);

var _helpersWith2 = _interopRequireDefault(_helpersWith);

function registerDefaultHelpers(instance) {
  _helpersBlockHelperMissing2['default'](instance);
  _helpersEach2['default'](instance);
  _helpersHelperMissing2['default'](instance);
  _helpersIf2['default'](instance);
  _helpersLog2['default'](instance);
  _helpersLookup2['default'](instance);
  _helpersWith2['default'](instance);
}

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(2);

exports['default'] = function (instance) {
  instance.registerHelper('blockHelperMissing', function (context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if (context === true) {
      return fn(this);
    } else if (context === false || context == null) {
      return inverse(this);
    } else if (_utils.isArray(context)) {
      if (context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
        options = { data: data };
      }

      return fn(context, options);
    }
  });
};

module.exports = exports['default'];

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _utils = __webpack_require__(2);

var _exception = __webpack_require__(5);

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('each', function (context, options) {
    if (!options) {
      throw new _exception2['default']('Must pass iterator to #each');
    }

    var fn = options.fn,
        inverse = options.inverse,
        i = 0,
        ret = '',
        data = undefined,
        contextPath = undefined;

    if (options.data && options.ids) {
      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    if (options.data) {
      data = _utils.createFrame(options.data);
    }

    function execIteration(field, index, last) {
      if (data) {
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;

        if (contextPath) {
          data.contextPath = contextPath + field;
        }
      }

      ret = ret + fn(context[field], {
        data: data,
        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
      });
    }

    if (context && (typeof context === 'undefined' ? 'undefined' : _typeof(context)) === 'object') {
      if (_utils.isArray(context)) {
        for (var j = context.length; i < j; i++) {
          if (i in context) {
            execIteration(i, i, i === context.length - 1);
          }
        }
      } else {
        var priorKey = undefined;

        for (var key in context) {
          if (context.hasOwnProperty(key)) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array.
            if (priorKey !== undefined) {
              execIteration(priorKey, i - 1);
            }
            priorKey = key;
            i++;
          }
        }
        if (priorKey !== undefined) {
          execIteration(priorKey, i - 1, true);
        }
      }
    }

    if (i === 0) {
      ret = inverse(this);
    }

    return ret;
  });
};

module.exports = exports['default'];

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _exception = __webpack_require__(5);

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('helperMissing', function () /* [args, ]options */{
    if (arguments.length === 1) {
      // A missing field in a {{foo}} construct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
    }
  });
};

module.exports = exports['default'];

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(2);

exports['default'] = function (instance) {
  instance.registerHelper('if', function (conditional, options) {
    if (_utils.isFunction(conditional)) {
      conditional = conditional.call(this);
    }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function (conditional, options) {
    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
  });
};

module.exports = exports['default'];

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('log', function () /* message, options */{
    var args = [undefined],
        options = arguments[arguments.length - 1];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i]);
    }

    var level = 1;
    if (options.hash.level != null) {
      level = options.hash.level;
    } else if (options.data && options.data.level != null) {
      level = options.data.level;
    }
    args[0] = level;

    instance.log.apply(instance, args);
  });
};

module.exports = exports['default'];

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('lookup', function (obj, field) {
    return obj && obj[field];
  });
};

module.exports = exports['default'];

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(2);

exports['default'] = function (instance) {
  instance.registerHelper('with', function (context, options) {
    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    var fn = options.fn;

    if (!_utils.isEmpty(context)) {
      var data = options.data;
      if (options.data && options.ids) {
        data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
      }

      return fn(context, {
        data: data,
        blockParams: _utils.blockParams([context], [data && data.contextPath])
      });
    } else {
      return options.inverse(this);
    }
  });
};

module.exports = exports['default'];

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.registerDefaultDecorators = registerDefaultDecorators;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _decoratorsInline = __webpack_require__(68);

var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

function registerDefaultDecorators(instance) {
  _decoratorsInline2['default'](instance);
}

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(2);

exports['default'] = function (instance) {
  instance.registerDecorator('inline', function (fn, props, container, options) {
    var ret = fn;
    if (!props.partials) {
      props.partials = {};
      ret = function ret(context, options) {
        // Create a new partials stack frame prior to exec.
        var original = container.partials;
        container.partials = _utils.extend({}, original, props.partials);
        var ret = fn(context, options);
        container.partials = original;
        return ret;
      };
    }

    props.partials[options.args[0]] = options.fn;

    return ret;
  });
};

module.exports = exports['default'];

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(2);

var logger = {
  methodMap: ['debug', 'info', 'warn', 'error'],
  level: 'info',

  // Maps a given level value to the `methodMap` indexes above.
  lookupLevel: function lookupLevel(level) {
    if (typeof level === 'string') {
      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
      if (levelMap >= 0) {
        level = levelMap;
      } else {
        level = parseInt(level, 10);
      }
    }

    return level;
  },

  // Can be overridden in the host environment
  log: function log(level) {
    level = logger.lookupLevel(level);

    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
      var method = logger.methodMap[level];
      if (!console[method]) {
        // eslint-disable-line no-console
        method = 'log';
      }

      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        message[_key - 1] = arguments[_key];
      }

      console[method].apply(console, message); // eslint-disable-line no-console
    }
  }
};

exports['default'] = logger;
module.exports = exports['default'];

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Build out our basic SafeString type


exports.__esModule = true;
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
  return '' + this.string;
};

exports['default'] = SafeString;
module.exports = exports['default'];

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.__esModule = true;
exports.checkRevision = checkRevision;
exports.template = template;
exports.wrapProgram = wrapProgram;
exports.resolvePartial = resolvePartial;
exports.invokePartial = invokePartial;
exports.noop = noop;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

// istanbul ignore next

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj['default'] = obj;return newObj;
  }
}

var _utils = __webpack_require__(2);

var Utils = _interopRequireWildcard(_utils);

var _exception = __webpack_require__(5);

var _exception2 = _interopRequireDefault(_exception);

var _base = __webpack_require__(25);

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = _base.COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
    }
  }
}

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new _exception2['default']('No environment passed to template');
  }
  if (!templateSpec || !templateSpec.main) {
    throw new _exception2['default']('Unknown template object: ' + (typeof templateSpec === 'undefined' ? 'undefined' : _typeof(templateSpec)));
  }

  templateSpec.main.decorator = templateSpec.main_d;

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  function invokePartialWrapper(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
      if (options.ids) {
        options.ids[0] = true;
      }
    }

    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var result = env.VM.invokePartial.call(this, partial, context, options);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, options);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
    }
  }

  // Just add water
  var container = {
    strict: function strict(obj, name) {
      if (!(name in obj)) {
        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
      }
      return obj[name];
    },
    lookup: function lookup(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function lambda(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function fn(i) {
      var ret = templateSpec[i];
      ret.decorator = templateSpec[i + '_d'];
      return ret;
    },

    programs: [],
    program: function program(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
      }
      return programWrapper;
    },

    data: function data(value, depth) {
      while (value && depth--) {
        value = value._parent;
      }
      return value;
    },
    merge: function merge(param, common) {
      var obj = param || common;

      if (param && common && param !== common) {
        obj = Utils.extend({}, common, param);
      }

      return obj;
    },
    // An empty object to use as replacement for null-contexts
    nullContext: Object.seal({}),

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  function ret(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths = undefined,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      if (options.depths) {
        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
      } else {
        depths = [context];
      }
    }

    function main(context /*, options*/) {
      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
    }
    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
    return main(context, options);
  }
  ret.isTop = true;

  ret._setup = function (options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }
      if (templateSpec.usePartial || templateSpec.useDecorators) {
        container.decorators = container.merge(options.decorators, env.decorators);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
      container.decorators = options.decorators;
    }
  };

  ret._child = function (i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new _exception2['default']('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new _exception2['default']('must pass parent depths');
    }

    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  function prog(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var currentDepths = depths;
    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
      currentDepths = [context].concat(depths);
    }

    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
  }

  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

function resolvePartial(partial, context, options) {
  if (!partial) {
    if (options.name === '@partial-block') {
      partial = options.data['partial-block'];
    } else {
      partial = options.partials[options.name];
    }
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

function invokePartial(partial, context, options) {
  // Use the current closure context to save the partial-block if this partial
  var currentPartialBlock = options.data && options.data['partial-block'];
  options.partial = true;
  if (options.ids) {
    options.data.contextPath = options.ids[0] || options.data.contextPath;
  }

  var partialBlock = undefined;
  if (options.fn && options.fn !== noop) {
    (function () {
      options.data = _base.createFrame(options.data);
      // Wrapper function to get access to currentPartialBlock from the closure
      var fn = options.fn;
      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        // Restore the partial-block from the closure for the execution of the block
        // i.e. the part inside the block of the partial call.
        options.data = _base.createFrame(options.data);
        options.data['partial-block'] = currentPartialBlock;
        return fn(context, options);
      };
      if (fn.partials) {
        options.partials = Utils.extend({}, options.partials, fn.partials);
      }
    })();
  }

  if (partial === undefined && partialBlock) {
    partial = partialBlock;
  }

  if (partial === undefined) {
    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
  } else if (partial instanceof Function) {
    return partial(context, options);
  }
}

function noop() {
  return '';
}

function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? _base.createFrame(data) : {};
    data.root = context;
  }
  return data;
}

function executeDecorators(fn, prog, container, depths, data, blockParams) {
  if (fn.decorator) {
    var props = {};
    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
    Utils.extend(prog, props);
  }
  return prog;
}

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* global window */


exports.__esModule = true;

exports['default'] = function (Handlebars) {
  /* istanbul ignore next */
  var root = typeof global !== 'undefined' ? global : window,
      $Handlebars = root.Handlebars;
  /* istanbul ignore next */
  Handlebars.noConflict = function () {
    if (root.Handlebars === Handlebars) {
      root.Handlebars = $Handlebars;
    }
    return Handlebars;
  };
};

module.exports = exports['default'];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var STRAIGHT_DIRECTIONS = [{ x: 1, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }];
var DIAGONAL_DIRECTIONS = [{ x: 1, y: 1 }, { x: -1, y: -1 }, { x: -1, y: 1 }, { x: 1, y: -1 }];
var ALL_DIRECTIONS = [{ x: 1, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }, { x: 1, y: 1 }, { x: -1, y: -1 }, { x: -1, y: 1 }, { x: 1, y: -1 }];
var MOVING_BEHAVIORS = {
    // default: stops at first piece with option to kill an enemy piece
    HITTING: 0,
    // stopping is like hitting but without the option to kill (pawn)
    STOPPING: 1
};

var Piece = function () {
    function Piece(owner, name) {
        _classCallCheck(this, Piece);

        this.owner = owner;
        this._name = name;
        this.hasMoved = false;
    }

    _createClass(Piece, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            throw "NotImplemented";
        }
    }, {
        key: "getMovesInDirection",
        value: function getMovesInDirection(game, x, y, direction) {
            var maxDistance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            var behaviour = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : MOVING_BEHAVIORS.HITTING;

            var pos = { x: x, y: y };
            var moves = [];
            var distance = 0;

            while (true) {
                distance++;
                if (distance > maxDistance) break;

                pos.x += direction.x;
                pos.y += direction.y;
                try {
                    var cell = game.getCell(pos.x, pos.y);
                    if (!cell.tile.passable) break;

                    if (cell.piece) {
                        if (behaviour !== MOVING_BEHAVIORS.STOPPING && cell.piece.owner !== this.owner) moves.push({ x: pos.x, y: pos.y });
                        break;
                    }

                    moves.push({ x: pos.x, y: pos.y });
                } catch (err) {
                    // break if OutsideOfBoard. else its an unexpected error
                    if (err !== "OutsideOfBoard") throw err;
                    break;
                }
            }
            return moves;
        }
    }, {
        key: "getOwnerDirection",
        value: function getOwnerDirection() {
            switch (this.owner.number) {
                case 1:
                    return { x: 0, y: -1 };
                case 2:
                    return { x: 0, y: 1 };
                default:
                    throw 'UnknownOwnerDirection';
            }
        }
    }, {
        key: "name",
        get: function get() {
            return this._name;
        }
    }, {
        key: "class",
        get: function get() {
            throw "NotImplemented";
        }
    }]);

    return Piece;
}();

var BlackWhiteChessPiece = function (_Piece) {
    _inherits(BlackWhiteChessPiece, _Piece);

    function BlackWhiteChessPiece(owner, name, filename) {
        _classCallCheck(this, BlackWhiteChessPiece);

        var _this = _possibleConstructorReturn(this, (BlackWhiteChessPiece.__proto__ || Object.getPrototypeOf(BlackWhiteChessPiece)).call(this, owner, name));

        _this.filename = filename;
        return _this;
    }

    _createClass(BlackWhiteChessPiece, [{
        key: "class",
        get: function get() {
            if (this.owner.number === 1) return "white";
            if (this.owner.number === 2) return "black";
            throw "InvalidOwnerNumber";
        }
    }]);

    return BlackWhiteChessPiece;
}(Piece);

var Pawn = exports.Pawn = function (_BlackWhiteChessPiece) {
    _inherits(Pawn, _BlackWhiteChessPiece);

    function Pawn(owner) {
        _classCallCheck(this, Pawn);

        return _possibleConstructorReturn(this, (Pawn.__proto__ || Object.getPrototypeOf(Pawn)).call(this, owner, "Pawn"));
    }

    _createClass(Pawn, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            var moves = [];

            // a pawn can move two spaces if it hasn't moved yet
            var distance = this.hasMoved ? 1 : 2;

            // move in front
            Array.prototype.push.apply(moves, this.getMovesInDirection(game, x, y, this.getOwnerDirection(), distance, MOVING_BEHAVIORS.STOPPING));

            // diagonal moves - only available if the move can kill an opposing piece
            var hittingMoves = [{ x: 1, y: this.getOwnerDirection().y }, { x: -1, y: this.getOwnerDirection().y }];
            for (var d = 0; d < hittingMoves.length; d++) {
                var possibleHittingMove = this.getMovesInDirection(game, x, y, hittingMoves[d], 1);
                if (possibleHittingMove.length === 0) continue;
                var possibleMove = possibleHittingMove[0];
                // check for opposing piece
                if (game.getCell(possibleMove).piece) moves.push(possibleMove);
            }

            // TODO: en passent - oder o eifach nid..

            return moves;
        }
    }, {
        key: "class",
        get: function get() {
            return 'piece-pawn-' + _get(Pawn.prototype.__proto__ || Object.getPrototypeOf(Pawn.prototype), "class", this);
        }
    }]);

    return Pawn;
}(BlackWhiteChessPiece);

var Rook = exports.Rook = function (_BlackWhiteChessPiece2) {
    _inherits(Rook, _BlackWhiteChessPiece2);

    function Rook(owner) {
        _classCallCheck(this, Rook);

        return _possibleConstructorReturn(this, (Rook.__proto__ || Object.getPrototypeOf(Rook)).call(this, owner, "Rook"));
    }

    _createClass(Rook, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            var moves = [];

            for (var d = 0; d < STRAIGHT_DIRECTIONS.length; d++) {
                Array.prototype.push.apply(moves, this.getMovesInDirection(game, x, y, STRAIGHT_DIRECTIONS[d]));
            }

            return moves;
        }
    }, {
        key: "class",
        get: function get() {
            return 'piece-rook-' + _get(Rook.prototype.__proto__ || Object.getPrototypeOf(Rook.prototype), "class", this);
        }
    }]);

    return Rook;
}(BlackWhiteChessPiece);

var Knight = exports.Knight = function (_BlackWhiteChessPiece3) {
    _inherits(Knight, _BlackWhiteChessPiece3);

    function Knight(owner) {
        _classCallCheck(this, Knight);

        return _possibleConstructorReturn(this, (Knight.__proto__ || Object.getPrototypeOf(Knight)).call(this, owner, "Knight"));
    }

    _createClass(Knight, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            var relativeMoves = [{ x: 2, y: 1 }, { x: 2, y: -1 }, { x: -2, y: 1 }, { x: -2, y: -1 }, { x: 1, y: 2 }, { x: -1, y: 2 }, { x: 1, y: -2 }, { x: -1, y: -2 }];
            var moves = [];

            for (var d = 0; d < relativeMoves.length; d++) {
                Array.prototype.push.apply(moves, this.getMovesInDirection(game, x, y, relativeMoves[d], 1));
            }

            return moves;
        }
    }, {
        key: "class",
        get: function get() {
            return 'piece-knight-' + _get(Knight.prototype.__proto__ || Object.getPrototypeOf(Knight.prototype), "class", this);
        }
    }]);

    return Knight;
}(BlackWhiteChessPiece);

var Bishop = exports.Bishop = function (_BlackWhiteChessPiece4) {
    _inherits(Bishop, _BlackWhiteChessPiece4);

    function Bishop(owner) {
        _classCallCheck(this, Bishop);

        return _possibleConstructorReturn(this, (Bishop.__proto__ || Object.getPrototypeOf(Bishop)).call(this, owner, "Bishop"));
    }

    _createClass(Bishop, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            var moves = [];

            for (var d = 0; d < DIAGONAL_DIRECTIONS.length; d++) {
                Array.prototype.push.apply(moves, this.getMovesInDirection(game, x, y, DIAGONAL_DIRECTIONS[d]));
            }

            return moves;
        }
    }, {
        key: "class",
        get: function get() {
            return 'piece-bishop-' + _get(Bishop.prototype.__proto__ || Object.getPrototypeOf(Bishop.prototype), "class", this);
        }
    }]);

    return Bishop;
}(BlackWhiteChessPiece);

var Queen = exports.Queen = function (_BlackWhiteChessPiece5) {
    _inherits(Queen, _BlackWhiteChessPiece5);

    function Queen(owner) {
        _classCallCheck(this, Queen);

        return _possibleConstructorReturn(this, (Queen.__proto__ || Object.getPrototypeOf(Queen)).call(this, owner, "Queen"));
    }

    _createClass(Queen, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            var moves = [];

            for (var d = 0; d < ALL_DIRECTIONS.length; d++) {
                Array.prototype.push.apply(moves, this.getMovesInDirection(game, x, y, ALL_DIRECTIONS[d]));
            }

            return moves;
        }
    }, {
        key: "class",
        get: function get() {
            return 'piece-queen-' + _get(Queen.prototype.__proto__ || Object.getPrototypeOf(Queen.prototype), "class", this);
        }
    }]);

    return Queen;
}(BlackWhiteChessPiece);

var King = exports.King = function (_BlackWhiteChessPiece6) {
    _inherits(King, _BlackWhiteChessPiece6);

    function King(owner) {
        _classCallCheck(this, King);

        return _possibleConstructorReturn(this, (King.__proto__ || Object.getPrototypeOf(King)).call(this, owner, "King"));
    }

    _createClass(King, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            var moves = [];

            for (var d = 0; d < ALL_DIRECTIONS.length; d++) {
                Array.prototype.push.apply(moves, this.getMovesInDirection(game, x, y, ALL_DIRECTIONS[d], 1));
            }

            return moves;
        }
    }, {
        key: "class",
        get: function get() {
            return 'piece-king-' + _get(King.prototype.__proto__ || Object.getPrototypeOf(King.prototype), "class", this);
        }
    }]);

    return King;
}(BlackWhiteChessPiece);

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Tile = function () {
    function Tile() {
        _classCallCheck(this, Tile);

        this.passable = true;
    }

    _createClass(Tile, [{
        key: "classes",
        get: function get() {
            throw "NotImplemented";
        }
    }]);

    return Tile;
}();

exports.default = Tile;

var BlackTile = exports.BlackTile = function (_Tile) {
    _inherits(BlackTile, _Tile);

    function BlackTile() {
        _classCallCheck(this, BlackTile);

        return _possibleConstructorReturn(this, (BlackTile.__proto__ || Object.getPrototypeOf(BlackTile)).apply(this, arguments));
    }

    _createClass(BlackTile, [{
        key: "classes",
        get: function get() {
            return ["tile-black"];
        }
    }]);

    return BlackTile;
}(Tile);

var WhiteTile = exports.WhiteTile = function (_Tile2) {
    _inherits(WhiteTile, _Tile2);

    function WhiteTile() {
        _classCallCheck(this, WhiteTile);

        return _possibleConstructorReturn(this, (WhiteTile.__proto__ || Object.getPrototypeOf(WhiteTile)).apply(this, arguments));
    }

    _createClass(WhiteTile, [{
        key: "classes",
        get: function get() {
            return ["tile-white"];
        }
    }]);

    return WhiteTile;
}(Tile);

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(24);
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    var stack1;

  return "    <tr>\r\n"
    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{"name":"each","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "    </tr>\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    var stack1;

  return "            "
    + ((stack1 = __default(__webpack_require__(76)).call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{"name":"rendercell","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    return "";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1;

  return "<table id=\"board\">\r\n"
    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? depth0.game : depth0)) != null ? stack1.board : stack1),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</table>";
},"useData":true});

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (cell) {
    return cell.render();
};

/***/ }),
/* 77 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgOGU0YzUwMmE3YmE4MzcxMDIxNmQiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvZXhjZXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXFzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtaW5oZXJpdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIveG1saHR0cHJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXVyaS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvaXMtYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9tYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvZ2FtZW1hc3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2JpbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWNvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy14aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5YnVmZmVyLnNsaWNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hZnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvdXRmOC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWFycmF5YnVmZmVyL2xpYi9iYXNlNjQtYXJyYXlidWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jsb2IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy1qc29ucC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy93ZWJzb2NrZXQuanMiLCJ3ZWJwYWNrOi8vL3dzIChpZ25vcmVkKSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2Vqc29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90by1hcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFja28yL2luZGV4LmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qcy9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2pzL2dhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2pzL2NlbGwuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL3RlbXBsYXRlcy9jZWxsLmhicyIsIndlYnBhY2s6Ly8vLi4vLi4vbGliL2hhbmRsZWJhcnMucnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9lYWNoLmpzIiwid2VicGFjazovLy8uLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2hlbHBlci1taXNzaW5nLmpzIiwid2VicGFjazovLy8uLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2lmLmpzIiwid2VicGFjazovLy8uLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2xvZy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9sb29rdXAuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy9pbmxpbmUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvc2FmZS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qcy9waWVjZS5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvdGlsZS5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvdGVtcGxhdGVzL2JvYXJkLmhicyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvaGVscGVycy9yZW5kZXJjZWxsLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9jc3MvbWFpbi5zY3NzIl0sIm5hbWVzIjpbImciLCJGdW5jdGlvbiIsImV2YWwiLCJlIiwid2luZG93IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJsb2ciLCJmb3JtYXRBcmdzIiwic2F2ZSIsImxvYWQiLCJ1c2VDb2xvcnMiLCJzdG9yYWdlIiwiY2hyb21lIiwibG9jYWwiLCJsb2NhbHN0b3JhZ2UiLCJjb2xvcnMiLCJwcm9jZXNzIiwidHlwZSIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiY29uc29sZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwibWF0Y2giLCJwYXJzZUludCIsIlJlZ0V4cCIsIiQxIiwiZm9ybWF0dGVycyIsImoiLCJ2IiwiSlNPTiIsInN0cmluZ2lmeSIsImVyciIsIm1lc3NhZ2UiLCJhcmdzIiwibmFtZXNwYWNlIiwiaHVtYW5pemUiLCJkaWZmIiwiYyIsImNvbG9yIiwic3BsaWNlIiwiaW5kZXgiLCJsYXN0QyIsInJlcGxhY2UiLCJwcm90b3R5cGUiLCJhcHBseSIsImNhbGwiLCJhcmd1bWVudHMiLCJuYW1lc3BhY2VzIiwicmVtb3ZlSXRlbSIsImRlYnVnIiwiciIsImVudiIsIkRFQlVHIiwiZW5hYmxlIiwibG9jYWxTdG9yYWdlIiwiRW1pdHRlciIsIm9iaiIsIm1peGluIiwia2V5Iiwib24iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJmbiIsIl9jYWxsYmFja3MiLCJwdXNoIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxlbmd0aCIsImNhbGxiYWNrcyIsImNiIiwiaSIsImVtaXQiLCJzbGljZSIsImxlbiIsImxpc3RlbmVycyIsImhhc0xpc3RlbmVycyIsImtleXMiLCJoYXNCaW5hcnkiLCJzbGljZUJ1ZmZlciIsImFmdGVyIiwidXRmOCIsImJhc2U2NGVuY29kZXIiLCJnbG9iYWwiLCJBcnJheUJ1ZmZlciIsImlzQW5kcm9pZCIsInRlc3QiLCJpc1BoYW50b21KUyIsImRvbnRTZW5kQmxvYnMiLCJwcm90b2NvbCIsInBhY2tldHMiLCJvcGVuIiwiY2xvc2UiLCJwaW5nIiwicG9uZyIsInVwZ3JhZGUiLCJub29wIiwicGFja2V0c2xpc3QiLCJkYXRhIiwiQmxvYiIsImVuY29kZVBhY2tldCIsInBhY2tldCIsInN1cHBvcnRzQmluYXJ5IiwidXRmOGVuY29kZSIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwiYnVmZmVyIiwiZW5jb2RlQXJyYXlCdWZmZXIiLCJlbmNvZGVCbG9iIiwiYmFzZTY0IiwiZW5jb2RlQmFzZTY0T2JqZWN0IiwiZW5jb2RlZCIsImVuY29kZSIsIlN0cmluZyIsInN0cmljdCIsImVuY29kZUJhc2U2NFBhY2tldCIsImNvbnRlbnRBcnJheSIsIlVpbnQ4QXJyYXkiLCJyZXN1bHRCdWZmZXIiLCJieXRlTGVuZ3RoIiwiZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIiLCJmciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZXN1bHQiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJiNjQiLCJzcGxpdCIsInJlYWRBc0RhdGFVUkwiLCJiNjRkYXRhIiwiZnJvbUNoYXJDb2RlIiwidHlwZWQiLCJiYXNpYyIsIkFycmF5IiwiYnRvYSIsImRlY29kZVBhY2tldCIsImJpbmFyeVR5cGUiLCJ1dGY4ZGVjb2RlIiwiY2hhckF0IiwiZGVjb2RlQmFzZTY0UGFja2V0Iiwic3Vic3RyIiwidHJ5RGVjb2RlIiwiTnVtYmVyIiwic3Vic3RyaW5nIiwiYXNBcnJheSIsInJlc3QiLCJkZWNvZGUiLCJtc2ciLCJlbmNvZGVQYXlsb2FkIiwiaXNCaW5hcnkiLCJlbmNvZGVQYXlsb2FkQXNCbG9iIiwiZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIiLCJzZXRMZW5ndGhIZWFkZXIiLCJlbmNvZGVPbmUiLCJkb25lQ2FsbGJhY2siLCJtYXAiLCJyZXN1bHRzIiwiam9pbiIsImFyeSIsImVhY2giLCJkb25lIiwibmV4dCIsImVhY2hXaXRoSW5kZXgiLCJlbCIsImVycm9yIiwiZGVjb2RlUGF5bG9hZCIsImRlY29kZVBheWxvYWRBc0JpbmFyeSIsIm4iLCJsIiwiY2hyIiwicmV0IiwiZW5jb2RlZFBhY2tldHMiLCJ0b3RhbExlbmd0aCIsInJlZHVjZSIsImFjYyIsInAiLCJ0b1N0cmluZyIsInJlc3VsdEFycmF5IiwiYnVmZmVySW5kZXgiLCJmb3JFYWNoIiwiaXNTdHJpbmciLCJhYiIsInZpZXciLCJjaGFyQ29kZUF0IiwibGVuU3RyIiwiYmluYXJ5SWRlbnRpZmllciIsInNpemUiLCJsZW5ndGhBcnkiLCJidWZmZXJUYWlsIiwiYnVmZmVycyIsInRhaWxBcnJheSIsIm1zZ0xlbmd0aCIsInRvdGFsIiwic3RyIiwiaGFzT3duUHJvcGVydHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsImEiLCJiIiwiY29uc3RydWN0b3IiLCJoYXNCaW4iLCJiaW5hcnkiLCJpc0J1ZiIsInR5cGVzIiwiQ09OTkVDVCIsIkRJU0NPTk5FQ1QiLCJFVkVOVCIsIkFDSyIsIkVSUk9SIiwiQklOQVJZX0VWRU5UIiwiQklOQVJZX0FDSyIsIkVuY29kZXIiLCJEZWNvZGVyIiwiZW5jb2RlQXNCaW5hcnkiLCJlbmNvZGluZyIsImVuY29kZUFzU3RyaW5nIiwiYXR0YWNobWVudHMiLCJuc3AiLCJpZCIsIndyaXRlRW5jb2RpbmciLCJibG9ibGVzc0RhdGEiLCJkZWNvbnN0cnVjdGlvbiIsImRlY29uc3RydWN0UGFja2V0IiwicGFjayIsInVuc2hpZnQiLCJyZW1vdmVCbG9icyIsInJlY29uc3RydWN0b3IiLCJhZGQiLCJkZWNvZGVTdHJpbmciLCJCaW5hcnlSZWNvbnN0cnVjdG9yIiwicmVjb25QYWNrIiwiRXJyb3IiLCJ0YWtlQmluYXJ5RGF0YSIsImJ1ZiIsInRyeVBhcnNlIiwicGFyc2UiLCJkZXN0cm95IiwiZmluaXNoZWRSZWNvbnN0cnVjdGlvbiIsImJpbkRhdGEiLCJyZWNvbnN0cnVjdFBhY2tldCIsImhhc0NPUlMiLCJvcHRzIiwieGRvbWFpbiIsInhzY2hlbWUiLCJlbmFibGVzWERSIiwiWE1MSHR0cFJlcXVlc3QiLCJYRG9tYWluUmVxdWVzdCIsImNvbmNhdCIsInBhcnNlciIsIlRyYW5zcG9ydCIsInBhdGgiLCJob3N0bmFtZSIsInBvcnQiLCJzZWN1cmUiLCJxdWVyeSIsInRpbWVzdGFtcFBhcmFtIiwidGltZXN0YW1wUmVxdWVzdHMiLCJyZWFkeVN0YXRlIiwiYWdlbnQiLCJzb2NrZXQiLCJwZngiLCJwYXNzcGhyYXNlIiwiY2VydCIsImNhIiwiY2lwaGVycyIsInJlamVjdFVuYXV0aG9yaXplZCIsImZvcmNlTm9kZSIsImV4dHJhSGVhZGVycyIsImxvY2FsQWRkcmVzcyIsIm9uRXJyb3IiLCJkZXNjIiwiZGVzY3JpcHRpb24iLCJkb09wZW4iLCJkb0Nsb3NlIiwib25DbG9zZSIsInNlbmQiLCJ3cml0ZSIsIm9uT3BlbiIsIndyaXRhYmxlIiwib25EYXRhIiwib25QYWNrZXQiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImNoaWxkcmVuIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicmUiLCJwYXJ0cyIsInBhcnNldXJpIiwic3JjIiwiaW5kZXhPZiIsIm0iLCJleGVjIiwidXJpIiwic291cmNlIiwiaG9zdCIsImF1dGhvcml0eSIsImlwdjZ1cmkiLCJpc0FycmF5Iiwid2l0aE5hdGl2ZUJsb2IiLCJ3aXRoTmF0aXZlRmlsZSIsIkZpbGUiLCJCdWZmZXIiLCJpc0J1ZmZlciIsInRvSlNPTiIsImVpbyIsIlNvY2tldCIsImJpbmQiLCJCYWNrb2ZmIiwiaGFzIiwiTWFuYWdlciIsIm5zcHMiLCJzdWJzIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJJbmZpbml0eSIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsIm1pbiIsIm1heCIsImppdHRlciIsInRpbWVvdXQiLCJjb25uZWN0aW5nIiwibGFzdFBpbmciLCJwYWNrZXRCdWZmZXIiLCJfcGFyc2VyIiwiZW5jb2RlciIsImRlY29kZXIiLCJhdXRvQ29ubmVjdCIsImVtaXRBbGwiLCJ1cGRhdGVTb2NrZXRJZHMiLCJnZW5lcmF0ZUlkIiwiZW5naW5lIiwiX3JlY29ubmVjdGlvbiIsIl9yZWNvbm5lY3Rpb25BdHRlbXB0cyIsIl9yZWNvbm5lY3Rpb25EZWxheSIsInNldE1pbiIsIl9yYW5kb21pemF0aW9uRmFjdG9yIiwic2V0Sml0dGVyIiwiX3JlY29ubmVjdGlvbkRlbGF5TWF4Iiwic2V0TWF4IiwiX3RpbWVvdXQiLCJtYXliZVJlY29ubmVjdE9uT3BlbiIsInJlY29ubmVjdGluZyIsImF0dGVtcHRzIiwicmVjb25uZWN0IiwiY29ubmVjdCIsInNlbGYiLCJza2lwUmVjb25uZWN0Iiwib3BlblN1YiIsIm9ub3BlbiIsImVycm9yU3ViIiwiY2xlYW51cCIsInRpbWVyIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsIm9ucGluZyIsIkRhdGUiLCJvbnBvbmciLCJvbmRhdGEiLCJvbmRlY29kZWQiLCJvbmVycm9yIiwib25Db25uZWN0aW5nIiwib3B0aW9ucyIsInByb2Nlc3NQYWNrZXRRdWV1ZSIsInNoaWZ0Iiwic3Vic0xlbmd0aCIsInN1YiIsImRpc2Nvbm5lY3QiLCJyZXNldCIsIm9uY2xvc2UiLCJyZWFzb24iLCJkZWxheSIsImR1cmF0aW9uIiwib25yZWNvbm5lY3QiLCJhdHRlbXB0IiwiWEhSIiwiSlNPTlAiLCJ3ZWJzb2NrZXQiLCJwb2xsaW5nIiwieGhyIiwieGQiLCJ4cyIsImpzb25wIiwibG9jYXRpb24iLCJpc1NTTCIsImZvcmNlSlNPTlAiLCJwYXJzZXFzIiwiaW5oZXJpdCIsInllYXN0IiwiUG9sbGluZyIsImhhc1hIUjIiLCJyZXNwb25zZVR5cGUiLCJmb3JjZUJhc2U2NCIsIm5hbWUiLCJwb2xsIiwicGF1c2UiLCJvblBhdXNlIiwiZG9Qb2xsIiwiY2FsbGJhY2tmbiIsImRvV3JpdGUiLCJzY2hlbWEiLCJzaWQiLCJpcHY2IiwiYWxwaGFiZXQiLCJzZWVkIiwicHJldiIsIm51bSIsIk1hdGgiLCJmbG9vciIsImRlY29kZWQiLCJub3ciLCJhcnIiLCJ0b0FycmF5IiwiZXZlbnRzIiwiY29ubmVjdF9lcnJvciIsImNvbm5lY3RfdGltZW91dCIsInJlY29ubmVjdF9hdHRlbXB0IiwicmVjb25uZWN0X2ZhaWxlZCIsInJlY29ubmVjdF9lcnJvciIsImlvIiwianNvbiIsImlkcyIsImFja3MiLCJyZWNlaXZlQnVmZmVyIiwic2VuZEJ1ZmZlciIsImNvbm5lY3RlZCIsImRpc2Nvbm5lY3RlZCIsInN1YkV2ZW50cyIsImV2IiwiY29tcHJlc3MiLCJmbGFncyIsInBvcCIsIm9ucGFja2V0Iiwib25jb25uZWN0Iiwib25ldmVudCIsIm9uYWNrIiwib25kaXNjb25uZWN0IiwiYWNrIiwic2VudCIsImVtaXRCdWZmZXJlZCIsIkdhbWVtYXN0ZXIiLCJhZG1pbiIsImxvY2FsUGxheWVyIiwicGxheWVyMiIsImdhbWUiLCIkIiwiYXBwZW5kIiwicmVuZGVyIiwiZ20iLCJoYW5kbGVDbGljayIsImdldENlbGwiLCJleGVjdXRlIiwiZXhlY3V0ZUFjdGlvbiIsImNlbGwiLCJnZXRqcUNlbGwiLCJoYXNDbGFzcyIsInNvdXJjZUpxQ2VsbCIsInNvdXJjZUNlbGwiLCJsb2dFbnRyeSIsInByZXBhcmVNb3ZlIiwiZGVzZWxlY3RQaWVjZSIsInBpZWNlIiwib3duZXIiLCJzZWxlY3RQaWVjZSIsImFjdGlvbiIsInRhcmdldEpxQ2VsbCIsInRhcmdldCIsInJlbW92ZUNsYXNzIiwibW92ZWRQaWVjZUNsYXNzIiwia2lsbGVkUGllY2VDbGFzcyIsImFkZENsYXNzIiwianFjZWxsIiwieCIsInkiLCJib2FyZCIsInBvc3NpYmxlTW92ZXMiLCJnZXRQb3NzaWJsZU1vdmVzIiwibW92ZSIsImZhY3RvcnkiLCJ3Iiwibm9HbG9iYWwiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiY2xhc3MydHlwZSIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidmVyc2lvbiIsImpRdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImluaXQiLCJydHJpbSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJqcXVlcnkiLCJwdXNoU3RhY2siLCJlbGVtcyIsIm1lcmdlIiwicHJldk9iamVjdCIsImVsZW0iLCJmaXJzdCIsImVxIiwibGFzdCIsImVuZCIsInNvcnQiLCJleHRlbmQiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImRlZXAiLCJpc0Z1bmN0aW9uIiwiaXNQbGFpbk9iamVjdCIsImV4cGFuZG8iLCJyYW5kb20iLCJpc1JlYWR5IiwiaXNXaW5kb3ciLCJpc051bWVyaWMiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJwcm90byIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsImNhbWVsQ2FzZSIsInN0cmluZyIsImlzQXJyYXlMaWtlIiwidHJpbSIsIm1ha2VBcnJheSIsImluQXJyYXkiLCJzZWNvbmQiLCJncmVwIiwiaW52ZXJ0IiwiY2FsbGJhY2tJbnZlcnNlIiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwidmFsdWUiLCJndWlkIiwicHJveHkiLCJ0bXAiLCJTeW1ib2wiLCJpdGVyYXRvciIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJzb3J0T3JkZXIiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsInVubG9hZEhhbmRsZXIiLCJkaXNhYmxlZEFuY2VzdG9yIiwiYWRkQ29tYmluYXRvciIsImRpc2FibGVkIiwiZGlyIiwiY2hpbGROb2RlcyIsIm5vZGVUeXBlIiwiZWxzIiwibmlkIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwibm9kZU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b1NlbGVjdG9yIiwidGVzdENvbnRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5vZGUiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsImlubmVySFRNTCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwidmFsIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInRva2VucyIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwibXVsdGlwbGVDb250ZXh0cyIsImNvbnRleHRzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyaXNTaW1wbGUiLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJub3QiLCJyb290alF1ZXJ5Iiwicm9vdCIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNvbnRlbnRzIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkQmFjayIsInNpYmxpbmciLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsImNyZWF0ZU9wdGlvbnMiLCJvYmplY3QiLCJmbGFnIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZW1wdHkiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiSWRlbnRpdHkiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIndhcm4iLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNhdGNoIiwicmVhZHlXYWl0Iiwid2FpdCIsImNvbXBsZXRlZCIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIkRhdGEiLCJ1aWQiLCJjb25maWd1cmFibGUiLCJzZXQiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZ2V0RGF0YSIsImRhdGFBdHRyIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJkaXNwbGF5IiwiY3NzIiwic3dhcCIsIm9sZCIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0Iiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsImNyZWF0ZVRleHROb2RlIiwiaHRtbFByZWZpbHRlciIsImRpdiIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsIm9uZSIsIm9yaWdGbiIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiZml4IiwiaGFuZGxlclF1ZXVlIiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImJ1dHRvbiIsImFkZFByb3AiLCJob29rIiwiRXZlbnQiLCJvcmlnaW5hbEV2ZW50Iiwibm9CdWJibGUiLCJmb2N1cyIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicnNjcmlwdFR5cGVNYXNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJtYXJnaW4iLCJybnVtbm9ucHgiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjc3NUZXh0IiwiY29udGFpbmVyIiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwibWFyZ2luTGVmdCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwid2lkdGgiLCJtYXJnaW5SaWdodCIsInBpeGVsTWFyZ2luUmlnaHRWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJwb3NpdGlvbiIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BOYW1lIiwiY2FwTmFtZSIsImZpbmFsUHJvcE5hbWUiLCJjc3NQcm9wcyIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsImNzc0hvb2tzIiwib3BhY2l0eSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsIlR3ZWVuIiwiZWFzaW5nIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwiZGVmYXVsdFByZWZpbHRlciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiYW5pbSIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwiY29tcGxldGUiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsInRpbWUiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJib29sIiwiYXR0ck5hbWVzIiwiZ2V0dGVyIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJmb2N1c2luIiwiYXR0YWNoZXMiLCJub25jZSIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInMiLCJ2YWx1ZU9yRnVuY3Rpb24iLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicmxvY2FsUHJvdG9jb2wiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwibmF0aXZlU3RhdHVzVGV4dCIsIm1vZGlmaWVkIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInhoclN1Y2Nlc3NTdGF0dXMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25hYm9ydCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVGV4dCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiZGVmaW5lIiwiX2pRdWVyeSIsIl8kIiwibm9Db25mbGljdCIsImxvb2t1cCIsIm1hbmFnZXJzIiwic2FtZU5hbWVzcGFjZSIsIm5ld0Nvbm5lY3Rpb24iLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsImxvYyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibmV4dFRpY2siLCJJdGVtIiwiYXJyYXkiLCJ0aXRsZSIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsImNyZWF0ZURlYnVnIiwiY29lcmNlIiwiZW5hYmxlZCIsIm5hbWVzIiwic2tpcHMiLCJwcmV2VGltZSIsInNlbGVjdENvbG9yIiwiYWJzIiwiY3VyciIsIm1zIiwiZm9ybWF0IiwiZm9ybWF0dGVyIiwibG9nRm4iLCJoIiwiZCIsImxvbmciLCJmbXRMb25nIiwiZm10U2hvcnQiLCJyb3VuZCIsInBsdXJhbCIsImNlaWwiLCJwYWNrZXREYXRhIiwiX2RlY29uc3RydWN0UGFja2V0IiwicGxhY2Vob2xkZXIiLCJfcGxhY2Vob2xkZXIiLCJuZXdEYXRhIiwiX3JlY29uc3RydWN0UGFja2V0IiwiX3JlbW92ZUJsb2JzIiwiY3VyS2V5IiwiY29udGFpbmluZ09iamVjdCIsInBlbmRpbmdCbG9icyIsImZpbGVSZWFkZXIiLCJwYXJzZWpzb24iLCJ0cmFuc3BvcnRPcHRpb25zIiwid3JpdGVCdWZmZXIiLCJwcmV2QnVmZmVyTGVuIiwicG9saWN5UG9ydCIsInJlbWVtYmVyVXBncmFkZSIsIm9ubHlCaW5hcnlVcGdyYWRlcyIsInBlck1lc3NhZ2VEZWZsYXRlIiwidGhyZXNob2xkIiwiZnJlZUdsb2JhbCIsInVwZ3JhZGVzIiwicGluZ0ludGVydmFsIiwicGluZ1RpbWVvdXQiLCJwaW5nSW50ZXJ2YWxUaW1lciIsInBpbmdUaW1lb3V0VGltZXIiLCJwcmlvcldlYnNvY2tldFN1Y2Nlc3MiLCJjcmVhdGVUcmFuc3BvcnQiLCJFSU8iLCJyZXF1ZXN0VGltZW91dCIsInByb3RvY29scyIsIm8iLCJzZXRUcmFuc3BvcnQiLCJvbkRyYWluIiwicHJvYmUiLCJmYWlsZWQiLCJvblRyYW5zcG9ydE9wZW4iLCJ1cGdyYWRlTG9zZXNCaW5hcnkiLCJ1cGdyYWRpbmciLCJmbHVzaCIsImZyZWV6ZVRyYW5zcG9ydCIsIm9uVHJhbnNwb3J0Q2xvc2UiLCJvbnVwZ3JhZGUiLCJvbkhhbmRzaGFrZSIsInNldFBpbmciLCJmaWx0ZXJVcGdyYWRlcyIsIm9uSGVhcnRiZWF0Iiwic2VuZFBhY2tldCIsIndhaXRGb3JVcGdyYWRlIiwiY2xlYW51cEFuZENsb3NlIiwiZmlsdGVyZWRVcGdyYWRlcyIsIlJlcXVlc3QiLCJyZXF1ZXN0IiwicmVxIiwic2VuZFhociIsInBvbGxYaHIiLCJjcmVhdGUiLCJzZXREaXNhYmxlSGVhZGVyQ2hlY2siLCJ3aXRoQ3JlZGVudGlhbHMiLCJoYXNYRFIiLCJvbkxvYWQiLCJyZXF1ZXN0c0NvdW50IiwicmVxdWVzdHMiLCJvblN1Y2Nlc3MiLCJmcm9tRXJyb3IiLCJhcnJheWJ1ZmZlciIsImJ5dGVzIiwiYWJ2IiwiaWkiLCJlcnJfY2IiLCJiYWlsIiwiZnJlZUV4cG9ydHMiLCJmcmVlTW9kdWxlIiwic3RyaW5nRnJvbUNoYXJDb2RlIiwidWNzMmRlY29kZSIsIm91dHB1dCIsImNvdW50ZXIiLCJ1Y3MyZW5jb2RlIiwiY2hlY2tTY2FsYXJWYWx1ZSIsImNvZGVQb2ludCIsImNyZWF0ZUJ5dGUiLCJlbmNvZGVDb2RlUG9pbnQiLCJzeW1ib2wiLCJjb2RlUG9pbnRzIiwiYnl0ZVN0cmluZyIsInJlYWRDb250aW51YXRpb25CeXRlIiwiYnl0ZUluZGV4IiwiYnl0ZUNvdW50IiwiY29udGludWF0aW9uQnl0ZSIsImJ5dGVBcnJheSIsImRlY29kZVN5bWJvbCIsImJ5dGUxIiwiYnl0ZTIiLCJieXRlMyIsImJ5dGU0IiwiY2hhcnMiLCJidWZmZXJMZW5ndGgiLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJibG9iU3VwcG9ydGVkIiwiYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3IiwiYmxvYkJ1aWxkZXJTdXBwb3J0ZWQiLCJnZXRCbG9iIiwibWFwQXJyYXlCdWZmZXJWaWV3cyIsImNodW5rIiwiYnl0ZU9mZnNldCIsIkJsb2JCdWlsZGVyQ29uc3RydWN0b3IiLCJiYiIsIkJsb2JDb25zdHJ1Y3RvciIsIkpTT05QUG9sbGluZyIsInJOZXdsaW5lIiwickVzY2FwZWROZXdsaW5lIiwiX19fZWlvIiwiZm9ybSIsImlmcmFtZSIsImluc2VydEF0IiwiaXNVQWdlY2tvIiwiYXJlYSIsImlmcmFtZUlkIiwiaW5pdElmcmFtZSIsIkJyb3dzZXJXZWJTb2NrZXQiLCJXZWJTb2NrZXQiLCJNb3pXZWJTb2NrZXQiLCJOb2RlV2ViU29ja2V0IiwiV1MiLCJ1c2luZ0Jyb3dzZXJXZWJTb2NrZXQiLCJ3cyIsInN1cHBvcnRzIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJvbm1lc3NhZ2UiLCJydmFsaWRjaGFycyIsInJ2YWxpZGVzY2FwZSIsInJ2YWxpZHRva2VucyIsInJ2YWxpZGJyYWNlcyIsInJ0cmltTGVmdCIsInJ0cmltUmlnaHQiLCJmYWN0b3IiLCJwb3ciLCJyYW5kIiwiZGV2aWF0aW9uIiwiUGxheWVyIiwibnVtYmVyIiwiR2FtZSIsInJ1bGVzIiwicGxheWVyMSIsImdhbWVMb2ciLCJnZW5lcmF0ZUNoZWNrZWRCb2FyZCIsInRhcmdldENlbGwiLCJjbGFzcyIsImNoZWNrTW92ZSIsImhhc01vdmVkIiwicm93IiwidGVtcGxhdGUiLCJDZWxsIiwidGlsZSIsIl90aWxlIiwiY2xzIiwiU1RSQUlHSFRfRElSRUNUSU9OUyIsIkRJQUdPTkFMX0RJUkVDVElPTlMiLCJBTExfRElSRUNUSU9OUyIsIk1PVklOR19CRUhBVklPUlMiLCJISVRUSU5HIiwiU1RPUFBJTkciLCJQaWVjZSIsIl9uYW1lIiwiZGlyZWN0aW9uIiwibWF4RGlzdGFuY2UiLCJiZWhhdmlvdXIiLCJtb3ZlcyIsImRpc3RhbmNlIiwicGFzc2FibGUiLCJCbGFja1doaXRlQ2hlc3NQaWVjZSIsImZpbGVuYW1lIiwiUGF3biIsImdldE1vdmVzSW5EaXJlY3Rpb24iLCJnZXRPd25lckRpcmVjdGlvbiIsImhpdHRpbmdNb3ZlcyIsInBvc3NpYmxlSGl0dGluZ01vdmUiLCJwb3NzaWJsZU1vdmUiLCJSb29rIiwiS25pZ2h0IiwicmVsYXRpdmVNb3ZlcyIsIkJpc2hvcCIsIlF1ZWVuIiwiS2luZyIsIlRpbGUiLCJCbGFja1RpbGUiLCJXaGl0ZVRpbGUiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7O0FDN0RBLElBQUlBLENBQUo7O0FBRUE7QUFDQUEsSUFBSyxZQUFXO0FBQ2YsUUFBTyxJQUFQO0FBQ0EsQ0FGRyxFQUFKOztBQUlBLElBQUk7QUFDSDtBQUNBQSxLQUFJQSxLQUFLQyxTQUFTLGFBQVQsR0FBTCxJQUFrQyxDQUFDLEdBQUVDLElBQUgsRUFBUyxNQUFULENBQXRDO0FBQ0EsQ0FIRCxDQUdFLE9BQU1DLENB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QUFLTSxtQkFBTCxDQUF5QjV2QyxJQUF6QixFQUErQjRCLENBQS9CLEVBQWtDQyxDQUFsQyxFQUFxQ2d0QyxlQUFlNUssQ0FBZixDQUFyQyxFQUF3RCxDQUF4RCxDQUFsQztBQUNIOztBQUVELG1CQUFPcUwsS0FBUDtBQUNIOzs7NEJBWlc7QUFDUixtQkFBTyxzR0FBUDtBQUNIOzs7O0VBUHFCRyxvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lDdk9MYyxJO0FBQ2pCLG9CQUFjO0FBQUE7O0FBQ1YsYUFBS2YsUUFBTCxHQUFnQixJQUFoQjtBQUNIOzs7OzRCQUVhO0FBQ1Ysa0JBQU0sZ0JBQU47QUFDSDs7Ozs7O2tCQVBnQmUsSTs7SUFVUkMsUyxXQUFBQSxTOzs7Ozs7Ozs7Ozs0QkFDSztBQUNWLG1CQUFPLENBQUMsWUFBRCxDQUFQO0FBQ0g7Ozs7RUFIMEJELEk7O0lBTWxCRSxTLFdBQUFBLFM7Ozs7Ozs7Ozs7OzRCQUNLO0FBQ1YsbUJBQU8sQ0FBQyxZQUFELENBQVA7QUFDSDs7OztFQUgwQkYsSTs7Ozs7O0FDaEIvQjtBQUNBLHlCQUF5Qix1REFBdUQ7QUFDaEYsaUVBQWlFO0FBQ2pFOztBQUVBO0FBQ0EseUZBQXlGLFVBQVUsdUJBQXVCLHlFQUF5RTtBQUNuTTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBLCtHQUFpSyxVQUFVLDZCQUE2Qix5RUFBeUU7QUFDalI7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSx5RkFBeUYsd0ZBQXdGLHVCQUF1Qix5RUFBeUU7QUFDalI7QUFDQSxDQUFDLGdCQUFnQixFOzs7Ozs7Ozs7QUN0QmpCcHRELE9BQU9DLE9BQVAsR0FBaUIsVUFBU3FkLElBQVQsRUFBZTtBQUM1QixXQUFPQSxLQUFLTixNQUFMLEVBQVA7QUFDSCxDQUZELEM7Ozs7OztBQ0FBLHlDIiwiZmlsZSI6ImFwcC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyNik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgOGU0YzUwMmE3YmE4MzcxMDIxNmQiLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnbGlnaHRzZWFncmVlbicsXG4gICdmb3Jlc3RncmVlbicsXG4gICdnb2xkZW5yb2QnLFxuICAnZG9kZ2VyYmx1ZScsXG4gICdkYXJrb3JjaGlkJyxcbiAgJ2NyaW1zb24nXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh3aW5kb3cgJiYgd2luZG93LnByb2Nlc3MgJiYgd2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuIChkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAod2luZG93ICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAobmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgIChuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnIubWVzc2FnZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm47XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKVxuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cblxuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJjb25zdCBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG5jb25zdCBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG4gICAgICBwb3NzaWJsZSA9IC9bJjw+XCInYD1dLztcblxuZnVuY3Rpb24gZXNjYXBlQ2hhcihjaHIpIHtcbiAgcmV0dXJuIGVzY2FwZVtjaHJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iai8qICwgLi4uc291cmNlICovKSB7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbaV0sIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgbGV0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gU291cmNlZCBmcm9tIGxvZGFzaFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL1xubGV0IGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcbn1cbmV4cG9ydCB7aXNGdW5jdGlvbn07XG4vKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpID8gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScgOiBmYWxzZTtcbn07XG5cbi8vIE9sZGVyIElFIHZlcnNpb25zIGRvIG5vdCBkaXJlY3RseSBzdXBwb3J0IGluZGV4T2Ygc28gd2UgbXVzdCBpbXBsZW1lbnQgb3VyIG93biwgc2FkbHkuXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkgeyByZXR1cm4gc3RyaW5nOyB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZyYW1lKG9iamVjdCkge1xuICBsZXQgZnJhbWUgPSBleHRlbmQoe30sIG9iamVjdCk7XG4gIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XG4gIHJldHVybiBmcmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG4gIHBhcmFtcy5wYXRoID0gaWRzO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ29udGV4dFBhdGgoY29udGV4dFBhdGgsIGlkKSB7XG4gIHJldHVybiAoY29udGV4dFBhdGggPyBjb250ZXh0UGF0aCArICcuJyA6ICcnKSArIGlkO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIiwiXHJcbi8qKlxyXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxyXG4gKi9cclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XHJcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XHJcbn07XHJcblxyXG4vKipcclxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1peGluKG9iaikge1xyXG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xyXG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub24gPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxyXG4gICAgLnB1c2goZm4pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxyXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICBmdW5jdGlvbiBvbigpIHtcclxuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XHJcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgb24uZm4gPSBmbjtcclxuICB0aGlzLm9uKGV2ZW50LCBvbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcclxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICAvLyBhbGxcclxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gc3BlY2lmaWMgZXZlbnRcclxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XHJcblxyXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcclxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcclxuICB2YXIgY2I7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcclxuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtNaXhlZH0gLi4uXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1lbWl0dGVyL2luZGV4LmpzIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG52YXIgaGFzQmluYXJ5ID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcbnZhciBzbGljZUJ1ZmZlciA9IHJlcXVpcmUoJ2FycmF5YnVmZmVyLnNsaWNlJyk7XG52YXIgYWZ0ZXIgPSByZXF1aXJlKCdhZnRlcicpO1xudmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTtcblxudmFyIGJhc2U2NGVuY29kZXI7XG5pZiAoZ2xvYmFsICYmIGdsb2JhbC5BcnJheUJ1ZmZlcikge1xuICBiYXNlNjRlbmNvZGVyID0gcmVxdWlyZSgnYmFzZTY0LWFycmF5YnVmZmVyJyk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgYW4gYW5kcm9pZCBicm93c2VyLiBUaGF0IHJlcXVpcmVzIHVzIHRvIHVzZVxuICogQXJyYXlCdWZmZXIgd2l0aCBwb2xsaW5nIHRyYW5zcG9ydHMuLi5cbiAqXG4gKiBodHRwOi8vZ2hpbmRhLm5ldC9qcGVnLWJsb2ItYWpheC1hbmRyb2lkL1xuICovXG5cbnZhciBpc0FuZHJvaWQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvQW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gUGhhbnRvbUpTLlxuICogVXBsb2FkaW5nIGEgQmxvYiB3aXRoIFBoYW50b21KUyBkb2VzIG5vdCB3b3JrIGNvcnJlY3RseSwgYXMgcmVwb3J0ZWQgaGVyZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcml5YS9waGFudG9tanMvaXNzdWVzLzExMzk1XG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBpc1BoYW50b21KUyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9QaGFudG9tSlMvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIFdoZW4gdHJ1ZSwgYXZvaWRzIHVzaW5nIEJsb2JzIHRvIGVuY29kZSBwYXlsb2Fkcy5cbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xudmFyIGRvbnRTZW5kQmxvYnMgPSBpc0FuZHJvaWQgfHwgaXNQaGFudG9tSlM7XG5cbi8qKlxuICogQ3VycmVudCBwcm90b2NvbCB2ZXJzaW9uLlxuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqL1xuXG52YXIgcGFja2V0cyA9IGV4cG9ydHMucGFja2V0cyA9IHtcbiAgICBvcGVuOiAgICAgMCAgICAvLyBub24td3NcbiAgLCBjbG9zZTogICAgMSAgICAvLyBub24td3NcbiAgLCBwaW5nOiAgICAgMlxuICAsIHBvbmc6ICAgICAzXG4gICwgbWVzc2FnZTogIDRcbiAgLCB1cGdyYWRlOiAgNVxuICAsIG5vb3A6ICAgICA2XG59O1xuXG52YXIgcGFja2V0c2xpc3QgPSBrZXlzKHBhY2tldHMpO1xuXG4vKipcbiAqIFByZW1hZGUgZXJyb3IgcGFja2V0LlxuICovXG5cbnZhciBlcnIgPSB7IHR5cGU6ICdlcnJvcicsIGRhdGE6ICdwYXJzZXIgZXJyb3InIH07XG5cbi8qKlxuICogQ3JlYXRlIGEgYmxvYiBhcGkgZXZlbiBmb3IgYmxvYiBidWlsZGVyIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XG4gKi9cblxudmFyIEJsb2IgPSByZXF1aXJlKCdibG9iJyk7XG5cbi8qKlxuICogRW5jb2RlcyBhIHBhY2tldC5cbiAqXG4gKiAgICAgPHBhY2tldCB0eXBlIGlkPiBbIDxkYXRhPiBdXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgNWhlbGxvIHdvcmxkXG4gKiAgICAgM1xuICogICAgIDRcbiAqXG4gKiBCaW5hcnkgaXMgZW5jb2RlZCBpbiBhbiBpZGVudGljYWwgcHJpbmNpcGxlXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgdXRmOGVuY29kZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XG4gICAgc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdXRmOGVuY29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gdXRmOGVuY29kZTtcbiAgICB1dGY4ZW5jb2RlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBkYXRhID0gKHBhY2tldC5kYXRhID09PSB1bmRlZmluZWQpXG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHBhY2tldC5kYXRhLmJ1ZmZlciB8fCBwYWNrZXQuZGF0YTtcblxuICBpZiAoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoQmxvYiAmJiBkYXRhIGluc3RhbmNlb2YgZ2xvYmFsLkJsb2IpIHtcbiAgICByZXR1cm4gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBtaWdodCBiZSBhbiBvYmplY3Qgd2l0aCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgaWYgKGRhdGEgJiYgZGF0YS5iYXNlNjQpIHtcbiAgICByZXR1cm4gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gU2VuZGluZyBkYXRhIGFzIGEgdXRmLTggc3RyaW5nXG4gIHZhciBlbmNvZGVkID0gcGFja2V0c1twYWNrZXQudHlwZV07XG5cbiAgLy8gZGF0YSBmcmFnbWVudCBpcyBvcHRpb25hbFxuICBpZiAodW5kZWZpbmVkICE9PSBwYWNrZXQuZGF0YSkge1xuICAgIGVuY29kZWQgKz0gdXRmOGVuY29kZSA/IHV0ZjguZW5jb2RlKFN0cmluZyhwYWNrZXQuZGF0YSksIHsgc3RyaWN0OiBmYWxzZSB9KSA6IFN0cmluZyhwYWNrZXQuZGF0YSk7XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2soJycgKyBlbmNvZGVkKTtcblxufTtcblxuZnVuY3Rpb24gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spIHtcbiAgLy8gcGFja2V0IGRhdGEgaXMgYW4gb2JqZWN0IHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBkYXRhQXNCYXNlNjRTdHJpbmcgfVxuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV0gKyBwYWNrZXQuZGF0YS5kYXRhO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBoZWxwZXJzIGZvciBiaW5hcnkgdHlwZXNcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGRhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIGNvbnRlbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgcmVzdWx0QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMSArIGRhdGEuYnl0ZUxlbmd0aCk7XG5cbiAgcmVzdWx0QnVmZmVyWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGVudEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0QnVmZmVyW2krMV0gPSBjb250ZW50QXJyYXlbaV07XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2socmVzdWx0QnVmZmVyLmJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBwYWNrZXQuZGF0YSA9IGZyLnJlc3VsdDtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCB0cnVlLCBjYWxsYmFjayk7XG4gIH07XG4gIHJldHVybiBmci5yZWFkQXNBcnJheUJ1ZmZlcihwYWNrZXQuZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmIChkb250U2VuZEJsb2JzKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBuZXcgVWludDhBcnJheSgxKTtcbiAgbGVuZ3RoWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIHZhciBibG9iID0gbmV3IEJsb2IoW2xlbmd0aC5idWZmZXIsIHBhY2tldC5kYXRhXSk7XG5cbiAgcmV0dXJuIGNhbGxiYWNrKGJsb2IpO1xufVxuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQgd2l0aCBiaW5hcnkgZGF0YSBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0LCBoYXMgYHR5cGVgIGFuZCBgZGF0YWBcbiAqIEByZXR1cm4ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBjYWxsYmFjaykge1xuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV07XG4gIGlmIChCbG9iICYmIHBhY2tldC5kYXRhIGluc3RhbmNlb2YgZ2xvYmFsLkJsb2IpIHtcbiAgICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGI2NCA9IGZyLnJlc3VsdC5zcGxpdCgnLCcpWzFdO1xuICAgICAgY2FsbGJhY2sobWVzc2FnZSArIGI2NCk7XG4gICAgfTtcbiAgICByZXR1cm4gZnIucmVhZEFzRGF0YVVSTChwYWNrZXQuZGF0YSk7XG4gIH1cblxuICB2YXIgYjY0ZGF0YTtcbiAgdHJ5IHtcbiAgICBiNjRkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgd2l0aCB0eXBlZCBhcnJheXNcbiAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSk7XG4gICAgdmFyIGJhc2ljID0gbmV3IEFycmF5KHR5cGVkLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgYmFzaWNbaV0gPSB0eXBlZFtpXTtcbiAgICB9XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYmFzaWMpO1xuICB9XG4gIG1lc3NhZ2UgKz0gZ2xvYmFsLmJ0b2EoYjY0ZGF0YSk7XG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldC4gQ2hhbmdlcyBmb3JtYXQgdG8gQmxvYiBpZiByZXF1ZXN0ZWQuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBhY2tldCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCB1dGY4ZGVjb2RlKSB7XG4gIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyO1xuICB9XG4gIC8vIFN0cmluZyBkYXRhXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZGF0YS5jaGFyQXQoMCkgPT09ICdiJykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0KGRhdGEuc3Vic3RyKDEpLCBiaW5hcnlUeXBlKTtcbiAgICB9XG5cbiAgICBpZiAodXRmOGRlY29kZSkge1xuICAgICAgZGF0YSA9IHRyeURlY29kZShkYXRhKTtcbiAgICAgIGlmIChkYXRhID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdHlwZSA9IGRhdGEuY2hhckF0KDApO1xuXG4gICAgaWYgKE51bWJlcih0eXBlKSAhPSB0eXBlIHx8ICFwYWNrZXRzbGlzdFt0eXBlXSkge1xuICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogZGF0YS5zdWJzdHJpbmcoMSkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0gfTtcbiAgICB9XG4gIH1cblxuICB2YXIgYXNBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgdHlwZSA9IGFzQXJyYXlbMF07XG4gIHZhciByZXN0ID0gc2xpY2VCdWZmZXIoZGF0YSwgMSk7XG4gIGlmIChCbG9iICYmIGJpbmFyeVR5cGUgPT09ICdibG9iJykge1xuICAgIHJlc3QgPSBuZXcgQmxvYihbcmVzdF0pO1xuICB9XG4gIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiByZXN0IH07XG59O1xuXG5mdW5jdGlvbiB0cnlEZWNvZGUoZGF0YSkge1xuICB0cnkge1xuICAgIGRhdGEgPSB1dGY4LmRlY29kZShkYXRhLCB7IHN0cmljdDogZmFsc2UgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldCBlbmNvZGVkIGluIGEgYmFzZTY0IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSlcbiAqL1xuXG5leHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKG1zZywgYmluYXJ5VHlwZSkge1xuICB2YXIgdHlwZSA9IHBhY2tldHNsaXN0W21zZy5jaGFyQXQoMCldO1xuICBpZiAoIWJhc2U2NGVuY29kZXIpIHtcbiAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogbXNnLnN1YnN0cigxKSB9IH07XG4gIH1cblxuICB2YXIgZGF0YSA9IGJhc2U2NGVuY29kZXIuZGVjb2RlKG1zZy5zdWJzdHIoMSkpO1xuXG4gIGlmIChiaW5hcnlUeXBlID09PSAnYmxvYicgJiYgQmxvYikge1xuICAgIGRhdGEgPSBuZXcgQmxvYihbZGF0YV0pO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogZGF0YSB9O1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKS5cbiAqXG4gKiAgICAgPGxlbmd0aD46ZGF0YVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDExOmhlbGxvIHdvcmxkMjpoaVxuICpcbiAqIElmIGFueSBjb250ZW50cyBhcmUgYmluYXJ5LCB0aGV5IHdpbGwgYmUgZW5jb2RlZCBhcyBiYXNlNjQgc3RyaW5ncy4gQmFzZTY0XG4gKiBlbmNvZGVkIHN0cmluZ3MgYXJlIG1hcmtlZCB3aXRoIGEgYiBiZWZvcmUgdGhlIGxlbmd0aCBzcGVjaWZpZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWQgPSBmdW5jdGlvbiAocGFja2V0cywgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gbnVsbDtcbiAgfVxuXG4gIHZhciBpc0JpbmFyeSA9IGhhc0JpbmFyeShwYWNrZXRzKTtcblxuICBpZiAoc3VwcG9ydHNCaW5hcnkgJiYgaXNCaW5hcnkpIHtcbiAgICBpZiAoQmxvYiAmJiAhZG9udFNlbmRCbG9icykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYihwYWNrZXRzLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIocGFja2V0cywgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjaygnMDonKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UubGVuZ3RoICsgJzonICsgbWVzc2FnZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgIWlzQmluYXJ5ID8gZmFsc2UgOiBzdXBwb3J0c0JpbmFyeSwgZmFsc2UsIGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIGRvbmVDYWxsYmFjayhudWxsLCBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdHMuam9pbignJykpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQXN5bmMgYXJyYXkgbWFwIHVzaW5nIGFmdGVyXG4gKi9cblxuZnVuY3Rpb24gbWFwKGFyeSwgZWFjaCwgZG9uZSkge1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGFyeS5sZW5ndGgpO1xuICB2YXIgbmV4dCA9IGFmdGVyKGFyeS5sZW5ndGgsIGRvbmUpO1xuXG4gIHZhciBlYWNoV2l0aEluZGV4ID0gZnVuY3Rpb24oaSwgZWwsIGNiKSB7XG4gICAgZWFjaChlbCwgZnVuY3Rpb24oZXJyb3IsIG1zZykge1xuICAgICAgcmVzdWx0W2ldID0gbXNnO1xuICAgICAgY2IoZXJyb3IsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICBlYWNoV2l0aEluZGV4KGksIGFyeVtpXSwgbmV4dCk7XG4gIH1cbn1cblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gUG9zc2libGUgYmluYXJ5IGNvbnRlbnRzIGFyZVxuICogZGVjb2RlZCBmcm9tIHRoZWlyIGJhc2U2NCByZXByZXNlbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIHBhY2tldDtcbiAgaWYgKGRhdGEgPT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9ICcnLCBuLCBtc2c7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaHIgPSBkYXRhLmNoYXJBdChpKTtcblxuICAgIGlmIChjaHIgIT09ICc6Jykge1xuICAgICAgbGVuZ3RoICs9IGNocjtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGggPT09ICcnIHx8IChsZW5ndGggIT0gKG4gPSBOdW1iZXIobGVuZ3RoKSkpKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBtc2cgPSBkYXRhLnN1YnN0cihpICsgMSwgbik7XG5cbiAgICBpZiAobGVuZ3RoICE9IG1zZy5sZW5ndGgpIHtcbiAgICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgIH1cblxuICAgIGlmIChtc2cubGVuZ3RoKSB7XG4gICAgICBwYWNrZXQgPSBleHBvcnRzLmRlY29kZVBhY2tldChtc2csIGJpbmFyeVR5cGUsIGZhbHNlKTtcblxuICAgICAgaWYgKGVyci50eXBlID09PSBwYWNrZXQudHlwZSAmJiBlcnIuZGF0YSA9PT0gcGFja2V0LmRhdGEpIHtcbiAgICAgICAgLy8gcGFyc2VyIGVycm9yIGluIGluZGl2aWR1YWwgcGFja2V0IC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJldCA9IGNhbGxiYWNrKHBhY2tldCwgaSArIG4sIGwpO1xuICAgICAgaWYgKGZhbHNlID09PSByZXQpIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBhZHZhbmNlIGN1cnNvclxuICAgIGkgKz0gbjtcbiAgICBsZW5ndGggPSAnJztcbiAgfVxuXG4gIGlmIChsZW5ndGggIT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkgYXMgYmluYXJ5LlxuICpcbiAqIDwxID0gYmluYXJ5LCAwID0gc3RyaW5nPjxudW1iZXIgZnJvbSAwLTk+PG51bWJlciBmcm9tIDAtOT5bLi4uXTxudW1iZXJcbiAqIDI1NT48ZGF0YT5cbiAqXG4gKiBFeGFtcGxlOlxuICogMSAzIDI1NSAxIDIgMywgaWYgdGhlIGJpbmFyeSBjb250ZW50cyBhcmUgaW50ZXJwcmV0ZWQgYXMgOCBiaXQgaW50ZWdlcnNcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAcmV0dXJuIHtBcnJheUJ1ZmZlcn0gZW5jb2RlZCBwYXlsb2FkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyID0gZnVuY3Rpb24ocGFja2V0cywgY2FsbGJhY2spIHtcbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgQXJyYXlCdWZmZXIoMCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZG9uZUNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCBlbmNvZGVkUGFja2V0cykge1xuICAgIHZhciB0b3RhbExlbmd0aCA9IGVuY29kZWRQYWNrZXRzLnJlZHVjZShmdW5jdGlvbihhY2MsIHApIHtcbiAgICAgIHZhciBsZW47XG4gICAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKXtcbiAgICAgICAgbGVuID0gcC5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW4gPSBwLmJ5dGVMZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjICsgbGVuLnRvU3RyaW5nKCkubGVuZ3RoICsgbGVuICsgMjsgLy8gc3RyaW5nL2JpbmFyeSBpZGVudGlmaWVyICsgc2VwYXJhdG9yID0gMlxuICAgIH0sIDApO1xuXG4gICAgdmFyIHJlc3VsdEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO1xuXG4gICAgdmFyIGJ1ZmZlckluZGV4ID0gMDtcbiAgICBlbmNvZGVkUGFja2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgIHZhciBpc1N0cmluZyA9IHR5cGVvZiBwID09PSAnc3RyaW5nJztcbiAgICAgIHZhciBhYiA9IHA7XG4gICAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShwLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBwLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgYWIgPSB2aWV3LmJ1ZmZlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKSB7IC8vIG5vdCB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDA7XG4gICAgICB9IGVsc2UgeyAvLyB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDE7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW5TdHIgPSBhYi5ieXRlTGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHBhcnNlSW50KGxlblN0cltpXSk7XG4gICAgICB9XG4gICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDI1NTtcblxuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSB2aWV3W2ldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEFycmF5LmJ1ZmZlcik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBFbmNvZGUgYXMgQmxvYlxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYiA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZW5jb2RlZCkge1xuICAgICAgdmFyIGJpbmFyeUlkZW50aWZpZXIgPSBuZXcgVWludDhBcnJheSgxKTtcbiAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAxO1xuICAgICAgaWYgKHR5cGVvZiBlbmNvZGVkID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmlld1tpXSA9IGVuY29kZWQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGVkID0gdmlldy5idWZmZXI7XG4gICAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuID0gKGVuY29kZWQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcilcbiAgICAgICAgPyBlbmNvZGVkLmJ5dGVMZW5ndGhcbiAgICAgICAgOiBlbmNvZGVkLnNpemU7XG5cbiAgICAgIHZhciBsZW5TdHIgPSBsZW4udG9TdHJpbmcoKTtcbiAgICAgIHZhciBsZW5ndGhBcnkgPSBuZXcgVWludDhBcnJheShsZW5TdHIubGVuZ3RoICsgMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZW5ndGhBcnlbaV0gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgbGVuZ3RoQXJ5W2xlblN0ci5sZW5ndGhdID0gMjU1O1xuXG4gICAgICBpZiAoQmxvYikge1xuICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtiaW5hcnlJZGVudGlmaWVyLmJ1ZmZlciwgbGVuZ3RoQXJ5LmJ1ZmZlciwgZW5jb2RlZF0pO1xuICAgICAgICBkb25lQ2FsbGJhY2sobnVsbCwgYmxvYik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEJsb2IocmVzdWx0cykpO1xuICB9KTtcbn07XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFN0cmluZ3MgYXJlIGRlY29kZWQgYnlcbiAqIGludGVycHJldGluZyBlYWNoIGJ5dGUgYXMgYSBrZXkgY29kZSBmb3IgZW50cmllcyBtYXJrZWQgdG8gc3RhcnQgd2l0aCAwLiBTZWVcbiAqIGRlc2NyaXB0aW9uIG9mIGVuY29kZVBheWxvYWRBc0JpbmFyeVxuICpcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeSA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGJpbmFyeVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7XG4gICAgYmluYXJ5VHlwZSA9IG51bGw7XG4gIH1cblxuICB2YXIgYnVmZmVyVGFpbCA9IGRhdGE7XG4gIHZhciBidWZmZXJzID0gW107XG5cbiAgd2hpbGUgKGJ1ZmZlclRhaWwuYnl0ZUxlbmd0aCA+IDApIHtcbiAgICB2YXIgdGFpbEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyVGFpbCk7XG4gICAgdmFyIGlzU3RyaW5nID0gdGFpbEFycmF5WzBdID09PSAwO1xuICAgIHZhciBtc2dMZW5ndGggPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAxOyA7IGkrKykge1xuICAgICAgaWYgKHRhaWxBcnJheVtpXSA9PT0gMjU1KSBicmVhaztcblxuICAgICAgLy8gMzEwID0gY2hhciBsZW5ndGggb2YgTnVtYmVyLk1BWF9WQUxVRVxuICAgICAgaWYgKG1zZ0xlbmd0aC5sZW5ndGggPiAzMTApIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIG1zZ0xlbmd0aCArPSB0YWlsQXJyYXlbaV07XG4gICAgfVxuXG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDIgKyBtc2dMZW5ndGgubGVuZ3RoKTtcbiAgICBtc2dMZW5ndGggPSBwYXJzZUludChtc2dMZW5ndGgpO1xuXG4gICAgdmFyIG1zZyA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDAsIG1zZ0xlbmd0aCk7XG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBtc2cgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KG1zZykpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpUGhvbmUgU2FmYXJpIGRvZXNuJ3QgbGV0IHlvdSBhcHBseSB0byB0eXBlZCBhcnJheXNcbiAgICAgICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkobXNnKTtcbiAgICAgICAgbXNnID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBtc2cgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh0eXBlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBidWZmZXJzLnB1c2gobXNnKTtcbiAgICBidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgbXNnTGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0b3RhbCA9IGJ1ZmZlcnMubGVuZ3RoO1xuICBidWZmZXJzLmZvckVhY2goZnVuY3Rpb24oYnVmZmVyLCBpKSB7XG4gICAgY2FsbGJhY2soZXhwb3J0cy5kZWNvZGVQYWNrZXQoYnVmZmVyLCBiaW5hcnlUeXBlLCB0cnVlKSwgaSwgdG90YWwpO1xuICB9KTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvYnJvd3Nlci5qcyIsIlxuY29uc3QgZXJyb3JQcm9wcyA9IFsnZGVzY3JpcHRpb24nLCAnZmlsZU5hbWUnLCAnbGluZU51bWJlcicsICdtZXNzYWdlJywgJ25hbWUnLCAnbnVtYmVyJywgJ3N0YWNrJ107XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIGxldCBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgICAgbGluZSxcbiAgICAgIGNvbHVtbjtcbiAgaWYgKGxvYykge1xuICAgIGxpbmUgPSBsb2Muc3RhcnQubGluZTtcbiAgICBjb2x1bW4gPSBsb2Muc3RhcnQuY29sdW1uO1xuXG4gICAgbWVzc2FnZSArPSAnIC0gJyArIGxpbmUgKyAnOicgKyBjb2x1bW47XG4gIH1cblxuICBsZXQgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVycm9yUHJvcHMubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXNbZXJyb3JQcm9wc1tpZHhdXSA9IHRtcFtlcnJvclByb3BzW2lkeF1dO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXhjZXB0aW9uKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGxvYykge1xuICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcblxuICAgICAgLy8gV29yayBhcm91bmQgaXNzdWUgdW5kZXIgc2FmYXJpIHdoZXJlIHdlIGNhbid0IGRpcmVjdGx5IHNldCB0aGUgY29sdW1uIHZhbHVlXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogY29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKG5vcCkge1xuICAgIC8qIElnbm9yZSBpZiB0aGUgYnJvd3NlciBpcyB2ZXJ5IHBhcnRpY3VsYXIgKi9cbiAgfVxufVxuXG5FeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5cbmV4cG9ydCBkZWZhdWx0IEV4Y2VwdGlvbjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi8uLi9saWIvaGFuZGxlYmFycy9leGNlcHRpb24uanMiLCIvKipcclxuICogQ29tcGlsZXMgYSBxdWVyeXN0cmluZ1xyXG4gKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuICB2YXIgc3RyID0gJyc7XHJcblxyXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XHJcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XHJcbiAgICAgIGlmIChzdHIubGVuZ3RoKSBzdHIgKz0gJyYnO1xyXG4gICAgICBzdHIgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3RyO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyBhIHNpbXBsZSBxdWVyeXN0cmluZyBpbnRvIGFuIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcXNcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbihxcyl7XHJcbiAgdmFyIHFyeSA9IHt9O1xyXG4gIHZhciBwYWlycyA9IHFzLnNwbGl0KCcmJyk7XHJcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgIHZhciBwYWlyID0gcGFpcnNbaV0uc3BsaXQoJz0nKTtcclxuICAgIHFyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xyXG4gIH1cclxuICByZXR1cm4gcXJ5O1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcGFyc2Vxcy9pbmRleC5qcyIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhLCBiKXtcbiAgdmFyIGZuID0gZnVuY3Rpb24oKXt9O1xuICBmbi5wcm90b3R5cGUgPSBiLnByb3RvdHlwZTtcbiAgYS5wcm90b3R5cGUgPSBuZXcgZm47XG4gIGEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gYTtcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1pbmhlcml0L2luZGV4LmpzIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGhhc0JpbiA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG52YXIgYmluYXJ5ID0gcmVxdWlyZSgnLi9iaW5hcnknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMudHlwZXMgPSBbXG4gICdDT05ORUNUJyxcbiAgJ0RJU0NPTk5FQ1QnLFxuICAnRVZFTlQnLFxuICAnQUNLJyxcbiAgJ0VSUk9SJyxcbiAgJ0JJTkFSWV9FVkVOVCcsXG4gICdCSU5BUllfQUNLJ1xuXTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgY29ubmVjdGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkNPTk5FQ1QgPSAwO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBkaXNjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRElTQ09OTkVDVCA9IDE7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGV2ZW50YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVZFTlQgPSAyO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBhY2tgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5BQ0sgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBlcnJvcmAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVSUk9SID0gNDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSAnYmluYXJ5IGV2ZW50J1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5CSU5BUllfRVZFTlQgPSA1O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBiaW5hcnkgYWNrYC4gRm9yIGFja3Mgd2l0aCBiaW5hcnkgYXJndW1lbnRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5CSU5BUllfQUNLID0gNjtcblxuLyoqXG4gKiBFbmNvZGVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FbmNvZGVyID0gRW5jb2RlcjtcblxuLyoqXG4gKiBEZWNvZGVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5EZWNvZGVyID0gRGVjb2RlcjtcblxuLyoqXG4gKiBBIHNvY2tldC5pbyBFbmNvZGVyIGluc3RhbmNlXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBFbmNvZGVyKCkge31cblxuLyoqXG4gKiBFbmNvZGUgYSBwYWNrZXQgYXMgYSBzaW5nbGUgc3RyaW5nIGlmIG5vbi1iaW5hcnksIG9yIGFzIGFcbiAqIGJ1ZmZlciBzZXF1ZW5jZSwgZGVwZW5kaW5nIG9uIHBhY2tldCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBwYWNrZXQgb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGhhbmRsZSBlbmNvZGluZ3MgKGxpa2VseSBlbmdpbmUud3JpdGUpXG4gKiBAcmV0dXJuIENhbGxzIGNhbGxiYWNrIHdpdGggQXJyYXkgb2YgZW5jb2RpbmdzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spe1xuICBpZiAoKG9iai50eXBlID09PSBleHBvcnRzLkVWRU5UIHx8IG9iai50eXBlID09PSBleHBvcnRzLkFDSykgJiYgaGFzQmluKG9iai5kYXRhKSkge1xuICAgIG9iai50eXBlID0gb2JqLnR5cGUgPT09IGV4cG9ydHMuRVZFTlQgPyBleHBvcnRzLkJJTkFSWV9FVkVOVCA6IGV4cG9ydHMuQklOQVJZX0FDSztcbiAgfVxuXG4gIGRlYnVnKCdlbmNvZGluZyBwYWNrZXQgJWonLCBvYmopO1xuXG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gb2JqLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBvYmoudHlwZSkge1xuICAgIGVuY29kZUFzQmluYXJ5KG9iaiwgY2FsbGJhY2spO1xuICB9XG4gIGVsc2Uge1xuICAgIHZhciBlbmNvZGluZyA9IGVuY29kZUFzU3RyaW5nKG9iaik7XG4gICAgY2FsbGJhY2soW2VuY29kaW5nXSk7XG4gIH1cbn07XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBhcyBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7U3RyaW5nfSBlbmNvZGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBc1N0cmluZyhvYmopIHtcblxuICAvLyBmaXJzdCBpcyB0eXBlXG4gIHZhciBzdHIgPSAnJyArIG9iai50eXBlO1xuXG4gIC8vIGF0dGFjaG1lbnRzIGlmIHdlIGhhdmUgdGhlbVxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gb2JqLnR5cGUpIHtcbiAgICBzdHIgKz0gb2JqLmF0dGFjaG1lbnRzICsgJy0nO1xuICB9XG5cbiAgLy8gaWYgd2UgaGF2ZSBhIG5hbWVzcGFjZSBvdGhlciB0aGFuIGAvYFxuICAvLyB3ZSBhcHBlbmQgaXQgZm9sbG93ZWQgYnkgYSBjb21tYSBgLGBcbiAgaWYgKG9iai5uc3AgJiYgJy8nICE9PSBvYmoubnNwKSB7XG4gICAgc3RyICs9IG9iai5uc3AgKyAnLCc7XG4gIH1cblxuICAvLyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSB0aGUgaWRcbiAgaWYgKG51bGwgIT0gb2JqLmlkKSB7XG4gICAgc3RyICs9IG9iai5pZDtcbiAgfVxuXG4gIC8vIGpzb24gZGF0YVxuICBpZiAobnVsbCAhPSBvYmouZGF0YSkge1xuICAgIHN0ciArPSBKU09OLnN0cmluZ2lmeShvYmouZGF0YSk7XG4gIH1cblxuICBkZWJ1ZygnZW5jb2RlZCAlaiBhcyAlcycsIG9iaiwgc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGFzICdidWZmZXIgc2VxdWVuY2UnIGJ5IHJlbW92aW5nIGJsb2JzLCBhbmRcbiAqIGRlY29uc3RydWN0aW5nIHBhY2tldCBpbnRvIG9iamVjdCB3aXRoIHBsYWNlaG9sZGVycyBhbmRcbiAqIGEgbGlzdCBvZiBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0J1ZmZlcn0gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNCaW5hcnkob2JqLCBjYWxsYmFjaykge1xuXG4gIGZ1bmN0aW9uIHdyaXRlRW5jb2RpbmcoYmxvYmxlc3NEYXRhKSB7XG4gICAgdmFyIGRlY29uc3RydWN0aW9uID0gYmluYXJ5LmRlY29uc3RydWN0UGFja2V0KGJsb2JsZXNzRGF0YSk7XG4gICAgdmFyIHBhY2sgPSBlbmNvZGVBc1N0cmluZyhkZWNvbnN0cnVjdGlvbi5wYWNrZXQpO1xuICAgIHZhciBidWZmZXJzID0gZGVjb25zdHJ1Y3Rpb24uYnVmZmVycztcblxuICAgIGJ1ZmZlcnMudW5zaGlmdChwYWNrKTsgLy8gYWRkIHBhY2tldCBpbmZvIHRvIGJlZ2lubmluZyBvZiBkYXRhIGxpc3RcbiAgICBjYWxsYmFjayhidWZmZXJzKTsgLy8gd3JpdGUgYWxsIHRoZSBidWZmZXJzXG4gIH1cblxuICBiaW5hcnkucmVtb3ZlQmxvYnMob2JqLCB3cml0ZUVuY29kaW5nKTtcbn1cblxuLyoqXG4gKiBBIHNvY2tldC5pbyBEZWNvZGVyIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBkZWNvZGVyXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIERlY29kZXIoKSB7XG4gIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYCB3aXRoIERlY29kZXIuXG4gKi9cblxuRW1pdHRlcihEZWNvZGVyLnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGVjb2RlcyBhbiBlY29kZWQgcGFja2V0IHN0cmluZyBpbnRvIHBhY2tldCBKU09OLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBvYmogLSBlbmNvZGVkIHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVjb2Rlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciBwYWNrZXQ7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgIHBhY2tldCA9IGRlY29kZVN0cmluZyhvYmopO1xuICAgIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gcGFja2V0LnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBwYWNrZXQudHlwZSkgeyAvLyBiaW5hcnkgcGFja2V0J3MganNvblxuICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbmV3IEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KTtcblxuICAgICAgLy8gbm8gYXR0YWNobWVudHMsIGxhYmVsZWQgYmluYXJ5IGJ1dCBubyBiaW5hcnkgZGF0YSB0byBmb2xsb3dcbiAgICAgIGlmICh0aGlzLnJlY29uc3RydWN0b3IucmVjb25QYWNrLmF0dGFjaG1lbnRzID09PSAwKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHsgLy8gbm9uLWJpbmFyeSBmdWxsIHBhY2tldFxuICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoaXNCdWYob2JqKSB8fCBvYmouYmFzZTY0KSB7IC8vIHJhdyBiaW5hcnkgZGF0YVxuICAgIGlmICghdGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dvdCBiaW5hcnkgZGF0YSB3aGVuIG5vdCByZWNvbnN0cnVjdGluZyBhIHBhY2tldCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYWNrZXQgPSB0aGlzLnJlY29uc3RydWN0b3IudGFrZUJpbmFyeURhdGEob2JqKTtcbiAgICAgIGlmIChwYWNrZXQpIHsgLy8gcmVjZWl2ZWQgZmluYWwgYnVmZmVyXG4gICAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlOiAnICsgb2JqKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBwYWNrZXQgU3RyaW5nIChKU09OIGRhdGEpXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGRlY29kZVN0cmluZyhzdHIpIHtcbiAgdmFyIGkgPSAwO1xuICAvLyBsb29rIHVwIHR5cGVcbiAgdmFyIHAgPSB7XG4gICAgdHlwZTogTnVtYmVyKHN0ci5jaGFyQXQoMCkpXG4gIH07XG5cbiAgaWYgKG51bGwgPT0gZXhwb3J0cy50eXBlc1twLnR5cGVdKSByZXR1cm4gZXJyb3IoKTtcblxuICAvLyBsb29rIHVwIGF0dGFjaG1lbnRzIGlmIHR5cGUgYmluYXJ5XG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gcC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gcC50eXBlKSB7XG4gICAgdmFyIGJ1ZiA9ICcnO1xuICAgIHdoaWxlIChzdHIuY2hhckF0KCsraSkgIT09ICctJykge1xuICAgICAgYnVmICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoaSA9PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgaWYgKGJ1ZiAhPSBOdW1iZXIoYnVmKSB8fCBzdHIuY2hhckF0KGkpICE9PSAnLScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBhdHRhY2htZW50cycpO1xuICAgIH1cbiAgICBwLmF0dGFjaG1lbnRzID0gTnVtYmVyKGJ1Zik7XG4gIH1cblxuICAvLyBsb29rIHVwIG5hbWVzcGFjZSAoaWYgYW55KVxuICBpZiAoJy8nID09PSBzdHIuY2hhckF0KGkgKyAxKSkge1xuICAgIHAubnNwID0gJyc7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKCcsJyA9PT0gYykgYnJlYWs7XG4gICAgICBwLm5zcCArPSBjO1xuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwLm5zcCA9ICcvJztcbiAgfVxuXG4gIC8vIGxvb2sgdXAgaWRcbiAgdmFyIG5leHQgPSBzdHIuY2hhckF0KGkgKyAxKTtcbiAgaWYgKCcnICE9PSBuZXh0ICYmIE51bWJlcihuZXh0KSA9PSBuZXh0KSB7XG4gICAgcC5pZCA9ICcnO1xuICAgIHdoaWxlICgrK2kpIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChudWxsID09IGMgfHwgTnVtYmVyKGMpICE9IGMpIHtcbiAgICAgICAgLS1pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHAuaWQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgcC5pZCA9IE51bWJlcihwLmlkKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAganNvbiBkYXRhXG4gIGlmIChzdHIuY2hhckF0KCsraSkpIHtcbiAgICBwID0gdHJ5UGFyc2UocCwgc3RyLnN1YnN0cihpKSk7XG4gIH1cblxuICBkZWJ1ZygnZGVjb2RlZCAlcyBhcyAlaicsIHN0ciwgcCk7XG4gIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiB0cnlQYXJzZShwLCBzdHIpIHtcbiAgdHJ5IHtcbiAgICBwLmRhdGEgPSBKU09OLnBhcnNlKHN0cik7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIGVycm9yKCk7XG4gIH1cbiAgcmV0dXJuIHA7IFxufVxuXG4vKipcbiAqIERlYWxsb2NhdGVzIGEgcGFyc2VyJ3MgcmVzb3VyY2VzXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWNvZGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICB0aGlzLnJlY29uc3RydWN0b3IuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICB9XG59O1xuXG4vKipcbiAqIEEgbWFuYWdlciBvZiBhIGJpbmFyeSBldmVudCdzICdidWZmZXIgc2VxdWVuY2UnLiBTaG91bGRcbiAqIGJlIGNvbnN0cnVjdGVkIHdoZW5ldmVyIGEgcGFja2V0IG9mIHR5cGUgQklOQVJZX0VWRU5UIGlzXG4gKiBkZWNvZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0JpbmFyeVJlY29uc3RydWN0b3J9IGluaXRpYWxpemVkIHJlY29uc3RydWN0b3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KSB7XG4gIHRoaXMucmVjb25QYWNrID0gcGFja2V0O1xuICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gYmluYXJ5IGRhdGEgcmVjZWl2ZWQgZnJvbSBjb25uZWN0aW9uXG4gKiBhZnRlciBhIEJJTkFSWV9FVkVOVCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtCdWZmZXIgfCBBcnJheUJ1ZmZlcn0gYmluRGF0YSAtIHRoZSByYXcgYmluYXJ5IGRhdGEgcmVjZWl2ZWRcbiAqIEByZXR1cm4ge251bGwgfCBPYmplY3R9IHJldHVybnMgbnVsbCBpZiBtb3JlIGJpbmFyeSBkYXRhIGlzIGV4cGVjdGVkIG9yXG4gKiAgIGEgcmVjb25zdHJ1Y3RlZCBwYWNrZXQgb2JqZWN0IGlmIGFsbCBidWZmZXJzIGhhdmUgYmVlbiByZWNlaXZlZC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLnRha2VCaW5hcnlEYXRhID0gZnVuY3Rpb24oYmluRGF0YSkge1xuICB0aGlzLmJ1ZmZlcnMucHVzaChiaW5EYXRhKTtcbiAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IHRoaXMucmVjb25QYWNrLmF0dGFjaG1lbnRzKSB7IC8vIGRvbmUgd2l0aCBidWZmZXIgbGlzdFxuICAgIHZhciBwYWNrZXQgPSBiaW5hcnkucmVjb25zdHJ1Y3RQYWNrZXQodGhpcy5yZWNvblBhY2ssIHRoaXMuYnVmZmVycyk7XG4gICAgdGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgcmV0dXJuIHBhY2tldDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogQ2xlYW5zIHVwIGJpbmFyeSBwYWNrZXQgcmVjb25zdHJ1Y3Rpb24gdmFyaWFibGVzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZWNvblBhY2sgPSBudWxsO1xuICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbn07XG5cbmZ1bmN0aW9uIGVycm9yKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGV4cG9ydHMuRVJST1IsXG4gICAgZGF0YTogJ3BhcnNlciBlcnJvcidcbiAgfTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2luZGV4LmpzIiwiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcblxudmFyIGhhc0NPUlMgPSByZXF1aXJlKCdoYXMtY29ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHZhciB4ZG9tYWluID0gb3B0cy54ZG9tYWluO1xuXG4gIC8vIHNjaGVtZSBtdXN0IGJlIHNhbWUgd2hlbiB1c2lnbiBYRG9tYWluUmVxdWVzdFxuICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZWludGVybmFscy9hcmNoaXZlLzIwMTAvMDUvMTMveGRvbWFpbnJlcXVlc3QtcmVzdHJpY3Rpb25zLWxpbWl0YXRpb25zLWFuZC13b3JrYXJvdW5kcy5hc3B4XG4gIHZhciB4c2NoZW1lID0gb3B0cy54c2NoZW1lO1xuXG4gIC8vIFhEb21haW5SZXF1ZXN0IGhhcyBhIGZsb3cgb2Ygbm90IHNlbmRpbmcgY29va2llLCB0aGVyZWZvcmUgaXQgc2hvdWxkIGJlIGRpc2FibGVkIGFzIGEgZGVmYXVsdC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvZW5naW5lLmlvLWNsaWVudC9wdWxsLzIxN1xuICB2YXIgZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgaGFzQ09SUykpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIC8vIFVzZSBYRG9tYWluUmVxdWVzdCBmb3IgSUU4IGlmIGVuYWJsZXNYRFIgaXMgdHJ1ZVxuICAvLyBiZWNhdXNlIGxvYWRpbmcgYmFyIGtlZXBzIGZsYXNoaW5nIHdoZW4gdXNpbmcganNvbnAtcG9sbGluZ1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20veXVqaW9zYWthL3NvY2tlLmlvLWllOC1sb2FkaW5nLWV4YW1wbGVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYRG9tYWluUmVxdWVzdCAmJiAheHNjaGVtZSAmJiBlbmFibGVzWERSKSB7XG4gICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICBpZiAoIXhkb21haW4pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBnbG9iYWxbWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKV0oJ01pY3Jvc29mdC5YTUxIVFRQJyk7XG4gICAgfSBjYXRjaCAoZSkgeyB9XG4gIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIveG1saHR0cHJlcXVlc3QuanMiLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydDtcblxuLyoqXG4gKiBUcmFuc3BvcnQgYWJzdHJhY3QgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBUcmFuc3BvcnQgKG9wdHMpIHtcbiAgdGhpcy5wYXRoID0gb3B0cy5wYXRoO1xuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZTtcbiAgdGhpcy5wb3J0ID0gb3B0cy5wb3J0O1xuICB0aGlzLnNlY3VyZSA9IG9wdHMuc2VjdXJlO1xuICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW07XG4gIHRoaXMudGltZXN0YW1wUmVxdWVzdHMgPSBvcHRzLnRpbWVzdGFtcFJlcXVlc3RzO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcbiAgdGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQgfHwgZmFsc2U7XG4gIHRoaXMuc29ja2V0ID0gb3B0cy5zb2NrZXQ7XG4gIHRoaXMuZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5wZnggPSBvcHRzLnBmeDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleTtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlO1xuICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQ7XG4gIHRoaXMuY2EgPSBvcHRzLmNhO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnM7XG4gIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIHRoaXMuZm9yY2VOb2RlID0gb3B0cy5mb3JjZU5vZGU7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcbiAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoVHJhbnNwb3J0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRW1pdHMgYW4gZXJyb3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKG1zZywgZGVzYykge1xuICB2YXIgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gIGVyci50eXBlID0gJ1RyYW5zcG9ydEVycm9yJztcbiAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYztcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPcGVucyB0aGUgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICAgIHRoaXMuZG9PcGVuKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5kb0Nsb3NlKCk7XG4gICAgdGhpcy5vbkNsb3NlKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgbXVsdGlwbGUgcGFja2V0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLndyaXRlKHBhY2tldHMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IG5vdCBvcGVuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gb3BlblxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB2YXIgcGFja2V0ID0gcGFyc2VyLmRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTtcbiAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBhIGRlY29kZWQgcGFja2V0LlxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gY2xvc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy5lbWl0KCdjbG9zZScpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnQuanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwiLyoqXHJcbiAqIFBhcnNlcyBhbiBVUklcclxuICpcclxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG52YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcclxuXHJcbnZhciBwYXJ0cyA9IFtcclxuICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJ1xyXG5dO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHtcclxuICAgIHZhciBzcmMgPSBzdHIsXHJcbiAgICAgICAgYiA9IHN0ci5pbmRleE9mKCdbJyksXHJcbiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksXHJcbiAgICAgICAgdXJpID0ge30sXHJcbiAgICAgICAgaSA9IDE0O1xyXG5cclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XHJcbiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYztcclxuICAgICAgICB1cmkuaG9zdCA9IHVyaS5ob3N0LnN1YnN0cmluZygxLCB1cmkuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcclxuICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVyaTtcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3BhcnNldXJpL2luZGV4LmpzIiwiLyogZ2xvYmFsIEJsb2IgRmlsZSAqL1xuXG4vKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBnbG9iYWwuQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fCB0b1N0cmluZy5jYWxsKGdsb2JhbC5CbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXSc7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgZ2xvYmFsLkZpbGUgPT09ICdmdW5jdGlvbicgfHwgdG9TdHJpbmcuY2FsbChnbG9iYWwuRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gaGFzQmluYXJ5O1xuXG4vKipcbiAqIENoZWNrcyBmb3IgYmluYXJ5IGRhdGEuXG4gKlxuICogU3VwcG9ydHMgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQmxvYiBhbmQgRmlsZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW55dGhpbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gaGFzQmluYXJ5IChvYmopIHtcbiAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoaGFzQmluYXJ5KG9ialtpXSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIGdsb2JhbC5CdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlciAmJiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyKG9iaikpIHx8XG4gICAgICh0eXBlb2YgZ2xvYmFsLkFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fFxuICAgICAod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpXG4gICAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2hhcy1iaW5hcnkvcHVsbC80XG4gIGlmIChvYmoudG9KU09OICYmIHR5cGVvZiBvYmoudG9KU09OID09PSAnZnVuY3Rpb24nICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gaGFzQmluYXJ5KG9iai50b0pTT04oKSwgdHJ1ZSk7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgJiYgaGFzQmluYXJ5KG9ialtrZXldKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL2luZGV4LmpzIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaXMgYSBidWZmZXIgb3IgYW4gYXJyYXlidWZmZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNCdWYob2JqKSB7XG4gIHJldHVybiAoZ2xvYmFsLkJ1ZmZlciAmJiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyKG9iaikpIHx8XG4gICAgICAgICAoZ2xvYmFsLkFycmF5QnVmZmVyICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2lzLWJ1ZmZlci5qcyIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBlaW8gPSByZXF1aXJlKCdlbmdpbmUuaW8tY2xpZW50Jyk7XG52YXIgU29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgb24gPSByZXF1aXJlKCcuL29uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Om1hbmFnZXInKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIEJhY2tvZmYgPSByZXF1aXJlKCdiYWNrbzInKTtcblxuLyoqXG4gKiBJRTYrIGhhc093blByb3BlcnR5XG4gKi9cblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hbmFnZXI7XG5cbi8qKlxuICogYE1hbmFnZXJgIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmdpbmUgaW5zdGFuY2Ugb3IgZW5naW5lIHVyaS9vcHRzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBNYW5hZ2VyICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1hbmFnZXIpKSByZXR1cm4gbmV3IE1hbmFnZXIodXJpLCBvcHRzKTtcbiAgaWYgKHVyaSAmJiAoJ29iamVjdCcgPT09IHR5cGVvZiB1cmkpKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgb3B0cy5wYXRoID0gb3B0cy5wYXRoIHx8ICcvc29ja2V0LmlvJztcbiAgdGhpcy5uc3BzID0ge307XG4gIHRoaXMuc3VicyA9IFtdO1xuICB0aGlzLm9wdHMgPSBvcHRzO1xuICB0aGlzLnJlY29ubmVjdGlvbihvcHRzLnJlY29ubmVjdGlvbiAhPT0gZmFsc2UpO1xuICB0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzKG9wdHMucmVjb25uZWN0aW9uQXR0ZW1wdHMgfHwgSW5maW5pdHkpO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KG9wdHMucmVjb25uZWN0aW9uRGVsYXkgfHwgMTAwMCk7XG4gIHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgob3B0cy5yZWNvbm5lY3Rpb25EZWxheU1heCB8fCA1MDAwKTtcbiAgdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKG9wdHMucmFuZG9taXphdGlvbkZhY3RvciB8fCAwLjUpO1xuICB0aGlzLmJhY2tvZmYgPSBuZXcgQmFja29mZih7XG4gICAgbWluOiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksXG4gICAgbWF4OiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KCksXG4gICAgaml0dGVyOiB0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3IoKVxuICB9KTtcbiAgdGhpcy50aW1lb3V0KG51bGwgPT0gb3B0cy50aW1lb3V0ID8gMjAwMDAgOiBvcHRzLnRpbWVvdXQpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy51cmkgPSB1cmk7XG4gIHRoaXMuY29ubmVjdGluZyA9IFtdO1xuICB0aGlzLmxhc3RQaW5nID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IGZhbHNlO1xuICB0aGlzLnBhY2tldEJ1ZmZlciA9IFtdO1xuICB2YXIgX3BhcnNlciA9IG9wdHMucGFyc2VyIHx8IHBhcnNlcjtcbiAgdGhpcy5lbmNvZGVyID0gbmV3IF9wYXJzZXIuRW5jb2RlcigpO1xuICB0aGlzLmRlY29kZXIgPSBuZXcgX3BhcnNlci5EZWNvZGVyKCk7XG4gIHRoaXMuYXV0b0Nvbm5lY3QgPSBvcHRzLmF1dG9Db25uZWN0ICE9PSBmYWxzZTtcbiAgaWYgKHRoaXMuYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpO1xufVxuXG4vKipcbiAqIFByb3BhZ2F0ZSBnaXZlbiBldmVudCB0byBzb2NrZXRzIGFuZCBlbWl0IG9uIGB0aGlzYFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmVtaXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICBmb3IgKHZhciBuc3AgaW4gdGhpcy5uc3BzKSB7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMubnNwcywgbnNwKSkge1xuICAgICAgdGhpcy5uc3BzW25zcF0uZW1pdC5hcHBseSh0aGlzLm5zcHNbbnNwXSwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogVXBkYXRlIGBzb2NrZXQuaWRgIG9mIGFsbCBzb2NrZXRzXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUudXBkYXRlU29ja2V0SWRzID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBuc3AgaW4gdGhpcy5uc3BzKSB7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMubnNwcywgbnNwKSkge1xuICAgICAgdGhpcy5uc3BzW25zcF0uaWQgPSB0aGlzLmdlbmVyYXRlSWQobnNwKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogZ2VuZXJhdGUgYHNvY2tldC5pZGAgZm9yIHRoZSBnaXZlbiBgbnNwYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuc3BcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmdlbmVyYXRlSWQgPSBmdW5jdGlvbiAobnNwKSB7XG4gIHJldHVybiAobnNwID09PSAnLycgPyAnJyA6IChuc3AgKyAnIycpKSArIHRoaXMuZW5naW5lLmlkO1xufTtcblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoTWFuYWdlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFNldHMgdGhlIGByZWNvbm5lY3Rpb25gIGNvbmZpZy5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHRydWUvZmFsc2UgaWYgaXQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgcmVjb25uZWN0XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbiA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbjtcbiAgdGhpcy5fcmVjb25uZWN0aW9uID0gISF2O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgcmVjb25uZWN0aW9uIGF0dGVtcHRzIGNvbmZpZy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4IHJlY29ubmVjdGlvbiBhdHRlbXB0cyBiZWZvcmUgZ2l2aW5nIHVwXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkF0dGVtcHRzID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHM7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGRlbGF5IGJldHdlZW4gcmVjb25uZWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uRGVsYXkgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheTtcbiAgdGhpcy5fcmVjb25uZWN0aW9uRGVsYXkgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldE1pbih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yYW5kb21pemF0aW9uRmFjdG9yID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvcjtcbiAgdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0Sml0dGVyKHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgbWF4aW11bSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5TWF4ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXg7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNYXgodik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb25uZWN0aW9uIHRpbWVvdXQuIGBmYWxzZWAgdG8gZGlzYWJsZVxuICpcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3RpbWVvdXQ7XG4gIHRoaXMuX3RpbWVvdXQgPSB2O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU3RhcnRzIHRyeWluZyB0byByZWNvbm5lY3QgaWYgcmVjb25uZWN0aW9uIGlzIGVuYWJsZWQgYW5kIHdlIGhhdmUgbm90XG4gKiBzdGFydGVkIHJlY29ubmVjdGluZyB5ZXRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5tYXliZVJlY29ubmVjdE9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gT25seSB0cnkgdG8gcmVjb25uZWN0IGlmIGl0J3MgdGhlIGZpcnN0IHRpbWUgd2UncmUgY29ubmVjdGluZ1xuICBpZiAoIXRoaXMucmVjb25uZWN0aW5nICYmIHRoaXMuX3JlY29ubmVjdGlvbiAmJiB0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPT09IDApIHtcbiAgICAvLyBrZWVwcyByZWNvbm5lY3Rpb24gZnJvbSBmaXJpbmcgdHdpY2UgZm9yIHRoZSBzYW1lIHJlY29ubmVjdGlvbiBsb29wXG4gICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydCBgc29ja2V0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25hbCwgY2FsbGJhY2tcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub3BlbiA9XG5NYW5hZ2VyLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKGZuLCBvcHRzKSB7XG4gIGRlYnVnKCdyZWFkeVN0YXRlICVzJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgaWYgKH50aGlzLnJlYWR5U3RhdGUuaW5kZXhPZignb3BlbicpKSByZXR1cm4gdGhpcztcblxuICBkZWJ1Zygnb3BlbmluZyAlcycsIHRoaXMudXJpKTtcbiAgdGhpcy5lbmdpbmUgPSBlaW8odGhpcy51cmksIHRoaXMub3B0cyk7XG4gIHZhciBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IGZhbHNlO1xuXG4gIC8vIGVtaXQgYG9wZW5gXG4gIHZhciBvcGVuU3ViID0gb24oc29ja2V0LCAnb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9ub3BlbigpO1xuICAgIGZuICYmIGZuKCk7XG4gIH0pO1xuXG4gIC8vIGVtaXQgYGNvbm5lY3RfZXJyb3JgXG4gIHZhciBlcnJvclN1YiA9IG9uKHNvY2tldCwgJ2Vycm9yJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkZWJ1ZygnY29ubmVjdF9lcnJvcicpO1xuICAgIHNlbGYuY2xlYW51cCgpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICAgIHNlbGYuZW1pdEFsbCgnY29ubmVjdF9lcnJvcicsIGRhdGEpO1xuICAgIGlmIChmbikge1xuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignQ29ubmVjdGlvbiBlcnJvcicpO1xuICAgICAgZXJyLmRhdGEgPSBkYXRhO1xuICAgICAgZm4oZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT25seSBkbyB0aGlzIGlmIHRoZXJlIGlzIG5vIGZuIHRvIGhhbmRsZSB0aGUgZXJyb3JcbiAgICAgIHNlbGYubWF5YmVSZWNvbm5lY3RPbk9wZW4oKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGVtaXQgYGNvbm5lY3RfdGltZW91dGBcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl90aW1lb3V0KSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLl90aW1lb3V0O1xuICAgIGRlYnVnKCdjb25uZWN0IGF0dGVtcHQgd2lsbCB0aW1lb3V0IGFmdGVyICVkJywgdGltZW91dCk7XG5cbiAgICAvLyBzZXQgdGltZXJcbiAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlYnVnKCdjb25uZWN0IGF0dGVtcHQgdGltZWQgb3V0IGFmdGVyICVkJywgdGltZW91dCk7XG4gICAgICBvcGVuU3ViLmRlc3Ryb3koKTtcbiAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgICAgc29ja2V0LmVtaXQoJ2Vycm9yJywgJ3RpbWVvdXQnKTtcbiAgICAgIHNlbGYuZW1pdEFsbCgnY29ubmVjdF90aW1lb3V0JywgdGltZW91dCk7XG4gICAgfSwgdGltZW91dCk7XG5cbiAgICB0aGlzLnN1YnMucHVzaCh7XG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB0aGlzLnN1YnMucHVzaChvcGVuU3ViKTtcbiAgdGhpcy5zdWJzLnB1c2goZXJyb3JTdWIpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdvcGVuJyk7XG5cbiAgLy8gY2xlYXIgb2xkIHN1YnNcbiAgdGhpcy5jbGVhbnVwKCk7XG5cbiAgLy8gbWFyayBhcyBvcGVuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG5cbiAgLy8gYWRkIG5ldyBzdWJzXG4gIHZhciBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnZGF0YScsIGJpbmQodGhpcywgJ29uZGF0YScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ3BpbmcnLCBiaW5kKHRoaXMsICdvbnBpbmcnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwb25nJywgYmluZCh0aGlzLCAnb25wb25nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnZXJyb3InLCBiaW5kKHRoaXMsICdvbmVycm9yJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnY2xvc2UnLCBiaW5kKHRoaXMsICdvbmNsb3NlJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24odGhpcy5kZWNvZGVyLCAnZGVjb2RlZCcsIGJpbmQodGhpcywgJ29uZGVjb2RlZCcpKSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGluZy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMubGFzdFBpbmcgPSBuZXcgRGF0ZSgpO1xuICB0aGlzLmVtaXRBbGwoJ3BpbmcnKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25wb25nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXRBbGwoJ3BvbmcnLCBuZXcgRGF0ZSgpIC0gdGhpcy5sYXN0UGluZyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGRhdGEuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25kYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5kZWNvZGVyLmFkZChkYXRhKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gcGFyc2VyIGZ1bGx5IGRlY29kZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25kZWNvZGVkID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB0aGlzLmVtaXQoJ3BhY2tldCcsIHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNvY2tldCBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICBkZWJ1ZygnZXJyb3InLCBlcnIpO1xuICB0aGlzLmVtaXRBbGwoJ2Vycm9yJywgZXJyKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBzb2NrZXQgZm9yIHRoZSBnaXZlbiBgbnNwYC5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnNvY2tldCA9IGZ1bmN0aW9uIChuc3AsIG9wdHMpIHtcbiAgdmFyIHNvY2tldCA9IHRoaXMubnNwc1tuc3BdO1xuICBpZiAoIXNvY2tldCkge1xuICAgIHNvY2tldCA9IG5ldyBTb2NrZXQodGhpcywgbnNwLCBvcHRzKTtcbiAgICB0aGlzLm5zcHNbbnNwXSA9IHNvY2tldDtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0aW5nJywgb25Db25uZWN0aW5nKTtcbiAgICBzb2NrZXQub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzb2NrZXQuaWQgPSBzZWxmLmdlbmVyYXRlSWQobnNwKTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmF1dG9Db25uZWN0KSB7XG4gICAgICAvLyBtYW51YWxseSBjYWxsIGhlcmUgc2luY2UgY29ubmVjdGluZyBldmVudCBpcyBmaXJlZCBiZWZvcmUgbGlzdGVuaW5nXG4gICAgICBvbkNvbm5lY3RpbmcoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkNvbm5lY3RpbmcgKCkge1xuICAgIGlmICghfmluZGV4T2Yoc2VsZi5jb25uZWN0aW5nLCBzb2NrZXQpKSB7XG4gICAgICBzZWxmLmNvbm5lY3RpbmcucHVzaChzb2NrZXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzb2NrZXQ7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc29ja2V0IGNsb3NlLlxuICpcbiAqIEBwYXJhbSB7U29ja2V0fSBzb2NrZXRcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKHNvY2tldCkge1xuICB2YXIgaW5kZXggPSBpbmRleE9mKHRoaXMuY29ubmVjdGluZywgc29ja2V0KTtcbiAgaWYgKH5pbmRleCkgdGhpcy5jb25uZWN0aW5nLnNwbGljZShpbmRleCwgMSk7XG4gIGlmICh0aGlzLmNvbm5lY3RpbmcubGVuZ3RoKSByZXR1cm47XG5cbiAgdGhpcy5jbG9zZSgpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBkZWJ1Zygnd3JpdGluZyBwYWNrZXQgJWonLCBwYWNrZXQpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmIChwYWNrZXQucXVlcnkgJiYgcGFja2V0LnR5cGUgPT09IDApIHBhY2tldC5uc3AgKz0gJz8nICsgcGFja2V0LnF1ZXJ5O1xuXG4gIGlmICghc2VsZi5lbmNvZGluZykge1xuICAgIC8vIGVuY29kZSwgdGhlbiB3cml0ZSB0byBlbmdpbmUgd2l0aCByZXN1bHRcbiAgICBzZWxmLmVuY29kaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmVuY29kZXIuZW5jb2RlKHBhY2tldCwgZnVuY3Rpb24gKGVuY29kZWRQYWNrZXRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWRQYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNlbGYuZW5naW5lLndyaXRlKGVuY29kZWRQYWNrZXRzW2ldLCBwYWNrZXQub3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBzZWxmLmVuY29kaW5nID0gZmFsc2U7XG4gICAgICBzZWxmLnByb2Nlc3NQYWNrZXRRdWV1ZSgpO1xuICAgIH0pO1xuICB9IGVsc2UgeyAvLyBhZGQgcGFja2V0IHRvIHRoZSBxdWV1ZVxuICAgIHNlbGYucGFja2V0QnVmZmVyLnB1c2gocGFja2V0KTtcbiAgfVxufTtcblxuLyoqXG4gKiBJZiBwYWNrZXQgYnVmZmVyIGlzIG5vbi1lbXB0eSwgYmVnaW5zIGVuY29kaW5nIHRoZVxuICogbmV4dCBwYWNrZXQgaW4gbGluZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5wcm9jZXNzUGFja2V0UXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnBhY2tldEJ1ZmZlci5sZW5ndGggPiAwICYmICF0aGlzLmVuY29kaW5nKSB7XG4gICAgdmFyIHBhY2sgPSB0aGlzLnBhY2tldEJ1ZmZlci5zaGlmdCgpO1xuICAgIHRoaXMucGFja2V0KHBhY2spO1xuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIHRyYW5zcG9ydCBzdWJzY3JpcHRpb25zIGFuZCBwYWNrZXQgYnVmZmVyLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjbGVhbnVwJyk7XG5cbiAgdmFyIHN1YnNMZW5ndGggPSB0aGlzLnN1YnMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNMZW5ndGg7IGkrKykge1xuICAgIHZhciBzdWIgPSB0aGlzLnN1YnMuc2hpZnQoKTtcbiAgICBzdWIuZGVzdHJveSgpO1xuICB9XG5cbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdGhpcy5lbmNvZGluZyA9IGZhbHNlO1xuICB0aGlzLmxhc3RQaW5nID0gbnVsbDtcblxuICB0aGlzLmRlY29kZXIuZGVzdHJveSgpO1xufTtcblxuLyoqXG4gKiBDbG9zZSB0aGUgY3VycmVudCBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuY2xvc2UgPVxuTWFuYWdlci5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2Rpc2Nvbm5lY3QnKTtcbiAgdGhpcy5za2lwUmVjb25uZWN0ID0gdHJ1ZTtcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gYG9uY2xvc2VgIHdpbGwgbm90IGZpcmUgYmVjYXVzZVxuICAgIC8vIGFuIG9wZW4gZXZlbnQgbmV2ZXIgaGFwcGVuZWRcbiAgICB0aGlzLmNsZWFudXAoKTtcbiAgfVxuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIGlmICh0aGlzLmVuZ2luZSkgdGhpcy5lbmdpbmUuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gIGRlYnVnKCdvbmNsb3NlJyk7XG5cbiAgdGhpcy5jbGVhbnVwKCk7XG4gIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbik7XG5cbiAgaWYgKHRoaXMuX3JlY29ubmVjdGlvbiAmJiAhdGhpcy5za2lwUmVjb25uZWN0KSB7XG4gICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBdHRlbXB0IGEgcmVjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMucmVjb25uZWN0aW5nIHx8IHRoaXMuc2tpcFJlY29ubmVjdCkgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICh0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPj0gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMpIHtcbiAgICBkZWJ1ZygncmVjb25uZWN0IGZhaWxlZCcpO1xuICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0X2ZhaWxlZCcpO1xuICAgIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRlbGF5ID0gdGhpcy5iYWNrb2ZmLmR1cmF0aW9uKCk7XG4gICAgZGVidWcoJ3dpbGwgd2FpdCAlZG1zIGJlZm9yZSByZWNvbm5lY3QgYXR0ZW1wdCcsIGRlbGF5KTtcblxuICAgIHRoaXMucmVjb25uZWN0aW5nID0gdHJ1ZTtcbiAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpIHJldHVybjtcblxuICAgICAgZGVidWcoJ2F0dGVtcHRpbmcgcmVjb25uZWN0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdF9hdHRlbXB0Jywgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtcbiAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0aW5nJywgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtcblxuICAgICAgLy8gY2hlY2sgYWdhaW4gZm9yIHRoZSBjYXNlIHNvY2tldCBjbG9zZWQgaW4gYWJvdmUgZXZlbnRzXG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIHNlbGYub3BlbihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBkZWJ1ZygncmVjb25uZWN0IGF0dGVtcHQgZXJyb3InKTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHNlbGYucmVjb25uZWN0KCk7XG4gICAgICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfZXJyb3InLCBlcnIuZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBzdWNjZXNzJyk7XG4gICAgICAgICAgc2VsZi5vbnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBkZWxheSk7XG5cbiAgICB0aGlzLnN1YnMucHVzaCh7XG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCByZWNvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhdHRlbXB0ID0gdGhpcy5iYWNrb2ZmLmF0dGVtcHRzO1xuICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy51cGRhdGVTb2NrZXRJZHMoKTtcbiAgdGhpcy5lbWl0QWxsKCdyZWNvbm5lY3QnLCBhdHRlbXB0KTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvbWFuYWdlci5qcyIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xudmFyIFhIUiA9IHJlcXVpcmUoJy4vcG9sbGluZy14aHInKTtcbnZhciBKU09OUCA9IHJlcXVpcmUoJy4vcG9sbGluZy1qc29ucCcpO1xudmFyIHdlYnNvY2tldCA9IHJlcXVpcmUoJy4vd2Vic29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0IHRyYW5zcG9ydHMuXG4gKi9cblxuZXhwb3J0cy5wb2xsaW5nID0gcG9sbGluZztcbmV4cG9ydHMud2Vic29ja2V0ID0gd2Vic29ja2V0O1xuXG4vKipcbiAqIFBvbGxpbmcgdHJhbnNwb3J0IHBvbHltb3JwaGljIGNvbnN0cnVjdG9yLlxuICogRGVjaWRlcyBvbiB4aHIgdnMganNvbnAgYmFzZWQgb24gZmVhdHVyZSBkZXRlY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcG9sbGluZyAob3B0cykge1xuICB2YXIgeGhyO1xuICB2YXIgeGQgPSBmYWxzZTtcbiAgdmFyIHhzID0gZmFsc2U7XG4gIHZhciBqc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuXG4gIGlmIChnbG9iYWwubG9jYXRpb24pIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgeGQgPSBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSB8fCBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgeHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cblxuICBvcHRzLnhkb21haW4gPSB4ZDtcbiAgb3B0cy54c2NoZW1lID0geHM7XG4gIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcblxuICBpZiAoJ29wZW4nIGluIHhociAmJiAhb3B0cy5mb3JjZUpTT05QKSB7XG4gICAgcmV0dXJuIG5ldyBYSFIob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFqc29ucCkgdGhyb3cgbmV3IEVycm9yKCdKU09OUCBkaXNhYmxlZCcpO1xuICAgIHJldHVybiBuZXcgSlNPTlAob3B0cyk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL2luZGV4LmpzIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi90cmFuc3BvcnQnKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciB5ZWFzdCA9IHJlcXVpcmUoJ3llYXN0Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnBvbGxpbmcnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbGxpbmc7XG5cbi8qKlxuICogSXMgWEhSMiBzdXBwb3J0ZWQ/XG4gKi9cblxudmFyIGhhc1hIUjIgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbiAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCh7IHhkb21haW46IGZhbHNlIH0pO1xuICByZXR1cm4gbnVsbCAhPSB4aHIucmVzcG9uc2VUeXBlO1xufSkoKTtcblxuLyoqXG4gKiBQb2xsaW5nIGludGVyZmFjZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gUG9sbGluZyAob3B0cykge1xuICB2YXIgZm9yY2VCYXNlNjQgPSAob3B0cyAmJiBvcHRzLmZvcmNlQmFzZTY0KTtcbiAgaWYgKCFoYXNYSFIyIHx8IGZvcmNlQmFzZTY0KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG4gIFRyYW5zcG9ydC5jYWxsKHRoaXMsIG9wdHMpO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxuICovXG5cbmluaGVyaXQoUG9sbGluZywgVHJhbnNwb3J0KTtcblxuLyoqXG4gKiBUcmFuc3BvcnQgbmFtZS5cbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5uYW1lID0gJ3BvbGxpbmcnO1xuXG4vKipcbiAqIE9wZW5zIHRoZSBzb2NrZXQgKHRyaWdnZXJzIHBvbGxpbmcpLiBXZSB3cml0ZSBhIFBJTkcgbWVzc2FnZSB0byBkZXRlcm1pbmVcbiAqIHdoZW4gdGhlIHRyYW5zcG9ydCBpcyBvcGVuLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLmRvT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5wb2xsKCk7XG59O1xuXG4vKipcbiAqIFBhdXNlcyBwb2xsaW5nLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHVwb24gYnVmZmVycyBhcmUgZmx1c2hlZCBhbmQgdHJhbnNwb3J0IGlzIHBhdXNlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAob25QYXVzZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5yZWFkeVN0YXRlID0gJ3BhdXNpbmcnO1xuXG4gIGZ1bmN0aW9uIHBhdXNlICgpIHtcbiAgICBkZWJ1ZygncGF1c2VkJyk7XG4gICAgc2VsZi5yZWFkeVN0YXRlID0gJ3BhdXNlZCc7XG4gICAgb25QYXVzZSgpO1xuICB9XG5cbiAgaWYgKHRoaXMucG9sbGluZyB8fCAhdGhpcy53cml0YWJsZSkge1xuICAgIHZhciB0b3RhbCA9IDA7XG5cbiAgICBpZiAodGhpcy5wb2xsaW5nKSB7XG4gICAgICBkZWJ1Zygnd2UgYXJlIGN1cnJlbnRseSBwb2xsaW5nIC0gd2FpdGluZyB0byBwYXVzZScpO1xuICAgICAgdG90YWwrKztcbiAgICAgIHRoaXMub25jZSgncG9sbENvbXBsZXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHBvbGxpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLndyaXRhYmxlKSB7XG4gICAgICBkZWJ1Zygnd2UgYXJlIGN1cnJlbnRseSB3cml0aW5nIC0gd2FpdGluZyB0byBwYXVzZScpO1xuICAgICAgdG90YWwrKztcbiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlYnVnKCdwcmUtcGF1c2Ugd3JpdGluZyBjb21wbGV0ZScpO1xuICAgICAgICAtLXRvdGFsIHx8IHBhdXNlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcGF1c2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTdGFydHMgcG9sbGluZyBjeWNsZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdwb2xsaW5nJyk7XG4gIHRoaXMucG9sbGluZyA9IHRydWU7XG4gIHRoaXMuZG9Qb2xsKCk7XG4gIHRoaXMuZW1pdCgncG9sbCcpO1xufTtcblxuLyoqXG4gKiBPdmVybG9hZHMgb25EYXRhIHRvIGRldGVjdCBwYXlsb2Fkcy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGRlYnVnKCdwb2xsaW5nIGdvdCBkYXRhICVzJywgZGF0YSk7XG4gIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIChwYWNrZXQsIGluZGV4LCB0b3RhbCkge1xuICAgIC8vIGlmIGl0cyB0aGUgZmlyc3QgbWVzc2FnZSB3ZSBjb25zaWRlciB0aGUgdHJhbnNwb3J0IG9wZW5cbiAgICBpZiAoJ29wZW5pbmcnID09PSBzZWxmLnJlYWR5U3RhdGUpIHtcbiAgICAgIHNlbGYub25PcGVuKCk7XG4gICAgfVxuXG4gICAgLy8gaWYgaXRzIGEgY2xvc2UgcGFja2V0LCB3ZSBjbG9zZSB0aGUgb25nb2luZyByZXF1ZXN0c1xuICAgIGlmICgnY2xvc2UnID09PSBwYWNrZXQudHlwZSkge1xuICAgICAgc2VsZi5vbkNsb3NlKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gb3RoZXJ3aXNlIGJ5cGFzcyBvbkRhdGEgYW5kIGhhbmRsZSB0aGUgbWVzc2FnZVxuICAgIHNlbGYub25QYWNrZXQocGFja2V0KTtcbiAgfTtcblxuICAvLyBkZWNvZGUgcGF5bG9hZFxuICBwYXJzZXIuZGVjb2RlUGF5bG9hZChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlLCBjYWxsYmFjayk7XG5cbiAgLy8gaWYgYW4gZXZlbnQgZGlkIG5vdCB0cmlnZ2VyIGNsb3NpbmdcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAvLyBpZiB3ZSBnb3QgZGF0YSB3ZSdyZSBub3QgcG9sbGluZ1xuICAgIHRoaXMucG9sbGluZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncG9sbENvbXBsZXRlJyk7XG5cbiAgICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIHRoaXMucG9sbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1ZygnaWdub3JpbmcgcG9sbCAtIHRyYW5zcG9ydCBzdGF0ZSBcIiVzXCInLCB0aGlzLnJlYWR5U3RhdGUpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBGb3IgcG9sbGluZywgc2VuZCBhIGNsb3NlIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gY2xvc2UgKCkge1xuICAgIGRlYnVnKCd3cml0aW5nIGNsb3NlIHBhY2tldCcpO1xuICAgIHNlbGYud3JpdGUoW3sgdHlwZTogJ2Nsb3NlJyB9XSk7XG4gIH1cblxuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICBkZWJ1ZygndHJhbnNwb3J0IG9wZW4gLSBjbG9zaW5nJyk7XG4gICAgY2xvc2UoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpbiBjYXNlIHdlJ3JlIHRyeWluZyB0byBjbG9zZSB3aGlsZVxuICAgIC8vIGhhbmRzaGFraW5nIGlzIGluIHByb2dyZXNzIChHSC0xNjQpXG4gICAgZGVidWcoJ3RyYW5zcG9ydCBub3Qgb3BlbiAtIGRlZmVycmluZyBjbG9zZScpO1xuICAgIHRoaXMub25jZSgnb3BlbicsIGNsb3NlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBwYWNrZXRzIHBheWxvYWQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGF0YSBwYWNrZXRzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkcmFpbiBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgdmFyIGNhbGxiYWNrZm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi53cml0YWJsZSA9IHRydWU7XG4gICAgc2VsZi5lbWl0KCdkcmFpbicpO1xuICB9O1xuXG4gIHBhcnNlci5lbmNvZGVQYXlsb2FkKHBhY2tldHMsIHRoaXMuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgc2VsZi5kb1dyaXRlKGRhdGEsIGNhbGxiYWNrZm4pO1xuICB9KTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gIHZhciBzY2hlbWEgPSB0aGlzLnNlY3VyZSA/ICdodHRwcycgOiAnaHR0cCc7XG4gIHZhciBwb3J0ID0gJyc7XG5cbiAgLy8gY2FjaGUgYnVzdGluZyBpcyBmb3JjZWRcbiAgaWYgKGZhbHNlICE9PSB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgcXVlcnlbdGhpcy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICB9XG5cbiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmICFxdWVyeS5zaWQpIHtcbiAgICBxdWVyeS5iNjQgPSAxO1xuICB9XG5cbiAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgaWYgKHRoaXMucG9ydCAmJiAoKCdodHRwcycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICAoJ2h0dHAnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDgwKSkpIHtcbiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0O1xuICB9XG5cbiAgLy8gcHJlcGVuZCA/IHRvIHF1ZXJ5XG4gIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9ICc/JyArIHF1ZXJ5O1xuICB9XG5cbiAgdmFyIGlwdjYgPSB0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHJldHVybiBzY2hlbWEgKyAnOi8vJyArIChpcHY2ID8gJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyA6IHRoaXMuaG9zdG5hbWUpICsgcG9ydCArIHRoaXMucGF0aCArIHF1ZXJ5O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcuanMiLCIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXHJcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fJy5zcGxpdCgnJylcbiAgLCBsZW5ndGggPSA2NFxuICAsIG1hcCA9IHt9XG4gICwgc2VlZCA9IDBcbiAgLCBpID0gMFxuICAsIHByZXY7XG5cbi8qKlxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbnVtIFRoZSBudW1iZXIgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG51bWJlci5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShudW0pIHtcbiAgdmFyIGVuY29kZWQgPSAnJztcblxuICBkbyB7XG4gICAgZW5jb2RlZCA9IGFscGhhYmV0W251bSAlIGxlbmd0aF0gKyBlbmNvZGVkO1xuICAgIG51bSA9IE1hdGguZmxvb3IobnVtIC8gbGVuZ3RoKTtcbiAgfSB3aGlsZSAobnVtID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbnRlZ2VyIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge051bWJlcn0gVGhlIGludGVnZXIgdmFsdWUgcmVwcmVzZW50ZWQgYnkgdGhlIHN0cmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgdmFyIGRlY29kZWQgPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBkZWNvZGVkID0gZGVjb2RlZCAqIGxlbmd0aCArIG1hcFtzdHIuY2hhckF0KGkpXTtcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVkO1xufVxuXG4vKipcbiAqIFllYXN0OiBBIHRpbnkgZ3Jvd2luZyBpZCBnZW5lcmF0b3IuXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gQSB1bmlxdWUgaWQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiB5ZWFzdCgpIHtcbiAgdmFyIG5vdyA9IGVuY29kZSgrbmV3IERhdGUoKSk7XG5cbiAgaWYgKG5vdyAhPT0gcHJldikgcmV0dXJuIHNlZWQgPSAwLCBwcmV2ID0gbm93O1xuICByZXR1cm4gbm93ICsnLicrIGVuY29kZShzZWVkKyspO1xufVxuXG4vL1xuLy8gTWFwIGVhY2ggY2hhcmFjdGVyIHRvIGl0cyBpbmRleC5cbi8vXG5mb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSBtYXBbYWxwaGFiZXRbaV1dID0gaTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgYHllYXN0YCwgYGVuY29kZWAgYW5kIGBkZWNvZGVgIGZ1bmN0aW9ucy5cbi8vXG55ZWFzdC5lbmNvZGUgPSBlbmNvZGU7XG55ZWFzdC5kZWNvZGUgPSBkZWNvZGU7XG5tb2R1bGUuZXhwb3J0cyA9IHllYXN0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3llYXN0L2luZGV4LmpzIiwiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9pbmRleG9mL2luZGV4LmpzIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciB0b0FycmF5ID0gcmVxdWlyZSgndG8tYXJyYXknKTtcbnZhciBvbiA9IHJlcXVpcmUoJy4vb24nKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnY29tcG9uZW50LWJpbmQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6c29ja2V0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBTb2NrZXQ7XG5cbi8qKlxuICogSW50ZXJuYWwgZXZlbnRzIChibGFja2xpc3RlZCkuXG4gKiBUaGVzZSBldmVudHMgY2FuJ3QgYmUgZW1pdHRlZCBieSB0aGUgdXNlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgZXZlbnRzID0ge1xuICBjb25uZWN0OiAxLFxuICBjb25uZWN0X2Vycm9yOiAxLFxuICBjb25uZWN0X3RpbWVvdXQ6IDEsXG4gIGNvbm5lY3Rpbmc6IDEsXG4gIGRpc2Nvbm5lY3Q6IDEsXG4gIGVycm9yOiAxLFxuICByZWNvbm5lY3Q6IDEsXG4gIHJlY29ubmVjdF9hdHRlbXB0OiAxLFxuICByZWNvbm5lY3RfZmFpbGVkOiAxLFxuICByZWNvbm5lY3RfZXJyb3I6IDEsXG4gIHJlY29ubmVjdGluZzogMSxcbiAgcGluZzogMSxcbiAgcG9uZzogMVxufTtcblxuLyoqXG4gKiBTaG9ydGN1dCB0byBgRW1pdHRlciNlbWl0YC5cbiAqL1xuXG52YXIgZW1pdCA9IEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ7XG5cbi8qKlxuICogYFNvY2tldGAgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQgKGlvLCBuc3AsIG9wdHMpIHtcbiAgdGhpcy5pbyA9IGlvO1xuICB0aGlzLm5zcCA9IG5zcDtcbiAgdGhpcy5qc29uID0gdGhpczsgLy8gY29tcGF0XG4gIHRoaXMuaWRzID0gMDtcbiAgdGhpcy5hY2tzID0ge307XG4gIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICBpZiAob3B0cyAmJiBvcHRzLnF1ZXJ5KSB7XG4gICAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIH1cbiAgaWYgKHRoaXMuaW8uYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihTb2NrZXQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gb3BlbiwgY2xvc2UgYW5kIHBhY2tldCBldmVudHNcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnN1YkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc3VicykgcmV0dXJuO1xuXG4gIHZhciBpbyA9IHRoaXMuaW87XG4gIHRoaXMuc3VicyA9IFtcbiAgICBvbihpbywgJ29wZW4nLCBiaW5kKHRoaXMsICdvbm9wZW4nKSksXG4gICAgb24oaW8sICdwYWNrZXQnLCBiaW5kKHRoaXMsICdvbnBhY2tldCcpKSxcbiAgICBvbihpbywgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKVxuICBdO1xufTtcblxuLyoqXG4gKiBcIk9wZW5zXCIgdGhlIHNvY2tldC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUub3BlbiA9XG5Tb2NrZXQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNvbm5lY3RlZCkgcmV0dXJuIHRoaXM7XG5cbiAgdGhpcy5zdWJFdmVudHMoKTtcbiAgdGhpcy5pby5vcGVuKCk7IC8vIGVuc3VyZSBvcGVuXG4gIGlmICgnb3BlbicgPT09IHRoaXMuaW8ucmVhZHlTdGF0ZSkgdGhpcy5vbm9wZW4oKTtcbiAgdGhpcy5lbWl0KCdjb25uZWN0aW5nJyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIGBtZXNzYWdlYCBldmVudC5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgYXJncy51bnNoaWZ0KCdtZXNzYWdlJyk7XG4gIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlIGBlbWl0YC5cbiAqIElmIHRoZSBldmVudCBpcyBpbiBgZXZlbnRzYCwgaXQncyBlbWl0dGVkIG5vcm1hbGx5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBuYW1lXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKGV2KSB7XG4gIGlmIChldmVudHMuaGFzT3duUHJvcGVydHkoZXYpKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gIHZhciBwYWNrZXQgPSB7IHR5cGU6IHBhcnNlci5FVkVOVCwgZGF0YTogYXJncyB9O1xuXG4gIHBhY2tldC5vcHRpb25zID0ge307XG4gIHBhY2tldC5vcHRpb25zLmNvbXByZXNzID0gIXRoaXMuZmxhZ3MgfHwgZmFsc2UgIT09IHRoaXMuZmxhZ3MuY29tcHJlc3M7XG5cbiAgLy8gZXZlbnQgYWNrIGNhbGxiYWNrXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdKSB7XG4gICAgZGVidWcoJ2VtaXR0aW5nIHBhY2tldCB3aXRoIGFjayBpZCAlZCcsIHRoaXMuaWRzKTtcbiAgICB0aGlzLmFja3NbdGhpcy5pZHNdID0gYXJncy5wb3AoKTtcbiAgICBwYWNrZXQuaWQgPSB0aGlzLmlkcysrO1xuICB9XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgdGhpcy5wYWNrZXQocGFja2V0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNlbmRCdWZmZXIucHVzaChwYWNrZXQpO1xuICB9XG5cbiAgZGVsZXRlIHRoaXMuZmxhZ3M7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBwYWNrZXQubnNwID0gdGhpcy5uc3A7XG4gIHRoaXMuaW8ucGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBgb3BlbmAuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd0cmFuc3BvcnQgaXMgb3BlbiAtIGNvbm5lY3RpbmcnKTtcblxuICAvLyB3cml0ZSBjb25uZWN0IHBhY2tldCBpZiBuZWNlc3NhcnlcbiAgaWYgKCcvJyAhPT0gdGhpcy5uc3ApIHtcbiAgICBpZiAodGhpcy5xdWVyeSkge1xuICAgICAgdmFyIHF1ZXJ5ID0gdHlwZW9mIHRoaXMucXVlcnkgPT09ICdvYmplY3QnID8gcGFyc2Vxcy5lbmNvZGUodGhpcy5xdWVyeSkgOiB0aGlzLnF1ZXJ5O1xuICAgICAgZGVidWcoJ3NlbmRpbmcgY29ubmVjdCBwYWNrZXQgd2l0aCBxdWVyeSAlcycsIHF1ZXJ5KTtcbiAgICAgIHRoaXMucGFja2V0KHt0eXBlOiBwYXJzZXIuQ09OTkVDVCwgcXVlcnk6IHF1ZXJ5fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFja2V0KHt0eXBlOiBwYXJzZXIuQ09OTkVDVH0pO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgYGNsb3NlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVhc29uXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gIGRlYnVnKCdjbG9zZSAoJXMpJywgcmVhc29uKTtcbiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICBkZWxldGUgdGhpcy5pZDtcbiAgdGhpcy5lbWl0KCdkaXNjb25uZWN0JywgcmVhc29uKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggc29ja2V0IHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9ucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBpZiAocGFja2V0Lm5zcCAhPT0gdGhpcy5uc3ApIHJldHVybjtcblxuICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgY2FzZSBwYXJzZXIuQ09OTkVDVDpcbiAgICAgIHRoaXMub25jb25uZWN0KCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkVWRU5UOlxuICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5BQ0s6XG4gICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9BQ0s6XG4gICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkRJU0NPTk5FQ1Q6XG4gICAgICB0aGlzLm9uZGlzY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FUlJPUjpcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBwYWNrZXQuZGF0YSk7XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBldmVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uZXZlbnQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBhcmdzID0gcGFja2V0LmRhdGEgfHwgW107XG4gIGRlYnVnKCdlbWl0dGluZyBldmVudCAlaicsIGFyZ3MpO1xuXG4gIGlmIChudWxsICE9IHBhY2tldC5pZCkge1xuICAgIGRlYnVnKCdhdHRhY2hpbmcgYWNrIGNhbGxiYWNrIHRvIGV2ZW50Jyk7XG4gICAgYXJncy5wdXNoKHRoaXMuYWNrKHBhY2tldC5pZCkpO1xuICB9XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlY2VpdmVCdWZmZXIucHVzaChhcmdzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQcm9kdWNlcyBhbiBhY2sgY2FsbGJhY2sgdG8gZW1pdCB3aXRoIGFuIGV2ZW50LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuYWNrID0gZnVuY3Rpb24gKGlkKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNlbnQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBwcmV2ZW50IGRvdWJsZSBjYWxsYmFja3NcbiAgICBpZiAoc2VudCkgcmV0dXJuO1xuICAgIHNlbnQgPSB0cnVlO1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICAgIGRlYnVnKCdzZW5kaW5nIGFjayAlaicsIGFyZ3MpO1xuXG4gICAgc2VsZi5wYWNrZXQoe1xuICAgICAgdHlwZTogcGFyc2VyLkFDSyxcbiAgICAgIGlkOiBpZCxcbiAgICAgIGRhdGE6IGFyZ3NcbiAgICB9KTtcbiAgfTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgYWNrbm93bGVnZW1lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmFjayA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIGFjayA9IHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFjaykge1xuICAgIGRlYnVnKCdjYWxsaW5nIGFjayAlcyB3aXRoICVqJywgcGFja2V0LmlkLCBwYWNrZXQuZGF0YSk7XG4gICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTtcbiAgICBkZWxldGUgdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ2JhZCBhY2sgJXMnLCBwYWNrZXQuaWQpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnY29ubmVjdCcpO1xuICB0aGlzLmVtaXRCdWZmZXJlZCgpO1xufTtcblxuLyoqXG4gKiBFbWl0IGJ1ZmZlcmVkIGV2ZW50cyAocmVjZWl2ZWQgYW5kIGVtaXR0ZWQpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZW1pdEJ1ZmZlcmVkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IHRoaXMucmVjZWl2ZUJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIGVtaXQuYXBwbHkodGhpcywgdGhpcy5yZWNlaXZlQnVmZmVyW2ldKTtcbiAgfVxuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5wYWNrZXQodGhpcy5zZW5kQnVmZmVyW2ldKTtcbiAgfVxuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc2VydmVyIGRpc2Nvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzZXJ2ZXIgZGlzY29ubmVjdCAoJXMpJywgdGhpcy5uc3ApO1xuICB0aGlzLmRlc3Ryb3koKTtcbiAgdGhpcy5vbmNsb3NlKCdpbyBzZXJ2ZXIgZGlzY29ubmVjdCcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBmb3JjZWQgY2xpZW50L3NlcnZlciBzaWRlIGRpc2Nvbm5lY3Rpb25zLFxuICogdGhpcyBtZXRob2QgZW5zdXJlcyB0aGUgbWFuYWdlciBzdG9wcyB0cmFja2luZyB1cyBhbmRcbiAqIHRoYXQgcmVjb25uZWN0aW9ucyBkb24ndCBnZXQgdHJpZ2dlcmVkIGZvciB0aGlzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZS5cbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN1YnMpIHtcbiAgICAvLyBjbGVhbiBzdWJzY3JpcHRpb25zIHRvIGF2b2lkIHJlY29ubmVjdGlvbnNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vicy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5zdWJzW2ldLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy5zdWJzID0gbnVsbDtcbiAgfVxuXG4gIHRoaXMuaW8uZGVzdHJveSh0aGlzKTtcbn07XG5cbi8qKlxuICogRGlzY29ubmVjdHMgdGhlIHNvY2tldCBtYW51YWxseS5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9XG5Tb2NrZXQucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGRlYnVnKCdwZXJmb3JtaW5nIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHBhcnNlci5ESVNDT05ORUNUIH0pO1xuICB9XG5cbiAgLy8gcmVtb3ZlIHNvY2tldCBmcm9tIHBvb2xcbiAgdGhpcy5kZXN0cm95KCk7XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgLy8gZmlyZSBldmVudHNcbiAgICB0aGlzLm9uY2xvc2UoJ2lvIGNsaWVudCBkaXNjb25uZWN0Jyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGNvbXByZXNzIGZsYWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY29tcHJlc3MgPSBmdW5jdGlvbiAoY29tcHJlc3MpIHtcbiAgdGhpcy5mbGFncyA9IHRoaXMuZmxhZ3MgfHwge307XG4gIHRoaXMuZmxhZ3MuY29tcHJlc3MgPSBjb21wcmVzcztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9uO1xuXG4vKipcbiAqIEhlbHBlciBmb3Igc3Vic2NyaXB0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxFdmVudEVtaXR0ZXJ9IG9iaiB3aXRoIGBFbWl0dGVyYCBtaXhpbiBvciBgRXZlbnRFbWl0dGVyYFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIG9uIChvYmosIGV2LCBmbikge1xuICBvYmoub24oZXYsIGZuKTtcbiAgcmV0dXJuIHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBvYmoucmVtb3ZlTGlzdGVuZXIoZXYsIGZuKTtcbiAgICB9XG4gIH07XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvb24uanMiLCIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb21wb25lbnQtYmluZC9pbmRleC5qcyIsIi8vIENyZWF0ZSBhIHNpbXBsZSBwYXRoIGFsaWFzIHRvIGFsbG93IGJyb3dzZXJpZnkgdG8gcmVzb2x2ZVxuLy8gdGhlIHJ1bnRpbWUgb24gYSBzdXBwb3J0ZWQgcGF0aC5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2Nqcy9oYW5kbGViYXJzLnJ1bnRpbWUnKVsnZGVmYXVsdCddO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qcyIsImltcG9ydCB7Y3JlYXRlRnJhbWUsIGV4dGVuZCwgdG9TdHJpbmd9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdEhlbHBlcnN9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnN9IGZyb20gJy4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNC4wLjEwJztcbmV4cG9ydCBjb25zdCBDT01QSUxFUl9SRVZJU0lPTiA9IDc7XG5cbmV4cG9ydCBjb25zdCBSRVZJU0lPTl9DSEFOR0VTID0ge1xuICAxOiAnPD0gMS4wLnJjLjInLCAvLyAxLjAucmMuMiBpcyBhY3R1YWxseSByZXYyIGJ1dCBkb2Vzbid0IHJlcG9ydCBpdFxuICAyOiAnPT0gMS4wLjAtcmMuMycsXG4gIDM6ICc9PSAxLjAuMC1yYy40JyxcbiAgNDogJz09IDEueC54JyxcbiAgNTogJz09IDIuMC4wLWFscGhhLngnLFxuICA2OiAnPj0gMi4wLjAtYmV0YS4xJyxcbiAgNzogJz49IDQuMC4wJ1xufTtcblxuY29uc3Qgb2JqZWN0VHlwZSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG5leHBvcnQgZnVuY3Rpb24gSGFuZGxlYmFyc0Vudmlyb25tZW50KGhlbHBlcnMsIHBhcnRpYWxzLCBkZWNvcmF0b3JzKSB7XG4gIHRoaXMuaGVscGVycyA9IGhlbHBlcnMgfHwge307XG4gIHRoaXMucGFydGlhbHMgPSBwYXJ0aWFscyB8fCB7fTtcbiAgdGhpcy5kZWNvcmF0b3JzID0gZGVjb3JhdG9ycyB8fCB7fTtcblxuICByZWdpc3RlckRlZmF1bHRIZWxwZXJzKHRoaXMpO1xuICByZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKHRoaXMpO1xufVxuXG5IYW5kbGViYXJzRW52aXJvbm1lbnQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogSGFuZGxlYmFyc0Vudmlyb25tZW50LFxuXG4gIGxvZ2dlcjogbG9nZ2VyLFxuICBsb2c6IGxvZ2dlci5sb2csXG5cbiAgcmVnaXN0ZXJIZWxwZXI6IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikgeyB0aHJvdyBuZXcgRXhjZXB0aW9uKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGhlbHBlcnMnKTsgfVxuICAgICAgZXh0ZW5kKHRoaXMuaGVscGVycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGVscGVyc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckhlbHBlcjogZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLmhlbHBlcnNbbmFtZV07XG4gIH0sXG5cbiAgcmVnaXN0ZXJQYXJ0aWFsOiBmdW5jdGlvbihuYW1lLCBwYXJ0aWFsKSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGV4dGVuZCh0aGlzLnBhcnRpYWxzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBwYXJ0aWFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKGBBdHRlbXB0aW5nIHRvIHJlZ2lzdGVyIGEgcGFydGlhbCBjYWxsZWQgXCIke25hbWV9XCIgYXMgdW5kZWZpbmVkYCk7XG4gICAgICB9XG4gICAgICB0aGlzLnBhcnRpYWxzW25hbWVdID0gcGFydGlhbDtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJQYXJ0aWFsOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMucGFydGlhbHNbbmFtZV07XG4gIH0sXG5cbiAgcmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikgeyB0aHJvdyBuZXcgRXhjZXB0aW9uKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGRlY29yYXRvcnMnKTsgfVxuICAgICAgZXh0ZW5kKHRoaXMuZGVjb3JhdG9ycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVjb3JhdG9yc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLmRlY29yYXRvcnNbbmFtZV07XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgbG9nID0gbG9nZ2VyLmxvZztcblxuZXhwb3J0IHtjcmVhdGVGcmFtZSwgbG9nZ2VyfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi8uLi9saWIvaGFuZGxlYmFycy9iYXNlLmpzIiwiaW1wb3J0IFBsYXllciBmcm9tICcuL3BsYXllcidcclxuaW1wb3J0IEdhbWUgZnJvbSAnLi9nYW1lJ1xyXG5cclxuY2xhc3MgR2FtZW1hc3RlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmFkbWluID0gdHJ1ZTsgLy8gYWRtaW4gY2FuIG1vdmUgYm90aCBwaWVjZXNcclxuICAgICAgICB0aGlzLmxvY2FsUGxheWVyID0gbmV3IFBsYXllcihcIkJpc2FmbG9yXCIpO1xyXG4gICAgICAgIGxldCBwbGF5ZXIyID0gbmV3IFBsYXllcihcIk1ld3R3b1wiKTtcclxuXHJcbiAgICAgICAgdGhpcy5nYW1lID0gbmV3IEdhbWUoe30sIHRoaXMubG9jYWxQbGF5ZXIsIHBsYXllcjIpO1xyXG5cclxuICAgICAgICAkKCdib2R5JykuYXBwZW5kKHRoaXMuZ2FtZS5yZW5kZXIoKSk7XHJcbiAgICAgICAgJCgnI2JvYXJkIHRkJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGdtLmhhbmRsZUNsaWNrKGdtLmdldENlbGwoJCh0aGlzKSkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnNvY2tldCA9IGlvKCk7XHJcbiAgICAgICAgdGhpcy5zb2NrZXQub24oJ21ha2UgbW92ZScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWUuZXhlY3V0ZShkYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5leGVjdXRlQWN0aW9uKGRhdGEpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSlcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDbGljayhjZWxsKSB7XHJcbiAgICAgICAgLy8gZXhlY3V0ZSBtb3ZlXHJcbiAgICAgICAgaWYgKHRoaXMuZ2V0anFDZWxsKGNlbGwpLmhhc0NsYXNzKCdwb3NzaWJsZU1vdmUnKSkge1xyXG4gICAgICAgICAgICBsZXQgc291cmNlSnFDZWxsID0gJCgnI2JvYXJkIHRkLnNlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgIGxldCBzb3VyY2VDZWxsID0gdGhpcy5nZXRDZWxsKHNvdXJjZUpxQ2VsbCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgbG9nRW50cnkgPSB0aGlzLmdhbWUucHJlcGFyZU1vdmUoc291cmNlQ2VsbCwgY2VsbCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdhbWUuZXhlY3V0ZShsb2dFbnRyeSk7XHJcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZUFjdGlvbihsb2dFbnRyeSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzZWxlY3RQaWVjZSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnbWFrZSBtb3ZlJywgbG9nRW50cnkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2hvdyBwb3NzaWJsZSBtb3Zlc1xyXG4gICAgICAgIGlmIChjZWxsLnBpZWNlICYmIChjZWxsLnBpZWNlLm93bmVyID09PSB0aGlzLmxvY2FsUGxheWVyIHx8IHRoaXMuYWRtaW4pKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdldGpxQ2VsbChjZWxsKS5oYXNDbGFzcygnc2VsZWN0ZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gYSBjbGljayBvbiBhIHNlbGVjdGVkIHBpZWNlIGRlc2VsZWN0cyBpdFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kZXNlbGVjdFBpZWNlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3RlZCBoaXMgb3duIHBpZWNlXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdFBpZWNlKGNlbGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4ZWN1dGVBY3Rpb24obG9nRW50cnkpIHtcclxuICAgICAgICBpZiAobG9nRW50cnkuYWN0aW9uID09PSAnbW92ZScpIHtcclxuICAgICAgICAgICAgbGV0IHNvdXJjZUpxQ2VsbCA9IHRoaXMuZ2V0anFDZWxsKGxvZ0VudHJ5LnNvdXJjZSk7XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXRKcUNlbGwgPSB0aGlzLmdldGpxQ2VsbChsb2dFbnRyeS50YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgc291cmNlSnFDZWxsLnJlbW92ZUNsYXNzKGxvZ0VudHJ5Lm1vdmVkUGllY2VDbGFzcyk7XHJcbiAgICAgICAgICAgIGlmIChsb2dFbnRyeS5raWxsZWRQaWVjZUNsYXNzKVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0SnFDZWxsLnJlbW92ZUNsYXNzKGxvZ0VudHJ5LmtpbGxlZFBpZWNlQ2xhc3MpO1xyXG4gICAgICAgICAgICB0YXJnZXRKcUNlbGwuYWRkQ2xhc3MobG9nRW50cnkubW92ZWRQaWVjZUNsYXNzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2VsbChqcWNlbGwpIHtcclxuICAgICAgICBsZXQgeCA9IGpxY2VsbC5kYXRhKCd4Jyk7XHJcbiAgICAgICAgbGV0IHkgPSBqcWNlbGwuZGF0YSgneScpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdhbWUuYm9hcmRbeV1beF07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0anFDZWxsKGNlbGwpIHtcclxuICAgICAgICByZXR1cm4gJCgnI2JvYXJkIHRkW2RhdGEteD1cIicrY2VsbC54KydcIl1bZGF0YS15PVwiJytjZWxsLnkrJ1wiXScpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdFBpZWNlKGNlbGwpIHtcclxuICAgICAgICAkKCcjYm9hcmQgLnNlbGVjdGVkJykucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgdGhpcy5nZXRqcUNlbGwoY2VsbCkuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XHJcblxyXG4gICAgICAgICQoJyNib2FyZCAucG9zc2libGVNb3ZlJykucmVtb3ZlQ2xhc3MoJ3Bvc3NpYmxlTW92ZScpO1xyXG4gICAgICAgIGxldCBwb3NzaWJsZU1vdmVzID0gdGhpcy5nYW1lLmdldFBvc3NpYmxlTW92ZXMoY2VsbCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NzaWJsZU1vdmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBtb3ZlID0gcG9zc2libGVNb3Zlc1tpXTtcclxuICAgICAgICAgICAgbGV0IGpxY2VsbCA9IHRoaXMuZ2V0anFDZWxsKG1vdmUpO1xyXG4gICAgICAgICAgICBqcWNlbGwuYWRkQ2xhc3MoJ3Bvc3NpYmxlTW92ZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRlc2VsZWN0UGllY2UoKSB7XHJcbiAgICAgICAgJCgnI2JvYXJkIC5zZWxlY3RlZCcpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICQoJyNib2FyZCAucG9zc2libGVNb3ZlJykucmVtb3ZlQ2xhc3MoJ3Bvc3NpYmxlTW92ZScpO1xyXG4gICAgfVxyXG59XHJcblxyXG52YXIgZ20gPSBuZXcgR2FtZW1hc3RlcigpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3B1YmxpYy9qcy9nYW1lbWFzdGVyLmpzIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjIuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTctMDMtMjBUMTg6NTlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjIuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2csXG5cblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHRcdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0XHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRcdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG5cdH0sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdHR5cGVvZiBvYmo7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2ltcGxlIHNlbGVjdG9yIHRoYXQgY2FuIGJlIGZpbHRlcmVkIGRpcmVjdGx5LCByZW1vdmluZyBub24tRWxlbWVudHNcblx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xuXHR9XG5cblx0Ly8gQ29tcGxleCBzZWxlY3RvciwgY29tcGFyZSB0aGUgdHdvIHNldHMsIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3QgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGpRdWVyeS5jYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLFxuXHRcdHNjYWxlID0gMSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHRkbyB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcblx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHQvLyBCcmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoLlxuXHRcdH0gd2hpbGUgKFxuXHRcdFx0c2NhbGUgIT09ICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcblx0XHQpO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogalF1ZXJ5LmlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIG5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIFwiPnRib2R5XCIsIGVsZW0gKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHByb3BlcnR5IG1hcHBlZCBhbG9uZyB3aGF0IGpRdWVyeS5jc3NQcm9wcyBzdWdnZXN0cyBvciB0b1xuLy8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgcmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF07XG5cdGlmICggIXJldCApIHtcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpLFxuXHRcdHZhbCA9IDA7XG5cblx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdGlmICggZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRpID0gNDtcblxuXHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdH0gZWxzZSB7XG5cdFx0aSA9IG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvSGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRpZiAoIHZhbCA9PT0gXCJhdXRvXCIgKSB7XG5cdFx0dmFsID0gZWxlbVsgXCJvZmZzZXRcIiArIG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApIF07XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvYywgZG9jRWxlbSwgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHR3aW4gPSBkb2MuZGVmYXVsdFZpZXc7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0fTtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHQvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhbm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0ID0ge1xuXHRcdFx0XHR0b3A6IHBhcmVudE9mZnNldC50b3AgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICksXG5cdFx0XHRcdGxlZnQ6IHBhcmVudE9mZnNldC5sZWZ0ICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB1cmwgPSByZXF1aXJlKCcuL3VybCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBNYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gbG9va3VwO1xuXG4vKipcbiAqIE1hbmFnZXJzIGNhY2hlLlxuICovXG5cbnZhciBjYWNoZSA9IGV4cG9ydHMubWFuYWdlcnMgPSB7fTtcblxuLyoqXG4gKiBMb29rcyB1cCBhbiBleGlzdGluZyBgTWFuYWdlcmAgZm9yIG11bHRpcGxleGluZy5cbiAqIElmIHRoZSB1c2VyIHN1bW1vbnM6XG4gKlxuICogICBgaW8oJ2h0dHA6Ly9sb2NhbGhvc3QvYScpO2BcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2InKTtgXG4gKlxuICogV2UgcmV1c2UgdGhlIGV4aXN0aW5nIGluc3RhbmNlIGJhc2VkIG9uIHNhbWUgc2NoZW1lL3BvcnQvaG9zdCxcbiAqIGFuZCB3ZSBpbml0aWFsaXplIHNvY2tldHMgZm9yIGVhY2ggbmFtZXNwYWNlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9va3VwICh1cmksIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiB1cmkgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICB2YXIgcGFyc2VkID0gdXJsKHVyaSk7XG4gIHZhciBzb3VyY2UgPSBwYXJzZWQuc291cmNlO1xuICB2YXIgaWQgPSBwYXJzZWQuaWQ7XG4gIHZhciBwYXRoID0gcGFyc2VkLnBhdGg7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gY2FjaGVbaWRdICYmIHBhdGggaW4gY2FjaGVbaWRdLm5zcHM7XG4gIHZhciBuZXdDb25uZWN0aW9uID0gb3B0cy5mb3JjZU5ldyB8fCBvcHRzWydmb3JjZSBuZXcgY29ubmVjdGlvbiddIHx8XG4gICAgICAgICAgICAgICAgICAgICAgZmFsc2UgPT09IG9wdHMubXVsdGlwbGV4IHx8IHNhbWVOYW1lc3BhY2U7XG5cbiAgdmFyIGlvO1xuXG4gIGlmIChuZXdDb25uZWN0aW9uKSB7XG4gICAgZGVidWcoJ2lnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgIGlvID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghY2FjaGVbaWRdKSB7XG4gICAgICBkZWJ1ZygnbmV3IGlvIGluc3RhbmNlIGZvciAlcycsIHNvdXJjZSk7XG4gICAgICBjYWNoZVtpZF0gPSBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGlvID0gY2FjaGVbaWRdO1xuICB9XG4gIGlmIChwYXJzZWQucXVlcnkgJiYgIW9wdHMucXVlcnkpIHtcbiAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5O1xuICB9XG4gIHJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgsIG9wdHMpO1xufVxuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sO1xuXG4vKipcbiAqIGBjb25uZWN0YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY29ubmVjdCA9IGxvb2t1cDtcblxuLyoqXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzIGZvciBzdGFuZGFsb25lIGJ1aWxkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5NYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG5leHBvcnRzLlNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvaW5kZXguanMiLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2V1cmkgPSByZXF1aXJlKCdwYXJzZXVyaScpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDp1cmwnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVybDtcblxuLyoqXG4gKiBVUkwgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7T2JqZWN0fSBBbiBvYmplY3QgbWVhbnQgdG8gbWltaWMgd2luZG93LmxvY2F0aW9uLlxuICogICAgICAgICAgICAgICAgIERlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdXJsICh1cmksIGxvYykge1xuICB2YXIgb2JqID0gdXJpO1xuXG4gIC8vIGRlZmF1bHQgdG8gd2luZG93LmxvY2F0aW9uXG4gIGxvYyA9IGxvYyB8fCBnbG9iYWwubG9jYXRpb247XG4gIGlmIChudWxsID09IHVyaSkgdXJpID0gbG9jLnByb3RvY29sICsgJy8vJyArIGxvYy5ob3N0O1xuXG4gIC8vIHJlbGF0aXZlIHBhdGggc3VwcG9ydFxuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB1cmkpIHtcbiAgICBpZiAoJy8nID09PSB1cmkuY2hhckF0KDApKSB7XG4gICAgICBpZiAoJy8nID09PSB1cmkuY2hhckF0KDEpKSB7XG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIHVyaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVyaSA9IGxvYy5ob3N0ICsgdXJpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghL14oaHR0cHM/fHdzcz8pOlxcL1xcLy8udGVzdCh1cmkpKSB7XG4gICAgICBkZWJ1ZygncHJvdG9jb2wtbGVzcyB1cmwgJXMnLCB1cmkpO1xuICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbG9jKSB7XG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSAnaHR0cHM6Ly8nICsgdXJpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHBhcnNlXG4gICAgZGVidWcoJ3BhcnNlICVzJywgdXJpKTtcbiAgICBvYmogPSBwYXJzZXVyaSh1cmkpO1xuICB9XG5cbiAgLy8gbWFrZSBzdXJlIHdlIHRyZWF0IGBsb2NhbGhvc3Q6ODBgIGFuZCBgbG9jYWxob3N0YCBlcXVhbGx5XG4gIGlmICghb2JqLnBvcnQpIHtcbiAgICBpZiAoL14oaHR0cHx3cykkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzgwJztcbiAgICB9IGVsc2UgaWYgKC9eKGh0dHB8d3MpcyQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgb2JqLnBvcnQgPSAnNDQzJztcbiAgICB9XG4gIH1cblxuICBvYmoucGF0aCA9IG9iai5wYXRoIHx8ICcvJztcblxuICB2YXIgaXB2NiA9IG9iai5ob3N0LmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHZhciBob3N0ID0gaXB2NiA/ICdbJyArIG9iai5ob3N0ICsgJ10nIDogb2JqLmhvc3Q7XG5cbiAgLy8gZGVmaW5lIHVuaXF1ZSBpZFxuICBvYmouaWQgPSBvYmoucHJvdG9jb2wgKyAnOi8vJyArIGhvc3QgKyAnOicgKyBvYmoucG9ydDtcbiAgLy8gZGVmaW5lIGhyZWZcbiAgb2JqLmhyZWYgPSBvYmoucHJvdG9jb2wgKyAnOi8vJyArIGhvc3QgKyAobG9jICYmIGxvYy5wb3J0ID09PSBvYmoucG9ydCA/ICcnIDogKCc6JyArIG9iai5wb3J0KSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi91cmwuanMiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFByZXZpb3VzIGxvZyB0aW1lc3RhbXAuXG4gKi9cblxudmFyIHByZXZUaW1lO1xuXG4vKipcbiAqIFNlbGVjdCBhIGNvbG9yLlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gIHZhciBoYXNoID0gMCwgaTtcblxuICBmb3IgKGkgaW4gbmFtZXNwYWNlKSB7XG4gICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICByZXR1cm4gZGVidWc7XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2RlYnVnLmpzIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtcyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKSB8fFxuICAgIHBsdXJhbChtcywgaCwgJ2hvdXInKSB8fFxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XG4gICAgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJykgfHxcbiAgICBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtcyA8IG4gKiAxLjUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIG4pICsgJyAnICsgbmFtZTtcbiAgfVxuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCIvKmdsb2JhbCBCbG9iLEZpbGUqL1xuXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHNcbiAqL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIGdsb2JhbC5CbG9iID09PSAnZnVuY3Rpb24nIHx8IHRvU3RyaW5nLmNhbGwoZ2xvYmFsLkJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJztcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBnbG9iYWwuRmlsZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0b1N0cmluZy5jYWxsKGdsb2JhbC5GaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXSc7XG5cbi8qKlxuICogUmVwbGFjZXMgZXZlcnkgQnVmZmVyIHwgQXJyYXlCdWZmZXIgaW4gcGFja2V0IHdpdGggYSBudW1iZXJlZCBwbGFjZWhvbGRlci5cbiAqIEFueXRoaW5nIHdpdGggYmxvYnMgb3IgZmlsZXMgc2hvdWxkIGJlIGZlZCB0aHJvdWdoIHJlbW92ZUJsb2JzIGJlZm9yZSBjb21pbmdcbiAqIGhlcmUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIHNvY2tldC5pbyBldmVudCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBkZWNvbnN0cnVjdGVkIHBhY2tldCBhbmQgbGlzdCBvZiBidWZmZXJzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcbiAgdmFyIHBhY2tldERhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIHBhY2sgPSBwYWNrZXQ7XG4gIHBhY2suZGF0YSA9IF9kZWNvbnN0cnVjdFBhY2tldChwYWNrZXREYXRhLCBidWZmZXJzKTtcbiAgcGFjay5hdHRhY2htZW50cyA9IGJ1ZmZlcnMubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmluYXJ5ICdhdHRhY2htZW50cydcbiAgcmV0dXJuIHtwYWNrZXQ6IHBhY2ssIGJ1ZmZlcnM6IGJ1ZmZlcnN9O1xufTtcblxuZnVuY3Rpb24gX2RlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblxuICBpZiAoaXNCdWYoZGF0YSkpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXIgPSB7IF9wbGFjZWhvbGRlcjogdHJ1ZSwgbnVtOiBidWZmZXJzLmxlbmd0aCB9O1xuICAgIGJ1ZmZlcnMucHVzaChkYXRhKTtcbiAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIHZhciBuZXdEYXRhID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdEYXRhO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiAhKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgIHZhciBuZXdEYXRhID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIG5ld0RhdGFba2V5XSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBSZWNvbnN0cnVjdHMgYSBiaW5hcnkgcGFja2V0IGZyb20gaXRzIHBsYWNlaG9sZGVyIHBhY2tldCBhbmQgYnVmZmVyc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBldmVudCBwYWNrZXQgd2l0aCBwbGFjZWhvbGRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlcnMgLSBiaW5hcnkgYnVmZmVycyB0byBwdXQgaW4gcGxhY2Vob2xkZXIgcG9zaXRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY29uc3RydWN0ZWQgcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGJ1ZmZlcnMpIHtcbiAgcGFja2V0LmRhdGEgPSBfcmVjb25zdHJ1Y3RQYWNrZXQocGFja2V0LmRhdGEsIGJ1ZmZlcnMpO1xuICBwYWNrZXQuYXR0YWNobWVudHMgPSB1bmRlZmluZWQ7IC8vIG5vIGxvbmdlciB1c2VmdWxcbiAgcmV0dXJuIHBhY2tldDtcbn07XG5cbmZ1bmN0aW9uIF9yZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGRhdGEgJiYgZGF0YS5fcGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm4gYnVmZmVyc1tkYXRhLm51bV07IC8vIGFwcHJvcHJpYXRlIGJ1ZmZlciAoc2hvdWxkIGJlIG5hdHVyYWwgb3JkZXIgYW55d2F5KVxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRhdGFbaV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBkYXRhW2tleV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSByZW1vdmVzIEJsb2JzIG9yIEZpbGVzIGZyb20gZGF0YSB2aWFcbiAqIEZpbGVSZWFkZXIncyByZWFkQXNBcnJheUJ1ZmZlciBtZXRob2QuIFVzZWQgYmVmb3JlIGVuY29kaW5nXG4gKiBkYXRhIGFzIG1zZ3BhY2suIENhbGxzIGNhbGxiYWNrIHdpdGggdGhlIGJsb2JsZXNzIGRhdGEuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnJlbW92ZUJsb2JzID0gZnVuY3Rpb24oZGF0YSwgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gX3JlbW92ZUJsb2JzKG9iaiwgY3VyS2V5LCBjb250YWluaW5nT2JqZWN0KSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBvYmo7XG5cbiAgICAvLyBjb252ZXJ0IGFueSBibG9iXG4gICAgaWYgKCh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSkpIHtcbiAgICAgIHBlbmRpbmdCbG9icysrO1xuXG4gICAgICAvLyBhc3luYyBmaWxlcmVhZGVyXG4gICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkgeyAvLyB0aGlzLnJlc3VsdCA9PSBhcnJheWJ1ZmZlclxuICAgICAgICBpZiAoY29udGFpbmluZ09iamVjdCkge1xuICAgICAgICAgIGNvbnRhaW5pbmdPYmplY3RbY3VyS2V5XSA9IHRoaXMucmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGJsb2JsZXNzRGF0YSA9IHRoaXMucmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbm90aGluZyBwZW5kaW5nIGl0cyBjYWxsYmFjayB0aW1lXG4gICAgICAgIGlmKCEgLS1wZW5kaW5nQmxvYnMpIHtcbiAgICAgICAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKG9iaik7IC8vIGJsb2IgLT4gYXJyYXlidWZmZXJcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqKSkgeyAvLyBoYW5kbGUgYXJyYXlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhaXNCdWYob2JqKSkgeyAvLyBhbmQgb2JqZWN0XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBwZW5kaW5nQmxvYnMgPSAwO1xuICB2YXIgYmxvYmxlc3NEYXRhID0gZGF0YTtcbiAgX3JlbW92ZUJsb2JzKGJsb2JsZXNzRGF0YSk7XG4gIGlmICghcGVuZGluZ0Jsb2JzKSB7XG4gICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2JpbmFyeS5qcyIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvaW5kZXgnKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2luZGV4LmpzIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0cyBwYXJzZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL2luZGV4LmpzIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB0cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIGluZGV4ID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgcGFyc2Vqc29uID0gcmVxdWlyZSgncGFyc2Vqc29uJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB1cmkgb3Igb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0ICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNvY2tldCkpIHJldHVybiBuZXcgU29ja2V0KHVyaSwgb3B0cyk7XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgaWYgKHVyaSAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gbnVsbDtcbiAgfVxuXG4gIGlmICh1cmkpIHtcbiAgICB1cmkgPSBwYXJzZXVyaSh1cmkpO1xuICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICBvcHRzLnNlY3VyZSA9IHVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzJyB8fCB1cmkucHJvdG9jb2wgPT09ICd3c3MnO1xuICAgIG9wdHMucG9ydCA9IHVyaS5wb3J0O1xuICAgIGlmICh1cmkucXVlcnkpIG9wdHMucXVlcnkgPSB1cmkucXVlcnk7XG4gIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHBhcnNldXJpKG9wdHMuaG9zdCkuaG9zdDtcbiAgfVxuXG4gIHRoaXMuc2VjdXJlID0gbnVsbCAhPSBvcHRzLnNlY3VyZSA/IG9wdHMuc2VjdXJlXG4gICAgOiAoZ2xvYmFsLmxvY2F0aW9uICYmICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbCk7XG5cbiAgaWYgKG9wdHMuaG9zdG5hbWUgJiYgIW9wdHMucG9ydCkge1xuICAgIC8vIGlmIG5vIHBvcnQgaXMgc3BlY2lmaWVkIG1hbnVhbGx5LCB1c2UgdGhlIHByb3RvY29sIGRlZmF1bHRcbiAgICBvcHRzLnBvcnQgPSB0aGlzLnNlY3VyZSA/ICc0NDMnIDogJzgwJztcbiAgfVxuXG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZSB8fFxuICAgIChnbG9iYWwubG9jYXRpb24gPyBsb2NhdGlvbi5ob3N0bmFtZSA6ICdsb2NhbGhvc3QnKTtcbiAgdGhpcy5wb3J0ID0gb3B0cy5wb3J0IHx8IChnbG9iYWwubG9jYXRpb24gJiYgbG9jYXRpb24ucG9ydFxuICAgICAgPyBsb2NhdGlvbi5wb3J0XG4gICAgICA6ICh0aGlzLnNlY3VyZSA/IDQ0MyA6IDgwKSk7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5IHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB0aGlzLnF1ZXJ5KSB0aGlzLnF1ZXJ5ID0gcGFyc2Vxcy5kZWNvZGUodGhpcy5xdWVyeSk7XG4gIHRoaXMudXBncmFkZSA9IGZhbHNlICE9PSBvcHRzLnVwZ3JhZGU7XG4gIHRoaXMucGF0aCA9IChvcHRzLnBhdGggfHwgJy9lbmdpbmUuaW8nKS5yZXBsYWNlKC9cXC8kLywgJycpICsgJy8nO1xuICB0aGlzLmZvcmNlSlNPTlAgPSAhIW9wdHMuZm9yY2VKU09OUDtcbiAgdGhpcy5qc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuICB0aGlzLmZvcmNlQmFzZTY0ID0gISFvcHRzLmZvcmNlQmFzZTY0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSAhIW9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW0gfHwgJ3QnO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy50cmFuc3BvcnRzID0gb3B0cy50cmFuc3BvcnRzIHx8IFsncG9sbGluZycsICd3ZWJzb2NrZXQnXTtcbiAgdGhpcy50cmFuc3BvcnRPcHRpb25zID0gb3B0cy50cmFuc3BvcnRPcHRpb25zIHx8IHt9O1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcbiAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuICB0aGlzLnBvbGljeVBvcnQgPSBvcHRzLnBvbGljeVBvcnQgfHwgODQzO1xuICB0aGlzLnJlbWVtYmVyVXBncmFkZSA9IG9wdHMucmVtZW1iZXJVcGdyYWRlIHx8IGZhbHNlO1xuICB0aGlzLmJpbmFyeVR5cGUgPSBudWxsO1xuICB0aGlzLm9ubHlCaW5hcnlVcGdyYWRlcyA9IG9wdHMub25seUJpbmFyeVVwZ3JhZGVzO1xuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gZmFsc2UgIT09IG9wdHMucGVyTWVzc2FnZURlZmxhdGUgPyAob3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB7fSkgOiBmYWxzZTtcblxuICBpZiAodHJ1ZSA9PT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSkgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IHt9O1xuICBpZiAodGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSAmJiBudWxsID09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQgPSAxMDI0O1xuICB9XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZnggfHwgbnVsbDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleSB8fCBudWxsO1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2UgfHwgbnVsbDtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0IHx8IG51bGw7XG4gIHRoaXMuY2EgPSBvcHRzLmNhIHx8IG51bGw7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycyB8fCBudWxsO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIHRoaXMuZm9yY2VOb2RlID0gISFvcHRzLmZvcmNlTm9kZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT09ICdvYmplY3QnICYmIGdsb2JhbDtcbiAgaWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsKSB7XG4gICAgaWYgKG9wdHMuZXh0cmFIZWFkZXJzICYmIE9iamVjdC5rZXlzKG9wdHMuZXh0cmFIZWFkZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmxvY2FsQWRkcmVzcykge1xuICAgICAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbiAgICB9XG4gIH1cblxuICAvLyBzZXQgb24gaGFuZHNoYWtlXG4gIHRoaXMuaWQgPSBudWxsO1xuICB0aGlzLnVwZ3JhZGVzID0gbnVsbDtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gbnVsbDtcblxuICAvLyBzZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucGluZ0ludGVydmFsVGltZXIgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBudWxsO1xuXG4gIHRoaXMub3BlbigpO1xufVxuXG5Tb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50XG5cbi8qKlxuICogRXhwb3NlIGRlcHMgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5XG4gKiBhbmQgc3RhbmRhbG9uZSBicm93c2VyIGFjY2Vzcy5cbiAqL1xuXG5Tb2NrZXQuU29ja2V0ID0gU29ja2V0O1xuU29ja2V0LlRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0Jyk7XG5Tb2NrZXQudHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9pbmRleCcpO1xuU29ja2V0LnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRyYW5zcG9ydCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHF1ZXJ5ID0gY2xvbmUodGhpcy5xdWVyeSk7XG5cbiAgLy8gYXBwZW5kIGVuZ2luZS5pbyBwcm90b2NvbCBpZGVudGlmaWVyXG4gIHF1ZXJ5LkVJTyA9IHBhcnNlci5wcm90b2NvbDtcblxuICAvLyB0cmFuc3BvcnQgbmFtZVxuICBxdWVyeS50cmFuc3BvcnQgPSBuYW1lO1xuXG4gIC8vIHBlci10cmFuc3BvcnQgb3B0aW9uc1xuICB2YXIgb3B0aW9ucyA9IHRoaXMudHJhbnNwb3J0T3B0aW9uc1tuYW1lXSB8fCB7fTtcblxuICAvLyBzZXNzaW9uIGlkIGlmIHdlIGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKHRoaXMuaWQpIHF1ZXJ5LnNpZCA9IHRoaXMuaWQ7XG5cbiAgdmFyIHRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzW25hbWVdKHtcbiAgICBxdWVyeTogcXVlcnksXG4gICAgc29ja2V0OiB0aGlzLFxuICAgIGFnZW50OiBvcHRpb25zLmFnZW50IHx8IHRoaXMuYWdlbnQsXG4gICAgaG9zdG5hbWU6IG9wdGlvbnMuaG9zdG5hbWUgfHwgdGhpcy5ob3N0bmFtZSxcbiAgICBwb3J0OiBvcHRpb25zLnBvcnQgfHwgdGhpcy5wb3J0LFxuICAgIHNlY3VyZTogb3B0aW9ucy5zZWN1cmUgfHwgdGhpcy5zZWN1cmUsXG4gICAgcGF0aDogb3B0aW9ucy5wYXRoIHx8IHRoaXMucGF0aCxcbiAgICBmb3JjZUpTT05QOiBvcHRpb25zLmZvcmNlSlNPTlAgfHwgdGhpcy5mb3JjZUpTT05QLFxuICAgIGpzb25wOiBvcHRpb25zLmpzb25wIHx8IHRoaXMuanNvbnAsXG4gICAgZm9yY2VCYXNlNjQ6IG9wdGlvbnMuZm9yY2VCYXNlNjQgfHwgdGhpcy5mb3JjZUJhc2U2NCxcbiAgICBlbmFibGVzWERSOiBvcHRpb25zLmVuYWJsZXNYRFIgfHwgdGhpcy5lbmFibGVzWERSLFxuICAgIHRpbWVzdGFtcFJlcXVlc3RzOiBvcHRpb25zLnRpbWVzdGFtcFJlcXVlc3RzIHx8IHRoaXMudGltZXN0YW1wUmVxdWVzdHMsXG4gICAgdGltZXN0YW1wUGFyYW06IG9wdGlvbnMudGltZXN0YW1wUGFyYW0gfHwgdGhpcy50aW1lc3RhbXBQYXJhbSxcbiAgICBwb2xpY3lQb3J0OiBvcHRpb25zLnBvbGljeVBvcnQgfHwgdGhpcy5wb2xpY3lQb3J0LFxuICAgIHBmeDogb3B0aW9ucy5wZnggfHwgdGhpcy5wZngsXG4gICAga2V5OiBvcHRpb25zLmtleSB8fCB0aGlzLmtleSxcbiAgICBwYXNzcGhyYXNlOiBvcHRpb25zLnBhc3NwaHJhc2UgfHwgdGhpcy5wYXNzcGhyYXNlLFxuICAgIGNlcnQ6IG9wdGlvbnMuY2VydCB8fCB0aGlzLmNlcnQsXG4gICAgY2E6IG9wdGlvbnMuY2EgfHwgdGhpcy5jYSxcbiAgICBjaXBoZXJzOiBvcHRpb25zLmNpcGhlcnMgfHwgdGhpcy5jaXBoZXJzLFxuICAgIHJlamVjdFVuYXV0aG9yaXplZDogb3B0aW9ucy5yZWplY3RVbmF1dGhvcml6ZWQgfHwgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQsXG4gICAgcGVyTWVzc2FnZURlZmxhdGU6IG9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUgfHwgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSxcbiAgICBleHRyYUhlYWRlcnM6IG9wdGlvbnMuZXh0cmFIZWFkZXJzIHx8IHRoaXMuZXh0cmFIZWFkZXJzLFxuICAgIGZvcmNlTm9kZTogb3B0aW9ucy5mb3JjZU5vZGUgfHwgdGhpcy5mb3JjZU5vZGUsXG4gICAgbG9jYWxBZGRyZXNzOiBvcHRpb25zLmxvY2FsQWRkcmVzcyB8fCB0aGlzLmxvY2FsQWRkcmVzcyxcbiAgICByZXF1ZXN0VGltZW91dDogb3B0aW9ucy5yZXF1ZXN0VGltZW91dCB8fCB0aGlzLnJlcXVlc3RUaW1lb3V0LFxuICAgIHByb3RvY29sczogb3B0aW9ucy5wcm90b2NvbHMgfHwgdm9pZCAoMClcbiAgfSk7XG5cbiAgcmV0dXJuIHRyYW5zcG9ydDtcbn07XG5cbmZ1bmN0aW9uIGNsb25lIChvYmopIHtcbiAgdmFyIG8gPSB7fTtcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBvW2ldID0gb2JqW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbztcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB0cmFuc3BvcnQgdG8gdXNlIGFuZCBzdGFydHMgcHJvYmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblNvY2tldC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRyYW5zcG9ydDtcbiAgaWYgKHRoaXMucmVtZW1iZXJVcGdyYWRlICYmIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgJiYgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoJ3dlYnNvY2tldCcpICE9PSAtMSkge1xuICAgIHRyYW5zcG9ydCA9ICd3ZWJzb2NrZXQnO1xuICB9IGVsc2UgaWYgKDAgPT09IHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAvLyBFbWl0IGVycm9yIG9uIG5leHQgdGljayBzbyBpdCBjYW4gYmUgbGlzdGVuZWQgdG9cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgJ05vIHRyYW5zcG9ydHMgYXZhaWxhYmxlJyk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1swXTtcbiAgfVxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG5cbiAgLy8gUmV0cnkgd2l0aCB0aGUgbmV4dCB0cmFuc3BvcnQgaWYgdGhlIHRyYW5zcG9ydCBpcyBkaXNhYmxlZCAoanNvbnA6IGZhbHNlKVxuICB0cnkge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKTtcbiAgICB0aGlzLm9wZW4oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cmFuc3BvcnQub3BlbigpO1xuICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydC4gRGlzYWJsZXMgdGhlIGV4aXN0aW5nIG9uZSAoaWYgYW55KS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgZGVidWcoJ3NldHRpbmcgdHJhbnNwb3J0ICVzJywgdHJhbnNwb3J0Lm5hbWUpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMudHJhbnNwb3J0KSB7XG4gICAgZGVidWcoJ2NsZWFyaW5nIGV4aXN0aW5nIHRyYW5zcG9ydCAlcycsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9XG5cbiAgLy8gc2V0IHVwIHRyYW5zcG9ydFxuICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICB0cmFuc3BvcnRcbiAgLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uRHJhaW4oKTtcbiAgfSlcbiAgLm9uKCdwYWNrZXQnLCBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICB9KVxuICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoZSk7XG4gIH0pXG4gIC5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCd0cmFuc3BvcnQgY2xvc2UnKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFByb2JlcyBhIHRyYW5zcG9ydC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucHJvYmUgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygncHJvYmluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gIHZhciB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lLCB7IHByb2JlOiAxIH0pO1xuICB2YXIgZmFpbGVkID0gZmFsc2U7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25UcmFuc3BvcnRPcGVuICgpIHtcbiAgICBpZiAoc2VsZi5vbmx5QmluYXJ5VXBncmFkZXMpIHtcbiAgICAgIHZhciB1cGdyYWRlTG9zZXNCaW5hcnkgPSAhdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiBzZWxmLnRyYW5zcG9ydC5zdXBwb3J0c0JpbmFyeTtcbiAgICAgIGZhaWxlZCA9IGZhaWxlZCB8fCB1cGdyYWRlTG9zZXNCaW5hcnk7XG4gICAgfVxuICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIG9wZW5lZCcsIG5hbWUpO1xuICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICdwaW5nJywgZGF0YTogJ3Byb2JlJyB9XSk7XG4gICAgdHJhbnNwb3J0Lm9uY2UoJ3BhY2tldCcsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgIGlmICgncG9uZycgPT09IG1zZy50eXBlICYmICdwcm9iZScgPT09IG1zZy5kYXRhKSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIHBvbmcnLCBuYW1lKTtcbiAgICAgICAgc2VsZi51cGdyYWRpbmcgPSB0cnVlO1xuICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGluZycsIHRyYW5zcG9ydCk7XG4gICAgICAgIGlmICghdHJhbnNwb3J0KSByZXR1cm47XG4gICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICAgICAgZGVidWcoJ3BhdXNpbmcgY3VycmVudCB0cmFuc3BvcnQgXCIlc1wiJywgc2VsZi50cmFuc3BvcnQubmFtZSk7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0LnBhdXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgICBkZWJ1ZygnY2hhbmdpbmcgdHJhbnNwb3J0IGFuZCBzZW5kaW5nIHVwZ3JhZGUgcGFja2V0Jyk7XG5cbiAgICAgICAgICBjbGVhbnVwKCk7XG5cbiAgICAgICAgICBzZWxmLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICd1cGdyYWRlJyB9XSk7XG4gICAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlJywgdHJhbnNwb3J0KTtcbiAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgIHNlbGYudXBncmFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5mbHVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCcsIG5hbWUpO1xuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcicpO1xuICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCAoKSB7XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgZmFpbGVkID0gdHJ1ZTtcblxuICAgIGNsZWFudXAoKTtcblxuICAgIHRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gIH1cblxuICAvLyBIYW5kbGUgYW55IGVycm9yIHRoYXQgaGFwcGVucyB3aGlsZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9uZXJyb3IgKGVycikge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcigncHJvYmUgZXJyb3I6ICcgKyBlcnIpO1xuICAgIGVycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgZnJlZXplVHJhbnNwb3J0KCk7XG5cbiAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvcjogJXMnLCBuYW1lLCBlcnIpO1xuXG4gICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydENsb3NlICgpIHtcbiAgICBvbmVycm9yKCd0cmFuc3BvcnQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgY2xvc2VkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25jbG9zZSAoKSB7XG4gICAgb25lcnJvcignc29ja2V0IGNsb3NlZCcpO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb251cGdyYWRlICh0bykge1xuICAgIGlmICh0cmFuc3BvcnQgJiYgdG8ubmFtZSAhPT0gdHJhbnNwb3J0Lm5hbWUpIHtcbiAgICAgIGRlYnVnKCdcIiVzXCIgd29ya3MgLSBhYm9ydGluZyBcIiVzXCInLCB0by5uYW1lLCB0cmFuc3BvcnQubmFtZSk7XG4gICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGluZycsIG9udXBncmFkZSk7XG4gIH1cblxuICB0cmFuc3BvcnQub25jZSgnb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gIHRyYW5zcG9ydC5vbmNlKCdlcnJvcicsIG9uZXJyb3IpO1xuICB0cmFuc3BvcnQub25jZSgnY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcblxuICB0aGlzLm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHRoaXMub25jZSgndXBncmFkaW5nJywgb251cGdyYWRlKTtcblxuICB0cmFuc3BvcnQub3BlbigpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzb2NrZXQgb3BlbicpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG4gIHRoaXMuZmx1c2goKTtcblxuICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXRcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudXBncmFkZSAmJiB0aGlzLnRyYW5zcG9ydC5wYXVzZSkge1xuICAgIGRlYnVnKCdzdGFydGluZyB1cGdyYWRlIHByb2JlcycpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgcmVjZWl2ZTogdHlwZSBcIiVzXCIsIGRhdGEgXCIlc1wiJywgcGFja2V0LnR5cGUsIHBhY2tldC5kYXRhKTtcblxuICAgIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcblxuICAgIC8vIFNvY2tldCBpcyBsaXZlIC0gYW55IHBhY2tldCBjb3VudHNcbiAgICB0aGlzLmVtaXQoJ2hlYXJ0YmVhdCcpO1xuXG4gICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIHRoaXMub25IYW5kc2hha2UocGFyc2Vqc29uKHBhY2tldC5kYXRhKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdwb25nJzpcbiAgICAgICAgdGhpcy5zZXRQaW5nKCk7XG4gICAgICAgIHRoaXMuZW1pdCgncG9uZycpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdzZXJ2ZXIgZXJyb3InKTtcbiAgICAgICAgZXJyLmNvZGUgPSBwYWNrZXQuZGF0YTtcbiAgICAgICAgdGhpcy5vbkVycm9yKGVycik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgICAgdGhpcy5lbWl0KCdkYXRhJywgcGFja2V0LmRhdGEpO1xuICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygncGFja2V0IHJlY2VpdmVkIHdpdGggc29ja2V0IHJlYWR5U3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBoYW5kc2hha2UgY29tcGxldGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGFuZHNoYWtlIG9ialxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbkhhbmRzaGFrZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnaGFuZHNoYWtlJywgZGF0YSk7XG4gIHRoaXMuaWQgPSBkYXRhLnNpZDtcbiAgdGhpcy50cmFuc3BvcnQucXVlcnkuc2lkID0gZGF0YS5zaWQ7XG4gIHRoaXMudXBncmFkZXMgPSB0aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IGRhdGEucGluZ0ludGVydmFsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gZGF0YS5waW5nVGltZW91dDtcbiAgdGhpcy5vbk9wZW4oKTtcbiAgLy8gSW4gY2FzZSBvcGVuIGhhbmRsZXIgY2xvc2VzIHNvY2tldFxuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICB0aGlzLnNldFBpbmcoKTtcblxuICAvLyBQcm9sb25nIGxpdmVuZXNzIG9mIHNvY2tldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5yZW1vdmVMaXN0ZW5lcignaGVhcnRiZWF0JywgdGhpcy5vbkhlYXJ0YmVhdCk7XG4gIHRoaXMub24oJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xufTtcblxuLyoqXG4gKiBSZXNldHMgcGluZyB0aW1lb3V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IZWFydGJlYXQgPSBmdW5jdGlvbiAodGltZW91dCkge1xuICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzZWxmLnBpbmdUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgIHNlbGYub25DbG9zZSgncGluZyB0aW1lb3V0Jyk7XG4gIH0sIHRpbWVvdXQgfHwgKHNlbGYucGluZ0ludGVydmFsICsgc2VsZi5waW5nVGltZW91dCkpO1xufTtcblxuLyoqXG4gKiBQaW5ncyBzZXJ2ZXIgZXZlcnkgYHRoaXMucGluZ0ludGVydmFsYCBhbmQgZXhwZWN0cyByZXNwb25zZVxuICogd2l0aGluIGB0aGlzLnBpbmdUaW1lb3V0YCBvciBjbG9zZXMgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2xlYXJUaW1lb3V0KHNlbGYucGluZ0ludGVydmFsVGltZXIpO1xuICBzZWxmLnBpbmdJbnRlcnZhbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyaXRpbmcgcGluZyBwYWNrZXQgLSBleHBlY3RpbmcgcG9uZyB3aXRoaW4gJXNtcycsIHNlbGYucGluZ1RpbWVvdXQpO1xuICAgIHNlbGYucGluZygpO1xuICAgIHNlbGYub25IZWFydGJlYXQoc2VsZi5waW5nVGltZW91dCk7XG4gIH0sIHNlbGYucGluZ0ludGVydmFsKTtcbn07XG5cbi8qKlxuKiBTZW5kcyBhIHBpbmcgcGFja2V0LlxuKlxuKiBAYXBpIHByaXZhdGVcbiovXG5cblNvY2tldC5wcm90b3R5cGUucGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlbmRQYWNrZXQoJ3BpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5lbWl0KCdwaW5nJyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgb24gYGRyYWluYCBldmVudFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25EcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy53cml0ZUJ1ZmZlci5zcGxpY2UoMCwgdGhpcy5wcmV2QnVmZmVyTGVuKTtcblxuICAvLyBzZXR0aW5nIHByZXZCdWZmZXJMZW4gPSAwIGlzIHZlcnkgaW1wb3J0YW50XG4gIC8vIGZvciBleGFtcGxlLCB3aGVuIHVwZ3JhZGluZywgdXBncmFkZSBwYWNrZXQgaXMgc2VudCBvdmVyLFxuICAvLyBhbmQgYSBub256ZXJvIHByZXZCdWZmZXJMZW4gY291bGQgY2F1c2UgcHJvYmxlbXMgb24gYGRyYWluYFxuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuXG4gIGlmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIHRoaXMuZW1pdCgnZHJhaW4nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRmx1c2ggd3JpdGUgYnVmZmVycy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgIT09IHRoaXMucmVhZHlTdGF0ZSAmJiB0aGlzLnRyYW5zcG9ydC53cml0YWJsZSAmJlxuICAgICF0aGlzLnVwZ3JhZGluZyAmJiB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIGRlYnVnKCdmbHVzaGluZyAlZCBwYWNrZXRzIGluIHNvY2tldCcsIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKHRoaXMud3JpdGVCdWZmZXIpO1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAvLyBzcGxpY2Ugd3JpdGVCdWZmZXIgYW5kIGNhbGxiYWNrQnVmZmVyIG9uIGBkcmFpbmBcbiAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aDtcbiAgICB0aGlzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2VuZHMgYSBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLndyaXRlID1cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChtc2csIG9wdGlvbnMsIGZuKSB7XG4gIHRoaXMuc2VuZFBhY2tldCgnbWVzc2FnZScsIG1zZywgb3B0aW9ucywgZm4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhY2tldCB0eXBlLlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kUGFja2V0ID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEsIG9wdGlvbnMsIGZuKSB7XG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZGF0YSkge1xuICAgIGZuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgZm4gPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgaWYgKCdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuXG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBkYXRhOiBkYXRhLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfTtcbiAgdGhpcy5lbWl0KCdwYWNrZXRDcmVhdGUnLCBwYWNrZXQpO1xuICB0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgaWYgKGZuKSB0aGlzLm9uY2UoJ2ZsdXNoJywgZm4pO1xuICB0aGlzLmZsdXNoKCk7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2luZyc7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZSAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCdmb3JjZWQgY2xvc2UnKTtcbiAgICBkZWJ1Zygnc29ja2V0IGNsb3NpbmcgLSB0ZWxsaW5nIHRyYW5zcG9ydCB0byBjbG9zZScpO1xuICAgIHNlbGYudHJhbnNwb3J0LmNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwQW5kQ2xvc2UgKCkge1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGVFcnJvcicsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgY2xvc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhaXRGb3JVcGdyYWRlICgpIHtcbiAgICAvLyB3YWl0IGZvciB1cGdyYWRlIHRvIGZpbmlzaCBzaW5jZSB3ZSBjYW4ndCBzZW5kIHBhY2tldHMgd2hpbGUgcGF1c2luZyBhIHRyYW5zcG9ydFxuICAgIHNlbGYub25jZSgndXBncmFkZScsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgc2VsZi5vbmNlKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBlcnJvclxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ3NvY2tldCBlcnJvciAlaicsIGVycik7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHRoaXMub25DbG9zZSgndHJhbnNwb3J0IGVycm9yJywgZXJyKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24sIGRlc2MpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zZSB3aXRoIHJlYXNvbjogXCIlc1wiJywgcmVhc29uKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBjbGVhciB0aW1lcnNcbiAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nSW50ZXJ2YWxUaW1lcik7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG5cbiAgICAvLyBzdG9wIGV2ZW50IGZyb20gZmlyaW5nIGFnYWluIGZvciB0cmFuc3BvcnRcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Nsb3NlJyk7XG5cbiAgICAvLyBlbnN1cmUgdHJhbnNwb3J0IHdvbid0IHN0YXkgb3BlblxuICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG5cbiAgICAvLyBpZ25vcmUgZnVydGhlciB0cmFuc3BvcnQgY29tbXVuaWNhdGlvblxuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXG4gICAgLy8gc2V0IHJlYWR5IHN0YXRlXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG5cbiAgICAvLyBjbGVhciBzZXNzaW9uIGlkXG4gICAgdGhpcy5pZCA9IG51bGw7XG5cbiAgICAvLyBlbWl0IGNsb3NlIGV2ZW50XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbiwgZGVzYyk7XG5cbiAgICAvLyBjbGVhbiBidWZmZXJzIGFmdGVyLCBzbyB1c2VycyBjYW4gc3RpbGxcbiAgICAvLyBncmFiIHRoZSBidWZmZXJzIG9uIGBjbG9zZWAgZXZlbnRcbiAgICBzZWxmLndyaXRlQnVmZmVyID0gW107XG4gICAgc2VsZi5wcmV2QnVmZmVyTGVuID0gMDtcbiAgfVxufTtcblxuLyoqXG4gKiBGaWx0ZXJzIHVwZ3JhZGVzLCByZXR1cm5pbmcgb25seSB0aG9zZSBtYXRjaGluZyBjbGllbnQgdHJhbnNwb3J0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzZXJ2ZXIgdXBncmFkZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICpcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZpbHRlclVwZ3JhZGVzID0gZnVuY3Rpb24gKHVwZ3JhZGVzKSB7XG4gIHZhciBmaWx0ZXJlZFVwZ3JhZGVzID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBqID0gdXBncmFkZXMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKH5pbmRleCh0aGlzLnRyYW5zcG9ydHMsIHVwZ3JhZGVzW2ldKSkgZmlsdGVyZWRVcGdyYWRlcy5wdXNoKHVwZ3JhZGVzW2ldKTtcbiAgfVxuICByZXR1cm4gZmlsdGVyZWRVcGdyYWRlcztcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICpcbiAqIExvZ2ljIGJvcnJvd2VkIGZyb20gTW9kZXJuaXpyOlxuICpcbiAqICAgLSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY29ycy5qc1xuICovXG5cbnRyeSB7XG4gIG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xufSBjYXRjaCAoZXJyKSB7XG4gIC8vIGlmIFhNTEh0dHAgc3VwcG9ydCBpcyBkaXNhYmxlZCBpbiBJRSB0aGVuIGl0IHdpbGwgdGhyb3dcbiAgLy8gd2hlbiB0cnlpbmcgdG8gY3JlYXRlXG4gIG1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvaGFzLWNvcnMvaW5kZXguanMiLCIvKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nLXhocicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gWEhSO1xubW9kdWxlLmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5cbi8qKlxuICogRW1wdHkgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7fVxuXG4vKipcbiAqIFhIUiBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFhIUiAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIGlmIChnbG9iYWwubG9jYXRpb24pIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgdGhpcy54ZCA9IG9wdHMuaG9zdG5hbWUgIT09IGdsb2JhbC5sb2NhdGlvbi5ob3N0bmFtZSB8fFxuICAgICAgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHRoaXMueHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFBvbGxpbmcuXG4gKi9cblxuaW5oZXJpdChYSFIsIFBvbGxpbmcpO1xuXG4vKipcbiAqIFhIUiBzdXBwb3J0cyBiaW5hcnlcbiAqL1xuXG5YSFIucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgb3B0cy51cmkgPSB0aGlzLnVyaSgpO1xuICBvcHRzLnhkID0gdGhpcy54ZDtcbiAgb3B0cy54cyA9IHRoaXMueHM7XG4gIG9wdHMuYWdlbnQgPSB0aGlzLmFnZW50IHx8IGZhbHNlO1xuICBvcHRzLnN1cHBvcnRzQmluYXJ5ID0gdGhpcy5zdXBwb3J0c0JpbmFyeTtcbiAgb3B0cy5lbmFibGVzWERSID0gdGhpcy5lbmFibGVzWERSO1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgb3B0cy5yZXF1ZXN0VGltZW91dCA9IHRoaXMucmVxdWVzdFRpbWVvdXQ7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5leHRyYUhlYWRlcnMgPSB0aGlzLmV4dHJhSGVhZGVycztcblxuICByZXR1cm4gbmV3IFJlcXVlc3Qob3B0cyk7XG59O1xuXG4vKipcbiAqIFNlbmRzIGRhdGEuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1dyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGZuKSB7XG4gIHZhciBpc0JpbmFyeSA9IHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJyAmJiBkYXRhICE9PSB1bmRlZmluZWQ7XG4gIHZhciByZXEgPSB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6ICdQT1NUJywgZGF0YTogZGF0YSwgaXNCaW5hcnk6IGlzQmluYXJ5IH0pO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJlcS5vbignc3VjY2VzcycsIGZuKTtcbiAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3hociBwb3N0IGVycm9yJywgZXJyKTtcbiAgfSk7XG4gIHRoaXMuc2VuZFhociA9IHJlcTtcbn07XG5cbi8qKlxuICogU3RhcnRzIGEgcG9sbCBjeWNsZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLmRvUG9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3hociBwb2xsJyk7XG4gIHZhciByZXEgPSB0aGlzLnJlcXVlc3QoKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYub25EYXRhKGRhdGEpO1xuICB9KTtcbiAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3hociBwb2xsIGVycm9yJywgZXJyKTtcbiAgfSk7XG4gIHRoaXMucG9sbFhociA9IHJlcTtcbn07XG5cbi8qKlxuICogUmVxdWVzdCBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFJlcXVlc3QgKG9wdHMpIHtcbiAgdGhpcy5tZXRob2QgPSBvcHRzLm1ldGhvZCB8fCAnR0VUJztcbiAgdGhpcy51cmkgPSBvcHRzLnVyaTtcbiAgdGhpcy54ZCA9ICEhb3B0cy54ZDtcbiAgdGhpcy54cyA9ICEhb3B0cy54cztcbiAgdGhpcy5hc3luYyA9IGZhbHNlICE9PSBvcHRzLmFzeW5jO1xuICB0aGlzLmRhdGEgPSB1bmRlZmluZWQgIT09IG9wdHMuZGF0YSA/IG9wdHMuZGF0YSA6IG51bGw7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50O1xuICB0aGlzLmlzQmluYXJ5ID0gb3B0cy5pc0JpbmFyeTtcbiAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IG9wdHMuc3VwcG9ydHNCaW5hcnk7XG4gIHRoaXMuZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IG9wdHMucmVxdWVzdFRpbWVvdXQ7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG5cbiAgdGhpcy5jcmVhdGUoKTtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoUmVxdWVzdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIFhIUiBvYmplY3QgYW5kIHNlbmRzIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9wdHMgPSB7IGFnZW50OiB0aGlzLmFnZW50LCB4ZG9tYWluOiB0aGlzLnhkLCB4c2NoZW1lOiB0aGlzLnhzLCBlbmFibGVzWERSOiB0aGlzLmVuYWJsZXNYRFIgfTtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG5cbiAgdmFyIHhociA9IHRoaXMueGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KG9wdHMpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdHJ5IHtcbiAgICBkZWJ1ZygneGhyIG9wZW4gJXM6ICVzJywgdGhpcy5tZXRob2QsIHRoaXMudXJpKTtcbiAgICB4aHIub3Blbih0aGlzLm1ldGhvZCwgdGhpcy51cmksIHRoaXMuYXN5bmMpO1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayAmJiB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrKHRydWUpO1xuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihpLCB0aGlzLmV4dHJhSGVhZGVyc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIGlmICgnUE9TVCcgPT09IHRoaXMubWV0aG9kKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAodGhpcy5pc0JpbmFyeSkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICcqLyonKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgLy8gaWU2IGNoZWNrXG4gICAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVxdWVzdFRpbWVvdXQpIHtcbiAgICAgIHhoci50aW1lb3V0ID0gdGhpcy5yZXF1ZXN0VGltZW91dDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5vbkxvYWQoKTtcbiAgICAgIH07XG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSAyKSB7XG4gICAgICAgICAgdmFyIGNvbnRlbnRUeXBlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb250ZW50VHlwZSA9IHhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICBpZiAoY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSB7XG4gICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDQgIT09IHhoci5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMgfHwgMTIyMyA9PT0geGhyLnN0YXR1cykge1xuICAgICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBgZXJyb3JgIGV2ZW50IGhhbmRsZXIgdGhhdCdzIHVzZXItc2V0XG4gICAgICAgICAgLy8gZG9lcyBub3QgdGhyb3cgaW4gdGhlIHNhbWUgdGljayBhbmQgZ2V0cyBjYXVnaHQgaGVyZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbkVycm9yKHhoci5zdGF0dXMpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGRlYnVnKCd4aHIgZGF0YSAlcycsIHRoaXMuZGF0YSk7XG4gICAgeGhyLnNlbmQodGhpcy5kYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmaHJvbSB0aGUgY29uc3RydWN0b3JcbiAgICAvLyBhbmQgdGh1cyB0aGUgJ2Vycm9yJyBldmVudCBjYW4gb25seSBiZSBvbmx5IGJvdW5kICphZnRlciogdGhpcyBleGNlcHRpb25cbiAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYub25FcnJvcihlKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgdGhpcy5pbmRleCA9IFJlcXVlc3QucmVxdWVzdHNDb3VudCsrO1xuICAgIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF0gPSB0aGlzO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVzcG9uc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25TdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ3N1Y2Nlc3MnKTtcbiAgdGhpcy5jbGVhbnVwKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCBpZiB3ZSBoYXZlIGRhdGEuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5lbWl0KCdkYXRhJywgZGF0YSk7XG4gIHRoaXMub25TdWNjZXNzKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVycm9yLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLmNsZWFudXAodHJ1ZSk7XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBob3VzZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKGZyb21FcnJvcikge1xuICBpZiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB0aGlzLnhociB8fCBudWxsID09PSB0aGlzLnhocikge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB4bWxodHRwcmVxdWVzdFxuICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgIHRoaXMueGhyLm9ubG9hZCA9IHRoaXMueGhyLm9uZXJyb3IgPSBlbXB0eTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcbiAgfVxuXG4gIGlmIChmcm9tRXJyb3IpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy54aHIuYWJvcnQoKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG5cbiAgaWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICAgIGRlbGV0ZSBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdO1xuICB9XG5cbiAgdGhpcy54aHIgPSBudWxsO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBsb2FkLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRhdGE7XG4gIHRyeSB7XG4gICAgdmFyIGNvbnRlbnRUeXBlO1xuICAgIHRyeSB7XG4gICAgICBjb250ZW50VHlwZSA9IHRoaXMueGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIGlmIChjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZSB8fCB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5vbkVycm9yKGUpO1xuICB9XG4gIGlmIChudWxsICE9IGRhdGEpIHtcbiAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiBpdCBoYXMgWERvbWFpblJlcXVlc3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuaGFzWERSID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBnbG9iYWwuWERvbWFpblJlcXVlc3QgJiYgIXRoaXMueHMgJiYgdGhpcy5lbmFibGVzWERSO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgdGhlIHJlcXVlc3QuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jbGVhbnVwKCk7XG59O1xuXG4vKipcbiAqIEFib3J0cyBwZW5kaW5nIHJlcXVlc3RzIHdoZW4gdW5sb2FkaW5nIHRoZSB3aW5kb3cuIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnRcbiAqIG1lbW9yeSBsZWFrcyAoZS5nLiB3aGVuIHVzaW5nIElFKSBhbmQgdG8gZW5zdXJlIHRoYXQgbm8gc3B1cmlvdXMgZXJyb3IgaXNcbiAqIGVtaXR0ZWQuXG4gKi9cblxuUmVxdWVzdC5yZXF1ZXN0c0NvdW50ID0gMDtcblJlcXVlc3QucmVxdWVzdHMgPSB7fTtcblxuaWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICBpZiAoZ2xvYmFsLmF0dGFjaEV2ZW50KSB7XG4gICAgZ2xvYmFsLmF0dGFjaEV2ZW50KCdvbnVubG9hZCcsIHVubG9hZEhhbmRsZXIpO1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHVubG9hZEhhbmRsZXIsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmxvYWRIYW5kbGVyICgpIHtcbiAgZm9yICh2YXIgaSBpbiBSZXF1ZXN0LnJlcXVlc3RzKSB7XG4gICAgaWYgKFJlcXVlc3QucmVxdWVzdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIFJlcXVlc3QucmVxdWVzdHNbaV0uYWJvcnQoKTtcbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwiXG4vKipcbiAqIEdldHMgdGhlIGtleXMgZm9yIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX0ga2V5c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzIChvYmope1xuICB2YXIgYXJyID0gW107XG4gIHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcy5jYWxsKG9iaiwgaSkpIHtcbiAgICAgIGFyci5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9rZXlzLmpzIiwiLyoqXG4gKiBBbiBhYnN0cmFjdGlvbiBmb3Igc2xpY2luZyBhbiBhcnJheWJ1ZmZlciBldmVuIHdoZW5cbiAqIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSBpcyBub3Qgc3VwcG9ydGVkXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGFycmF5YnVmZmVyLmJ5dGVMZW5ndGg7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgZW5kID0gZW5kIHx8IGJ5dGVzO1xuXG4gIGlmIChhcnJheWJ1ZmZlci5zbGljZSkgeyByZXR1cm4gYXJyYXlidWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7IH1cblxuICBpZiAoc3RhcnQgPCAwKSB7IHN0YXJ0ICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPCAwKSB7IGVuZCArPSBieXRlczsgfVxuICBpZiAoZW5kID4gYnl0ZXMpIHsgZW5kID0gYnl0ZXM7IH1cblxuICBpZiAoc3RhcnQgPj0gYnl0ZXMgfHwgc3RhcnQgPj0gZW5kIHx8IGJ5dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgfVxuXG4gIHZhciBhYnYgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG4gIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShlbmQgLSBzdGFydCk7XG4gIGZvciAodmFyIGkgPSBzdGFydCwgaWkgPSAwOyBpIDwgZW5kOyBpKyssIGlpKyspIHtcbiAgICByZXN1bHRbaWldID0gYWJ2W2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQuYnVmZmVyO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9hcnJheWJ1ZmZlci5zbGljZS9pbmRleC5qcyIsIm1vZHVsZS5leHBvcnRzID0gYWZ0ZXJcblxuZnVuY3Rpb24gYWZ0ZXIoY291bnQsIGNhbGxiYWNrLCBlcnJfY2IpIHtcbiAgICB2YXIgYmFpbCA9IGZhbHNlXG4gICAgZXJyX2NiID0gZXJyX2NiIHx8IG5vb3BcbiAgICBwcm94eS5jb3VudCA9IGNvdW50XG5cbiAgICByZXR1cm4gKGNvdW50ID09PSAwKSA/IGNhbGxiYWNrKCkgOiBwcm94eVxuXG4gICAgZnVuY3Rpb24gcHJveHkoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWZ0ZXIgY2FsbGVkIHRvbyBtYW55IHRpbWVzJylcbiAgICAgICAgfVxuICAgICAgICAtLXByb3h5LmNvdW50XG5cbiAgICAgICAgLy8gYWZ0ZXIgZmlyc3QgZXJyb3IsIHJlc3QgYXJlIHBhc3NlZCB0byBlcnJfY2JcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgYmFpbCA9IHRydWVcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgICAgIC8vIGZ1dHVyZSBlcnJvciBjYWxsYmFja3Mgd2lsbCBnbyB0byBlcnJvciBoYW5kbGVyXG4gICAgICAgICAgICBjYWxsYmFjayA9IGVycl9jYlxuICAgICAgICB9IGVsc2UgaWYgKHByb3h5LmNvdW50ID09PSAwICYmICFiYWlsKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2FmdGVyL2luZGV4LmpzIiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgYGV4cG9ydHNgXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHM7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWBcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzICYmIG1vZHVsZTtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCwgZnJvbSBOb2RlLmpzIG9yIEJyb3dzZXJpZmllZCBjb2RlLFxuXHQvLyBhbmQgdXNlIGl0IGFzIGByb290YFxuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdHZhciBjb3VudGVyID0gMDtcblx0XHR2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0XHR2YXIgdmFsdWU7XG5cdFx0dmFyIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdHZhciB2YWx1ZTtcblx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGZ1bmN0aW9uIGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdHRocm93IEVycm9yKFxuXHRcdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHRcdCcgaXMgbm90IGEgc2NhbGFyIHZhbHVlJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRmdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCwgc2hpZnQpIHtcblx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IHNoaWZ0KSAmIDB4M0YpIHwgMHg4MCk7XG5cdH1cblxuXHRmdW5jdGlvbiBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkZGODApID09IDApIHsgLy8gMS1ieXRlIHNlcXVlbmNlXG5cdFx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG5cdFx0fVxuXHRcdHZhciBzeW1ib2wgPSAnJztcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkY4MDApID09IDApIHsgLy8gMi1ieXRlIHNlcXVlbmNlXG5cdFx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkZGMDAwMCkgPT0gMCkgeyAvLyAzLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdGlmICghY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkpIHtcblx0XHRcdFx0Y29kZVBvaW50ID0gMHhGRkZEO1xuXHRcdFx0fVxuXHRcdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxOCkgJiAweDA3KSB8IDB4RjApO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCAxMik7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRzeW1ib2wgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKChjb2RlUG9pbnQgJiAweDNGKSB8IDB4ODApO1xuXHRcdHJldHVybiBzeW1ib2w7XG5cdH1cblxuXHRmdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cmluZywgb3B0cykge1xuXHRcdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHRcdHZhciBzdHJpY3QgPSBmYWxzZSAhPT0gb3B0cy5zdHJpY3Q7XG5cblx0XHR2YXIgY29kZVBvaW50cyA9IHVjczJkZWNvZGUoc3RyaW5nKTtcblx0XHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0dmFyIGNvZGVQb2ludDtcblx0XHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRjb2RlUG9pbnQgPSBjb2RlUG9pbnRzW2luZGV4XTtcblx0XHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGJ5dGVTdHJpbmc7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRmdW5jdGlvbiByZWFkQ29udGludWF0aW9uQnl0ZSgpIHtcblx0XHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRcdGJ5dGVJbmRleCsrO1xuXG5cdFx0aWYgKChjb250aW51YXRpb25CeXRlICYgMHhDMCkgPT0gMHg4MCkge1xuXHRcdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGVuZCB1cCBoZXJlLCBpdOKAmXMgbm90IGEgY29udGludWF0aW9uIGJ5dGVcblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlU3ltYm9sKHN0cmljdCkge1xuXHRcdHZhciBieXRlMTtcblx0XHR2YXIgYnl0ZTI7XG5cdFx0dmFyIGJ5dGUzO1xuXHRcdHZhciBieXRlNDtcblx0XHR2YXIgY29kZVBvaW50O1xuXG5cdFx0aWYgKGJ5dGVJbmRleCA+IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdGlmIChieXRlSW5kZXggPT0gYnl0ZUNvdW50KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gUmVhZCBmaXJzdCBieXRlXG5cdFx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdFx0Ynl0ZUluZGV4Kys7XG5cblx0XHQvLyAxLWJ5dGUgc2VxdWVuY2UgKG5vIGNvbnRpbnVhdGlvbiBieXRlcylcblx0XHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdFx0cmV0dXJuIGJ5dGUxO1xuXHRcdH1cblxuXHRcdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICgoYnl0ZTEgJiAweEUwKSA9PSAweEMwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHg4MCkge1xuXHRcdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyAzLWJ5dGUgc2VxdWVuY2UgKG1heSBpbmNsdWRlIHVucGFpcmVkIHN1cnJvZ2F0ZXMpXG5cdFx0aWYgKChieXRlMSAmIDB4RjApID09IDB4RTApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDBGKSA8PCAxMikgfCAoYnl0ZTIgPDwgNikgfCBieXRlMztcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRcdHJldHVybiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSA/IGNvZGVQb2ludCA6IDB4RkZGRDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0aWYgKChieXRlMSAmIDB4RjgpID09IDB4RjApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGU0ID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDA3KSA8PCAweDEyKSB8IChieXRlMiA8PCAweDBDKSB8XG5cdFx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdFx0aWYgKGNvZGVQb2ludCA+PSAweDAxMDAwMCAmJiBjb2RlUG9pbnQgPD0gMHgxMEZGRkYpIHtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBVVEYtOCBkZXRlY3RlZCcpO1xuXHR9XG5cblx0dmFyIGJ5dGVBcnJheTtcblx0dmFyIGJ5dGVDb3VudDtcblx0dmFyIGJ5dGVJbmRleDtcblx0ZnVuY3Rpb24gdXRmOGRlY29kZShieXRlU3RyaW5nLCBvcHRzKSB7XG5cdFx0b3B0cyA9IG9wdHMgfHwge307XG5cdFx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHRcdGJ5dGVBcnJheSA9IHVjczJkZWNvZGUoYnl0ZVN0cmluZyk7XG5cdFx0Ynl0ZUNvdW50ID0gYnl0ZUFycmF5Lmxlbmd0aDtcblx0XHRieXRlSW5kZXggPSAwO1xuXHRcdHZhciBjb2RlUG9pbnRzID0gW107XG5cdFx0dmFyIHRtcDtcblx0XHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbChzdHJpY3QpKSAhPT0gZmFsc2UpIHtcblx0XHRcdGNvZGVQb2ludHMucHVzaCh0bXApO1xuXHRcdH1cblx0XHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciB1dGY4ID0ge1xuXHRcdCd2ZXJzaW9uJzogJzIuMS4yJyxcblx0XHQnZW5jb2RlJzogdXRmOGVuY29kZSxcblx0XHQnZGVjb2RlJzogdXRmOGRlY29kZVxuXHR9O1xuXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHV0Zjg7XG5cdFx0fSk7XG5cdH1cdGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmICFmcmVlRXhwb3J0cy5ub2RlVHlwZSkge1xuXHRcdGlmIChmcmVlTW9kdWxlKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSB1dGY4O1xuXHRcdH0gZWxzZSB7IC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0XHR2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3QuaGFzT3duUHJvcGVydHk7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gdXRmOCkge1xuXHRcdFx0XHRoYXNPd25Qcm9wZXJ0eS5jYWxsKHV0ZjgsIGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSB1dGY4W2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QudXRmOCA9IHV0Zjg7XG5cdH1cblxufSh0aGlzKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvdXRmOC5qcyIsIi8qXG4gKiBiYXNlNjQtYXJyYXlidWZmZXJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uaWtsYXN2aC9iYXNlNjQtYXJyYXlidWZmZXJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgTmlrbGFzIHZvbiBIZXJ0emVuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cbihmdW5jdGlvbigpe1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgY2hhcnMgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcblxuICAvLyBVc2UgYSBsb29rdXAgdGFibGUgdG8gZmluZCB0aGUgaW5kZXguXG4gIHZhciBsb29rdXAgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgbG9va3VwW2NoYXJzLmNoYXJDb2RlQXQoaSldID0gaTtcbiAgfVxuXG4gIGV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24oYXJyYXlidWZmZXIpIHtcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlciksXG4gICAgaSwgbGVuID0gYnl0ZXMubGVuZ3RoLCBiYXNlNjQgPSBcIlwiO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9Mykge1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2ldID4+IDJdO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaV0gJiAzKSA8PCA0KSB8IChieXRlc1tpICsgMV0gPj4gNCldO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaSArIDFdICYgMTUpIDw8IDIpIHwgKGJ5dGVzW2kgKyAyXSA+PiA2KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaSArIDJdICYgNjNdO1xuICAgIH1cblxuICAgIGlmICgobGVuICUgMykgPT09IDIpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDEpICsgXCI9XCI7XG4gICAgfSBlbHNlIGlmIChsZW4gJSAzID09PSAxKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKSArIFwiPT1cIjtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZTY0O1xuICB9O1xuXG4gIGV4cG9ydHMuZGVjb2RlID0gIGZ1bmN0aW9uKGJhc2U2NCkge1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBiYXNlNjQubGVuZ3RoICogMC43NSxcbiAgICBsZW4gPSBiYXNlNjQubGVuZ3RoLCBpLCBwID0gMCxcbiAgICBlbmNvZGVkMSwgZW5jb2RlZDIsIGVuY29kZWQzLCBlbmNvZGVkNDtcblxuICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDFdID09PSBcIj1cIikge1xuICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAyXSA9PT0gXCI9XCIpIHtcbiAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFycmF5YnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlckxlbmd0aCksXG4gICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz00KSB7XG4gICAgICBlbmNvZGVkMSA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKV07XG4gICAgICBlbmNvZGVkMiA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzEpXTtcbiAgICAgIGVuY29kZWQzID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMildO1xuICAgICAgZW5jb2RlZDQgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSszKV07XG5cbiAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDEgPDwgMikgfCAoZW5jb2RlZDIgPj4gNCk7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMiAmIDE1KSA8PCA0KSB8IChlbmNvZGVkMyA+PiAyKTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5YnVmZmVyO1xuICB9O1xufSkoKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9iYXNlNjQtYXJyYXlidWZmZXIvbGliL2Jhc2U2NC1hcnJheWJ1ZmZlci5qcyIsIi8qKlxuICogQ3JlYXRlIGEgYmxvYiBidWlsZGVyIGV2ZW4gd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3RcbiAqL1xuXG52YXIgQmxvYkJ1aWxkZXIgPSBnbG9iYWwuQmxvYkJ1aWxkZXJcbiAgfHwgZ2xvYmFsLldlYktpdEJsb2JCdWlsZGVyXG4gIHx8IGdsb2JhbC5NU0Jsb2JCdWlsZGVyXG4gIHx8IGdsb2JhbC5Nb3pCbG9iQnVpbGRlcjtcblxuLyoqXG4gKiBDaGVjayBpZiBCbG9iIGNvbnN0cnVjdG9yIGlzIHN1cHBvcnRlZFxuICovXG5cbnZhciBibG9iU3VwcG9ydGVkID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBhID0gbmV3IEJsb2IoWydoaSddKTtcbiAgICByZXR1cm4gYS5zaXplID09PSAyO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBzdXBwb3J0cyBBcnJheUJ1ZmZlclZpZXdzXG4gKiBGYWlscyBpbiBTYWZhcmkgNiwgc28gd2UgbmVlZCB0byBtYXAgdG8gQXJyYXlCdWZmZXJzIHRoZXJlLlxuICovXG5cbnZhciBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPSBibG9iU3VwcG9ydGVkICYmIChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYiA9IG5ldyBCbG9iKFtuZXcgVWludDhBcnJheShbMSwyXSldKTtcbiAgICByZXR1cm4gYi5zaXplID09PSAyO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgQmxvYkJ1aWxkZXIgaXMgc3VwcG9ydGVkXG4gKi9cblxudmFyIGJsb2JCdWlsZGVyU3VwcG9ydGVkID0gQmxvYkJ1aWxkZXJcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmFwcGVuZFxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuZ2V0QmxvYjtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBtYXBzIEFycmF5QnVmZmVyVmlld3MgdG8gQXJyYXlCdWZmZXJzXG4gKiBVc2VkIGJ5IEJsb2JCdWlsZGVyIGNvbnN0cnVjdG9yIGFuZCBvbGQgYnJvd3NlcnMgdGhhdCBkaWRuJ3RcbiAqIHN1cHBvcnQgaXQgaW4gdGhlIEJsb2IgY29uc3RydWN0b3IuXG4gKi9cblxuZnVuY3Rpb24gbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY2h1bmsgPSBhcnlbaV07XG4gICAgaWYgKGNodW5rLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgYnVmID0gY2h1bmsuYnVmZmVyO1xuXG4gICAgICAvLyBpZiB0aGlzIGlzIGEgc3ViYXJyYXksIG1ha2UgYSBjb3B5IHNvIHdlIG9ubHlcbiAgICAgIC8vIGluY2x1ZGUgdGhlIHN1YmFycmF5IHJlZ2lvbiBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlclxuICAgICAgaWYgKGNodW5rLmJ5dGVMZW5ndGggIT09IGJ1Zi5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIHZhciBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmsuYnl0ZUxlbmd0aCk7XG4gICAgICAgIGNvcHkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZiwgY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZUxlbmd0aCkpO1xuICAgICAgICBidWYgPSBjb3B5LmJ1ZmZlcjtcbiAgICAgIH1cblxuICAgICAgYXJ5W2ldID0gYnVmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBCbG9iQnVpbGRlckNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgYmIgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcbiAgbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgYmIuYXBwZW5kKGFyeVtpXSk7XG4gIH1cblxuICByZXR1cm4gKG9wdGlvbnMudHlwZSkgPyBiYi5nZXRCbG9iKG9wdGlvbnMudHlwZSkgOiBiYi5nZXRCbG9iKCk7XG59O1xuXG5mdW5jdGlvbiBCbG9iQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XG4gIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KTtcbiAgcmV0dXJuIG5ldyBCbG9iKGFyeSwgb3B0aW9ucyB8fCB7fSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgaWYgKGJsb2JTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID8gZ2xvYmFsLkJsb2IgOiBCbG9iQ29uc3RydWN0b3I7XG4gIH0gZWxzZSBpZiAoYmxvYkJ1aWxkZXJTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59KSgpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2Jsb2IvaW5kZXguanMiLCJcbi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gSlNPTlBQb2xsaW5nO1xuXG4vKipcbiAqIENhY2hlZCByZWd1bGFyIGV4cHJlc3Npb25zLlxuICovXG5cbnZhciByTmV3bGluZSA9IC9cXG4vZztcbnZhciByRXNjYXBlZE5ld2xpbmUgPSAvXFxcXG4vZztcblxuLyoqXG4gKiBHbG9iYWwgSlNPTlAgY2FsbGJhY2tzLlxuICovXG5cbnZhciBjYWxsYmFja3M7XG5cbi8qKlxuICogTm9vcC5cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7IH1cblxuLyoqXG4gKiBKU09OUCBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBKU09OUFBvbGxpbmcgKG9wdHMpIHtcbiAgUG9sbGluZy5jYWxsKHRoaXMsIG9wdHMpO1xuXG4gIHRoaXMucXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuXG4gIC8vIGRlZmluZSBnbG9iYWwgY2FsbGJhY2tzIGFycmF5IGlmIG5vdCBwcmVzZW50XG4gIC8vIHdlIGRvIHRoaXMgaGVyZSAobGF6aWx5KSB0byBhdm9pZCB1bm5lZWRlZCBnbG9iYWwgcG9sbHV0aW9uXG4gIGlmICghY2FsbGJhY2tzKSB7XG4gICAgLy8gd2UgbmVlZCB0byBjb25zaWRlciBtdWx0aXBsZSBlbmdpbmVzIGluIHRoZSBzYW1lIHBhZ2VcbiAgICBpZiAoIWdsb2JhbC5fX19laW8pIGdsb2JhbC5fX19laW8gPSBbXTtcbiAgICBjYWxsYmFja3MgPSBnbG9iYWwuX19fZWlvO1xuICB9XG5cbiAgLy8gY2FsbGJhY2sgaWRlbnRpZmllclxuICB0aGlzLmluZGV4ID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAvLyBhZGQgY2FsbGJhY2sgdG8ganNvbnAgZ2xvYmFsXG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKG1zZykge1xuICAgIHNlbGYub25EYXRhKG1zZyk7XG4gIH0pO1xuXG4gIC8vIGFwcGVuZCB0byBxdWVyeSBzdHJpbmdcbiAgdGhpcy5xdWVyeS5qID0gdGhpcy5pbmRleDtcblxuICAvLyBwcmV2ZW50IHNwdXJpb3VzIGVycm9ycyBmcm9tIGJlaW5nIGVtaXR0ZWQgd2hlbiB0aGUgd2luZG93IGlzIHVubG9hZGVkXG4gIGlmIChnbG9iYWwuZG9jdW1lbnQgJiYgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuc2NyaXB0KSBzZWxmLnNjcmlwdC5vbmVycm9yID0gZW1wdHk7XG4gICAgfSwgZmFsc2UpO1xuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLlxuICovXG5cbmluaGVyaXQoSlNPTlBQb2xsaW5nLCBQb2xsaW5nKTtcblxuLypcbiAqIEpTT05QIG9ubHkgc3VwcG9ydHMgYmluYXJ5IGFzIGJhc2U2NCBlbmNvZGVkIHN0cmluZ3NcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG5cbi8qKlxuICogQ2xvc2VzIHRoZSBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gIH1cblxuICBpZiAodGhpcy5mb3JtKSB7XG4gICAgdGhpcy5mb3JtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5mb3JtKTtcbiAgICB0aGlzLmZvcm0gPSBudWxsO1xuICAgIHRoaXMuaWZyYW1lID0gbnVsbDtcbiAgfVxuXG4gIFBvbGxpbmcucHJvdG90eXBlLmRvQ2xvc2UuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogU3RhcnRzIGEgcG9sbCBjeWNsZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvUG9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7XG4gICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICB9XG5cbiAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgc2NyaXB0LnNyYyA9IHRoaXMudXJpKCk7XG4gIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ2pzb25wIHBvbGwgZXJyb3InLCBlKTtcbiAgfTtcblxuICB2YXIgaW5zZXJ0QXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XG4gIGlmIChpbnNlcnRBdCkge1xuICAgIGluc2VydEF0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNjcmlwdCwgaW5zZXJ0QXQpO1xuICB9IGVsc2Uge1xuICAgIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmJvZHkpLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gIH1cbiAgdGhpcy5zY3JpcHQgPSBzY3JpcHQ7XG5cbiAgdmFyIGlzVUFnZWNrbyA9ICd1bmRlZmluZWQnICE9PSB0eXBlb2YgbmF2aWdhdG9yICYmIC9nZWNrby9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgaWYgKGlzVUFnZWNrbykge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgIH0sIDEwMCk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIHdpdGggYSBoaWRkZW4gaWZyYW1lLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1dyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGZuKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAoIXRoaXMuZm9ybSkge1xuICAgIHZhciBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICAgIHZhciBhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICB2YXIgaWQgPSB0aGlzLmlmcmFtZUlkID0gJ2Vpb19pZnJhbWVfJyArIHRoaXMuaW5kZXg7XG4gICAgdmFyIGlmcmFtZTtcblxuICAgIGZvcm0uY2xhc3NOYW1lID0gJ3NvY2tldGlvJztcbiAgICBmb3JtLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBmb3JtLnN0eWxlLnRvcCA9ICctMTAwMHB4JztcbiAgICBmb3JtLnN0eWxlLmxlZnQgPSAnLTEwMDBweCc7XG4gICAgZm9ybS50YXJnZXQgPSBpZDtcbiAgICBmb3JtLm1ldGhvZCA9ICdQT1NUJztcbiAgICBmb3JtLnNldEF0dHJpYnV0ZSgnYWNjZXB0LWNoYXJzZXQnLCAndXRmLTgnKTtcbiAgICBhcmVhLm5hbWUgPSAnZCc7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChhcmVhKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xuXG4gICAgdGhpcy5mb3JtID0gZm9ybTtcbiAgICB0aGlzLmFyZWEgPSBhcmVhO1xuICB9XG5cbiAgdGhpcy5mb3JtLmFjdGlvbiA9IHRoaXMudXJpKCk7XG5cbiAgZnVuY3Rpb24gY29tcGxldGUgKCkge1xuICAgIGluaXRJZnJhbWUoKTtcbiAgICBmbigpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdElmcmFtZSAoKSB7XG4gICAgaWYgKHNlbGYuaWZyYW1lKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZWxmLmZvcm0ucmVtb3ZlQ2hpbGQoc2VsZi5pZnJhbWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzZWxmLm9uRXJyb3IoJ2pzb25wIHBvbGxpbmcgaWZyYW1lIHJlbW92YWwgZXJyb3InLCBlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgLy8gaWU2IGR5bmFtaWMgaWZyYW1lcyB3aXRoIHRhcmdldD1cIlwiIHN1cHBvcnQgKHRoYW5rcyBDaHJpcyBMYW1iYWNoZXIpXG4gICAgICB2YXIgaHRtbCA9ICc8aWZyYW1lIHNyYz1cImphdmFzY3JpcHQ6MFwiIG5hbWU9XCInICsgc2VsZi5pZnJhbWVJZCArICdcIj4nO1xuICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChodG1sKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGlmcmFtZS5uYW1lID0gc2VsZi5pZnJhbWVJZDtcbiAgICAgIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDowJztcbiAgICB9XG5cbiAgICBpZnJhbWUuaWQgPSBzZWxmLmlmcmFtZUlkO1xuXG4gICAgc2VsZi5mb3JtLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgc2VsZi5pZnJhbWUgPSBpZnJhbWU7XG4gIH1cblxuICBpbml0SWZyYW1lKCk7XG5cbiAgLy8gZXNjYXBlIFxcbiB0byBwcmV2ZW50IGl0IGZyb20gYmVpbmcgY29udmVydGVkIGludG8gXFxyXFxuIGJ5IHNvbWUgVUFzXG4gIC8vIGRvdWJsZSBlc2NhcGluZyBpcyByZXF1aXJlZCBmb3IgZXNjYXBlZCBuZXcgbGluZXMgYmVjYXVzZSB1bmVzY2FwaW5nIG9mIG5ldyBsaW5lcyBjYW4gYmUgZG9uZSBzYWZlbHkgb24gc2VydmVyLXNpZGVcbiAgZGF0YSA9IGRhdGEucmVwbGFjZShyRXNjYXBlZE5ld2xpbmUsICdcXFxcXFxuJyk7XG4gIHRoaXMuYXJlYS52YWx1ZSA9IGRhdGEucmVwbGFjZShyTmV3bGluZSwgJ1xcXFxuJyk7XG5cbiAgdHJ5IHtcbiAgICB0aGlzLmZvcm0uc3VibWl0KCk7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgaWYgKHRoaXMuaWZyYW1lLmF0dGFjaEV2ZW50KSB7XG4gICAgdGhpcy5pZnJhbWUub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaWZyYW1lLnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaWZyYW1lLm9ubG9hZCA9IGNvbXBsZXRlO1xuICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy1qc29ucC5qcyIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDp3ZWJzb2NrZXQnKTtcbnZhciBCcm93c2VyV2ViU29ja2V0ID0gZ2xvYmFsLldlYlNvY2tldCB8fCBnbG9iYWwuTW96V2ViU29ja2V0O1xudmFyIE5vZGVXZWJTb2NrZXQ7XG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgdHJ5IHtcbiAgICBOb2RlV2ViU29ja2V0ID0gcmVxdWlyZSgnd3MnKTtcbiAgfSBjYXRjaCAoZSkgeyB9XG59XG5cbi8qKlxuICogR2V0IGVpdGhlciB0aGUgYFdlYlNvY2tldGAgb3IgYE1veldlYlNvY2tldGAgZ2xvYmFsc1xuICogaW4gdGhlIGJyb3dzZXIgb3IgdHJ5IHRvIHJlc29sdmUgV2ViU29ja2V0LWNvbXBhdGlibGVcbiAqIGludGVyZmFjZSBleHBvc2VkIGJ5IGB3c2AgZm9yIE5vZGUtbGlrZSBlbnZpcm9ubWVudC5cbiAqL1xuXG52YXIgV2ViU29ja2V0ID0gQnJvd3NlcldlYlNvY2tldDtcbmlmICghV2ViU29ja2V0ICYmIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gIFdlYlNvY2tldCA9IE5vZGVXZWJTb2NrZXQ7XG59XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBXUztcblxuLyoqXG4gKiBXZWJTb2NrZXQgdHJhbnNwb3J0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkge09iamVjdH0gY29ubmVjdGlvbiBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFdTIChvcHRzKSB7XG4gIHZhciBmb3JjZUJhc2U2NCA9IChvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQpO1xuICBpZiAoZm9yY2VCYXNlNjQpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IG9wdHMucGVyTWVzc2FnZURlZmxhdGU7XG4gIHRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0ID0gQnJvd3NlcldlYlNvY2tldCAmJiAhb3B0cy5mb3JjZU5vZGU7XG4gIHRoaXMucHJvdG9jb2xzID0gb3B0cy5wcm90b2NvbHM7XG4gIGlmICghdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICBXZWJTb2NrZXQgPSBOb2RlV2ViU29ja2V0O1xuICB9XG4gIFRyYW5zcG9ydC5jYWxsKHRoaXMsIG9wdHMpO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxuICovXG5cbmluaGVyaXQoV1MsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5XUy5wcm90b3R5cGUubmFtZSA9ICd3ZWJzb2NrZXQnO1xuXG4vKlxuICogV2ViU29ja2V0cyBzdXBwb3J0IGJpbmFyeVxuICovXG5cbldTLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogT3BlbnMgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5jaGVjaygpKSB7XG4gICAgLy8gbGV0IHByb2JlIHRpbWVvdXRcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdXJpID0gdGhpcy51cmkoKTtcbiAgdmFyIHByb3RvY29scyA9IHRoaXMucHJvdG9jb2xzO1xuICB2YXIgb3B0cyA9IHtcbiAgICBhZ2VudDogdGhpcy5hZ2VudCxcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZVxuICB9O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgb3B0cy5oZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG4gIH1cbiAgaWYgKHRoaXMubG9jYWxBZGRyZXNzKSB7XG4gICAgb3B0cy5sb2NhbEFkZHJlc3MgPSB0aGlzLmxvY2FsQWRkcmVzcztcbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy53cyA9IHRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0ID8gKHByb3RvY29scyA/IG5ldyBXZWJTb2NrZXQodXJpLCBwcm90b2NvbHMpIDogbmV3IFdlYlNvY2tldCh1cmkpKSA6IG5ldyBXZWJTb2NrZXQodXJpLCBwcm90b2NvbHMsIG9wdHMpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIH1cblxuICBpZiAodGhpcy53cy5iaW5hcnlUeXBlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy53cy5zdXBwb3J0cyAmJiB0aGlzLndzLnN1cHBvcnRzLmJpbmFyeSkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9ICdub2RlYnVmZmVyJztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICB9XG5cbiAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xufTtcblxuLyoqXG4gKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc29ja2V0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy53cy5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbk9wZW4oKTtcbiAgfTtcbiAgdGhpcy53cy5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25DbG9zZSgpO1xuICB9O1xuICB0aGlzLndzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldikge1xuICAgIHNlbGYub25EYXRhKGV2LmRhdGEpO1xuICB9O1xuICB0aGlzLndzLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcignd2Vic29ja2V0IGVycm9yJywgZSk7XG4gIH07XG59O1xuXG4vKipcbiAqIFdyaXRlcyBkYXRhIHRvIHNvY2tldC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBvZiBwYWNrZXRzLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgLy8gZW5jb2RlUGFja2V0IGVmZmljaWVudCBhcyBpdCB1c2VzIFdTIGZyYW1pbmdcbiAgLy8gbm8gbmVlZCBmb3IgZW5jb2RlUGF5bG9hZFxuICB2YXIgdG90YWwgPSBwYWNrZXRzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB0b3RhbDsgaSA8IGw7IGkrKykge1xuICAgIChmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICBwYXJzZXIuZW5jb2RlUGFja2V0KHBhY2tldCwgc2VsZi5zdXBwb3J0c0JpbmFyeSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKCFzZWxmLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgIC8vIGFsd2F5cyBjcmVhdGUgYSBuZXcgb2JqZWN0IChHSC00MzcpXG4gICAgICAgICAgdmFyIG9wdHMgPSB7fTtcbiAgICAgICAgICBpZiAocGFja2V0Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBwYWNrZXQub3B0aW9ucy5jb21wcmVzcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VsZi5wZXJNZXNzYWdlRGVmbGF0ZSkge1xuICAgICAgICAgICAgdmFyIGxlbiA9ICdzdHJpbmcnID09PSB0eXBlb2YgZGF0YSA/IGdsb2JhbC5CdWZmZXIuYnl0ZUxlbmd0aChkYXRhKSA6IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGxlbiA8IHNlbGYucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb21ldGltZXMgdGhlIHdlYnNvY2tldCBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZCBidXQgdGhlIGJyb3dzZXIgZGlkbid0XG4gICAgICAgIC8vIGhhdmUgYSBjaGFuY2Ugb2YgaW5mb3JtaW5nIHVzIGFib3V0IGl0IHlldCwgaW4gdGhhdCBjYXNlIHNlbmQgd2lsbFxuICAgICAgICAvLyB0aHJvdyBhbiBlcnJvclxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChzZWxmLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgICAgLy8gVHlwZUVycm9yIGlzIHRocm93biB3aGVuIHBhc3NpbmcgdGhlIHNlY29uZCBhcmd1bWVudCBvbiBTYWZhcmlcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEsIG9wdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGRlYnVnKCd3ZWJzb2NrZXQgY2xvc2VkIGJlZm9yZSBvbmNsb3NlIGV2ZW50Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAtLXRvdGFsIHx8IGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pKHBhY2tldHNbaV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZG9uZSAoKSB7XG4gICAgc2VsZi5lbWl0KCdmbHVzaCcpO1xuXG4gICAgLy8gZmFrZSBkcmFpblxuICAgIC8vIGRlZmVyIHRvIG5leHQgdGljayB0byBhbGxvdyBTb2NrZXQgdG8gY2xlYXIgd3JpdGVCdWZmZXJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgICAgc2VsZi5lbWl0KCdkcmFpbicpO1xuICAgIH0sIDApO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGNsb3NlXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIFRyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZS5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIHRoaXMud3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy53cy5jbG9zZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLnVyaSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgdmFyIHNjaGVtYSA9IHRoaXMuc2VjdXJlID8gJ3dzcycgOiAnd3MnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnd3NzJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgKCd3cycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gODApKSkge1xuICAgIHBvcnQgPSAnOicgKyB0aGlzLnBvcnQ7XG4gIH1cblxuICAvLyBhcHBlbmQgdGltZXN0YW1wIHRvIFVSSVxuICBpZiAodGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIC8vIGNvbW11bmljYXRlIGJpbmFyeSBzdXBwb3J0IGNhcGFiaWxpdGllc1xuICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkpIHtcbiAgICBxdWVyeS5iNjQgPSAxO1xuICB9XG5cbiAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgLy8gcHJlcGVuZCA/IHRvIHF1ZXJ5XG4gIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9ICc/JyArIHF1ZXJ5O1xuICB9XG5cbiAgdmFyIGlwdjYgPSB0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHJldHVybiBzY2hlbWEgKyAnOi8vJyArIChpcHY2ID8gJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyA6IHRoaXMuaG9zdG5hbWUpICsgcG9ydCArIHRoaXMucGF0aCArIHF1ZXJ5O1xufTtcblxuLyoqXG4gKiBGZWF0dXJlIGRldGVjdGlvbiBmb3IgV2ViU29ja2V0LlxuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHdoZXRoZXIgdGhpcyB0cmFuc3BvcnQgaXMgYXZhaWxhYmxlLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5XUy5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIVdlYlNvY2tldCAmJiAhKCdfX2luaXRpYWxpemUnIGluIFdlYlNvY2tldCAmJiB0aGlzLm5hbWUgPT09IFdTLnByb3RvdHlwZS5uYW1lKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy93ZWJzb2NrZXQuanMiLCIvKiAoaWdub3JlZCkgKi9cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyB3cyAoaWdub3JlZClcbi8vIG1vZHVsZSBpZCA9IDUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBKU09OIHBhcnNlLlxyXG4gKlxyXG4gKiBAc2VlIEJhc2VkIG9uIGpRdWVyeSNwYXJzZUpTT04gKE1JVCkgYW5kIEpTT04yXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbnZhciBydmFsaWRjaGFycyA9IC9eW1xcXSw6e31cXHNdKiQvO1xyXG52YXIgcnZhbGlkZXNjYXBlID0gL1xcXFwoPzpbXCJcXFxcXFwvYmZucnRdfHVbMC05YS1mQS1GXXs0fSkvZztcclxudmFyIHJ2YWxpZHRva2VucyA9IC9cIlteXCJcXFxcXFxuXFxyXSpcInx0cnVlfGZhbHNlfG51bGx8LT9cXGQrKD86XFwuXFxkKik/KD86W2VFXVsrXFwtXT9cXGQrKT8vZztcclxudmFyIHJ2YWxpZGJyYWNlcyA9IC8oPzpefDp8LCkoPzpcXHMqXFxbKSsvZztcclxudmFyIHJ0cmltTGVmdCA9IC9eXFxzKy87XHJcbnZhciBydHJpbVJpZ2h0ID0gL1xccyskLztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2Vqc29uKGRhdGEpIHtcclxuICBpZiAoJ3N0cmluZycgIT0gdHlwZW9mIGRhdGEgfHwgIWRhdGEpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZGF0YSA9IGRhdGEucmVwbGFjZShydHJpbUxlZnQsICcnKS5yZXBsYWNlKHJ0cmltUmlnaHQsICcnKTtcclxuXHJcbiAgLy8gQXR0ZW1wdCB0byBwYXJzZSB1c2luZyB0aGUgbmF0aXZlIEpTT04gcGFyc2VyIGZpcnN0XHJcbiAgaWYgKGdsb2JhbC5KU09OICYmIEpTT04ucGFyc2UpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHJ2YWxpZGNoYXJzLnRlc3QoZGF0YS5yZXBsYWNlKHJ2YWxpZGVzY2FwZSwgJ0AnKVxyXG4gICAgICAucmVwbGFjZShydmFsaWR0b2tlbnMsICddJylcclxuICAgICAgLnJlcGxhY2UocnZhbGlkYnJhY2VzLCAnJykpKSB7XHJcbiAgICByZXR1cm4gKG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBkYXRhKSkoKTtcclxuICB9XHJcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3BhcnNlanNvbi9pbmRleC5qcyIsIm1vZHVsZS5leHBvcnRzID0gdG9BcnJheVxuXG5mdW5jdGlvbiB0b0FycmF5KGxpc3QsIGluZGV4KSB7XG4gICAgdmFyIGFycmF5ID0gW11cblxuICAgIGluZGV4ID0gaW5kZXggfHwgMFxuXG4gICAgZm9yICh2YXIgaSA9IGluZGV4IHx8IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFycmF5W2kgLSBpbmRleF0gPSBsaXN0W2ldXG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdG8tYXJyYXkvaW5kZXguanMiLCJcbi8qKlxuICogRXhwb3NlIGBCYWNrb2ZmYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tvZmY7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBiYWNrb2ZmIHRpbWVyIHdpdGggYG9wdHNgLlxuICpcbiAqIC0gYG1pbmAgaW5pdGlhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBbMTAwXVxuICogLSBgbWF4YCBtYXggdGltZW91dCBbMTAwMDBdXG4gKiAtIGBqaXR0ZXJgIFswXVxuICogLSBgZmFjdG9yYCBbMl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBCYWNrb2ZmKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMubXMgPSBvcHRzLm1pbiB8fCAxMDA7XG4gIHRoaXMubWF4ID0gb3B0cy5tYXggfHwgMTAwMDA7XG4gIHRoaXMuZmFjdG9yID0gb3B0cy5mYWN0b3IgfHwgMjtcbiAgdGhpcy5qaXR0ZXIgPSBvcHRzLmppdHRlciA+IDAgJiYgb3B0cy5qaXR0ZXIgPD0gMSA/IG9wdHMuaml0dGVyIDogMDtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBiYWNrb2ZmIGR1cmF0aW9uLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbigpe1xuICB2YXIgbXMgPSB0aGlzLm1zICogTWF0aC5wb3codGhpcy5mYWN0b3IsIHRoaXMuYXR0ZW1wdHMrKyk7XG4gIGlmICh0aGlzLmppdHRlcikge1xuICAgIHZhciByYW5kID0gIE1hdGgucmFuZG9tKCk7XG4gICAgdmFyIGRldmlhdGlvbiA9IE1hdGguZmxvb3IocmFuZCAqIHRoaXMuaml0dGVyICogbXMpO1xuICAgIG1zID0gKE1hdGguZmxvb3IocmFuZCAqIDEwKSAmIDEpID09IDAgID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcbiAgfVxuICByZXR1cm4gTWF0aC5taW4obXMsIHRoaXMubWF4KSB8IDA7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1pbmltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1pbiA9IGZ1bmN0aW9uKG1pbil7XG4gIHRoaXMubXMgPSBtaW47XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWF4aW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWF4ID0gZnVuY3Rpb24obWF4KXtcbiAgdGhpcy5tYXggPSBtYXg7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaml0dGVyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRKaXR0ZXIgPSBmdW5jdGlvbihqaXR0ZXIpe1xuICB0aGlzLmppdHRlciA9IGppdHRlcjtcbn07XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9iYWNrbzIvaW5kZXguanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5ZXIge1xyXG4gICAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5udW1iZXIgPSAtMTtcclxuICAgIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3B1YmxpYy9qcy9wbGF5ZXIuanMiLCJpbXBvcnQgQ2VsbCBmcm9tICcuL2NlbGwnXHJcbmltcG9ydCB7UGF3biwgUm9vaywgS25pZ2h0LCBCaXNob3AsIFF1ZWVuLCBLaW5nfSBmcm9tICcuL3BpZWNlJ1xyXG5pbXBvcnQge1doaXRlVGlsZSwgQmxhY2tUaWxlfSBmcm9tICcuL3RpbGUnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihydWxlcywgcGxheWVyMSwgcGxheWVyMikge1xyXG4gICAgICAgIHRoaXMucnVsZXMgPSBydWxlcztcclxuICAgICAgICB0aGlzLmdhbWVMb2cgPSBbXTtcclxuICAgICAgICB0aGlzLnBsYXllcjEgPSBwbGF5ZXIxO1xyXG4gICAgICAgIHRoaXMucGxheWVyMS5udW1iZXIgPSAxO1xyXG4gICAgICAgIHRoaXMucGxheWVyMiA9IHBsYXllcjI7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIyLm51bWJlciA9IDI7XHJcblxyXG4gICAgICAgIHRoaXMuYm9hcmQgPSB0aGlzLmdlbmVyYXRlQ2hlY2tlZEJvYXJkKDgsIDgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDg7IHgrKykge1xyXG4gICAgICAgICAgICB0aGlzLmJvYXJkWzFdW3hdLnBpZWNlID0gbmV3IFBhd24odGhpcy5wbGF5ZXIyKTtcclxuICAgICAgICAgICAgdGhpcy5ib2FyZFs2XVt4XS5waWVjZSA9IG5ldyBQYXduKHRoaXMucGxheWVyMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYm9hcmRbMF1bMF0ucGllY2UgPSBuZXcgUm9vayh0aGlzLnBsYXllcjIpO1xyXG4gICAgICAgIHRoaXMuYm9hcmRbMF1bN10ucGllY2UgPSBuZXcgUm9vayh0aGlzLnBsYXllcjIpO1xyXG4gICAgICAgIHRoaXMuYm9hcmRbN11bMF0ucGllY2UgPSBuZXcgUm9vayh0aGlzLnBsYXllcjEpO1xyXG4gICAgICAgIHRoaXMuYm9hcmRbN11bN10ucGllY2UgPSBuZXcgUm9vayh0aGlzLnBsYXllcjEpO1xyXG4gICAgICAgIHRoaXMuYm9hcmRbMF1bMV0ucGllY2UgPSBuZXcgS25pZ2h0KHRoaXMucGxheWVyMik7XHJcbiAgICAgICAgdGhpcy5ib2FyZFswXVs2XS5waWVjZSA9IG5ldyBLbmlnaHQodGhpcy5wbGF5ZXIyKTtcclxuICAgICAgICB0aGlzLmJvYXJkWzddWzFdLnBpZWNlID0gbmV3IEtuaWdodCh0aGlzLnBsYXllcjEpO1xyXG4gICAgICAgIHRoaXMuYm9hcmRbN11bNl0ucGllY2UgPSBuZXcgS25pZ2h0KHRoaXMucGxheWVyMSk7XHJcbiAgICAgICAgdGhpcy5ib2FyZFswXVsyXS5waWVjZSA9IG5ldyBCaXNob3AodGhpcy5wbGF5ZXIyKTtcclxuICAgICAgICB0aGlzLmJvYXJkWzBdWzVdLnBpZWNlID0gbmV3IEJpc2hvcCh0aGlzLnBsYXllcjIpO1xyXG4gICAgICAgIHRoaXMuYm9hcmRbN11bMl0ucGllY2UgPSBuZXcgQmlzaG9wKHRoaXMucGxheWVyMSk7XHJcbiAgICAgICAgdGhpcy5ib2FyZFs3XVs1XS5waWVjZSA9IG5ldyBCaXNob3AodGhpcy5wbGF5ZXIxKTtcclxuICAgICAgICB0aGlzLmJvYXJkWzBdWzRdLnBpZWNlID0gbmV3IFF1ZWVuKHRoaXMucGxheWVyMik7XHJcbiAgICAgICAgdGhpcy5ib2FyZFs3XVs0XS5waWVjZSA9IG5ldyBRdWVlbih0aGlzLnBsYXllcjEpO1xyXG4gICAgICAgIHRoaXMuYm9hcmRbMF1bM10ucGllY2UgPSBuZXcgS2luZyh0aGlzLnBsYXllcjIpO1xyXG4gICAgICAgIHRoaXMuYm9hcmRbN11bM10ucGllY2UgPSBuZXcgS2luZyh0aGlzLnBsYXllcjEpO1xyXG5cclxuICAgICAgICAvLyBzYXZlIGNvb3JkcyBvbiBjZWxsIGZvciBlYXNpZXIgbG9va3VwXHJcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmJvYXJkLmxlbmd0aDsgeSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5ib2FyZFt5XS5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNlbGwgPSB0aGlzLmJvYXJkW3ldW3hdO1xyXG4gICAgICAgICAgICAgICAgY2VsbC54ID0geDtcclxuICAgICAgICAgICAgICAgIGNlbGwueSA9IHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZ2VuZXJhdGVzIGEgbG9nRW50cnkgZm9yIGEgbW92ZVxyXG4gICAgLy8gdGhpcyBsb2dFbnRyeSBjYW4gdGhlbiBiZSBleGVjdXRlZCBieSBhbGwgcGxheWVyc1xyXG4gICAgcHJlcGFyZU1vdmUoc291cmNlQ2VsbCwgdGFyZ2V0Q2VsbCkge1xyXG4gICAgICAgIGlmICghc291cmNlQ2VsbC5waWVjZSkgdGhyb3cgJ05vUGllY2VUb01vdmUnO1xyXG5cclxuICAgICAgICBsZXQgbG9nRW50cnkgPSB7XHJcbiAgICAgICAgICAgIGFjdGlvbjogJ21vdmUnLFxyXG4gICAgICAgICAgICBtb3ZlZFBpZWNlQ2xhc3M6IHNvdXJjZUNlbGwucGllY2UuY2xhc3MsXHJcbiAgICAgICAgICAgIHNvdXJjZToge3g6IHNvdXJjZUNlbGwueCwgeTogc291cmNlQ2VsbC55fSxcclxuICAgICAgICAgICAgdGFyZ2V0OiB7eDogdGFyZ2V0Q2VsbC54LCB5OiB0YXJnZXRDZWxsLnl9LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXRDZWxsLnBpZWNlKVxyXG4gICAgICAgICAgICBsb2dFbnRyeS5raWxsZWRQaWVjZUNsYXNzID0gdGFyZ2V0Q2VsbC5waWVjZS5jbGFzcztcclxuXHJcbiAgICAgICAgcmV0dXJuIGxvZ0VudHJ5O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNoZWNrcyBpZiBhIG1vdmUgaXMgdmFsaWRcclxuICAgIC8vIFRPRE86IGNoZWNrIHdpdGggcGllY2UgY2xhc3NcclxuICAgIGNoZWNrTW92ZShsb2dFbnRyeSkge1xyXG4gICAgICAgIGxldCBzb3VyY2VDZWxsID0gdGhpcy5nZXRDZWxsKGxvZ0VudHJ5LnNvdXJjZSk7XHJcbiAgICAgICAgbGV0IHRhcmdldENlbGwgPSB0aGlzLmdldENlbGwobG9nRW50cnkudGFyZ2V0KTtcclxuICAgICAgICBpZiAoIXNvdXJjZUNlbGwucGllY2UpIHRocm93ICdOb1BpZWNlVG9Nb3ZlJztcclxuICAgICAgICBpZiAoc291cmNlQ2VsbC5waWVjZS5jbGFzcyAhPT0gbG9nRW50cnkubW92ZWRQaWVjZUNsYXNzKSB0aHJvdyAnT3V0T2ZTeW5jRXJyb3I6IHdyb25nIHNvdXJjZSBwaWVjZSBjbGFzcyc7XHJcbiAgICAgICAgaWYgKGxvZ0VudHJ5LmtpbGxlZFBpZWNlQ2xhc3MgJiZcclxuICAgICAgICAgICAgbG9nRW50cnkua2lsbGVkUGllY2VDbGFzcyAhPT0gdGFyZ2V0Q2VsbC5waWVjZS5jbGFzcykgdGhyb3cgJ091dE9mU3luY0Vycm9yOiB3cm9uZyBraWxsZWQgcGllY2UgY2xhc3MnO1xyXG4gICAgfVxyXG5cclxuICAgIGV4ZWN1dGUobG9nRW50cnkpIHtcclxuICAgICAgICBpZiAobG9nRW50cnkuYWN0aW9uID09PSAnbW92ZScpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja01vdmUobG9nRW50cnkpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNvdXJjZUNlbGwgPSB0aGlzLmdldENlbGwobG9nRW50cnkuc291cmNlKTtcclxuICAgICAgICAgICAgbGV0IHRhcmdldENlbGwgPSB0aGlzLmdldENlbGwobG9nRW50cnkudGFyZ2V0KTtcclxuICAgICAgICAgICAgdGFyZ2V0Q2VsbC5waWVjZSA9IHNvdXJjZUNlbGwucGllY2U7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBzb3VyY2VDZWxsLnBpZWNlO1xyXG4gICAgICAgICAgICB0YXJnZXRDZWxsLnBpZWNlLmhhc01vdmVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZ2FtZUxvZy5wdXNoKGxvZ0VudHJ5KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQb3NzaWJsZU1vdmVzKGNlbGwpIHtcclxuICAgICAgICByZXR1cm4gY2VsbC5waWVjZS5nZXRQb3NzaWJsZU1vdmVzKHRoaXMsIGNlbGwueCwgY2VsbC55KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDZWxsKHgsIHkpIHtcclxuICAgICAgICAvLyBwYXNzIG9ubHkgdGhlIHggcGFyYW0gdG8gYmUgaGFuZGxlZCBhcyBvYmplY3Q6IHt4OiAxLCB5OiAxfVxyXG4gICAgICAgIGlmICh5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgeSA9IHgueTtcclxuICAgICAgICAgICAgeCA9IHgueDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh5IDwgMCB8fCB5ID49IHRoaXMuYm9hcmQubGVuZ3RoKSB0aHJvdyBcIk91dHNpZGVPZkJvYXJkXCI7XHJcbiAgICAgICAgbGV0IHJvdyA9IHRoaXMuYm9hcmRbeV07XHJcbiAgICAgICAgaWYgKHggPCAwIHx8IHggPj0gcm93Lmxlbmd0aCkgdGhyb3cgXCJPdXRzaWRlT2ZCb2FyZFwiO1xyXG4gICAgICAgIHJldHVybiByb3dbeF07XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCB0ZW1wbGF0ZSA9IHJlcXVpcmUoXCIuLi90ZW1wbGF0ZXMvYm9hcmQuaGJzXCIpO1xyXG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZSh7Z2FtZTogdGhpc30pO1xyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlQ2hlY2tlZEJvYXJkKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgICBsZXQgYm9hcmQgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XHJcbiAgICAgICAgICAgIGJvYXJkW3ldID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgYm9hcmRbeV1beF0gPSBuZXcgQ2VsbCgoKHggKyB5KSAlIDIgPT09IDAgPyBuZXcgQmxhY2tUaWxlKCkgOiBuZXcgV2hpdGVUaWxlKCkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYm9hcmQ7XHJcbiAgICB9XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wdWJsaWMvanMvZ2FtZS5qcyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENlbGwge1xyXG4gICAgY29uc3RydWN0b3IodGlsZSwgcGllY2UpIHtcclxuICAgICAgICB0aGlzLl90aWxlID0gdGlsZTtcclxuICAgICAgICB0aGlzLnBpZWNlID0gcGllY2U7XHJcbiAgICAgICAgdGhpcy54ID0gLTE7XHJcbiAgICAgICAgdGhpcy55ID0gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRpbGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNsYXNzZXMoKSB7XHJcbiAgICAgICAgbGV0IGNscyA9IHRoaXMudGlsZS5jbGFzc2VzO1xyXG4gICAgICAgIGlmICh0aGlzLnBpZWNlKSBjbHMucHVzaCh0aGlzLnBpZWNlLmNsYXNzKTtcclxuICAgICAgICByZXR1cm4gY2xzO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgdGVtcGxhdGUgPSByZXF1aXJlKFwiLi4vdGVtcGxhdGVzL2NlbGwuaGJzXCIpO1xyXG4gICAgICAgIGxldCBwYXJhbXMgPSB7Y2VsbDogdGhpcywgY2xhc3NlczogdGhpcy5jbGFzc2VzLmpvaW4oJyAnKX07XHJcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlKHBhcmFtcyk7XHJcbiAgICB9XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wdWJsaWMvanMvY2VsbC5qcyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXFNoeWx1eFxcXFxnaXRcXFxcZHNcXFxcbm9kZV9tb2R1bGVzXFxcXGhhbmRsZWJhcnNcXFxccnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlcjtcblxuICByZXR1cm4gXCIgICAgICAgIDxpbWcgc3JjPVxcXCJcIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pbWFnZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaW1hZ2UgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJpbWFnZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIC8+XFxyXFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9Y29udGFpbmVyLmxhbWJkYTtcblxuICByZXR1cm4gXCI8dGQgY2xhc3M9XFxcIlwiXG4gICAgKyBhbGlhczIoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5jbGFzc2VzIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jbGFzc2VzIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJjbGFzc2VzXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgZGF0YS14PVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMygoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jZWxsIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS54IDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBkYXRhLXk9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMzKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNlbGwgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnkgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiPlxcclxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaW1hZ2UgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvdGQ+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3B1YmxpYy90ZW1wbGF0ZXMvY2VsbC5oYnNcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCAqIGFzIGJhc2UgZnJvbSAnLi9oYW5kbGViYXJzL2Jhc2UnO1xuXG4vLyBFYWNoIG9mIHRoZXNlIGF1Z21lbnQgdGhlIEhhbmRsZWJhcnMgb2JqZWN0LiBObyBuZWVkIHRvIHNldHVwIGhlcmUuXG4vLyAoVGhpcyBpcyBkb25lIHRvIGVhc2lseSBzaGFyZSBjb2RlIGJldHdlZW4gY29tbW9uanMgYW5kIGJyb3dzZSBlbnZzKVxuaW1wb3J0IFNhZmVTdHJpbmcgZnJvbSAnLi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9oYW5kbGViYXJzL2V4Y2VwdGlvbic7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL2hhbmRsZWJhcnMvdXRpbHMnO1xuaW1wb3J0ICogYXMgcnVudGltZSBmcm9tICcuL2hhbmRsZWJhcnMvcnVudGltZSc7XG5cbmltcG9ydCBub0NvbmZsaWN0IGZyb20gJy4vaGFuZGxlYmFycy9uby1jb25mbGljdCc7XG5cbi8vIEZvciBjb21wYXRpYmlsaXR5IGFuZCB1c2FnZSBvdXRzaWRlIG9mIG1vZHVsZSBzeXN0ZW1zLCBtYWtlIHRoZSBIYW5kbGViYXJzIG9iamVjdCBhIG5hbWVzcGFjZVxuZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgaGIgPSBuZXcgYmFzZS5IYW5kbGViYXJzRW52aXJvbm1lbnQoKTtcblxuICBVdGlscy5leHRlbmQoaGIsIGJhc2UpO1xuICBoYi5TYWZlU3RyaW5nID0gU2FmZVN0cmluZztcbiAgaGIuRXhjZXB0aW9uID0gRXhjZXB0aW9uO1xuICBoYi5VdGlscyA9IFV0aWxzO1xuICBoYi5lc2NhcGVFeHByZXNzaW9uID0gVXRpbHMuZXNjYXBlRXhwcmVzc2lvbjtcblxuICBoYi5WTSA9IHJ1bnRpbWU7XG4gIGhiLnRlbXBsYXRlID0gZnVuY3Rpb24oc3BlYykge1xuICAgIHJldHVybiBydW50aW1lLnRlbXBsYXRlKHNwZWMsIGhiKTtcbiAgfTtcblxuICByZXR1cm4gaGI7XG59XG5cbmxldCBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxubm9Db25mbGljdChpbnN0KTtcblxuaW5zdFsnZGVmYXVsdCddID0gaW5zdDtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi9saWIvaGFuZGxlYmFycy5ydW50aW1lLmpzIiwiaW1wb3J0IHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJFYWNoIGZyb20gJy4vaGVscGVycy9lYWNoJztcbmltcG9ydCByZWdpc3RlckhlbHBlck1pc3NpbmcgZnJvbSAnLi9oZWxwZXJzL2hlbHBlci1taXNzaW5nJztcbmltcG9ydCByZWdpc3RlcklmIGZyb20gJy4vaGVscGVycy9pZic7XG5pbXBvcnQgcmVnaXN0ZXJMb2cgZnJvbSAnLi9oZWxwZXJzL2xvZyc7XG5pbXBvcnQgcmVnaXN0ZXJMb29rdXAgZnJvbSAnLi9oZWxwZXJzL2xvb2t1cCc7XG5pbXBvcnQgcmVnaXN0ZXJXaXRoIGZyb20gJy4vaGVscGVycy93aXRoJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMoaW5zdGFuY2UpIHtcbiAgcmVnaXN0ZXJCbG9ja0hlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlckVhY2goaW5zdGFuY2UpO1xuICByZWdpc3RlckhlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlcklmKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb2coaW5zdGFuY2UpO1xuICByZWdpc3Rlckxvb2t1cChpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyV2l0aChpbnN0YW5jZSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy5qcyIsImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGNyZWF0ZUZyYW1lLCBpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgbGV0IGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcbiAgICAgICAgb3B0aW9ucyA9IHtkYXRhOiBkYXRhfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZy5qcyIsImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGJsb2NrUGFyYW1zLCBjcmVhdGVGcmFtZSwgaXNBcnJheSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm4sXG4gICAgICAgIGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICByZXQgPSAnJyxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dFBhdGg7XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICBjb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7IGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7IH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4ZWNJdGVyYXRpb24oZmllbGQsIGluZGV4LCBsYXN0KSB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBkYXRhLmtleSA9IGZpZWxkO1xuICAgICAgICBkYXRhLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIGRhdGEuZmlyc3QgPSBpbmRleCA9PT0gMDtcbiAgICAgICAgZGF0YS5sYXN0ID0gISFsYXN0O1xuXG4gICAgICAgIGlmIChjb250ZXh0UGF0aCkge1xuICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGZpZWxkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldCA9IHJldCArIGZuKGNvbnRleHRbZmllbGRdLCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dFtmaWVsZF0sIGZpZWxkXSwgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgICBmb3IgKGxldCBqID0gY29udGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJpb3JLZXk7XG5cbiAgICAgICAgZm9yIChsZXQga2V5IGluIGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoY29udGV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAvLyBXZSdyZSBydW5uaW5nIHRoZSBpdGVyYXRpb25zIG9uZSBzdGVwIG91dCBvZiBzeW5jIHNvIHdlIGNhbiBkZXRlY3RcbiAgICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAgIC8vIGFuIGl0ZXJtZWRpYXRlIGtleXMgYXJyYXkuXG4gICAgICAgICAgICBpZiAocHJpb3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmlvcktleSA9IGtleTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2VhY2guanMiLCJpbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdoZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24oLyogW2FyZ3MsIF1vcHRpb25zICovKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIEEgbWlzc2luZyBmaWVsZCBpbiBhIHt7Zm9vfX0gY29uc3RydWN0LlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdNaXNzaW5nIGhlbHBlcjogXCInICsgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXS5uYW1lICsgJ1wiJyk7XG4gICAgfVxuICB9KTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2hlbHBlci1taXNzaW5nLmpzIiwiaW1wb3J0IHtpc0VtcHR5LCBpc0Z1bmN0aW9ufSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdpZicsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY29uZGl0aW9uYWwpKSB7IGNvbmRpdGlvbmFsID0gY29uZGl0aW9uYWwuY2FsbCh0aGlzKTsgfVxuXG4gICAgLy8gRGVmYXVsdCBiZWhhdmlvciBpcyB0byByZW5kZXIgdGhlIHBvc2l0aXZlIHBhdGggaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBhbmQgbm90IGVtcHR5LlxuICAgIC8vIFRoZSBgaW5jbHVkZVplcm9gIG9wdGlvbiBtYXkgYmUgc2V0IHRvIHRyZWF0IHRoZSBjb25kdGlvbmFsIGFzIHB1cmVseSBub3QgZW1wdHkgYmFzZWQgb24gdGhlXG4gICAgLy8gYmVoYXZpb3Igb2YgaXNFbXB0eS4gRWZmZWN0aXZlbHkgdGhpcyBkZXRlcm1pbmVzIGlmIDAgaXMgaGFuZGxlZCBieSB0aGUgcG9zaXRpdmUgcGF0aCBvciBuZWdhdGl2ZS5cbiAgICBpZiAoKCFvcHRpb25zLmhhc2guaW5jbHVkZVplcm8gJiYgIWNvbmRpdGlvbmFsKSB8fCBpc0VtcHR5KGNvbmRpdGlvbmFsKSkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcigndW5sZXNzJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVyc1snaWYnXS5jYWxsKHRoaXMsIGNvbmRpdGlvbmFsLCB7Zm46IG9wdGlvbnMuaW52ZXJzZSwgaW52ZXJzZTogb3B0aW9ucy5mbiwgaGFzaDogb3B0aW9ucy5oYXNofSk7XG4gIH0pO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9nJywgZnVuY3Rpb24oLyogbWVzc2FnZSwgb3B0aW9ucyAqLykge1xuICAgIGxldCBhcmdzID0gW3VuZGVmaW5lZF0sXG4gICAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuXG4gICAgbGV0IGxldmVsID0gMTtcbiAgICBpZiAob3B0aW9ucy5oYXNoLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5oYXNoLmxldmVsO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YS5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuZGF0YS5sZXZlbDtcbiAgICB9XG4gICAgYXJnc1swXSA9IGxldmVsO1xuXG4gICAgaW5zdGFuY2UubG9nKC4uLiBhcmdzKTtcbiAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9sb2cuanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9va3VwJywgZnVuY3Rpb24ob2JqLCBmaWVsZCkge1xuICAgIHJldHVybiBvYmogJiYgb2JqW2ZpZWxkXTtcbiAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9sb29rdXAuanMiLCJpbXBvcnQge2FwcGVuZENvbnRleHRQYXRoLCBibG9ja1BhcmFtcywgY3JlYXRlRnJhbWUsIGlzRW1wdHksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3dpdGgnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHsgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTsgfVxuXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmICghaXNFbXB0eShjb250ZXh0KSkge1xuICAgICAgbGV0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfVxuICB9KTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL3dpdGguanMiLCJpbXBvcnQgcmVnaXN0ZXJJbmxpbmUgZnJvbSAnLi9kZWNvcmF0b3JzL2lubGluZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKGluc3RhbmNlKSB7XG4gIHJlZ2lzdGVySW5saW5lKGluc3RhbmNlKTtcbn1cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiLCJpbXBvcnQge2V4dGVuZH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckRlY29yYXRvcignaW5saW5lJywgZnVuY3Rpb24oZm4sIHByb3BzLCBjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgICBsZXQgcmV0ID0gZm47XG4gICAgaWYgKCFwcm9wcy5wYXJ0aWFscykge1xuICAgICAgcHJvcHMucGFydGlhbHMgPSB7fTtcbiAgICAgIHJldCA9IGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhcnRpYWxzIHN0YWNrIGZyYW1lIHByaW9yIHRvIGV4ZWMuXG4gICAgICAgIGxldCBvcmlnaW5hbCA9IGNvbnRhaW5lci5wYXJ0aWFscztcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gZXh0ZW5kKHt9LCBvcmlnaW5hbCwgcHJvcHMucGFydGlhbHMpO1xuICAgICAgICBsZXQgcmV0ID0gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IG9yaWdpbmFsO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBwcm9wcy5wYXJ0aWFsc1tvcHRpb25zLmFyZ3NbMF1dID0gb3B0aW9ucy5mbjtcblxuICAgIHJldHVybiByZXQ7XG4gIH0pO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMvaW5saW5lLmpzIiwiaW1wb3J0IHtpbmRleE9mfSBmcm9tICcuL3V0aWxzJztcblxubGV0IGxvZ2dlciA9IHtcbiAgbWV0aG9kTWFwOiBbJ2RlYnVnJywgJ2luZm8nLCAnd2FybicsICdlcnJvciddLFxuICBsZXZlbDogJ2luZm8nLFxuXG4gIC8vIE1hcHMgYSBnaXZlbiBsZXZlbCB2YWx1ZSB0byB0aGUgYG1ldGhvZE1hcGAgaW5kZXhlcyBhYm92ZS5cbiAgbG9va3VwTGV2ZWw6IGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBsZXZlbE1hcCA9IGluZGV4T2YobG9nZ2VyLm1ldGhvZE1hcCwgbGV2ZWwudG9Mb3dlckNhc2UoKSk7XG4gICAgICBpZiAobGV2ZWxNYXAgPj0gMCkge1xuICAgICAgICBsZXZlbCA9IGxldmVsTWFwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV2ZWwgPSBwYXJzZUludChsZXZlbCwgMTApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsZXZlbDtcbiAgfSxcblxuICAvLyBDYW4gYmUgb3ZlcnJpZGRlbiBpbiB0aGUgaG9zdCBlbnZpcm9ubWVudFxuICBsb2c6IGZ1bmN0aW9uKGxldmVsLCAuLi5tZXNzYWdlKSB7XG4gICAgbGV2ZWwgPSBsb2dnZXIubG9va3VwTGV2ZWwobGV2ZWwpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBsb2dnZXIubG9va3VwTGV2ZWwobG9nZ2VyLmxldmVsKSA8PSBsZXZlbCkge1xuICAgICAgbGV0IG1ldGhvZCA9IGxvZ2dlci5tZXRob2RNYXBbbGV2ZWxdO1xuICAgICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHsgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgbWV0aG9kID0gJ2xvZyc7XG4gICAgICB9XG4gICAgICBjb25zb2xlW21ldGhvZF0oLi4ubWVzc2FnZSk7ICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9nZ2VyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyIsIi8vIEJ1aWxkIG91dCBvdXIgYmFzaWMgU2FmZVN0cmluZyB0eXBlXG5mdW5jdGlvbiBTYWZlU3RyaW5nKHN0cmluZykge1xuICB0aGlzLnN0cmluZyA9IHN0cmluZztcbn1cblxuU2FmZVN0cmluZy5wcm90b3R5cGUudG9TdHJpbmcgPSBTYWZlU3RyaW5nLnByb3RvdHlwZS50b0hUTUwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICcnICsgdGhpcy5zdHJpbmc7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTYWZlU3RyaW5nO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIiwiaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vZXhjZXB0aW9uJztcbmltcG9ydCB7IENPTVBJTEVSX1JFVklTSU9OLCBSRVZJU0lPTl9DSEFOR0VTLCBjcmVhdGVGcmFtZSB9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1JldmlzaW9uKGNvbXBpbGVySW5mbykge1xuICBjb25zdCBjb21waWxlclJldmlzaW9uID0gY29tcGlsZXJJbmZvICYmIGNvbXBpbGVySW5mb1swXSB8fCAxLFxuICAgICAgICBjdXJyZW50UmV2aXNpb24gPSBDT01QSUxFUl9SRVZJU0lPTjtcblxuICBpZiAoY29tcGlsZXJSZXZpc2lvbiAhPT0gY3VycmVudFJldmlzaW9uKSB7XG4gICAgaWYgKGNvbXBpbGVyUmV2aXNpb24gPCBjdXJyZW50UmV2aXNpb24pIHtcbiAgICAgIGNvbnN0IHJ1bnRpbWVWZXJzaW9ucyA9IFJFVklTSU9OX0NIQU5HRVNbY3VycmVudFJldmlzaW9uXSxcbiAgICAgICAgICAgIGNvbXBpbGVyVmVyc2lvbnMgPSBSRVZJU0lPTl9DSEFOR0VTW2NvbXBpbGVyUmV2aXNpb25dO1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYW4gb2xkZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArXG4gICAgICAgICAgICAnUGxlYXNlIHVwZGF0ZSB5b3VyIHByZWNvbXBpbGVyIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArIHJ1bnRpbWVWZXJzaW9ucyArICcpIG9yIGRvd25ncmFkZSB5b3VyIHJ1bnRpbWUgdG8gYW4gb2xkZXIgdmVyc2lvbiAoJyArIGNvbXBpbGVyVmVyc2lvbnMgKyAnKS4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVXNlIHRoZSBlbWJlZGRlZCB2ZXJzaW9uIGluZm8gc2luY2UgdGhlIHJ1bnRpbWUgZG9lc24ndCBrbm93IGFib3V0IHRoaXMgcmV2aXNpb24geWV0XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUZW1wbGF0ZSB3YXMgcHJlY29tcGlsZWQgd2l0aCBhIG5ld2VyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgK1xuICAgICAgICAgICAgJ1BsZWFzZSB1cGRhdGUgeW91ciBydW50aW1lIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArIGNvbXBpbGVySW5mb1sxXSArICcpLicpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGUodGVtcGxhdGVTcGVjLCBlbnYpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKCFlbnYpIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdObyBlbnZpcm9ubWVudCBwYXNzZWQgdG8gdGVtcGxhdGUnKTtcbiAgfVxuICBpZiAoIXRlbXBsYXRlU3BlYyB8fCAhdGVtcGxhdGVTcGVjLm1haW4pIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmtub3duIHRlbXBsYXRlIG9iamVjdDogJyArIHR5cGVvZiB0ZW1wbGF0ZVNwZWMpO1xuICB9XG5cbiAgdGVtcGxhdGVTcGVjLm1haW4uZGVjb3JhdG9yID0gdGVtcGxhdGVTcGVjLm1haW5fZDtcblxuICAvLyBOb3RlOiBVc2luZyBlbnYuVk0gcmVmZXJlbmNlcyByYXRoZXIgdGhhbiBsb2NhbCB2YXIgcmVmZXJlbmNlcyB0aHJvdWdob3V0IHRoaXMgc2VjdGlvbiB0byBhbGxvd1xuICAvLyBmb3IgZXh0ZXJuYWwgdXNlcnMgdG8gb3ZlcnJpZGUgdGhlc2UgYXMgcHN1ZWRvLXN1cHBvcnRlZCBBUElzLlxuICBlbnYuVk0uY2hlY2tSZXZpc2lvbih0ZW1wbGF0ZVNwZWMuY29tcGlsZXIpO1xuXG4gIGZ1bmN0aW9uIGludm9rZVBhcnRpYWxXcmFwcGVyKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgICBjb250ZXh0ID0gVXRpbHMuZXh0ZW5kKHt9LCBjb250ZXh0LCBvcHRpb25zLmhhc2gpO1xuICAgICAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIG9wdGlvbnMuaWRzWzBdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJ0aWFsID0gZW52LlZNLnJlc29sdmVQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgb3B0aW9ucyk7XG4gICAgbGV0IHJlc3VsdCA9IGVudi5WTS5pbnZva2VQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgb3B0aW9ucyk7XG5cbiAgICBpZiAocmVzdWx0ID09IG51bGwgJiYgZW52LmNvbXBpbGUpIHtcbiAgICAgIG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXSA9IGVudi5jb21waWxlKHBhcnRpYWwsIHRlbXBsYXRlU3BlYy5jb21waWxlck9wdGlvbnMsIGVudik7XG4gICAgICByZXN1bHQgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV0oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgaWYgKG9wdGlvbnMuaW5kZW50KSB7XG4gICAgICAgIGxldCBsaW5lcyA9IHJlc3VsdC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCFsaW5lc1tpXSAmJiBpICsgMSA9PT0gbCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluZXNbaV0gPSBvcHRpb25zLmluZGVudCArIGxpbmVzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVGhlIHBhcnRpYWwgJyArIG9wdGlvbnMubmFtZSArICcgY291bGQgbm90IGJlIGNvbXBpbGVkIHdoZW4gcnVubmluZyBpbiBydW50aW1lLW9ubHkgbW9kZScpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEp1c3QgYWRkIHdhdGVyXG4gIGxldCBjb250YWluZXIgPSB7XG4gICAgc3RyaWN0OiBmdW5jdGlvbihvYmosIG5hbWUpIHtcbiAgICAgIGlmICghKG5hbWUgaW4gb2JqKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdcIicgKyBuYW1lICsgJ1wiIG5vdCBkZWZpbmVkIGluICcgKyBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialtuYW1lXTtcbiAgICB9LFxuICAgIGxvb2t1cDogZnVuY3Rpb24oZGVwdGhzLCBuYW1lKSB7XG4gICAgICBjb25zdCBsZW4gPSBkZXB0aHMubGVuZ3RoO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoZGVwdGhzW2ldICYmIGRlcHRoc1tpXVtuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGRlcHRoc1tpXVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbGFtYmRhOiBmdW5jdGlvbihjdXJyZW50LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGN1cnJlbnQgPT09ICdmdW5jdGlvbicgPyBjdXJyZW50LmNhbGwoY29udGV4dCkgOiBjdXJyZW50O1xuICAgIH0sXG5cbiAgICBlc2NhcGVFeHByZXNzaW9uOiBVdGlscy5lc2NhcGVFeHByZXNzaW9uLFxuICAgIGludm9rZVBhcnRpYWw6IGludm9rZVBhcnRpYWxXcmFwcGVyLFxuXG4gICAgZm46IGZ1bmN0aW9uKGkpIHtcbiAgICAgIGxldCByZXQgPSB0ZW1wbGF0ZVNwZWNbaV07XG4gICAgICByZXQuZGVjb3JhdG9yID0gdGVtcGxhdGVTcGVjW2kgKyAnX2QnXTtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcblxuICAgIHByb2dyYW1zOiBbXSxcbiAgICBwcm9ncmFtOiBmdW5jdGlvbihpLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgICBsZXQgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldLFxuICAgICAgICAgIGZuID0gdGhpcy5mbihpKTtcbiAgICAgIGlmIChkYXRhIHx8IGRlcHRocyB8fCBibG9ja1BhcmFtcyB8fCBkZWNsYXJlZEJsb2NrUGFyYW1zKSB7XG4gICAgICAgIHByb2dyYW1XcmFwcGVyID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4sIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgICAgfSBlbHNlIGlmICghcHJvZ3JhbVdyYXBwZXIpIHtcbiAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2dyYW1XcmFwcGVyO1xuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbih2YWx1ZSwgZGVwdGgpIHtcbiAgICAgIHdoaWxlICh2YWx1ZSAmJiBkZXB0aC0tKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuX3BhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIG1lcmdlOiBmdW5jdGlvbihwYXJhbSwgY29tbW9uKSB7XG4gICAgICBsZXQgb2JqID0gcGFyYW0gfHwgY29tbW9uO1xuXG4gICAgICBpZiAocGFyYW0gJiYgY29tbW9uICYmIChwYXJhbSAhPT0gY29tbW9uKSkge1xuICAgICAgICBvYmogPSBVdGlscy5leHRlbmQoe30sIGNvbW1vbiwgcGFyYW0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgLy8gQW4gZW1wdHkgb2JqZWN0IHRvIHVzZSBhcyByZXBsYWNlbWVudCBmb3IgbnVsbC1jb250ZXh0c1xuICAgIG51bGxDb250ZXh0OiBPYmplY3Quc2VhbCh7fSksXG5cbiAgICBub29wOiBlbnYuVk0ubm9vcCxcbiAgICBjb21waWxlckluZm86IHRlbXBsYXRlU3BlYy5jb21waWxlclxuICB9O1xuXG4gIGZ1bmN0aW9uIHJldChjb250ZXh0LCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgZGF0YSA9IG9wdGlvbnMuZGF0YTtcblxuICAgIHJldC5fc2V0dXAob3B0aW9ucyk7XG4gICAgaWYgKCFvcHRpb25zLnBhcnRpYWwgJiYgdGVtcGxhdGVTcGVjLnVzZURhdGEpIHtcbiAgICAgIGRhdGEgPSBpbml0RGF0YShjb250ZXh0LCBkYXRhKTtcbiAgICB9XG4gICAgbGV0IGRlcHRocyxcbiAgICAgICAgYmxvY2tQYXJhbXMgPSB0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgPyBbXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocykge1xuICAgICAgaWYgKG9wdGlvbnMuZGVwdGhzKSB7XG4gICAgICAgIGRlcHRocyA9IGNvbnRleHQgIT0gb3B0aW9ucy5kZXB0aHNbMF0gPyBbY29udGV4dF0uY29uY2F0KG9wdGlvbnMuZGVwdGhzKSA6IG9wdGlvbnMuZGVwdGhzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVwdGhzID0gW2NvbnRleHRdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1haW4oY29udGV4dC8qLCBvcHRpb25zKi8pIHtcbiAgICAgIHJldHVybiAnJyArIHRlbXBsYXRlU3BlYy5tYWluKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgfVxuICAgIG1haW4gPSBleGVjdXRlRGVjb3JhdG9ycyh0ZW1wbGF0ZVNwZWMubWFpbiwgbWFpbiwgY29udGFpbmVyLCBvcHRpb25zLmRlcHRocyB8fCBbXSwgZGF0YSwgYmxvY2tQYXJhbXMpO1xuICAgIHJldHVybiBtYWluKGNvbnRleHQsIG9wdGlvbnMpO1xuICB9XG4gIHJldC5pc1RvcCA9IHRydWU7XG5cbiAgcmV0Ll9zZXR1cCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCkge1xuICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5oZWxwZXJzLCBlbnYuaGVscGVycyk7XG5cbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCkge1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5wYXJ0aWFscywgZW52LnBhcnRpYWxzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCB8fCB0ZW1wbGF0ZVNwZWMudXNlRGVjb3JhdG9ycykge1xuICAgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmRlY29yYXRvcnMsIGVudi5kZWNvcmF0b3JzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBvcHRpb25zLmhlbHBlcnM7XG4gICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcHRpb25zLnBhcnRpYWxzO1xuICAgICAgY29udGFpbmVyLmRlY29yYXRvcnMgPSBvcHRpb25zLmRlY29yYXRvcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldC5fY2hpbGQgPSBmdW5jdGlvbihpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyAmJiAhYmxvY2tQYXJhbXMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ211c3QgcGFzcyBibG9jayBwYXJhbXMnKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VEZXB0aHMgJiYgIWRlcHRocykge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignbXVzdCBwYXNzIHBhcmVudCBkZXB0aHMnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCB0ZW1wbGF0ZVNwZWNbaV0sIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICB9O1xuICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICBmdW5jdGlvbiBwcm9nKGNvbnRleHQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBjdXJyZW50RGVwdGhzID0gZGVwdGhzO1xuICAgIGlmIChkZXB0aHMgJiYgY29udGV4dCAhPSBkZXB0aHNbMF0gJiYgIShjb250ZXh0ID09PSBjb250YWluZXIubnVsbENvbnRleHQgJiYgZGVwdGhzWzBdID09PSBudWxsKSkge1xuICAgICAgY3VycmVudERlcHRocyA9IFtjb250ZXh0XS5jb25jYXQoZGVwdGhzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm4oY29udGFpbmVyLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjb250YWluZXIuaGVscGVycywgY29udGFpbmVyLnBhcnRpYWxzLFxuICAgICAgICBvcHRpb25zLmRhdGEgfHwgZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXMgJiYgW29wdGlvbnMuYmxvY2tQYXJhbXNdLmNvbmNhdChibG9ja1BhcmFtcyksXG4gICAgICAgIGN1cnJlbnREZXB0aHMpO1xuICB9XG5cbiAgcHJvZyA9IGV4ZWN1dGVEZWNvcmF0b3JzKGZuLCBwcm9nLCBjb250YWluZXIsIGRlcHRocywgZGF0YSwgYmxvY2tQYXJhbXMpO1xuXG4gIHByb2cucHJvZ3JhbSA9IGk7XG4gIHByb2cuZGVwdGggPSBkZXB0aHMgPyBkZXB0aHMubGVuZ3RoIDogMDtcbiAgcHJvZy5ibG9ja1BhcmFtcyA9IGRlY2xhcmVkQmxvY2tQYXJhbXMgfHwgMDtcbiAgcmV0dXJuIHByb2c7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlUGFydGlhbChwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIGlmICghcGFydGlhbCkge1xuICAgIGlmIChvcHRpb25zLm5hbWUgPT09ICdAcGFydGlhbC1ibG9jaycpIHtcbiAgICAgIHBhcnRpYWwgPSBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFydGlhbCA9IG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIXBhcnRpYWwuY2FsbCAmJiAhb3B0aW9ucy5uYW1lKSB7XG4gICAgLy8gVGhpcyBpcyBhIGR5bmFtaWMgcGFydGlhbCB0aGF0IHJldHVybmVkIGEgc3RyaW5nXG4gICAgb3B0aW9ucy5uYW1lID0gcGFydGlhbDtcbiAgICBwYXJ0aWFsID0gb3B0aW9ucy5wYXJ0aWFsc1twYXJ0aWFsXTtcbiAgfVxuICByZXR1cm4gcGFydGlhbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludm9rZVBhcnRpYWwocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICAvLyBVc2UgdGhlIGN1cnJlbnQgY2xvc3VyZSBjb250ZXh0IHRvIHNhdmUgdGhlIHBhcnRpYWwtYmxvY2sgaWYgdGhpcyBwYXJ0aWFsXG4gIGNvbnN0IGN1cnJlbnRQYXJ0aWFsQmxvY2sgPSBvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ107XG4gIG9wdGlvbnMucGFydGlhbCA9IHRydWU7XG4gIGlmIChvcHRpb25zLmlkcykge1xuICAgIG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCA9IG9wdGlvbnMuaWRzWzBdIHx8IG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aDtcbiAgfVxuXG4gIGxldCBwYXJ0aWFsQmxvY2s7XG4gIGlmIChvcHRpb25zLmZuICYmIG9wdGlvbnMuZm4gIT09IG5vb3ApIHtcbiAgICBvcHRpb25zLmRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgIC8vIFdyYXBwZXIgZnVuY3Rpb24gdG8gZ2V0IGFjY2VzcyB0byBjdXJyZW50UGFydGlhbEJsb2NrIGZyb20gdGhlIGNsb3N1cmVcbiAgICBsZXQgZm4gPSBvcHRpb25zLmZuO1xuICAgIHBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddID0gZnVuY3Rpb24gcGFydGlhbEJsb2NrV3JhcHBlcihjb250ZXh0LCBvcHRpb25zID0ge30pIHtcblxuICAgICAgLy8gUmVzdG9yZSB0aGUgcGFydGlhbC1ibG9jayBmcm9tIHRoZSBjbG9zdXJlIGZvciB0aGUgZXhlY3V0aW9uIG9mIHRoZSBibG9ja1xuICAgICAgLy8gaS5lLiB0aGUgcGFydCBpbnNpZGUgdGhlIGJsb2NrIG9mIHRoZSBwYXJ0aWFsIGNhbGwuXG4gICAgICBvcHRpb25zLmRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBjdXJyZW50UGFydGlhbEJsb2NrO1xuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgaWYgKGZuLnBhcnRpYWxzKSB7XG4gICAgICBvcHRpb25zLnBhcnRpYWxzID0gVXRpbHMuZXh0ZW5kKHt9LCBvcHRpb25zLnBhcnRpYWxzLCBmbi5wYXJ0aWFscyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCAmJiBwYXJ0aWFsQmxvY2spIHtcbiAgICBwYXJ0aWFsID0gcGFydGlhbEJsb2NrO1xuICB9XG5cbiAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBmb3VuZCcpO1xuICB9IGVsc2UgaWYgKHBhcnRpYWwgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIHJldHVybiBwYXJ0aWFsKGNvbnRleHQsIG9wdGlvbnMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyByZXR1cm4gJyc7IH1cblxuZnVuY3Rpb24gaW5pdERhdGEoY29udGV4dCwgZGF0YSkge1xuICBpZiAoIWRhdGEgfHwgISgncm9vdCcgaW4gZGF0YSkpIHtcbiAgICBkYXRhID0gZGF0YSA/IGNyZWF0ZUZyYW1lKGRhdGEpIDoge307XG4gICAgZGF0YS5yb290ID0gY29udGV4dDtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcykge1xuICBpZiAoZm4uZGVjb3JhdG9yKSB7XG4gICAgbGV0IHByb3BzID0ge307XG4gICAgcHJvZyA9IGZuLmRlY29yYXRvcihwcm9nLCBwcm9wcywgY29udGFpbmVyLCBkZXB0aHMgJiYgZGVwdGhzWzBdLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgICBVdGlscy5leHRlbmQocHJvZywgcHJvcHMpO1xuICB9XG4gIHJldHVybiBwcm9nO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3J1bnRpbWUuanMiLCIvKiBnbG9iYWwgd2luZG93ICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGxldCByb290ID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3csXG4gICAgICAkSGFuZGxlYmFycyA9IHJvb3QuSGFuZGxlYmFycztcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgSGFuZGxlYmFycy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHJvb3QuSGFuZGxlYmFycyA9PT0gSGFuZGxlYmFycykge1xuICAgICAgcm9vdC5IYW5kbGViYXJzID0gJEhhbmRsZWJhcnM7XG4gICAgfVxuICAgIHJldHVybiBIYW5kbGViYXJzO1xuICB9O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIiwiY29uc3QgU1RSQUlHSFRfRElSRUNUSU9OUyA9IFtcclxuICAgIHt4OiAxLCB5OiAwfSxcclxuICAgIHt4OiAtMSwgeTogMH0sXHJcbiAgICB7eDogMCwgeTogMX0sXHJcbiAgICB7eDogMCwgeTogLTF9XHJcbl07XHJcbmNvbnN0IERJQUdPTkFMX0RJUkVDVElPTlMgPSBbXHJcbiAgICB7eDogMSwgeTogMX0sXHJcbiAgICB7eDogLTEsIHk6IC0xfSxcclxuICAgIHt4OiAtMSwgeTogMX0sXHJcbiAgICB7eDogMSwgeTogLTF9XHJcbl07XHJcbmNvbnN0IEFMTF9ESVJFQ1RJT05TID0gW1xyXG4gICAge3g6IDEsIHk6IDB9LFxyXG4gICAge3g6IC0xLCB5OiAwfSxcclxuICAgIHt4OiAwLCB5OiAxfSxcclxuICAgIHt4OiAwLCB5OiAtMX0sXHJcbiAgICB7eDogMSwgeTogMX0sXHJcbiAgICB7eDogLTEsIHk6IC0xfSxcclxuICAgIHt4OiAtMSwgeTogMX0sXHJcbiAgICB7eDogMSwgeTogLTF9XHJcbl07XHJcbmNvbnN0IE1PVklOR19CRUhBVklPUlMgPSB7XHJcbiAgICAvLyBkZWZhdWx0OiBzdG9wcyBhdCBmaXJzdCBwaWVjZSB3aXRoIG9wdGlvbiB0byBraWxsIGFuIGVuZW15IHBpZWNlXHJcbiAgICBISVRUSU5HOiAwLFxyXG4gICAgLy8gc3RvcHBpbmcgaXMgbGlrZSBoaXR0aW5nIGJ1dCB3aXRob3V0IHRoZSBvcHRpb24gdG8ga2lsbCAocGF3bilcclxuICAgIFNUT1BQSU5HOiAxXHJcbn07XHJcblxyXG5jbGFzcyBQaWVjZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihvd25lciwgbmFtZSkge1xyXG4gICAgICAgIHRoaXMub3duZXIgPSBvd25lcjtcclxuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmhhc01vdmVkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG5hbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UG9zc2libGVNb3ZlcyhnYW1lLCB4LCB5KSB7XHJcbiAgICAgICAgdGhyb3cgXCJOb3RJbXBsZW1lbnRlZFwiXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNsYXNzKCkge1xyXG4gICAgICAgIHRocm93IFwiTm90SW1wbGVtZW50ZWRcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIGRpcmVjdGlvbiwgbWF4RGlzdGFuY2UgPSBmYWxzZSwgYmVoYXZpb3VyID0gTU9WSU5HX0JFSEFWSU9SUy5ISVRUSU5HKSB7XHJcbiAgICAgICAgbGV0IHBvcyA9IHt4OiB4LCB5OiB5fTtcclxuICAgICAgICBsZXQgbW92ZXMgPSBbXTtcclxuICAgICAgICBsZXQgZGlzdGFuY2UgPSAwO1xyXG5cclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICBkaXN0YW5jZSsrO1xyXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPiBtYXhEaXN0YW5jZSkgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBwb3MueCArPSBkaXJlY3Rpb24ueDtcclxuICAgICAgICAgICAgcG9zLnkgKz0gZGlyZWN0aW9uLnk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IGdhbWUuZ2V0Q2VsbChwb3MueCwgcG9zLnkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjZWxsLnRpbGUucGFzc2FibGUpIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjZWxsLnBpZWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlaGF2aW91ciAhPT0gTU9WSU5HX0JFSEFWSU9SUy5TVE9QUElORyAmJiBjZWxsLnBpZWNlLm93bmVyICE9PSB0aGlzLm93bmVyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3Zlcy5wdXNoKHt4OiBwb3MueCwgeTogcG9zLnl9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBtb3Zlcy5wdXNoKHt4OiBwb3MueCwgeTogcG9zLnl9KTtcclxuICAgICAgICAgICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICAgICAgICAgIC8vIGJyZWFrIGlmIE91dHNpZGVPZkJvYXJkLiBlbHNlIGl0cyBhbiB1bmV4cGVjdGVkIGVycm9yXHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyICE9PSBcIk91dHNpZGVPZkJvYXJkXCIpIHRocm93IGVycjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtb3ZlcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRPd25lckRpcmVjdGlvbigpIHtcclxuICAgICAgICBzd2l0Y2godGhpcy5vd25lci5udW1iZXIpIHtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt4OiAwLCB5OiAtMX07XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB7eDogMCwgeTogMX07XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyAnVW5rbm93bk93bmVyRGlyZWN0aW9uJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEJsYWNrV2hpdGVDaGVzc1BpZWNlIGV4dGVuZHMgUGllY2Uge1xyXG4gICAgY29uc3RydWN0b3Iob3duZXIsIG5hbWUsIGZpbGVuYW1lKSB7XHJcbiAgICAgICAgc3VwZXIob3duZXIsIG5hbWUpO1xyXG4gICAgICAgIHRoaXMuZmlsZW5hbWUgPSBmaWxlbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2xhc3MoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3duZXIubnVtYmVyID09PSAxKSByZXR1cm4gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIGlmICh0aGlzLm93bmVyLm51bWJlciA9PT0gMikgcmV0dXJuIFwiYmxhY2tcIjtcclxuICAgICAgICB0aHJvdyBcIkludmFsaWRPd25lck51bWJlclwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUGF3biBleHRlbmRzIEJsYWNrV2hpdGVDaGVzc1BpZWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKG93bmVyKSB7XHJcbiAgICAgICAgc3VwZXIob3duZXIsIFwiUGF3blwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2xhc3MoKSB7XHJcbiAgICAgICAgcmV0dXJuICdwaWVjZS1wYXduLScgKyBzdXBlci5jbGFzcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRQb3NzaWJsZU1vdmVzKGdhbWUsIHgsIHkpIHtcclxuICAgICAgICBsZXQgbW92ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgLy8gYSBwYXduIGNhbiBtb3ZlIHR3byBzcGFjZXMgaWYgaXQgaGFzbid0IG1vdmVkIHlldFxyXG4gICAgICAgIGxldCBkaXN0YW5jZSA9ICh0aGlzLmhhc01vdmVkID8gMSA6IDIpO1xyXG5cclxuICAgICAgICAvLyBtb3ZlIGluIGZyb250XHJcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobW92ZXMsIHRoaXMuZ2V0TW92ZXNJbkRpcmVjdGlvbihnYW1lLCB4LCB5LCB0aGlzLmdldE93bmVyRGlyZWN0aW9uKCksIGRpc3RhbmNlLCBNT1ZJTkdfQkVIQVZJT1JTLlNUT1BQSU5HKSk7XHJcblxyXG4gICAgICAgIC8vIGRpYWdvbmFsIG1vdmVzIC0gb25seSBhdmFpbGFibGUgaWYgdGhlIG1vdmUgY2FuIGtpbGwgYW4gb3Bwb3NpbmcgcGllY2VcclxuICAgICAgICBsZXQgaGl0dGluZ01vdmVzID0gW1xyXG4gICAgICAgICAgICB7eDogMSwgeTogdGhpcy5nZXRPd25lckRpcmVjdGlvbigpLnl9LFxyXG4gICAgICAgICAgICB7eDogLTEsIHk6IHRoaXMuZ2V0T3duZXJEaXJlY3Rpb24oKS55fSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgaGl0dGluZ01vdmVzLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgICAgICAgIGxldCBwb3NzaWJsZUhpdHRpbmdNb3ZlID0gdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIGhpdHRpbmdNb3Zlc1tkXSwgMSk7XHJcbiAgICAgICAgICAgIGlmIChwb3NzaWJsZUhpdHRpbmdNb3ZlLmxlbmd0aCA9PT0gMCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGxldCBwb3NzaWJsZU1vdmUgPSBwb3NzaWJsZUhpdHRpbmdNb3ZlWzBdO1xyXG4gICAgICAgICAgICAvLyBjaGVjayBmb3Igb3Bwb3NpbmcgcGllY2VcclxuICAgICAgICAgICAgaWYgKGdhbWUuZ2V0Q2VsbChwb3NzaWJsZU1vdmUpLnBpZWNlKSBtb3Zlcy5wdXNoKHBvc3NpYmxlTW92ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUT0RPOiBlbiBwYXNzZW50IC0gb2RlciBvIGVpZmFjaCBuaWQuLlxyXG5cclxuICAgICAgICByZXR1cm4gbW92ZXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSb29rIGV4dGVuZHMgQmxhY2tXaGl0ZUNoZXNzUGllY2Uge1xyXG4gICAgY29uc3RydWN0b3Iob3duZXIpIHtcclxuICAgICAgICBzdXBlcihvd25lciwgXCJSb29rXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbGFzcygpIHtcclxuICAgICAgICByZXR1cm4gJ3BpZWNlLXJvb2stJyArIHN1cGVyLmNsYXNzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBvc3NpYmxlTW92ZXMoZ2FtZSwgeCwgeSkge1xyXG4gICAgICAgIGxldCBtb3ZlcyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBkID0gMDsgZCA8IFNUUkFJR0hUX0RJUkVDVElPTlMubGVuZ3RoOyBkKyspIHtcclxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobW92ZXMsIHRoaXMuZ2V0TW92ZXNJbkRpcmVjdGlvbihnYW1lLCB4LCB5LCBTVFJBSUdIVF9ESVJFQ1RJT05TW2RdKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbW92ZXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBLbmlnaHQgZXh0ZW5kcyBCbGFja1doaXRlQ2hlc3NQaWVjZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihvd25lcikge1xyXG4gICAgICAgIHN1cGVyKG93bmVyLCBcIktuaWdodFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2xhc3MoKSB7XHJcbiAgICAgICAgcmV0dXJuICdwaWVjZS1rbmlnaHQtJyArIHN1cGVyLmNsYXNzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBvc3NpYmxlTW92ZXMoZ2FtZSwgeCwgeSkge1xyXG4gICAgICAgIGxldCByZWxhdGl2ZU1vdmVzID0gW1xyXG4gICAgICAgICAgICB7eDogMiwgeTogMX0sXHJcbiAgICAgICAgICAgIHt4OiAyLCB5OiAtMX0sXHJcbiAgICAgICAgICAgIHt4OiAtMiwgeTogMX0sXHJcbiAgICAgICAgICAgIHt4OiAtMiwgeTogLTF9LFxyXG4gICAgICAgICAgICB7eDogMSwgeTogMn0sXHJcbiAgICAgICAgICAgIHt4OiAtMSwgeTogMn0sXHJcbiAgICAgICAgICAgIHt4OiAxLCB5OiAtMn0sXHJcbiAgICAgICAgICAgIHt4OiAtMSwgeTogLTJ9LFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgbGV0IG1vdmVzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgcmVsYXRpdmVNb3Zlcy5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShtb3ZlcywgdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIHJlbGF0aXZlTW92ZXNbZF0sIDEpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtb3ZlcztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJpc2hvcCBleHRlbmRzIEJsYWNrV2hpdGVDaGVzc1BpZWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKG93bmVyKSB7XHJcbiAgICAgICAgc3VwZXIob3duZXIsIFwiQmlzaG9wXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbGFzcygpIHtcclxuICAgICAgICByZXR1cm4gJ3BpZWNlLWJpc2hvcC0nICsgc3VwZXIuY2xhc3M7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UG9zc2libGVNb3ZlcyhnYW1lLCB4LCB5KSB7XHJcbiAgICAgICAgbGV0IG1vdmVzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgRElBR09OQUxfRElSRUNUSU9OUy5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShtb3ZlcywgdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIERJQUdPTkFMX0RJUkVDVElPTlNbZF0pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtb3ZlcztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFF1ZWVuIGV4dGVuZHMgQmxhY2tXaGl0ZUNoZXNzUGllY2Uge1xyXG4gICAgY29uc3RydWN0b3Iob3duZXIpIHtcclxuICAgICAgICBzdXBlcihvd25lciwgXCJRdWVlblwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2xhc3MoKSB7XHJcbiAgICAgICAgcmV0dXJuICdwaWVjZS1xdWVlbi0nICsgc3VwZXIuY2xhc3M7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UG9zc2libGVNb3ZlcyhnYW1lLCB4LCB5KSB7XHJcbiAgICAgICAgbGV0IG1vdmVzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgQUxMX0RJUkVDVElPTlMubGVuZ3RoOyBkKyspIHtcclxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobW92ZXMsIHRoaXMuZ2V0TW92ZXNJbkRpcmVjdGlvbihnYW1lLCB4LCB5LCBBTExfRElSRUNUSU9OU1tkXSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1vdmVzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgS2luZyBleHRlbmRzIEJsYWNrV2hpdGVDaGVzc1BpZWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKG93bmVyKSB7XHJcbiAgICAgICAgc3VwZXIob3duZXIsIFwiS2luZ1wiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2xhc3MoKSB7XHJcbiAgICAgICAgcmV0dXJuICdwaWVjZS1raW5nLScgKyBzdXBlci5jbGFzcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRQb3NzaWJsZU1vdmVzKGdhbWUsIHgsIHkpIHtcclxuICAgICAgICBsZXQgbW92ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgZCA9IDA7IGQgPCBBTExfRElSRUNUSU9OUy5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShtb3ZlcywgdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIEFMTF9ESVJFQ1RJT05TW2RdLCAxKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbW92ZXM7XHJcbiAgICB9XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wdWJsaWMvanMvcGllY2UuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUaWxlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMucGFzc2FibGUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbGFzc2VzKCkge1xyXG4gICAgICAgIHRocm93IFwiTm90SW1wbGVtZW50ZWRcIjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJsYWNrVGlsZSBleHRlbmRzIFRpbGUge1xyXG4gICAgZ2V0IGNsYXNzZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcInRpbGUtYmxhY2tcIl07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBXaGl0ZVRpbGUgZXh0ZW5kcyBUaWxlIHtcclxuICAgIGdldCBjbGFzc2VzKCkge1xyXG4gICAgICAgIHJldHVybiBbXCJ0aWxlLXdoaXRlXCJdO1xyXG4gICAgfVxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcHVibGljL2pzL3RpbGUuanMiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxTaHlsdXhcXFxcZ2l0XFxcXGRzXFxcXG5vZGVfbW9kdWxlc1xcXFxoYW5kbGViYXJzXFxcXHJ1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiICAgIDx0cj5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLGRlcHRoMCx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDIsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICA8L3RyPlxcclxcblwiO1xufSxcIjJcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgXCJcbiAgICArICgoc3RhY2sxID0gX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxTaHlsdXhcXFxcZ2l0XFxcXGRzXFxcXHB1YmxpY1xcXFxqc1xcXFxoZWxwZXJzXFxcXHJlbmRlcmNlbGwuanNcIikpLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSxkZXB0aDAse1wibmFtZVwiOlwicmVuZGVyY2VsbFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgzLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCJcXHJcXG5cIjtcbn0sXCIzXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCJcIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIjx0YWJsZSBpZD1cXFwiYm9hcmRcXFwiPlxcclxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZ2FtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuYm9hcmQgOiBzdGFjazEpLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90YWJsZT5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcHVibGljL3RlbXBsYXRlcy9ib2FyZC5oYnNcbi8vIG1vZHVsZSBpZCA9IDc1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY2VsbCkge1xyXG4gICAgcmV0dXJuIGNlbGwucmVuZGVyKCk7XHJcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcHVibGljL2pzL2hlbHBlcnMvcmVuZGVyY2VsbC5qcyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9wdWJsaWMvY3NzL21haW4uc2Nzc1xuLy8gbW9kdWxlIGlkID0gNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==