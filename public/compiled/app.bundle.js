/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 26);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(32);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();

/**
 * Colors.
 */

exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (window && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
  // is firebug? http://stackoverflow.com/a/398120/376773
  window && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
  // is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
  // double check webkit in userAgent just in case we are in a worker
  navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit');

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === (typeof console === 'undefined' ? 'undefined' : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch (e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch (e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.__esModule = true;
exports.extend = extend;
exports.indexOf = indexOf;
exports.escapeExpression = escapeExpression;
exports.isEmpty = isEmpty;
exports.createFrame = createFrame;
exports.blockParams = blockParams;
exports.appendContextPath = appendContextPath;
var escape = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

var badChars = /[&<>"'`=]/g,
    possible = /[&<>"'`=]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

var toString = Object.prototype.toString;

exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
/* eslint-disable func-style */
var isFunction = function isFunction(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  exports.isFunction = isFunction = function isFunction(value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
exports.isFunction = isFunction;

/* eslint-enable func-style */

/* istanbul ignore next */
var isArray = Array.isArray || function (value) {
  return value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? toString.call(value) === '[object Array]' : false;
};

exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.

function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

function escapeExpression(string) {
  if (typeof string !== 'string') {
    // don't escape SafeStrings, since they're already safe
    if (string && string.toHTML) {
      return string.toHTML();
    } else if (string == null) {
      return '';
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = '' + string;
  }

  if (!possible.test(string)) {
    return string;
  }
  return string.replace(badChars, escapeChar);
}

function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

function createFrame(object) {
  var frame = extend({}, object);
  frame._parent = object;
  return frame;
}

function blockParams(params, ids) {
  params.path = ids;
  return params;
}

function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function (event, fn) {
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function (event) {
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1),
      callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function (event) {
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function (event) {
  return !!this.listeners(event).length;
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module dependencies.
 */

var keys = __webpack_require__(42);
var hasBinary = __webpack_require__(13);
var sliceBuffer = __webpack_require__(43);
var after = __webpack_require__(44);
var utf8 = __webpack_require__(45);

var base64encoder;
if (global && global.ArrayBuffer) {
  base64encoder = __webpack_require__(46);
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
  open: 0 // non-ws
  , close: 1 // non-ws
  , ping: 2,
  pong: 3,
  message: 4,
  upgrade: 5,
  noop: 6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = __webpack_require__(47);

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if (typeof utf8encode === 'function') {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;

  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (Blob && data instanceof global.Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
  }

  return callback('' + encoded);
};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i + 1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function () {
    packet.data = fr.result;
    exports.encodePacket(packet, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function (packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (Blob && packet.data instanceof global.Blob) {
    var fr = new FileReader();
    fr.onload = function () {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += global.btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data === 'string') {
    if (data.charAt(0) === 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data, { strict: false });
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function (msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function (message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function (err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function eachWithIndex(i, el, cb) {
    each(el, function (error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data !== 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data === '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = '',
      n,
      msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (chr !== ':') {
      length += chr;
      continue;
    }

    if (length === '' || length != (n = Number(length))) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    msg = data.substr(i + 1, n);

    if (length != msg.length) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    if (msg.length) {
      packet = exports.decodePacket(msg, binaryType, false);

      if (err.type === packet.type && err.data === packet.data) {
        // parser error in individual packet - ignoring payload
        return callback(err, 0, 1);
      }

      var ret = callback(packet, i + n, l);
      if (false === ret) return;
    }

    // advance cursor
    i += n;
    length = '';
  }

  if (length !== '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }
};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function (packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function (data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function (err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function (acc, p) {
      var len;
      if (typeof p === 'string') {
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function (p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) {
        // not true binary
        resultArray[bufferIndex++] = 0;
      } else {
        // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function (packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function (encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function (err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1;; i++) {
      if (tailArray[i] === 255) break;

      // 310 = char length of Number.MAX_VALUE
      if (msgLength.length > 310) {
        return callback(err, 0, 1);
      }

      msgLength += tailArray[i];
    }

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function (buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line = undefined,
      column = undefined;
  if (loc) {
    line = loc.start.line;
    column = loc.start.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  /* istanbul ignore else */
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, Exception);
  }

  try {
    if (loc) {
      this.lineNumber = line;

      // Work around issue under safari where we can't directly set the column value
      /* istanbul ignore next */
      if (Object.defineProperty) {
        Object.defineProperty(this, 'column', {
          value: column,
          enumerable: true
        });
      } else {
        this.column = column;
      }
    }
  } catch (nop) {
    /* Ignore if the browser is very particular */
  }
}

Exception.prototype = new Error();

exports['default'] = Exception;
module.exports = exports['default'];

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function (qs) {
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (a, b) {
  var fn = function fn() {};
  fn.prototype = b.prototype;
  a.prototype = new fn();
  a.prototype.constructor = a;
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */

var debug = __webpack_require__(1)('socket.io-parser');
var Emitter = __webpack_require__(3);
var hasBin = __webpack_require__(13);
var binary = __webpack_require__(35);
var isBuf = __webpack_require__(14);

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'ACK', 'ERROR', 'BINARY_EVENT', 'BINARY_ACK'];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function (obj, callback) {
  if ((obj.type === exports.EVENT || obj.type === exports.ACK) && hasBin(obj.data)) {
    obj.type = obj.type === exports.EVENT ? exports.BINARY_EVENT : exports.BINARY_ACK;
  }

  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  } else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {

  // first is type
  var str = '' + obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  }

  // immediately followed by the id
  if (null != obj.id) {
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    str += JSON.stringify(obj.data);
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an ecoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function (obj) {
  var packet;
  if (typeof obj === 'string') {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) {
      // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else {
      // non-binary full packet
      this.emit('decoded', packet);
    }
  } else if (isBuf(obj) || obj.base64) {
    // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) {
        // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  } else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var i = 0;
  // look up type
  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) return error();

  // look up attachments if type binary
  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var buf = '';
    while (str.charAt(++i) !== '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' === str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      p.nsp += c;
      if (i === str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i === str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    p = tryParse(p, str.substr(i));
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(p, str) {
  try {
    p.data = JSON.parse(str);
  } catch (e) {
    return error();
  }
  return p;
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function () {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function (binData) {
  this.buffers.push(binData);
  if (this.buffers.length === this.reconPack.attachments) {
    // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function () {
  this.reconPack = null;
  this.buffers = [];
};

function error() {
  return {
    type: exports.ERROR,
    data: 'parser error'
  };
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// browser shim for xmlhttprequest module

var hasCORS = __webpack_require__(40);

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) {}

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) {}

  if (!xdomain) {
    try {
      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) {}
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */

var parser = __webpack_require__(4);
var Emitter = __webpack_require__(3);

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport(opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* global Blob File */

/*
 * Module requirements.
 */

var isArray = __webpack_require__(34);

var toString = Object.prototype.toString;
var withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';
var withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(obj) {
  if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
    return false;
  }

  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }
    return false;
  }

  if (typeof global.Buffer === 'function' && global.Buffer.isBuffer && global.Buffer.isBuffer(obj) || typeof global.ArrayBuffer === 'function' && obj instanceof ArrayBuffer || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
    return true;
  }

  // see: https://github.com/Automattic/has-binary/pull/4
  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }

  return false;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

module.exports = isBuf;

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Module dependencies.
 */

var eio = __webpack_require__(37);
var Socket = __webpack_require__(21);
var Emitter = __webpack_require__(3);
var parser = __webpack_require__(8);
var on = __webpack_require__(22);
var bind = __webpack_require__(23);
var debug = __webpack_require__(1)('socket.io-client:manager');
var indexOf = __webpack_require__(20);
var Backoff = __webpack_require__(53);

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager(uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && 'object' === (typeof uri === 'undefined' ? 'undefined' : _typeof(uri))) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  var _parser = opts.parser || parser;
  this.encoder = new _parser.Encoder();
  this.decoder = new _parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.generateId(nsp);
    }
  }
};

/**
 * generate `socket.id` for the given `nsp`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */

Manager.prototype.generateId = function (nsp) {
  return (nsp === '/' ? '' : nsp + '#') + this.engine.id;
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open = Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function destroy() {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.generateId(nsp);
    });

    if (this.autoConnect) {
      // manually call here since connecting event is fired before listening
      onConnecting();
    }
  }

  function onConnecting() {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else {
    // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close = Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function destroy() {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module dependencies
 */

var XMLHttpRequest = __webpack_require__(9);
var XHR = __webpack_require__(41);
var JSONP = __webpack_require__(48);
var websocket = __webpack_require__(49);

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling(opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */

var Transport = __webpack_require__(10);
var parseqs = __webpack_require__(6);
var parser = __webpack_require__(4);
var inherit = __webpack_require__(7);
var yeast = __webpack_require__(19);
var debug = __webpack_require__(1)('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = function () {
  var XMLHttpRequest = __webpack_require__(9);
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
}();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling(opts) {
  var forceBase64 = opts && opts.forceBase64;
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause() {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function callback(packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close() {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function callbackfn() {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && ('https' === schema && Number(this.port) !== 443 || 'http' === schema && Number(this.port) !== 80)) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/***/ }),
/* 18 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),
    length = 64,
    map = {},
    seed = 0,
    i = 0,
    prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now + '.' + encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) {
  map[alphabet[i]] = i;
} //
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var indexOf = [].indexOf;

module.exports = function (arr, obj) {
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Module dependencies.
 */

var parser = __webpack_require__(8);
var Emitter = __webpack_require__(3);
var toArray = __webpack_require__(52);
var on = __webpack_require__(22);
var bind = __webpack_require__(23);
var debug = __webpack_require__(1)('socket.io-client:socket');
var parseqs = __webpack_require__(6);

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket(io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open = Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var packet = { type: parser.EVENT, data: args };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  delete this.flags;

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      var query = _typeof(this.query) === 'object' ? parseqs.encode(this.query) : this.query;
      debug('sending connect packet with query %s', query);
      this.packet({ type: parser.CONNECT, query: query });
    } else {
      this.packet({ type: parser.CONNECT });
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  if (packet.nsp !== this.nsp) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    self.packet({
      type: parser.ACK,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close = Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags = this.flags || {};
  this.flags.compress = compress;
  return this;
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on(obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function destroy() {
      obj.removeListener(ev, fn);
    }
  };
}

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function (obj, fn) {
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function () {
    return fn.apply(obj, args.concat(slice.call(arguments)));
  };
};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
module.exports = __webpack_require__(58)['default'];

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.HandlebarsEnvironment = HandlebarsEnvironment;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _utils = __webpack_require__(2);

var _exception = __webpack_require__(5);

var _exception2 = _interopRequireDefault(_exception);

var _helpers = __webpack_require__(59);

var _decorators = __webpack_require__(67);

var _logger = __webpack_require__(69);

var _logger2 = _interopRequireDefault(_logger);

var VERSION = '4.0.10';
exports.VERSION = VERSION;
var COMPILER_REVISION = 7;

exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1',
  7: '>= 4.0.0'
};

exports.REVISION_CHANGES = REVISION_CHANGES;
var objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials, decorators) {
  this.helpers = helpers || {};
  this.partials = partials || {};
  this.decorators = decorators || {};

  _helpers.registerDefaultHelpers(this);
  _decorators.registerDefaultDecorators(this);
}

HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: _logger2['default'],
  log: _logger2['default'].log,

  registerHelper: function registerHelper(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple helpers');
      }
      _utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function unregisterHelper(name) {
    delete this.helpers[name];
  },

  registerPartial: function registerPartial(name, partial) {
    if (_utils.toString.call(name) === objectType) {
      _utils.extend(this.partials, name);
    } else {
      if (typeof partial === 'undefined') {
        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function unregisterPartial(name) {
    delete this.partials[name];
  },

  registerDecorator: function registerDecorator(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple decorators');
      }
      _utils.extend(this.decorators, name);
    } else {
      this.decorators[name] = fn;
    }
  },
  unregisterDecorator: function unregisterDecorator(name) {
    delete this.decorators[name];
  }
};

var log = _logger2['default'].log;

exports.log = log;
exports.createFrame = _utils.createFrame;
exports.logger = _logger2['default'];

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(27);
module.exports = __webpack_require__(77);


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($, io) {

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _player = __webpack_require__(54);

var _player2 = _interopRequireDefault(_player);

var _game = __webpack_require__(55);

var _game2 = _interopRequireDefault(_game);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GAME_STATES = {
    // waiting for the user to make a play
    INPUT: 1,
    // waiting on other players - input is blocked
    WAITING: 2
};

// client side

var Gamemaster = function () {
    function Gamemaster() {
        _classCallCheck(this, Gamemaster);

        this.gameState = GAME_STATES.INPUT;
        this.admin = true; // admin can move both pieces
        this.localPlayer = new _player2.default("Bisaflor");
        var player2 = new _player2.default("Mewtwo");

        this.game = new _game2.default({}, this.localPlayer, player2);
        this.html = $(this.game.render());

        $('#board-wrapper').append(this.html);
        $('td', this.html).on('click', function () {
            gm.handleClick(gm.getCell($(this)));
        });

        this.socket = io();
        this.socket.on('game action', function (data) {
            console.log(data);
            switch (data.action) {
                case 'action':
                case 'sym move':
                    this.game.execute(data);
                    this.executeAction(data);
                    break;
                case 'notification':
                    switch (data.type) {
                        case 'PlayerMadeMove':
                            this.showNotification('Please wait...', 'Waiting for other player to make his move.');
                            break;
                        default:
                            this.showError('UnknownNotificationType: ' + data.type);
                    }
                    break;
                default:
                    this.showError('UnknownGameAction: ' + data.action);
            }
        }.bind(this));

        this.socket.on('error message', function (data) {
            this.showError(data);
        }.bind(this));
    }

    _createClass(Gamemaster, [{
        key: 'handleClick',
        value: function handleClick(cell) {
            // execute move
            if (this.getjqCell(cell).hasClass('possibleMove')) {
                var sourceJqCell = $('td.selected', this.html);
                var sourceCell = this.getCell(sourceJqCell);

                var logEntry = this.game.prepareMove(sourceCell, cell);

                this.deselectPiece();

                this.socket.emit('game action', logEntry);

                return;
            }

            // show possible moves
            if (cell.piece && (cell.piece.owner === this.localPlayer || this.admin)) {
                if (this.getjqCell(cell).hasClass('selected')) {
                    // a click on a selected piece deselects it
                    this.deselectPiece();
                } else {
                    // selected his own piece
                    this.selectPiece(cell);
                }
            }
        }
    }, {
        key: 'executeAction',
        value: function executeAction(logEntry) {
            if (logEntry.action === 'sym move') {
                // pick up pieces
                for (var i = 0; i < logEntry.moves.length; i++) {
                    var sourceJqCell = this.getjqCell(logEntry.moves[i].source);
                    sourceJqCell.removeClass(logEntry.moves[i].movedPieceClass);
                }

                // put pieces down
                for (var _i = 0; _i < logEntry.moves.length; _i++) {
                    var targetJqCell = this.getjqCell(logEntry.moves[_i].target);
                    if (logEntry.moves[_i].killedPieceClass) targetJqCell.removeClass(logEntry.moves[_i].killedPieceClass);
                    targetJqCell.addClass(logEntry.moves[_i].movedPieceClass);
                }
            }
        }
    }, {
        key: 'getCell',
        value: function getCell(jqcell) {
            var x = jqcell.data('x');
            var y = jqcell.data('y');
            return this.game.board[y][x];
        }
    }, {
        key: 'getjqCell',
        value: function getjqCell(cell) {
            return $('td[data-x="' + cell.x + '"][data-y="' + cell.y + '"]', this.html);
        }
    }, {
        key: 'selectPiece',
        value: function selectPiece(cell) {
            $('.selected', this.html).removeClass('selected');
            this.getjqCell(cell).addClass('selected');

            $('.possibleMove', this.html).removeClass('possibleMove');
            var possibleMoves = this.game.getPossibleMoves(cell);
            for (var i = 0; i < possibleMoves.length; i++) {
                var move = possibleMoves[i];
                var jqcell = this.getjqCell(move);
                jqcell.addClass('possibleMove');
            }
        }
    }, {
        key: 'deselectPiece',
        value: function deselectPiece() {
            $('.selected', this.html).removeClass('selected');
            $('.possibleMove', this.html).removeClass('possibleMove');
        }
    }, {
        key: 'showNotification',
        value: function showNotification(title, content) {
            $('.message .title', this.html).text(title);
            $('.message .content', this.html).html(content);
            $('.overlay', this.html).show();
        }
    }, {
        key: 'showError',
        value: function showError(message) {
            $('.message', this.html).addClass('error');
            this.showNotification('Error: ' + message, 'Try to <a href=".">reload</a>. ' + 'If that doesn\'t work yell at the dev: <a href="mailto:shylux@gmail.com">shylux@gmail.com</a>');
        }
    }, {
        key: 'hideNotification',
        value: function hideNotification() {
            $('.overlay', this.html).hide();
        }
    }]);

    return Gamemaster;
}();

var gm = new Gamemaster();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28), __webpack_require__(29)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
(function (global, factory) {

	"use strict";

	if (( false ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("jQuery requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}

	// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : undefined, function (window, noGlobal) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var _slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call(Object);

	var support = {};

	function DOMEval(code, doc) {
		doc = doc || document;

		var script = doc.createElement("script");

		script.text = code;
		doc.head.appendChild(script).parentNode.removeChild(script);
	}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module


	var version = "3.2.1",


	// Define a local copy of jQuery
	jQuery = function jQuery(selector, context) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init(selector, context);
	},


	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([a-z])/g,


	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function fcamelCase(all, letter) {
		return letter.toUpperCase();
	};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function toArray() {
			return _slice.call(this);
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function get(num) {

			// Return all the elements in a clean array
			if (num == null) {
				return _slice.call(this);
			}

			// Return just the one element from the set
			return num < 0 ? this[num + this.length] : this[num];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function pushStack(elems) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge(this.constructor(), elems);

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function each(callback) {
			return jQuery.each(this, callback);
		},

		map: function map(callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function slice() {
			return this.pushStack(_slice.apply(this, arguments));
		},

		first: function first() {
			return this.eq(0);
		},

		last: function last() {
			return this.eq(-1);
		},

		eq: function eq(i) {
			var len = this.length,
			    j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function end() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var options,
		    name,
		    src,
		    copy,
		    copyIsArray,
		    clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;

			// Skip the boolean and the target
			target = arguments[i] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {

			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {

				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {

						if (copyIsArray) {
							copyIsArray = false;
							clone = src && Array.isArray(src) ? src : [];
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = jQuery.extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function error(msg) {
			throw new Error(msg);
		},

		noop: function noop() {},

		isFunction: function isFunction(obj) {
			return jQuery.type(obj) === "function";
		},

		isWindow: function isWindow(obj) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function isNumeric(obj) {

			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type(obj);
			return (type === "number" || type === "string") &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN(obj - parseFloat(obj));
		},

		isPlainObject: function isPlainObject(obj) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if (!obj || toString.call(obj) !== "[object Object]") {
				return false;
			}

			proto = getProto(obj);

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if (!proto) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
			return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
		},

		isEmptyObject: function isEmptyObject(obj) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for (name in obj) {
				return false;
			}
			return true;
		},

		type: function type(obj) {
			if (obj == null) {
				return obj + "";
			}

			// Support: Android <=2.3 only (functionish RegExp)
			return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
		},

		// Evaluates a script in a global context
		globalEval: function globalEval(code) {
			DOMEval(code);
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function camelCase(string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},

		each: function each(obj, callback) {
			var length,
			    i = 0;

			if (isArrayLike(obj)) {
				length = obj.length;
				for (; i < length; i++) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			} else {
				for (i in obj) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function trim(text) {
			return text == null ? "" : (text + "").replace(rtrim, "");
		},

		// results is for internal usage only
		makeArray: function makeArray(arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArrayLike(Object(arr))) {
					jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function inArray(elem, arr, i) {
			return arr == null ? -1 : indexOf.call(arr, elem, i);
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function merge(first, second) {
			var len = +second.length,
			    j = 0,
			    i = first.length;

			for (; j < len; j++) {
				first[i++] = second[j];
			}

			first.length = i;

			return first;
		},

		grep: function grep(elems, callback, invert) {
			var callbackInverse,
			    matches = [],
			    i = 0,
			    length = elems.length,
			    callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function map(elems, callback, arg) {
			var length,
			    value,
			    i = 0,
			    ret = [];

			// Go through the array, translating each of the items to their new values
			if (isArrayLike(elems)) {
				length = elems.length;
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}

				// Go through every key on the object,
			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply([], ret);
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function proxy(fn, context) {
			var tmp, args, proxy;

			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if (!jQuery.isFunction(fn)) {
				return undefined;
			}

			// Simulated bind
			args = _slice.call(arguments, 2);
			proxy = function proxy() {
				return fn.apply(context || this, args.concat(_slice.call(arguments)));
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	if (typeof Symbol === "function") {
		jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
	}

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArrayLike(obj) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
		    type = jQuery.type(obj);

		if (type === "function" || jQuery.isWindow(obj)) {
			return false;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}
	var Sizzle =
	/*!
  * Sizzle CSS Selector Engine v2.3.3
  * https://sizzlejs.com/
  *
  * Copyright jQuery Foundation and other contributors
  * Released under the MIT license
  * http://jquery.org/license
  *
  * Date: 2016-08-08
  */
	function (window) {

		var i,
		    support,
		    Expr,
		    getText,
		    isXML,
		    tokenize,
		    compile,
		    select,
		    outermostContext,
		    sortInput,
		    hasDuplicate,


		// Local document vars
		setDocument,
		    document,
		    docElem,
		    documentIsHTML,
		    rbuggyQSA,
		    rbuggyMatches,
		    matches,
		    contains,


		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		    preferredDoc = window.document,
		    dirruns = 0,
		    done = 0,
		    classCache = createCache(),
		    tokenCache = createCache(),
		    compilerCache = createCache(),
		    sortOrder = function sortOrder(a, b) {
			if (a === b) {
				hasDuplicate = true;
			}
			return 0;
		},


		// Instance methods
		hasOwn = {}.hasOwnProperty,
		    arr = [],
		    pop = arr.pop,
		    push_native = arr.push,
		    push = arr.push,
		    slice = arr.slice,

		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function indexOf(list, elem) {
			var i = 0,
			    len = list.length;
			for (; i < len; i++) {
				if (list[i] === elem) {
					return i;
				}
			}
			return -1;
		},
		    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",


		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",


		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
		    pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" + ")\\)|)",


		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp(whitespace + "+", "g"),
		    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
		    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
		    rpseudo = new RegExp(pseudos),
		    ridentifier = new RegExp("^" + identifier + "$"),
		    matchExpr = {
			"ID": new RegExp("^#(" + identifier + ")"),
			"CLASS": new RegExp("^\\.(" + identifier + ")"),
			"TAG": new RegExp("^(" + identifier + "|[*])"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			"bool": new RegExp("^(?:" + booleans + ")$", "i"),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
		},
		    rinputs = /^(?:input|select|textarea|button)$/i,
		    rheader = /^h\d$/i,
		    rnative = /^[^{]+\{\s*\[native \w/,


		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
		    rsibling = /[+~]/,


		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
		    funescape = function funescape(_, escaped, escapedWhitespace) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ? escaped : high < 0 ?
			// BMP codepoint
			String.fromCharCode(high + 0x10000) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
		},


		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		    fcssescape = function fcssescape(ch, asCodePoint) {
			if (asCodePoint) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if (ch === "\0") {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},


		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function unloadHandler() {
			setDocument();
		},
		    disabledAncestor = addCombinator(function (elem) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		}, { dir: "parentNode", next: "legend" });

		// Optimize for push.apply( _, NodeList )
		try {
			push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
			// Support: Android<4.0
			// Detect silently failing push.apply
			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = { apply: arr.length ?

				// Leverage slice if possible
				function (target, els) {
					push_native.apply(target, slice.call(els));
				} :

				// Support: IE<9
				// Otherwise append directly
				function (target, els) {
					var j = target.length,
					    i = 0;
					// Can't trust NodeList.length
					while (target[j++] = els[i++]) {}
					target.length = j - 1;
				}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var m,
			    i,
			    elem,
			    nid,
			    match,
			    groups,
			    newSelector,
			    newContext = context && context.ownerDocument,


			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

			results = results || [];

			// Return early from calls with invalid selector or context
			if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			// Try to shortcut find operations (as opposed to filters) in HTML documents
			if (!seed) {

				if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
					setDocument(context);
				}
				context = context || document;

				if (documentIsHTML) {

					// If the selector is sufficiently simple, try using a "get*By*" DOM method
					// (excepting DocumentFragment context, where the methods don't exist)
					if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

						// ID selector
						if (m = match[1]) {

							// Document context
							if (nodeType === 9) {
								if (elem = context.getElementById(m)) {

									// Support: IE, Opera, Webkit
									// TODO: identify versions
									// getElementById can match elements by name instead of ID
									if (elem.id === m) {
										results.push(elem);
										return results;
									}
								} else {
									return results;
								}

								// Element context
							} else {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

									results.push(elem);
									return results;
								}
							}

							// Type selector
						} else if (match[2]) {
							push.apply(results, context.getElementsByTagName(selector));
							return results;

							// Class selector
						} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

							push.apply(results, context.getElementsByClassName(m));
							return results;
						}
					}

					// Take advantage of querySelectorAll
					if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {

						if (nodeType !== 1) {
							newContext = context;
							newSelector = selector;

							// qSA looks outside Element context, which is not what we want
							// Thanks to Andrew Dupont for this workaround technique
							// Support: IE <=8
							// Exclude object elements
						} else if (context.nodeName.toLowerCase() !== "object") {

							// Capture the context ID, setting it first if necessary
							if (nid = context.getAttribute("id")) {
								nid = nid.replace(rcssescape, fcssescape);
							} else {
								context.setAttribute("id", nid = expando);
							}

							// Prefix every selector in the list
							groups = tokenize(selector);
							i = groups.length;
							while (i--) {
								groups[i] = "#" + nid + " " + toSelector(groups[i]);
							}
							newSelector = groups.join(",");

							// Expand context for sibling selectors
							newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
						}

						if (newSelector) {
							try {
								push.apply(results, newContext.querySelectorAll(newSelector));
								return results;
							} catch (qsaError) {} finally {
								if (nid === expando) {
									context.removeAttribute("id");
								}
							}
						}
					}
				}
			}

			// All others
			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		/**
   * Create key-value caches of limited size
   * @returns {function(string, object)} Returns the Object data after storing it on itself with
   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *	deleting the oldest entry
   */
		function createCache() {
			var keys = [];

			function cache(key, value) {
				// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
				if (keys.push(key + " ") > Expr.cacheLength) {
					// Only keep the most recent entries
					delete cache[keys.shift()];
				}
				return cache[key + " "] = value;
			}
			return cache;
		}

		/**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */
		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		/**
   * Support testing using an element
   * @param {Function} fn Passed the created element and returns a boolean result
   */
		function assert(fn) {
			var el = document.createElement("fieldset");

			try {
				return !!fn(el);
			} catch (e) {
				return false;
			} finally {
				// Remove from its parent by default
				if (el.parentNode) {
					el.parentNode.removeChild(el);
				}
				// release memory in IE
				el = null;
			}
		}

		/**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */
		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
			    i = arr.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		/**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */
		function siblingCheck(a, b) {
			var cur = b && a,
			    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;

			// Use IE sourceIndex if available on both nodes
			if (diff) {
				return diff;
			}

			// Check if b follows a
			if (cur) {
				while (cur = cur.nextSibling) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		/**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for :enabled/:disabled
   * @param {Boolean} disabled true for :disabled; false for :enabled
   */
		function createDisabledPseudo(disabled) {

			// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
			return function (elem) {

				// Only certain elements can match :enabled or :disabled
				// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
				// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
				if ("form" in elem) {

					// Check for inherited disabledness on relevant non-disabled elements:
					// * listed form-associated elements in a disabled fieldset
					//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
					//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
					// * option elements in a disabled optgroup
					//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
					// All such elements have a "form" property.
					if (elem.parentNode && elem.disabled === false) {

						// Option elements defer to a parent optgroup if present
						if ("label" in elem) {
							if ("label" in elem.parentNode) {
								return elem.parentNode.disabled === disabled;
							} else {
								return elem.disabled === disabled;
							}
						}

						// Support: IE 6 - 11
						// Use the isDisabled shortcut property to check for disabled fieldset ancestors
						return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
					}

					return elem.disabled === disabled;

					// Try to winnow out elements that can't be disabled before trusting the disabled property.
					// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
					// even exist on them, let alone have a boolean value.
				} else if ("label" in elem) {
					return elem.disabled === disabled;
				}

				// Remaining elements are neither :enabled nor :disabled
				return false;
			};
		}

		/**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					    matchIndexes = fn([], seed.length, argument),
					    i = matchIndexes.length;

					// Match elements found at the specified indexes
					while (i--) {
						if (seed[j = matchIndexes[i]]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		/**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */
		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		// Expose support vars for convenience
		support = Sizzle.support = {};

		/**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */
		isXML = Sizzle.isXML = function (elem) {
			// documentElement is verified for cases where it doesn't yet exist
			// (such as loading iframes in IE - #4833)
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};

		/**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */
		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare,
			    subWindow,
			    doc = node ? node.ownerDocument || node : preferredDoc;

			// Return early if doc is invalid or already selected
			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			// Update global variables
			document = doc;
			docElem = document.documentElement;
			documentIsHTML = !isXML(document);

			// Support: IE 9-11, Edge
			// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
			if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {

				// Support: IE 11, Edge
				if (subWindow.addEventListener) {
					subWindow.addEventListener("unload", unloadHandler, false);

					// Support: IE 9 - 10 only
				} else if (subWindow.attachEvent) {
					subWindow.attachEvent("onunload", unloadHandler);
				}
			}

			/* Attributes
   ---------------------------------------------------------------------- */

			// Support: IE<8
			// Verify that getAttribute really returns attributes and not properties
			// (excepting IE8 booleans)
			support.attributes = assert(function (el) {
				el.className = "i";
				return !el.getAttribute("className");
			});

			/* getElement(s)By*
   ---------------------------------------------------------------------- */

			// Check if getElementsByTagName("*") returns only elements
			support.getElementsByTagName = assert(function (el) {
				el.appendChild(document.createComment(""));
				return !el.getElementsByTagName("*").length;
			});

			// Support: IE<9
			support.getElementsByClassName = rnative.test(document.getElementsByClassName);

			// Support: IE<10
			// Check if getElementById returns elements by name
			// The broken getElementById methods don't pick up programmatically-set names,
			// so use a roundabout getElementsByName test
			support.getById = assert(function (el) {
				docElem.appendChild(el).id = expando;
				return !document.getElementsByName || !document.getElementsByName(expando).length;
			});

			// ID filter and find
			if (support.getById) {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var elem = context.getElementById(id);
						return elem ? [elem] : [];
					}
				};
			} else {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};

				// Support: IE 6 - 7 only
				// getElementById is not reliable as a find shortcut
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var node,
						    i,
						    elems,
						    elem = context.getElementById(id);

						if (elem) {

							// Verify the id attribute
							node = elem.getAttributeNode("id");
							if (node && node.value === id) {
								return [elem];
							}

							// Fall back on getElementsByName
							elems = context.getElementsByName(id);
							i = 0;
							while (elem = elems[i++]) {
								node = elem.getAttributeNode("id");
								if (node && node.value === id) {
									return [elem];
								}
							}
						}

						return [];
					}
				};
			}

			// Tag
			Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
				if (typeof context.getElementsByTagName !== "undefined") {
					return context.getElementsByTagName(tag);

					// DocumentFragment nodes don't have gEBTN
				} else if (support.qsa) {
					return context.querySelectorAll(tag);
				}
			} : function (tag, context) {
				var elem,
				    tmp = [],
				    i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName(tag);

				// Filter out possible comments
				if (tag === "*") {
					while (elem = results[i++]) {
						if (elem.nodeType === 1) {
							tmp.push(elem);
						}
					}

					return tmp;
				}
				return results;
			};

			// Class
			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};

			/* QSA/matchesSelector
   ---------------------------------------------------------------------- */

			// QSA and matchesSelector support

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			rbuggyMatches = [];

			// qSa(:focus) reports false when true (Chrome 21)
			// We allow this because of a bug in IE8/9 that throws an error
			// whenever `document.activeElement` is accessed on an iframe
			// So, we allow :focus to pass through QSA all the time to avoid the IE error
			// See https://bugs.jquery.com/ticket/13378
			rbuggyQSA = [];

			if (support.qsa = rnative.test(document.querySelectorAll)) {
				// Build QSA regex
				// Regex strategy adopted from Diego Perini
				assert(function (el) {
					// Select is set to empty string on purpose
					// This is to test IE's treatment of not explicitly
					// setting a boolean content attribute,
					// since its presence should be enough
					// https://bugs.jquery.com/ticket/12359
					docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

					// Support: IE8, Opera 11-12.16
					// Nothing should be selected when empty strings follow ^= or $= or *=
					// The test attribute must be unknown in Opera but "safe" for WinRT
					// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
					if (el.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					// Support: IE8
					// Boolean attributes and "value" are not treated correctly
					if (!el.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
					if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					// Webkit/Opera - :checked should return selected option elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					// IE8 throws error here and will not see later tests
					if (!el.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					// Support: Safari 8+, iOS 8+
					// https://bugs.webkit.org/show_bug.cgi?id=136851
					// In-page `selector#id sibling-combinator selector` fails
					if (!el.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (el) {
					el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";

					// Support: Windows 8 Native Apps
					// The type and name attributes are restricted during .innerHTML assignment
					var input = document.createElement("input");
					input.setAttribute("type", "hidden");
					el.appendChild(input).setAttribute("name", "D");

					// Support: IE8
					// Enforce case-sensitivity of name attribute
					if (el.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
					// IE8 throws error here and will not see later tests
					if (el.querySelectorAll(":enabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Support: IE9-11+
					// IE's :disabled selector does not pick up the children of disabled fieldsets
					docElem.appendChild(el).disabled = true;
					if (el.querySelectorAll(":disabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Opera 10-11 does not throw on post-comma invalid pseudos
					el.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

				assert(function (el) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					support.disconnectedMatch = matches.call(el, "*");

					// This should fail with an exception
					// Gecko does not error, returns false instead
					matches.call(el, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			/* Contains
   ---------------------------------------------------------------------- */
			hasCompare = rnative.test(docElem.compareDocumentPosition);

			// Element contains another
			// Purposefully self-exclusive
			// As in, an element does not contain itself
			contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
				    bup = b && b.parentNode;
				return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
			} : function (a, b) {
				if (b) {
					while (b = b.parentNode) {
						if (b === a) {
							return true;
						}
					}
				}
				return false;
			};

			/* Sorting
   ---------------------------------------------------------------------- */

			// Document order sorting
			sortOrder = hasCompare ? function (a, b) {

				// Flag for duplicate removal
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				// Sort on method existence if only one input has compareDocumentPosition
				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				// Calculate position if both inputs belong to the same document
				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

				// Otherwise we know they are disconnected
				1;

				// Disconnected nodes
				if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

					// Choose the first element that is related to our preferred document
					if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					// Maintain original order
					return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				}

				return compare & 4 ? -1 : 1;
			} : function (a, b) {
				// Exit early if the nodes are identical
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
				    i = 0,
				    aup = a.parentNode,
				    bup = b.parentNode,
				    ap = [a],
				    bp = [b];

				// Parentless nodes are either documents or disconnected
				if (!aup || !bup) {
					return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

					// If the nodes are siblings, we can do a quick check
				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				// Otherwise we need full lists of their ancestors for comparison
				cur = a;
				while (cur = cur.parentNode) {
					ap.unshift(cur);
				}
				cur = b;
				while (cur = cur.parentNode) {
					bp.unshift(cur);
				}

				// Walk down the tree looking for a discrepancy
				while (ap[i] === bp[i]) {
					i++;
				}

				return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck(ap[i], bp[i]) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
			};

			return document;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			// Make sure that attribute selectors are quoted
			expr = expr.replace(rattributeQuotes, "='$1']");

			if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					// IE 9's matchesSelector returns false on disconnected nodes
					if (ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) {}
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			// Set document vars if needed
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],

			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

			return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
		};

		Sizzle.escape = function (sel) {
			return (sel + "").replace(rcssescape, fcssescape);
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		/**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */
		Sizzle.uniqueSort = function (results) {
			var elem,
			    duplicates = [],
			    j = 0,
			    i = 0;

			// Unless we *know* we can detect duplicates, assume their presence
			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while (elem = results[i++]) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			// Clear input after sorting to release objects
			// See https://github.com/jquery/sizzle/pull/225
			sortInput = null;

			return results;
		};

		/**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */
		getText = Sizzle.getText = function (elem) {
			var node,
			    ret = "",
			    i = 0,
			    nodeType = elem.nodeType;

			if (!nodeType) {
				// If no nodeType, this is expected to be an array
				while (node = elem[i++]) {
					// Do not traverse comment nodes
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (jQuery #11153)
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					// Traverse its children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes

			return ret;
		};

		Expr = Sizzle.selectors = {

			// Can be adjusted by the user
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function ATTR(match) {
					match[1] = match[1].replace(runescape, funescape);

					// Move the given value to match[3] whether quoted or unquoted
					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function CHILD(match) {
					/* matches from matchExpr["CHILD"]
     	1 type (only|nth|...)
     	2 what (child|of-type)
     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
     	4 xn-component of xn+y argument ([+-]?\d*n|)
     	5 sign of xn-component
     	6 x of xn-component
     	7 sign of y-component
     	8 y of y-component
     */
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						// nth-* requires argument
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						// numeric x and y parameters for Expr.filter.CHILD
						// remember that false/true cast respectively to 0/1
						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +(match[7] + match[8] || match[3] === "odd");

						// other types prohibit arguments
					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function PSEUDO(match) {
					var excess,
					    unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					// Accept quoted arguments as-is
					if (match[3]) {
						match[2] = match[4] || match[5] || "";

						// Strip excess characters from unquoted arguments
					} else if (unquoted && rpseudo.test(unquoted) && (
					// Get excess from tokenize (recursively)
					excess = tokenize(unquoted, true)) && (
					// advance to the next closing parenthesis
					excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

						// excess is a negative index
						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					// Return only captures needed by the pseudo filter method (type and argument)
					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function TAG(nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ? function () {
						return true;
					} : function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function CLASS(className) {
					var pattern = classCache[className + " "];

					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
					});
				},

				"ATTR": function ATTR(name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
					};
				},

				"CHILD": function CHILD(type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
					    forward = type.slice(-4) !== "last",
					    ofType = what === "of-type";

					return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function (elem) {
						return !!elem.parentNode;
					} : function (elem, context, xml) {
						var cache,
						    uniqueCache,
						    outerCache,
						    node,
						    nodeIndex,
						    start,
						    dir = simple !== forward ? "nextSibling" : "previousSibling",
						    parent = elem.parentNode,
						    name = ofType && elem.nodeName.toLowerCase(),
						    useCache = !xml && !ofType,
						    diff = false;

						if (parent) {

							// :(first|last|only)-(child|of-type)
							if (simple) {
								while (dir) {
									node = elem;
									while (node = node[dir]) {
										if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [forward ? parent.firstChild : parent.lastChild];

							// non-xml :nth-child(...) stores cache data on `parent`
							if (forward && useCache) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[expando] || (node[expando] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

								cache = uniqueCache[type] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = nodeIndex && cache[2];
								node = nodeIndex && parent.childNodes[nodeIndex];

								while (node = ++nodeIndex && node && node[dir] || (

								// Fallback to seeking `elem` from the start
								diff = nodeIndex = 0) || start.pop()) {

									// When found, cache indexes on `parent` and break
									if (node.nodeType === 1 && ++diff && node === elem) {
										uniqueCache[type] = [dirruns, nodeIndex, diff];
										break;
									}
								}
							} else {
								// Use previously-cached element index if available
								if (useCache) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[expando] || (node[expando] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

									cache = uniqueCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if (diff === false) {
									// Use the same loop as above to seek `elem` from the start
									while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

										if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

											// Cache the index of each encountered element
											if (useCache) {
												outerCache = node[expando] || (node[expando] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

												uniqueCache[type] = [dirruns, diff];
											}

											if (node === elem) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || diff % first === 0 && diff / first >= 0;
						}
					};
				},

				"PSEUDO": function PSEUDO(pseudo, argument) {
					// pseudo-class names are case-insensitive
					// http://www.w3.org/TR/selectors/#pseudo-classes
					// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
					// Remember that setFilters inherits from pseudos
					var args,
					    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

					// The user may use createPseudo to indicate that
					// arguments are needed to create the filter function
					// just as Sizzle does
					if (fn[expando]) {
						return fn(argument);
					}

					// But maintain support for old signatures
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							    matched = fn(seed, argument),
							    i = matched.length;
							while (i--) {
								idx = indexOf(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) : function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				// Potentially complex pseudos
				"not": markFunction(function (selector) {
					// Trim the selector passed to compile
					// to avoid treating leading and trailing
					// spaces as combinators
					var input = [],
					    results = [],
					    matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						    unmatched = matcher(seed, null, xml, []),
						    i = seed.length;

						// Match elements unmatched by `matcher`
						while (i--) {
							if (elem = unmatched[i]) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
					};
				}),

				// "Whether an element is represented by a :lang() selector
				// is based solely on the element's language value
				// being equal to the identifier C,
				// or beginning with the identifier C immediately followed by "-".
				// The matching of C against the element's language value is performed case-insensitively.
				// The identifier C does not have to be a valid language name."
				// http://www.w3.org/TR/selectors/#lang-pseudo
				"lang": markFunction(function (lang) {
					// lang value must be a valid identifier
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				// Miscellaneous
				"target": function target(elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function root(elem) {
					return elem === docElem;
				},

				"focus": function focus(elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				// Boolean properties
				"enabled": createDisabledPseudo(false),
				"disabled": createDisabledPseudo(true),

				"checked": function checked(elem) {
					// In CSS3, :checked should return both checked and selected elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					var nodeName = elem.nodeName.toLowerCase();
					return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
				},

				"selected": function selected(elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				// Contents
				"empty": function empty(elem) {
					// http://www.w3.org/TR/selectors/#empty-pseudo
					// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
					//   but not by others (comment: 8; processing instruction: 7; etc.)
					// nodeType < 6 works because attributes (2) do not appear as children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function parent(elem) {
					return !Expr.pseudos["empty"](elem);
				},

				// Element/input types
				"header": function header(elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function input(elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function button(elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function text(elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				// Position-in-collection
				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		// Add button/input type pseudos
		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		// Easy API for creating new setFilters
		function setFilters() {}
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched,
			    match,
			    tokens,
			    type,
			    soFar,
			    groups,
			    preFilters,
			    cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {

				// Comma and first run
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						// Don't consume trailing commas as valid
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				// Combinators
				if (match = rcombinators.exec(soFar)) {
					matched = match.shift();
					tokens.push({
						value: matched,
						// Cast descendant combinators to space
						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				// Filters
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			// Return the length of the invalid excess
			// if we're just parsing
			// Otherwise, throw an error or return tokens
			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
			// Cache the tokens
			tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
			    len = tokens.length,
			    selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			    skip = combinator.next,
			    key = skip || dir,
			    checkNonElements = base && key === "parentNode",
			    doneName = done++;

			return combinator.first ?
			// Check against closest ancestor/preceding element
			function (elem, context, xml) {
				while (elem = elem[dir]) {
					if (elem.nodeType === 1 || checkNonElements) {
						return matcher(elem, context, xml);
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function (elem, context, xml) {
				var oldCache,
				    uniqueCache,
				    outerCache,
				    newCache = [dirruns, doneName];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if (xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							if (matcher(elem, context, xml)) {
								return true;
							}
						}
					}
				} else {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							outerCache = elem[expando] || (elem[expando] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

							if (skip && skip === elem.nodeName.toLowerCase()) {
								elem = elem[dir] || elem;
							} else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

								// Assign to newCache so results back-propagate to previous elements
								return newCache[2] = oldCache[2];
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[key] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if (newCache[2] = matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			} : matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			    len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			    newUnmatched = [],
			    i = 0,
			    len = unmatched.length,
			    mapped = map != null;

			for (; i < len; i++) {
				if (elem = unmatched[i]) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				    i,
				    elem,
				    preMap = [],
				    postMap = [],
				    preexisting = results.length,


				// Get initial elements from seed or context
				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				    matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || (seed ? preFilter : preexisting || postFilter) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results : matcherIn;

				// Find primary matches
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				// Apply postFilter
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					// Un-match failing elements by moving them back to matcherIn
					i = temp.length;
					while (i--) {
						if (elem = temp[i]) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							// Get the final matcherOut by condensing this intermediate into postFinder contexts
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if (elem = matcherOut[i]) {
									// Restore matcherIn since elem is not yet a final match
									temp.push(matcherIn[i] = elem);
								}
							}
							postFinder(null, matcherOut = [], temp, xml);
						}

						// Move matched elements from seed to results to keep them synchronized
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

					// Add elements to results, through postFinder if defined
				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			    matcher,
			    j,
			    len = tokens.length,
			    leadingRelative = Expr.relative[tokens[0].type],
			    implicitRelative = leadingRelative || Expr.relative[" "],
			    i = leadingRelative ? 1 : 0,


			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator(function (elem) {
				return elem === checkContext;
			}, implicitRelative, true),
			    matchAnyContext = addCombinator(function (elem) {
				return indexOf(checkContext, elem) > -1;
			}, implicitRelative, true),
			    matchers = [function (elem, context, xml) {
				var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			}];

			for (; i < len; i++) {
				if (matcher = Expr.relative[tokens[i].type]) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					// Return special upon seeing a positional matcher
					if (matcher[expando]) {
						// Find the next relative operator (if any) for proper handling
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			    byElement = elementMatchers.length > 0,
			    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
				var elem,
				    j,
				    matcher,
				    matchedCount = 0,
				    i = "0",
				    unmatched = seed && [],
				    setMatched = [],
				    contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]("*", outermost),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
				    len = elems.length;

				if (outermost) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for (; i !== len && (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						j = 0;
						if (!context && elem.ownerDocument !== document) {
							setDocument(elem);
							xml = !documentIsHTML;
						}
						while (matcher = elementMatchers[j++]) {
							if (matcher(elem, context || document, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if (bySet) {
						// They will have gone through all possible matchers
						if (elem = !matcher && elem) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if (bySet && i !== matchedCount) {
					j = 0;
					while (matcher = setMatchers[j++]) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						// Reintegrate element matches to eliminate the need for sorting
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense(setMatched);
					}

					// Add matches to results
					push.apply(results, setMatched);

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				// Override manipulation of globals by nested matchers
				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			return bySet ? markFunction(superMatcher) : superMatcher;
		}

		compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
			var i,
			    setMatchers = [],
			    elementMatchers = [],
			    cached = compilerCache[selector + " "];

			if (!cached) {
				// Generate a function of recursive functions that can be used to check each element
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				// Cache the compiled function
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				// Save selector and tokenization
				cached.selector = selector;
			}
			return cached;
		};

		/**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */
		select = Sizzle.select = function (selector, context, results, seed) {
			var i,
			    tokens,
			    token,
			    type,
			    find,
			    compiled = typeof selector === "function" && selector,
			    match = !seed && tokenize(selector = compiled.selector || selector);

			results = results || [];

			// Try to minimize operations if there is only one selector in the list and no seed
			// (the latter of which guarantees us context)
			if (match.length === 1) {

				// Reduce context if the leading compound selector is an ID
				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;

						// Precompiled matchers will still verify ancestry, so step up a level
					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				// Fetch a seed set for right-to-left matching
				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					// Abort if we hit a combinator
					if (Expr.relative[type = token.type]) {
						break;
					}
					if (find = Expr.find[type]) {
						// Search, expanding context for leading sibling combinators
						if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

							// If seed is empty or no tokens remain, we can return early
							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			// Compile and execute a filtering function if one is not provided
			// Provide `match` to avoid retokenization if we modified the selector above
			(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
			return results;
		};

		// One-time assignments

		// Sort stability
		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		// Support: Chrome 14-35+
		// Always assume duplicates if they aren't passed to the comparison function
		support.detectDuplicates = !!hasDuplicate;

		// Initialize against the default document
		setDocument();

		// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
		// Detached nodes confoundingly follow *each other*
		support.sortDetached = assert(function (el) {
			// Should return 1, but returns 4 (following)
			return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
		});

		// Support: IE<8
		// Prevent attribute/property "interpolation"
		// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if (!assert(function (el) {
			el.innerHTML = "<a href='#'></a>";
			return el.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		// Support: IE<9
		// Use defaultValue in place of getAttribute("value")
		if (!support.attributes || !assert(function (el) {
			el.innerHTML = "<input/>";
			el.firstChild.setAttribute("value", "");
			return el.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		// Support: IE<9
		// Use getAttributeNode to fetch booleans when getAttribute lies
		if (!assert(function (el) {
			return el.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
				}
			});
		}

		return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;

	var dir = function dir(elem, _dir, until) {
		var matched = [],
		    truncate = until !== undefined;

		while ((elem = elem[_dir]) && elem.nodeType !== 9) {
			if (elem.nodeType === 1) {
				if (truncate && jQuery(elem).is(until)) {
					break;
				}
				matched.push(elem);
			}
		}
		return matched;
	};

	var _siblings = function _siblings(n, elem) {
		var matched = [];

		for (; n; n = n.nextSibling) {
			if (n.nodeType === 1 && n !== elem) {
				matched.push(n);
			}
		}

		return matched;
	};

	var rneedsContext = jQuery.expr.match.needsContext;

	function nodeName(elem, name) {

		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	};
	var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, not) {
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				return !!qualifier.call(elem, i, elem) !== not;
			});
		}

		// Single element
		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return elem === qualifier !== not;
			});
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if (typeof qualifier !== "string") {
			return jQuery.grep(elements, function (elem) {
				return indexOf.call(qualifier, elem) > -1 !== not;
			});
		}

		// Simple selector that can be filtered directly, removing non-Elements
		if (risSimple.test(qualifier)) {
			return jQuery.filter(qualifier, elements, not);
		}

		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter(qualifier, elements);
		return jQuery.grep(elements, function (elem) {
			return indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1;
		});
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		if (elems.length === 1 && elem.nodeType === 1) {
			return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
		}

		return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
			return elem.nodeType === 1;
		}));
	};

	jQuery.fn.extend({
		find: function find(selector) {
			var i,
			    ret,
			    len = this.length,
			    self = this;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			ret = this.pushStack([]);

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			return len > 1 ? jQuery.uniqueSort(ret) : ret;
		},
		filter: function filter(selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function not(selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function is(selector) {
			return !!winnow(this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
		}
	});

	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,


	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	    init = jQuery.fn.init = function (selector, context, root) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if (!selector) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if (typeof selector === "string") {
			if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [null, selector, null];
			} else {
				match = rquickExpr.exec(selector);
			}

			// Match html or make sure no context is specified for #id
			if (match && (match[1] || !context)) {

				// HANDLE: $(html) -> $(array)
				if (match[1]) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

					// HANDLE: $(html, props)
					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
						for (match in context) {

							// Properties of context are called as methods if possible
							if (jQuery.isFunction(this[match])) {
								this[match](context[match]);

								// ...and otherwise set as attributes
							} else {
								this.attr(match, context[match]);
							}
						}
					}

					return this;

					// HANDLE: $(#id)
				} else {
					elem = document.getElementById(match[2]);

					if (elem) {

						// Inject the element directly into the jQuery object
						this[0] = elem;
						this.length = 1;
					}
					return this;
				}

				// HANDLE: $(expr, $(...))
			} else if (!context || context.jquery) {
				return (context || root).find(selector);

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor(context).find(selector);
			}

			// HANDLE: $(DOMElement)
		} else if (selector.nodeType) {
			this[0] = selector;
			this.length = 1;
			return this;

			// HANDLE: $(function)
			// Shortcut for document ready
		} else if (jQuery.isFunction(selector)) {
			return root.ready !== undefined ? root.ready(selector) :

			// Execute immediately if ready is not present
			selector(jQuery);
		}

		return jQuery.makeArray(selector, this);
	};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery(document);

	var rparentsprev = /^(?:parents|prev(?:Until|All))/,


	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.fn.extend({
		has: function has(target) {
			var targets = jQuery(target, this),
			    l = targets.length;

			return this.filter(function () {
				var i = 0;
				for (; i < l; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function closest(selectors, context) {
			var cur,
			    i = 0,
			    l = this.length,
			    matched = [],
			    targets = typeof selectors !== "string" && jQuery(selectors);

			// Positional selectors never match, since there's no _selection_ context
			if (!rneedsContext.test(selectors)) {
				for (; i < l; i++) {
					for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

						// Always skip document fragments
						if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

							matched.push(cur);
							break;
						}
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
		},

		// Determine the position of an element within the set
		index: function index(elem) {

			// No argument, return index in parent
			if (!elem) {
				return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if (typeof elem === "string") {
				return indexOf.call(jQuery(elem), this[0]);
			}

			// Locate the position of the desired element
			return indexOf.call(this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem);
		},

		add: function add(selector, context) {
			return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
		},

		addBack: function addBack(selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
		}
	});

	function sibling(cur, dir) {
		while ((cur = cur[dir]) && cur.nodeType !== 1) {}
		return cur;
	}

	jQuery.each({
		parent: function parent(elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function parents(elem) {
			return dir(elem, "parentNode");
		},
		parentsUntil: function parentsUntil(elem, i, until) {
			return dir(elem, "parentNode", until);
		},
		next: function next(elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function prev(elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function nextAll(elem) {
			return dir(elem, "nextSibling");
		},
		prevAll: function prevAll(elem) {
			return dir(elem, "previousSibling");
		},
		nextUntil: function nextUntil(elem, i, until) {
			return dir(elem, "nextSibling", until);
		},
		prevUntil: function prevUntil(elem, i, until) {
			return dir(elem, "previousSibling", until);
		},
		siblings: function siblings(elem) {
			return _siblings((elem.parentNode || {}).firstChild, elem);
		},
		children: function children(elem) {
			return _siblings(elem.firstChild);
		},
		contents: function contents(elem) {
			if (nodeName(elem, "iframe")) {
				return elem.contentDocument;
			}

			// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
			// Treat the template element as a regular one in browsers that
			// don't support it.
			if (nodeName(elem, "template")) {
				elem = elem.content || elem;
			}

			return jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var matched = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				matched = jQuery.filter(selector, matched);
			}

			if (this.length > 1) {

				// Remove duplicates
				if (!guaranteedUnique[name]) {
					jQuery.uniqueSort(matched);
				}

				// Reverse order for parents* and prev-derivatives
				if (rparentsprev.test(name)) {
					matched.reverse();
				}
			}

			return this.pushStack(matched);
		};
	});
	var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

	// Convert String-formatted options into Object-formatted ones
	function createOptions(options) {
		var object = {};
		jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	/*
  * Create a callback list using the following parameters:
  *
  *	options: an optional list of space-separated options that will change how
  *			the callback list behaves or a more traditional option object
  *
  * By default a callback list will act like an event callback list and can be
  * "fired" multiple times.
  *
  * Possible options:
  *
  *	once:			will ensure the callback list can only be fired once (like a Deferred)
  *
  *	memory:			will keep track of previous values and will call any callback added
  *					after the list has been fired right away with the latest "memorized"
  *					values (like a Deferred)
  *
  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
  *
  *	stopOnFalse:	interrupt callings when a callback returns false
  *
  */
	jQuery.Callbacks = function (options) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

		var // Flag to know if list is currently firing
		firing,


		// Last fire value for non-forgettable lists
		memory,


		// Flag to know if list was already fired
		_fired,


		// Flag to prevent firing
		_locked,


		// Actual callback list
		list = [],


		// Queue of execution data for repeatable lists
		queue = [],


		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,


		// Fire callbacks
		fire = function fire() {

			// Enforce single-firing
			_locked = _locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			_fired = firing = true;
			for (; queue.length; firingIndex = -1) {
				memory = queue.shift();
				while (++firingIndex < list.length) {

					// Run callback and check for early termination
					if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if (!options.memory) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if (_locked) {

				// Keep an empty list if we have data for future add calls
				if (memory) {
					list = [];

					// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},


		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function add() {
				if (list) {

					// If we have memory from a past run, we should fire after adding
					if (memory && !firing) {
						firingIndex = list.length - 1;
						queue.push(memory);
					}

					(function add(args) {
						jQuery.each(args, function (_, arg) {
							if (jQuery.isFunction(arg)) {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && jQuery.type(arg) !== "string") {

								// Inspect recursively
								add(arg);
							}
						});
					})(arguments);

					if (memory && !firing) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function remove() {
				jQuery.each(arguments, function (_, arg) {
					var index;
					while ((index = jQuery.inArray(arg, list, index)) > -1) {
						list.splice(index, 1);

						// Handle firing indexes
						if (index <= firingIndex) {
							firingIndex--;
						}
					}
				});
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function has(fn) {
				return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function empty() {
				if (list) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function disable() {
				_locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function disabled() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function lock() {
				_locked = queue = [];
				if (!memory && !firing) {
					list = memory = "";
				}
				return this;
			},
			locked: function locked() {
				return !!_locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function fireWith(context, args) {
				if (!_locked) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					queue.push(args);
					if (!firing) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function fire() {
				self.fireWith(this, arguments);
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function fired() {
				return !!_fired;
			}
		};

		return self;
	};

	function Identity(v) {
		return v;
	}
	function Thrower(ex) {
		throw ex;
	}

	function adoptValue(value, resolve, reject, noValue) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if (value && jQuery.isFunction(method = value.promise)) {
				method.call(value).done(resolve).fail(reject);

				// Other thenables
			} else if (value && jQuery.isFunction(method = value.then)) {
				method.call(value, resolve, reject);

				// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply(undefined, [value].slice(noValue));
			}

			// For Promises/A+, convert exceptions into rejections
			// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
			// Deferred#then to conditionally suppress rejection.
		} catch (value) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply(undefined, [value]);
		}
	}

	jQuery.extend({

		Deferred: function Deferred(func) {
			var tuples = [

			// action, add listener, callbacks,
			// ... .then handlers, argument index, [final state]
			["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
			    _state = "pending",
			    _promise = {
				state: function state() {
					return _state;
				},
				always: function always() {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				"catch": function _catch(fn) {
					return _promise.then(null, fn);
				},

				// Keep pipe for back-compat
				pipe: function pipe() /* fnDone, fnFail, fnProgress */{
					var fns = arguments;

					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[tuple[1]](function () {
								var returned = fn && fn.apply(this, arguments);
								if (returned && jQuery.isFunction(returned.promise)) {
									returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
								} else {
									newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
								}
							});
						});
						fns = null;
					}).promise();
				},
				then: function then(onFulfilled, onRejected, onProgress) {
					var maxDepth = 0;
					function resolve(depth, deferred, handler, special) {
						return function () {
							var that = this,
							    args = arguments,
							    mightThrow = function mightThrow() {
								var returned, then;

								// Support: Promises/A+ section 2.3.3.3.3
								// https://promisesaplus.com/#point-59
								// Ignore double-resolution attempts
								if (depth < maxDepth) {
									return;
								}

								returned = handler.apply(that, args);

								// Support: Promises/A+ section 2.3.1
								// https://promisesaplus.com/#point-48
								if (returned === deferred.promise()) {
									throw new TypeError("Thenable self-resolution");
								}

								// Support: Promises/A+ sections 2.3.3.1, 3.5
								// https://promisesaplus.com/#point-54
								// https://promisesaplus.com/#point-75
								// Retrieve `then` only once
								then = returned && (

								// Support: Promises/A+ section 2.3.4
								// https://promisesaplus.com/#point-64
								// Only check objects and functions for thenability
								(typeof returned === "undefined" ? "undefined" : _typeof(returned)) === "object" || typeof returned === "function") && returned.then;

								// Handle a returned thenable
								if (jQuery.isFunction(then)) {

									// Special processors (notify) just wait for resolution
									if (special) {
										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

										// Normal processors (resolve) also hook into progress
									} else {

										// ...and disregard older resolution values
										maxDepth++;

										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
									}

									// Handle all other returned values
								} else {

									// Only substitute handlers pass on context
									// and multiple values (non-spec behavior)
									if (handler !== Identity) {
										that = undefined;
										args = [returned];
									}

									// Process the value(s)
									// Default process is resolve
									(special || deferred.resolveWith)(that, args);
								}
							},


							// Only normal processors (resolve) catch and reject exceptions
							process = special ? mightThrow : function () {
								try {
									mightThrow();
								} catch (e) {

									if (jQuery.Deferred.exceptionHook) {
										jQuery.Deferred.exceptionHook(e, process.stackTrace);
									}

									// Support: Promises/A+ section 2.3.3.3.4.1
									// https://promisesaplus.com/#point-61
									// Ignore post-resolution exceptions
									if (depth + 1 >= maxDepth) {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if (handler !== Thrower) {
											that = undefined;
											args = [e];
										}

										deferred.rejectWith(that, args);
									}
								}
							};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if (depth) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if (jQuery.Deferred.getStackHook) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout(process);
							}
						};
					}

					return jQuery.Deferred(function (newDefer) {

						// progress_handlers.add( ... )
						tuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

						// fulfilled_handlers.add( ... )
						tuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));

						// rejected_handlers.add( ... )
						tuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower));
					}).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function promise(obj) {
					return obj != null ? jQuery.extend(obj, _promise) : _promise;
				}
			},
			    deferred = {};

			// Add list-specific methods
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				    stateString = tuple[5];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				_promise[tuple[1]] = list.add;

				// Handle state
				if (stateString) {
					list.add(function () {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						_state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[3 - i][2].disable,

					// progress_callbacks.lock
					tuples[0][2].lock);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add(tuple[3].fire);

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			// Make the deferred a promise
			_promise.promise(deferred);

			// Call given func if any
			if (func) {
				func.call(deferred, deferred);
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function when(singleValue) {
			var

			// count of uncompleted subordinates
			remaining = arguments.length,


			// count of unprocessed arguments
			i = remaining,


			// subordinate fulfillment data
			resolveContexts = Array(i),
			    resolveValues = _slice.call(arguments),


			// the master Deferred
			master = jQuery.Deferred(),


			// subordinate callback factory
			updateFunc = function updateFunc(i) {
				return function (value) {
					resolveContexts[i] = this;
					resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;
					if (! --remaining) {
						master.resolveWith(resolveContexts, resolveValues);
					}
				};
			};

			// Single- and empty arguments are adopted like Promise.resolve
			if (remaining <= 1) {
				adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if (master.state() === "pending" || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while (i--) {
				adoptValue(resolveValues[i], updateFunc(i), master.reject);
			}

			return master.promise();
		}
	});

	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function (error, stack) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
			window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
		}
	};

	jQuery.readyException = function (error) {
		window.setTimeout(function () {
			throw error;
		});
	};

	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function (fn) {

		readyList.then(fn)

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch(function (error) {
			jQuery.readyException(error);
		});

		return this;
	};

	jQuery.extend({

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function ready(wait) {

			// Abort if there are pending holds or we're already ready
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith(document, [jQuery]);
		}
	});

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener("DOMContentLoaded", completed);
		window.removeEventListener("load", completed);
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout(jQuery.ready);
	} else {

		// Use the handy event callback
		document.addEventListener("DOMContentLoaded", completed);

		// A fallback to window.onload, that will always work
		window.addEventListener("load", completed);
	}

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    len = elems.length,
		    bulk = key == null;

		// Sets many values
		if (jQuery.type(key) === "object") {
			chainable = true;
			for (i in key) {
				access(elems, fn, i, key[i], true, emptyGet, raw);
			}

			// Sets one value
		} else if (value !== undefined) {
			chainable = true;

			if (!jQuery.isFunction(value)) {
				raw = true;
			}

			if (bulk) {

				// Bulk operations run against the entire set
				if (raw) {
					fn.call(elems, value);
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function fn(elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < len; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		if (chainable) {
			return elems;
		}

		// Gets
		if (bulk) {
			return fn.call(elems);
		}

		return len ? fn(elems[0], key) : emptyGet;
	};
	var acceptData = function acceptData(owner) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
	};

	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function cache(owner) {

			// Check if the owner object already has a cache
			var value = owner[this.expando];

			// If not, create one
			if (!value) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if (acceptData(owner)) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if (owner.nodeType) {
						owner[this.expando] = value;

						// Otherwise secure it in a non-enumerable property
						// configurable must be true to allow the property to be
						// deleted when data is removed
					} else {
						Object.defineProperty(owner, this.expando, {
							value: value,
							configurable: true
						});
					}
				}
			}

			return value;
		},
		set: function set(owner, data, value) {
			var prop,
			    cache = this.cache(owner);

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if (typeof data === "string") {
				cache[jQuery.camelCase(data)] = value;

				// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for (prop in data) {
					cache[jQuery.camelCase(prop)] = data[prop];
				}
			}
			return cache;
		},
		get: function get(owner, key) {
			return key === undefined ? this.cache(owner) :

			// Always use camelCase key (gh-2257)
			owner[this.expando] && owner[this.expando][jQuery.camelCase(key)];
		},
		access: function access(owner, key, value) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if (key === undefined || key && typeof key === "string" && value === undefined) {

				return this.get(owner, key);
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set(owner, key, value);

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function remove(owner, key) {
			var i,
			    cache = owner[this.expando];

			if (cache === undefined) {
				return;
			}

			if (key !== undefined) {

				// Support array or space separated string of keys
				if (Array.isArray(key)) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map(jQuery.camelCase);
				} else {
					key = jQuery.camelCase(key);

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
				}

				i = key.length;

				while (i--) {
					delete cache[key[i]];
				}
			}

			// Remove the expando if there's no more data
			if (key === undefined || jQuery.isEmptyObject(cache)) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if (owner.nodeType) {
					owner[this.expando] = undefined;
				} else {
					delete owner[this.expando];
				}
			}
		},
		hasData: function hasData(owner) {
			var cache = owner[this.expando];
			return cache !== undefined && !jQuery.isEmptyObject(cache);
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();

	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /[A-Z]/g;

	function getData(data) {
		if (data === "true") {
			return true;
		}

		if (data === "false") {
			return false;
		}

		if (data === "null") {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if (data === +data + "") {
			return +data;
		}

		if (rbrace.test(data)) {
			return JSON.parse(data);
		}

		return data;
	}

	function dataAttr(elem, key, data) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if (data === undefined && elem.nodeType === 1) {
			name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = getData(data);
				} catch (e) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set(elem, key, data);
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function hasData(elem) {
			return dataUser.hasData(elem) || dataPriv.hasData(elem);
		},

		data: function data(elem, name, _data) {
			return dataUser.access(elem, name, _data);
		},

		removeData: function removeData(elem, name) {
			dataUser.remove(elem, name);
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function _data(elem, name, data) {
			return dataPriv.access(elem, name, data);
		},

		_removeData: function _removeData(elem, name) {
			dataPriv.remove(elem, name);
		}
	});

	jQuery.fn.extend({
		data: function data(key, value) {
			var i,
			    name,
			    data,
			    elem = this[0],
			    attrs = elem && elem.attributes;

			// Gets all values
			if (key === undefined) {
				if (this.length) {
					data = dataUser.get(elem);

					if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
						i = attrs.length;
						while (i--) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = jQuery.camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						dataPriv.set(elem, "hasDataAttrs", true);
					}
				}

				return data;
			}

			// Sets multiple values
			if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
				return this.each(function () {
					dataUser.set(this, key);
				});
			}

			return access(this, function (value) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if (elem && value === undefined) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get(elem, key);
					if (data !== undefined) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr(elem, key);
					if (data !== undefined) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each(function () {

					// We always store the camelCased key
					dataUser.set(this, key, value);
				});
			}, null, value, arguments.length > 1, null, true);
		},

		removeData: function removeData(key) {
			return this.each(function () {
				dataUser.remove(this, key);
			});
		}
	});

	jQuery.extend({
		queue: function queue(elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = dataPriv.get(elem, type);

				// Speed up dequeue by getting out quickly if this is just a lookup
				if (data) {
					if (!queue || Array.isArray(data)) {
						queue = dataPriv.access(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function dequeue(elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			    startLength = queue.length,
			    fn = queue.shift(),
			    hooks = jQuery._queueHooks(elem, type),
			    next = function next() {
				jQuery.dequeue(elem, type);
			};

			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function _queueHooks(elem, type) {
			var key = type + "queueHooks";
			return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					dataPriv.remove(elem, [type + "queue", key]);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function queue(type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);

				// Ensure a hooks for this queue
				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function dequeue(type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function clearQueue(type) {
			return this.queue(type || "fx", []);
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function promise(type, obj) {
			var tmp,
			    count = 1,
			    defer = jQuery.Deferred(),
			    elements = this,
			    i = this.length,
			    resolve = function resolve() {
				if (! --count) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = dataPriv.get(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" || elem.style.display === "" &&

		// Otherwise, check computed style
		// Support: Firefox <=43 - 45
		// Disconnected elements can have computed display: none, so first confirm that elem is
		// in the document.
		jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
	};

	var swap = function swap(elem, options, callback, args) {
		var ret,
		    name,
		    old = {};

		// Remember the old values, and insert the new ones
		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		// Revert the old values
		for (name in options) {
			elem.style[name] = old[name];
		}

		return ret;
	};

	function adjustCSS(elem, prop, valueParts, tween) {
		var adjusted,
		    scale = 1,
		    maxIterations = 20,
		    currentValue = tween ? function () {
			return tween.cur();
		} : function () {
			return jQuery.css(elem, prop, "");
		},
		    initial = currentValue(),
		    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


		// Starting value computation is required for potential unit mismatches
		initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

		if (initialInUnit && initialInUnit[3] !== unit) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[3];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style(elem, prop, initialInUnit + unit);

				// Update scale, tolerating zero or NaN from tween.cur()
				// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
		}

		if (valueParts) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
			if (tween) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}

	var defaultDisplayMap = {};

	function getDefaultDisplay(elem) {
		var temp,
		    doc = elem.ownerDocument,
		    nodeName = elem.nodeName,
		    display = defaultDisplayMap[nodeName];

		if (display) {
			return display;
		}

		temp = doc.body.appendChild(doc.createElement(nodeName));
		display = jQuery.css(temp, "display");

		temp.parentNode.removeChild(temp);

		if (display === "none") {
			display = "block";
		}
		defaultDisplayMap[nodeName] = display;

		return display;
	}

	function showHide(elements, show) {
		var display,
		    elem,
		    values = [],
		    index = 0,
		    length = elements.length;

		// Determine new display value for elements that need to change
		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			display = elem.style.display;
			if (show) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if (display === "none") {
					values[index] = dataPriv.get(elem, "display") || null;
					if (!values[index]) {
						elem.style.display = "";
					}
				}
				if (elem.style.display === "" && isHiddenWithinTree(elem)) {
					values[index] = getDefaultDisplay(elem);
				}
			} else {
				if (display !== "none") {
					values[index] = "none";

					// Remember what we're overwriting
					dataPriv.set(elem, "display", display);
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for (index = 0; index < length; index++) {
			if (values[index] != null) {
				elements[index].style.display = values[index];
			}
		}

		return elements;
	}

	jQuery.fn.extend({
		show: function show() {
			return showHide(this, true);
		},
		hide: function hide() {
			return showHide(this);
		},
		toggle: function toggle(state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHiddenWithinTree(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});
	var rcheckableType = /^(?:checkbox|radio)$/i;

	var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;

	var rscriptType = /^$|\/(?:java|ecma)script/i;

	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [1, "<select multiple='multiple'>", "</select>"],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [1, "<table>", "</table>"],
		col: [2, "<table><colgroup>", "</colgroup></table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		_default: [0, "", ""]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll(context, tag) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if (typeof context.getElementsByTagName !== "undefined") {
			ret = context.getElementsByTagName(tag || "*");
		} else if (typeof context.querySelectorAll !== "undefined") {
			ret = context.querySelectorAll(tag || "*");
		} else {
			ret = [];
		}

		if (tag === undefined || tag && nodeName(context, tag)) {
			return jQuery.merge([context], ret);
		}

		return ret;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval(elems, refElements) {
		var i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
		}
	}

	var rhtml = /<|&#?\w+;/;

	function buildFragment(elems, context, scripts, selection, ignored) {
		var elem,
		    tmp,
		    tag,
		    wrap,
		    contains,
		    j,
		    fragment = context.createDocumentFragment(),
		    nodes = [],
		    i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			elem = elems[i];

			if (elem || elem === 0) {

				// Add nodes directly
				if (jQuery.type(elem) === "object") {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

					// Convert non-html into a text node
				} else if (!rhtml.test(elem)) {
					nodes.push(context.createTextNode(elem));

					// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild(context.createElement("div"));

					// Deserialize a standard representation
					tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
					wrap = wrapMap[tag] || wrapMap._default;
					tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while (j--) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, tmp.childNodes);

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while (elem = nodes[i++]) {

			// Skip elements already in the context collection (trac-4087)
			if (selection && jQuery.inArray(elem, selection) > -1) {
				if (ignored) {
					ignored.push(elem);
				}
				continue;
			}

			contains = jQuery.contains(elem.ownerDocument, elem);

			// Append to fragment
			tmp = getAll(fragment.appendChild(elem), "script");

			// Preserve script evaluation history
			if (contains) {
				setGlobalEval(tmp);
			}

			// Capture executables
			if (scripts) {
				j = 0;
				while (elem = tmp[j++]) {
					if (rscriptType.test(elem.type || "")) {
						scripts.push(elem);
					}
				}
			}
		}

		return fragment;
	}

	(function () {
		var fragment = document.createDocumentFragment(),
		    div = fragment.appendChild(document.createElement("div")),
		    input = document.createElement("input");

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute("type", "radio");
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");

		div.appendChild(input);

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	})();
	var documentElement = document.documentElement;

	var rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) {}
	}

	function _on(elem, types, selector, data, fn, one) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

			// ( types-Object, selector, data )
			if (typeof selector !== "string") {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for (type in types) {
				_on(elem, type, selector, data, types[type], one);
			}
			return elem;
		}

		if (data == null && fn == null) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if (fn == null) {
			if (typeof selector === "string") {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if (fn === false) {
			fn = returnFalse;
		} else if (!fn) {
			return elem;
		}

		if (one === 1) {
			origFn = fn;
			fn = function fn(event) {

				// Can use an empty set, since event contains the info
				jQuery().off(event);
				return origFn.apply(this, arguments);
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
		}
		return elem.each(function () {
			jQuery.event.add(this, types, fn, data, selector);
		});
	}

	/*
  * Helper functions for managing events -- not part of the public interface.
  * Props to Dean Edwards' addEvent library for many of the ideas.
  */
	jQuery.event = {

		global: {},

		add: function add(elem, types, handler, data, selector) {

			var handleObjIn,
			    eventHandle,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.get(elem);

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if (!elemData) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if (selector) {
				jQuery.find.matchesSelector(documentElement, selector);
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// There *must* be a type, no attaching namespace-only handlers
				if (!type) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[type] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = (selector ? special.delegateType : special.bindType) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[type] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				// Init the event handler queue if we're the first
				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[type] = true;
			}
		},

		// Detach an event or set of events from an element
		remove: function remove(elem, types, handler, selector, mappedTypes) {

			var j,
			    origCount,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// Unbind all events (on this namespace, if provided) for the element
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				// Remove matching events
				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if (origCount && !handlers.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			// Remove data and the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				dataPriv.remove(elem, "handle events");
			}
		},

		dispatch: function dispatch(nativeEvent) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix(nativeEvent);

			var i,
			    j,
			    ret,
			    matched,
			    handleObj,
			    handlerQueue,
			    args = new Array(arguments.length),
			    handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
			    special = jQuery.event.special[event.type] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;

			for (i = 1; i < arguments.length; i++) {
				args[i] = arguments[i];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function handlers(event, _handlers) {
			var i,
			    handleObj,
			    sel,
			    matchedHandlers,
			    matchedSelectors,
			    handlerQueue = [],
			    delegateCount = _handlers.delegateCount,
			    cur = event.target;

			// Find delegate handlers
			if (delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!(event.type === "click" && event.button >= 1)) {

				for (; cur !== this; cur = cur.parentNode || this) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
						matchedHandlers = [];
						matchedSelectors = {};
						for (i = 0; i < delegateCount; i++) {
							handleObj = _handlers[i];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if (matchedSelectors[sel] === undefined) {
								matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
							}
							if (matchedSelectors[sel]) {
								matchedHandlers.push(handleObj);
							}
						}
						if (matchedHandlers.length) {
							handlerQueue.push({ elem: cur, handlers: matchedHandlers });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if (delegateCount < _handlers.length) {
				handlerQueue.push({ elem: cur, handlers: _handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		addProp: function addProp(name, hook) {
			Object.defineProperty(jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: jQuery.isFunction(hook) ? function () {
					if (this.originalEvent) {
						return hook(this.originalEvent);
					}
				} : function () {
					if (this.originalEvent) {
						return this.originalEvent[name];
					}
				},

				set: function set(value) {
					Object.defineProperty(this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					});
				}
			});
		},

		fix: function fix(originalEvent) {
			return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function trigger() {
					if (this !== safeActiveElement() && this.focus) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function trigger() {
					if (this === safeActiveElement() && this.blur) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function trigger() {
					if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function _default(event) {
					return nodeName(event.target, "a");
				}
			},

			beforeunload: {
				postDispatch: function postDispatch(event) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function (elem, type, handle) {

		// This "if" is needed for plain objects
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle);
		}
	};

	jQuery.Event = function (src, props) {

		// Allow instantiation without the 'new' keyword
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

			// Support: Android <=2.3 only
			src.returnValue === false ? returnTrue : returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if (props) {
			jQuery.extend(this, props);
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[jQuery.expando] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function preventDefault() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if (e && !this.isSimulated) {
				e.preventDefault();
			}
		},
		stopPropagation: function stopPropagation() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function stopImmediatePropagation() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each({
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function which(event) {
			var button = event.button;

			// Add which for key events
			if (event.which == null && rkeyEvent.test(event.type)) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
				if (button & 1) {
					return 1;
				}

				if (button & 2) {
					return 3;
				}

				if (button & 4) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp);

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function handle(event) {
				var ret,
				    target = this,
				    related = event.relatedTarget,
				    handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if (!related || related !== target && !jQuery.contains(target, related)) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	jQuery.fn.extend({

		on: function on(types, selector, data, fn) {
			return _on(this, types, selector, data, fn);
		},
		one: function one(types, selector, data, fn) {
			return _on(this, types, selector, data, fn, 1);
		},
		off: function off(types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this;
			}
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

				// ( types-object [, selector] )
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		}
	});

	var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,


	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,


	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rscriptTypeMasked = /^true\/(.*)/,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget(elem, content) {
		if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

			return jQuery(">tbody", elem)[0] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript(elem) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		var match = rscriptTypeMasked.exec(elem.type);

		if (match) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	function cloneCopyEvent(src, dest) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if (dest.nodeType !== 1) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if (dataPriv.hasData(src)) {
			pdataOld = dataPriv.access(src);
			pdataCur = dataPriv.set(dest, pdataOld);
			events = pdataOld.events;

			if (events) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for (type in events) {
					for (i = 0, l = events[type].length; i < l; i++) {
						jQuery.event.add(dest, type, events[type][i]);
					}
				}
			}
		}

		// 2. Copy user data
		if (dataUser.hasData(src)) {
			udataOld = dataUser.access(src);
			udataCur = jQuery.extend({}, udataOld);

			dataUser.set(dest, udataCur);
		}
	}

	// Fix IE bugs, see support tests
	function fixInput(src, dest) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if (nodeName === "input" && rcheckableType.test(src.type)) {
			dest.checked = src.checked;

			// Fails to return the selected option to the default selected state when cloning options
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip(collection, args, callback, ignored) {

		// Flatten any nested arrays
		args = concat.apply([], args);

		var fragment,
		    first,
		    scripts,
		    hasScripts,
		    node,
		    doc,
		    i = 0,
		    l = collection.length,
		    iNoClone = l - 1,
		    value = args[0],
		    isFunction = jQuery.isFunction(value);

		// We can't cloneNode fragments that contain checked, in WebKit
		if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
			return collection.each(function (index) {
				var self = collection.eq(index);
				if (isFunction) {
					args[0] = value.call(this, index, self.html());
				}
				domManip(self, args, callback, ignored);
			});
		}

		if (l) {
			fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
			first = fragment.firstChild;

			if (fragment.childNodes.length === 1) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if (first || ignored) {
				scripts = jQuery.map(getAll(fragment, "script"), disableScript);
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for (; i < l; i++) {
					node = fragment;

					if (i !== iNoClone) {
						node = jQuery.clone(node, true, true);

						// Keep references to cloned scripts for later restoration
						if (hasScripts) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge(scripts, getAll(node, "script"));
						}
					}

					callback.call(collection[i], node, i);
				}

				if (hasScripts) {
					doc = scripts[scripts.length - 1].ownerDocument;

					// Reenable scripts
					jQuery.map(scripts, restoreScript);

					// Evaluate executable scripts on first document insertion
					for (i = 0; i < hasScripts; i++) {
						node = scripts[i];
						if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {

							if (node.src) {

								// Optional AJAX dependency, but won't run scripts if not present
								if (jQuery._evalUrl) {
									jQuery._evalUrl(node.src);
								}
							} else {
								DOMEval(node.textContent.replace(rcleanScript, ""), doc);
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function _remove(elem, selector, keepData) {
		var node,
		    nodes = selector ? jQuery.filter(selector, elem) : elem,
		    i = 0;

		for (; (node = nodes[i]) != null; i++) {
			if (!keepData && node.nodeType === 1) {
				jQuery.cleanData(getAll(node));
			}

			if (node.parentNode) {
				if (keepData && jQuery.contains(node.ownerDocument, node)) {
					setGlobalEval(getAll(node, "script"));
				}
				node.parentNode.removeChild(node);
			}
		}

		return elem;
	}

	jQuery.extend({
		htmlPrefilter: function htmlPrefilter(html) {
			return html.replace(rxhtmlTag, "<$1></$2>");
		},

		clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
			var i,
			    l,
			    srcElements,
			    destElements,
			    clone = elem.cloneNode(true),
			    inPage = jQuery.contains(elem.ownerDocument, elem);

			// Fix IE cloning issues
			if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll(clone);
				srcElements = getAll(elem);

				for (i = 0, l = srcElements.length; i < l; i++) {
					fixInput(srcElements[i], destElements[i]);
				}
			}

			// Copy the events from the original to the clone
			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0, l = srcElements.length; i < l; i++) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			// Preserve script evaluation history
			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function cleanData(elems) {
			var data,
			    elem,
			    type,
			    special = jQuery.event.special,
			    i = 0;

			for (; (elem = elems[i]) !== undefined; i++) {
				if (acceptData(elem)) {
					if (data = elem[dataPriv.expando]) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataPriv.expando] = undefined;
					}
					if (elem[dataUser.expando]) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataUser.expando] = undefined;
					}
				}
			}
		}
	});

	jQuery.fn.extend({
		detach: function detach(selector) {
			return _remove(this, selector, true);
		},

		remove: function remove(selector) {
			return _remove(this, selector);
		},

		text: function text(value) {
			return access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().each(function () {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						this.textContent = value;
					}
				});
			}, null, value, arguments.length);
		},

		append: function append() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function prepend() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function before() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function after() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		empty: function empty() {
			var elem,
			    i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {

					// Prevent memory leaks
					jQuery.cleanData(getAll(elem, false));

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function clone(dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function html(value) {
			return access(this, function (value) {
				var elem = this[0] || {},
				    i = 0,
				    l = this.length;

				if (value === undefined && elem.nodeType === 1) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = jQuery.htmlPrefilter(value);

					try {
						for (; i < l; i++) {
							elem = this[i] || {};

							// Remove element nodes and prevent memory leaks
							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function replaceWith() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip(this, arguments, function (elem) {
				var parent = this.parentNode;

				if (jQuery.inArray(this, ignored) < 0) {
					jQuery.cleanData(getAll(this));
					if (parent) {
						parent.replaceChild(elem, this);
					}
				}

				// Force callback invocation
			}, ignored);
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			    ret = [],
			    insert = jQuery(selector),
			    last = insert.length - 1,
			    i = 0;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});
	var rmargin = /^margin/;

	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles = function getStyles(elem) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if (!view || !view.opener) {
			view = window;
		}

		return view.getComputedStyle(elem);
	};

	(function () {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if (!div) {
				return;
			}

			div.style.cssText = "box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild(container);

			var divStyle = window.getComputedStyle(div);
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild(container);

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		var pixelPositionVal,
		    boxSizingReliableVal,
		    pixelMarginRightVal,
		    reliableMarginLeftVal,
		    container = document.createElement("div"),
		    div = document.createElement("div");

		// Finish early in limited (non-browser) environments
		if (!div.style) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
		container.appendChild(div);

		jQuery.extend(support, {
			pixelPosition: function pixelPosition() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function boxSizingReliable() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function pixelMarginRight() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function reliableMarginLeft() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		});
	})();

	function curCSS(elem, name, computed) {
		var width,
		    minWidth,
		    maxWidth,
		    ret,


		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

		computed = computed || getStyles(elem);

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if (computed) {
			ret = computed.getPropertyValue(name) || computed[name];

			if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
				ret = jQuery.style(elem, name);
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" : ret;
	}

	function addGetHookIf(conditionFn, hookFn) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function get() {
				if (conditionFn()) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return (this.get = hookFn).apply(this, arguments);
			}
		};
	}

	var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    rcustomProp = /^--/,
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},
	    cssPrefixes = ["Webkit", "Moz", "ms"],
	    emptyStyle = document.createElement("div").style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName(name) {

		// Shortcut for names that are not vendor prefixed
		if (name in emptyStyle) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
		    i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in emptyStyle) {
				return name;
			}
		}
	}

	// Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.
	function finalPropName(name) {
		var ret = jQuery.cssProps[name];
		if (!ret) {
			ret = jQuery.cssProps[name] = vendorPropName(name) || name;
		}
		return ret;
	}

	function setPositiveNumber(elem, value, subtract) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec(value);
		return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
		var i,
		    val = 0;

		// If we already have the right measurement, avoid augmentation
		if (extra === (isBorderBox ? "border" : "content")) {
			i = 4;

			// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}

		for (; i < 4; i += 2) {

			// Both box models exclude margin, so add it if we want it
			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true, styles);
			}

			if (isBorderBox) {

				// border-box includes padding, so remove it if we want content
				if (extra === "content") {
					val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				// At this point, extra isn't border nor margin, so remove border
				if (extra !== "margin") {
					val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				// At this point, extra isn't content nor padding, so add border
				if (extra !== "padding") {
					val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		return val;
	}

	function getWidthOrHeight(elem, name, extra) {

		// Start with computed style
		var valueIsBorderBox,
		    styles = getStyles(elem),
		    val = curCSS(elem, name, styles),
		    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

		// Computed unit is not pixels. Stop here and return.
		if (rnumnonpx.test(val)) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

		// Fall back to offsetWidth/Height when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		if (val === "auto") {
			val = elem["offset" + name[0].toUpperCase() + name.slice(1)];
		}

		// Normalize "", auto, and prepare for extra
		val = parseFloat(val) || 0;

		// Use the active box-sizing model to add/subtract irrelevant styles
		return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
	}

	jQuery.extend({

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function get(elem, computed) {
					if (computed) {

						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function style(elem, name, value, extra) {

			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			// Make sure that we're working with the right name
			var ret,
			    type,
			    hooks,
			    origName = jQuery.camelCase(name),
			    isCustomProp = rcustomProp.test(name),
			    style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// Check if we're setting a value
			if (value !== undefined) {
				type = typeof value === "undefined" ? "undefined" : _typeof(value);

				// Convert "+=" or "-=" to relative numbers (#7345)
				if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
					value = adjustCSS(elem, name, ret);

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if (value == null || value !== value) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if (type === "number") {
					value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
				}

				// background-* props affect original clone's values
				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

					if (isCustomProp) {
						style.setProperty(name, value);
					} else {
						style[name] = value;
					}
				}
			} else {

				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[name];
			}
		},

		css: function css(elem, name, extra, styles) {
			var val,
			    num,
			    hooks,
			    origName = jQuery.camelCase(name),
			    isCustomProp = rcustomProp.test(name);

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			// Otherwise, if a way to get the computed value exists, use that
			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			// Convert "normal" to computed value
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || isFinite(num) ? num || 0 : val;
			}

			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function get(elem, computed, extra) {
				if (computed) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test(jQuery.css(elem, "display")) && (

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
						return getWidthOrHeight(elem, name, extra);
					}) : getWidthOrHeight(elem, name, extra);
				}
			},

			set: function set(elem, value, extra) {
				var matches,
				    styles = extra && getStyles(elem),
				    subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles);

				// Convert to pixels if value adjustment is needed
				if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {

					elem.style[name] = value;
					value = jQuery.css(elem, name);
				}

				return setPositiveNumber(elem, value, subtract);
			}
		};
	});

	jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
		if (computed) {
			return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
				return elem.getBoundingClientRect().left;
			})) + "px";
		}
	});

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function expand(value) {
				var i = 0,
				    expanded = {},


				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function css(name, value) {
			return access(this, function (elem, name, value) {
				var styles,
				    len,
				    map = {},
				    i = 0;

				if (Array.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		}
	});

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function init(elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function cur() {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function run(percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function get(tween) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
					return tween.elem[tween.prop];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css(tween.elem, tween.prop, "");

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function set(tween) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function set(tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function linear(p) {
			return p;
		},
		swing: function swing(p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};

	var fxNow,
	    inProgress,
	    rfxtypes = /^(?:toggle|show|hide)$/,
	    rrun = /queueHooks$/;

	function schedule() {
		if (inProgress) {
			if (document.hidden === false && window.requestAnimationFrame) {
				window.requestAnimationFrame(schedule);
			} else {
				window.setTimeout(schedule, jQuery.fx.interval);
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout(function () {
			fxNow = undefined;
		});
		return fxNow = jQuery.now();
	}

	// Generate parameters to create a standard animation
	function genFx(type, includeWidth) {
		var which,
		    i = 0,
		    attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
		    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
		    index = 0,
		    length = collection.length;
		for (; index < length; index++) {
			if (tween = collection[index].call(animation, prop, value)) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		var prop,
		    value,
		    toggle,
		    hooks,
		    oldfire,
		    propTween,
		    restoreDisplay,
		    display,
		    isBox = "width" in props || "height" in props,
		    anim = this,
		    orig = {},
		    style = elem.style,
		    hidden = elem.nodeType && isHiddenWithinTree(elem),
		    dataShow = dataPriv.get(elem, "fxshow");

		// Queue-skipping animations hijack the fx hooks
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {

				// Ensure the complete handler is called before this completes
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		// Detect show/hide animations
		for (prop in props) {
			value = props[prop];
			if (rfxtypes.test(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;

						// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject(props);
		if (!propTween && jQuery.isEmptyObject(orig)) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if (isBox && elem.nodeType === 1) {

			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if (restoreDisplay == null) {
				restoreDisplay = dataPriv.get(elem, "display");
			}
			display = jQuery.css(elem, "display");
			if (display === "none") {
				if (restoreDisplay) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide([elem], true);
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css(elem, "display");
					showHide([elem]);
				}
			}

			// Animate inline elements as inline-block
			if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
				if (jQuery.css(elem, "float") === "none") {

					// Restore the original display value at the end of pure show/hide animations
					if (!propTween) {
						anim.done(function () {
							style.display = restoreDisplay;
						});
						if (restoreDisplay == null) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			anim.always(function () {
				style.overflow = opts.overflow[0];
				style.overflowX = opts.overflow[1];
				style.overflowY = opts.overflow[2];
			});
		}

		// Implement show/hide animations
		propTween = false;
		for (prop in orig) {

			// General show/hide setup for this element animation
			if (!propTween) {
				if (dataShow) {
					if ("hidden" in dataShow) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if (toggle) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if (hidden) {
					showHide([elem], true);
				}

				/* eslint-disable no-loop-func */

				anim.done(function () {

					/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if (!hidden) {
						showHide([elem]);
					}
					dataPriv.remove(elem, "fxshow");
					for (prop in orig) {
						jQuery.style(elem, prop, orig[prop]);
					}
				});
			}

			// Per-property setup
			propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
			if (!(prop in dataShow)) {
				dataShow[prop] = propTween.start;
				if (hidden) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (Array.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
		    stopped,
		    index = 0,
		    length = Animation.prefilters.length,
		    deferred = jQuery.Deferred().always(function () {

			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		    tick = function tick() {
			if (stopped) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
			    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


			// Support: Android 2.3 only
			// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
			temp = remaining / animation.duration || 0,
			    percent = 1 - temp,
			    index = 0,
			    length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			// If there's more to do, yield
			if (percent < 1 && length) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if (!length) {
				deferred.notifyWith(elem, [animation, 1, 0]);
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith(elem, [animation]);
			return false;
		},
		    animation = deferred.promise({
			elem: elem,
			props: jQuery.extend({}, properties),
			opts: jQuery.extend(true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function createTween(prop, end) {
				var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
				animation.tweens.push(tween);
				return tween;
			},
			stop: function stop(gotoEnd) {
				var index = 0,


				// If we are going to the end, we want to run all the tweens
				// otherwise we skip this part
				length = gotoEnd ? animation.tweens.length : 0;
				if (stopped) {
					return this;
				}
				stopped = true;
				for (; index < length; index++) {
					animation.tweens[index].run(1);
				}

				// Resolve when we played the last frame; otherwise, reject
				if (gotoEnd) {
					deferred.notifyWith(elem, [animation, 1, 0]);
					deferred.resolveWith(elem, [animation, gotoEnd]);
				} else {
					deferred.rejectWith(elem, [animation, gotoEnd]);
				}
				return this;
			}
		}),
		    props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				if (jQuery.isFunction(result.stop)) {
					jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
				}
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		// Attach callbacks from options
		animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);

		jQuery.fx.timer(jQuery.extend(tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		}));

		return animation;
	}

	jQuery.Animation = jQuery.extend(Animation, {

		tweeners: {
			"*": [function (prop, value) {
				var tween = this.createTween(prop, value);
				adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
				return tween;
			}]
		},

		tweener: function tweener(props, callback) {
			if (jQuery.isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.match(rnothtmlwhite);
			}

			var prop,
			    index = 0,
			    length = props.length;

			for (; index < length; index++) {
				prop = props[index];
				Animation.tweeners[prop] = Animation.tweeners[prop] || [];
				Animation.tweeners[prop].unshift(callback);
			}
		},

		prefilters: [defaultPrefilter],

		prefilter: function prefilter(callback, prepend) {
			if (prepend) {
				Animation.prefilters.unshift(callback);
			} else {
				Animation.prefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		// Go to the end state if fx are off
		if (jQuery.fx.off) {
			opt.duration = 0;
		} else {
			if (typeof opt.duration !== "number") {
				if (opt.duration in jQuery.fx.speeds) {
					opt.duration = jQuery.fx.speeds[opt.duration];
				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function fadeTo(speed, to, easing, callback) {

			// Show any hidden elements after setting opacity to 0
			return this.filter(isHiddenWithinTree).css("opacity", 0).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function animate(prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			    optall = jQuery.speed(speed, easing, callback),
			    doAnimation = function doAnimation() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation(this, jQuery.extend({}, prop), optall);

				// Empty animations, or finishing resolves immediately
				if (empty || dataPriv.get(this, "finish")) {
					anim.stop(true);
				}
			};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
		},
		stop: function stop(type, clearQueue, gotoEnd) {
			var stopQueue = function stopQueue(hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				    index = type != null && type + "queueHooks",
				    timers = jQuery.timers,
				    data = dataPriv.get(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function finish(type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
				    data = dataPriv.get(this),
				    queue = data[type + "queue"],
				    hooks = data[type + "queueHooks"],
				    timers = jQuery.timers,
				    length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				// Look for any active animations, and finish them
				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				// Look for any animations in the old queue and finish them
				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				// Turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
		    i = 0,
		    timers = jQuery.timers;

		fxNow = jQuery.now();

		for (; i < timers.length; i++) {
			timer = timers[i];

			// Run the timer and safely remove it when done (allowing for external removal)
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function () {
		if (inProgress) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function () {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};

	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = window.setTimeout(next, time);
			hooks.stop = function () {
				window.clearTimeout(timeout);
			};
		});
	};

	(function () {
		var input = document.createElement("input"),
		    select = document.createElement("select"),
		    opt = select.appendChild(document.createElement("option"));

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement("input");
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();

	var boolHook,
	    attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function attr(name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function removeAttr(name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function attr(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if (typeof elem.getAttribute === "undefined") {
				return jQuery.prop(elem, name, value);
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
			}

			if (value !== undefined) {
				if (value === null) {
					jQuery.removeAttr(elem, name);
					return;
				}

				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				elem.setAttribute(name, value + "");
				return value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			ret = jQuery.find.attr(elem, name);

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function set(elem, value) {
					if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function removeAttr(elem, value) {
			var name,
			    i = 0,


			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match(rnothtmlwhite);

			if (attrNames && elem.nodeType === 1) {
				while (name = attrNames[i++]) {
					elem.removeAttribute(name);
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function set(elem, value, name) {
			if (value === false) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr(elem, name);
			} else {
				elem.setAttribute(name, name);
			}
			return name;
		}
	};

	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = function (elem, name, isXML) {
			var ret,
			    handle,
			    lowercaseName = name.toLowerCase();

			if (!isXML) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[lowercaseName];
				attrHandle[lowercaseName] = ret;
				ret = getter(elem, name, isXML) != null ? lowercaseName : null;
				attrHandle[lowercaseName] = handle;
			}
			return ret;
		};
	});

	var rfocusable = /^(?:input|select|textarea|button)$/i,
	    rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function prop(name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function removeProp(name) {
			return this.each(function () {
				delete this[jQuery.propFix[name] || name];
			});
		}
	});

	jQuery.extend({
		prop: function prop(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

				// Fix name and attach hooks
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				return elem[name] = value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			return elem[name];
		},

		propHooks: {
			tabIndex: {
				get: function get(elem) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr(elem, "tabindex");

					if (tabindex) {
						return parseInt(tabindex, 10);
					}

					if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	});

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function get(elem) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if (parent && parent.parentNode) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function set(elem) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if (parent) {
					parent.selectedIndex;

					if (parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});

	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse(value) {
		var tokens = value.match(rnothtmlwhite) || [];
		return tokens.join(" ");
	}

	function getClass(elem) {
		return elem.getAttribute && elem.getAttribute("class") || "";
	}

	jQuery.fn.extend({
		addClass: function addClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, getClass(this)));
				});
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnothtmlwhite) || [];

				while (elem = this[i++]) {
					curValue = getClass(elem);
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		removeClass: function removeClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, getClass(this)));
				});
			}

			if (!arguments.length) {
				return this.attr("class", "");
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnothtmlwhite) || [];

				while (elem = this[i++]) {
					curValue = getClass(elem);

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {

							// Remove *all* instances
							while (cur.indexOf(" " + clazz + " ") > -1) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		toggleClass: function toggleClass(value, stateVal) {
			var type = typeof value === "undefined" ? "undefined" : _typeof(value);

			if (typeof stateVal === "boolean" && type === "string") {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
				});
			}

			return this.each(function () {
				var className, i, self, classNames;

				if (type === "string") {

					// Toggle individual class names
					i = 0;
					self = jQuery(this);
					classNames = value.match(rnothtmlwhite) || [];

					while (className = classNames[i++]) {

						// Check each className given, space separated list
						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}

					// Toggle whole class name
				} else if (value === undefined || type === "boolean") {
					className = getClass(this);
					if (className) {

						// Store className if set
						dataPriv.set(this, "__className__", className);
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if (this.setAttribute) {
						this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
					}
				}
			});
		},

		hasClass: function hasClass(selector) {
			var className,
			    elem,
			    i = 0;

			className = " " + selector + " ";
			while (elem = this[i++]) {
				if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
					return true;
				}
			}

			return false;
		}
	});

	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function val(value) {
			var hooks,
			    ret,
			    isFunction,
			    elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if (typeof ret === "string") {
						return ret.replace(rreturn, "");
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (isFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (Array.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				// If set returns undefined, fall back to normal setting
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function get(elem) {

					var val = jQuery.find.attr(elem, "value");
					return val != null ? val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse(jQuery.text(elem));
				}
			},
			select: {
				get: function get(elem) {
					var value,
					    option,
					    i,
					    options = elem.options,
					    index = elem.selectedIndex,
					    one = elem.type === "select-one",
					    values = one ? null : [],
					    max = one ? index + 1 : options.length;

					if (index < 0) {
						i = max;
					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for (; i < max; i++) {
						option = options[i];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ((option.selected || i === index) &&

						// Don't return options that are disabled or in a disabled optgroup
						!option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if (one) {
								return value;
							}

							// Multi-Selects return an array
							values.push(value);
						}
					}

					return values;
				},

				set: function set(elem, value) {
					var optionSet,
					    option,
					    options = elem.options,
					    values = jQuery.makeArray(value),
					    i = options.length;

					while (i--) {
						option = options[i];

						/* eslint-disable no-cond-assign */

						if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if (!optionSet) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function set(elem, value) {
				if (Array.isArray(value)) {
					return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});

	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend(jQuery.event, {

		trigger: function trigger(event, data, elem, onlyHandlers) {

			var i,
			    cur,
			    tmp,
			    bubbleType,
			    ontype,
			    handle,
			    special,
			    eventPath = [elem || document],
			    type = hasOwn.call(event, "type") ? event.type : event,
			    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") > -1) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ? [event] : jQuery.makeArray(data, [event]);

			// Allow special events to draw outside the lines
			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

				event.type = i > 1 ? bubbleType : special.bindType || type;

				// jQuery handler
				handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				// Native handler
				handle = ontype && cur[ontype];
				if (handle && handle.apply && acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[type]();
						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function simulate(type, elem, event) {
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true
			});

			jQuery.event.trigger(e, null, elem);
		}

	});

	jQuery.fn.extend({

		trigger: function trigger(type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function triggerHandler(type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});

	jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {

		// Handle event binding
		jQuery.fn[name] = function (data, fn) {
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};
	});

	jQuery.fn.extend({
		hover: function hover(fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		}
	});

	support.focusin = "onfocusin" in window;

	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if (!support.focusin) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function handler(event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
			};

			jQuery.event.special[fix] = {
				setup: function setup() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					dataPriv.access(doc, fix, (attaches || 0) + 1);
				},
				teardown: function teardown() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						dataPriv.remove(doc, fix);
					} else {
						dataPriv.access(doc, fix, attaches);
					}
				}
			};
		});
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = /\?/;

	// Cross-browser xml parsing
	jQuery.parseXML = function (data) {
		var xml;
		if (!data || typeof data !== "string") {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = new window.DOMParser().parseFromString(data, "text/xml");
		} catch (e) {
			xml = undefined;
		}

		if (!xml || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};

	var rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (Array.isArray(obj)) {

			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {

					// Treat each array item as a scalar.
					add(prefix, v);
				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" && v != null ? i : "") + "]", v, traditional, add);
				}
			});
		} else if (!traditional && jQuery.type(obj) === "object") {

			// Serialize object item.
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {

			// Serialize scalar item.
			add(prefix, obj);
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function (a, traditional) {
		var prefix,
		    s = [],
		    add = function add(key, valueOrFunction) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;

			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
		};

		// If an array was passed in, assume that it is an array of form elements.
		if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

			// Serialize the form elements
			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		// Return the resulting serialization
		return s.join("&");
	};

	jQuery.fn.extend({
		serialize: function serialize() {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function serializeArray() {
			return this.map(function () {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			}).filter(function () {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();

				if (val == null) {
					return null;
				}

				if (Array.isArray(val)) {
					return jQuery.map(val, function (val) {
						return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
					});
				}

				return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});

	var r20 = /%20/g,
	    rhash = /#.*$/,
	    rantiCache = /([?&])_=[^&]*/,
	    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,


	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	    rnoContent = /^(?:GET|HEAD)$/,
	    rprotocol = /^\/\//,


	/* Prefilters
  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
  * 2) These are called:
  *    - BEFORE asking for a transport
  *    - AFTER param serialization (s.data is a string if s.processData is true)
  * 3) key is the dataType
  * 4) the catchall symbol "*" can be used
  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
  */
	prefilters = {},


	/* Transports bindings
  * 1) key is the dataType
  * 2) the catchall symbol "*" can be used
  * 3) selection will start with transport dataType and THEN go to "*" if needed
  */
	transports = {},


	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*"),


	// Anchor tag for parsing the document origin
	originAnchor = document.createElement("a");
	originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure) {

		// dataTypeExpression is optional and defaults to "*"
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			    i = 0,
			    dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

			if (jQuery.isFunction(func)) {

				// For each dataType in the dataTypeExpression
				while (dataType = dataTypes[i++]) {

					// Prepend if requested
					if (dataType[0] === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);

						// Otherwise append
					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
		    seekingTransport = structure === transports;

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target, src) {
		var key,
		    deep,
		    flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	/* Handles responses to an ajax request:
  * - finds the right dataType (mediates between content-type and expected dataType)
  * - returns the corresponding response
  */
	function ajaxHandleResponses(s, jqXHR, responses) {

		var ct,
		    type,
		    finalDataType,
		    firstDataType,
		    contents = s.contents,
		    dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {

			// Try convertible dataTypes
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	/* Chain conversions given the request and the original response
  * Also sets the responseXXX fields on the jqXHR instance
  */
	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2,
		    current,
		    conv,
		    tmp,
		    prev,
		    converters = {},


		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			// Apply the dataFilter if provided
			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {

				// There's only work to do if current dataType is non-auto
				if (current === "*") {

					current = prev;

					// Convert response if prev dataType is non-auto and differs from current
				} else if (prev !== "*" && prev !== current) {

					// Seek a direct converter
					conv = converters[prev + " " + current] || converters["* " + current];

					// If none found, seek a pair
					if (!conv) {
						for (conv2 in converters) {

							// If conv2 outputs current
							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								// If prev can be converted to accepted input
								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {

									// Condense equivalence converters
									if (conv === true) {
										conv = converters[conv2];

										// Otherwise, insert the intermediate dataType
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if (conv !== true) {

						// Unless errors are allowed to bubble, catch and return them
						if (conv && s.throws) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test(location.protocol),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
   timeout: 0,
   data: null,
   dataType: null,
   username: null,
   password: null,
   cache: null,
   throws: false,
   traditional: false,
   headers: {},
   */

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function ajaxSetup(target, settings) {
			return settings ?

			// Building a settings object
			ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

			// Extending ajaxSettings
			ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		// Main method
		ajax: function ajax(url, options) {

			// If url is an object, simulate pre-1.5 signature
			if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,


			// URL without anti-cache param
			cacheURL,


			// Response headers
			responseHeadersString,
			    responseHeaders,


			// timeout handle
			timeoutTimer,


			// Url cleanup var
			urlAnchor,


			// Request state (becomes false upon send and true upon completion)
			completed,


			// To know if global events are to be dispatched
			fireGlobals,


			// Loop variable
			i,


			// uncached part of the url
			uncached,


			// Create the final options object
			s = jQuery.ajaxSetup({}, options),


			// Callbacks context
			callbackContext = s.context || s,


			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


			// Deferreds
			deferred = jQuery.Deferred(),
			    completeDeferred = jQuery.Callbacks("once memory"),


			// Status-dependent callbacks
			_statusCode = s.statusCode || {},


			// Headers (they are sent all at once)
			requestHeaders = {},
			    requestHeadersNames = {},


			// Default abort message
			strAbort = "canceled",


			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function getResponseHeader(key) {
					var match;
					if (completed) {
						if (!responseHeaders) {
							responseHeaders = {};
							while (match = rheaders.exec(responseHeadersString)) {
								responseHeaders[match[1].toLowerCase()] = match[2];
							}
						}
						match = responseHeaders[key.toLowerCase()];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function getAllResponseHeaders() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function setRequestHeader(name, value) {
					if (completed == null) {
						name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function overrideMimeType(type) {
					if (completed == null) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function statusCode(map) {
					var code;
					if (map) {
						if (completed) {

							// Execute the appropriate callbacks
							jqXHR.always(map[jqXHR.status]);
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for (code in map) {
								_statusCode[code] = [_statusCode[code], map[code]];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function abort(statusText) {
					var finalText = statusText || strAbort;
					if (transport) {
						transport.abort(finalText);
					}
					done(0, finalText);
					return this;
				}
			};

			// Attach deferreds
			deferred.promise(jqXHR);

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if (s.crossDomain == null) {
				urlAnchor = document.createElement("a");

				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
				} catch (e) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			// Apply prefilters
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			// If request was aborted inside a prefilter, stop there
			if (completed) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test(s.type);

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace(rhash, "");

			// More options handling for requests with no content
			if (!s.hasContent) {

				// Remember the hash so we can put it back
				uncached = s.url.slice(cacheURL.length);

				// If data is available, append data to url
				if (s.data) {
					cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if (s.cache === false) {
					cacheURL = cacheURL.replace(rantiCache, "$1");
					uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

				// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
				s.data = s.data.replace(r20, "+");
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			// Set the correct header, if data is being sent
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

			// Check for headers option
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add(s.complete);
			jqXHR.done(s.success);
			jqXHR.fail(s.error);

			// Get transport
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			// If no transport, we auto-abort
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}

				// If request was aborted inside ajaxSend, stop there
				if (completed) {
					return jqXHR;
				}

				// Timeout
				if (s.async && s.timeout > 0) {
					timeoutTimer = window.setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					completed = false;
					transport.send(requestHeaders, done);
				} catch (e) {

					// Rethrow post-completion exceptions
					if (completed) {
						throw e;
					}

					// Propagate others as results
					done(-1, e);
				}
			}

			// Callback for when everything is done
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				    success,
				    error,
				    response,
				    modified,
				    statusText = nativeStatusText;

				// Ignore repeat invocations
				if (completed) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if (timeoutTimer) {
					window.clearTimeout(timeoutTimer);
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert(s, response, jqXHR, isSuccess);

				// If successful, handle type chaining
				if (isSuccess) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					// if no content
					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";

						// if not modified
					} else if (status === 304) {
						statusText = "notmodified";

						// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				// Success/Error
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				// Status-dependent callbacks
				jqXHR.statusCode(_statusCode);
				_statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
				}

				// Complete
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

					// Handle the global AJAX counter
					if (! --jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function getJSON(url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function getScript(url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {

			// Shift arguments if data argument was omitted
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax(jQuery.extend({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject(url) && url));
		};
	});

	jQuery._evalUrl = function (url) {
		return jQuery.ajax({
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		});
	};

	jQuery.fn.extend({
		wrapAll: function wrapAll(html) {
			var wrap;

			if (this[0]) {
				if (jQuery.isFunction(html)) {
					html = html.call(this[0]);
				}

				// The elements to wrap the target around
				wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstElementChild) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function wrapInner(html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				    contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},

		wrap: function wrap(html) {
			var isFunction = jQuery.isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function unwrap(selector) {
			this.parent(selector).not("body").each(function () {
				jQuery(this).replaceWith(this.childNodes);
			});
			return this;
		}
	});

	jQuery.expr.pseudos.hidden = function (elem) {
		return !jQuery.expr.pseudos.visible(elem);
	};
	jQuery.expr.pseudos.visible = function (elem) {
		return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
	};

	jQuery.ajaxSettings.xhr = function () {
		try {
			return new window.XMLHttpRequest();
		} catch (e) {}
	};

	var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	    xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function (options) {
		var _callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if (support.cors || xhrSupported && !options.crossDomain) {
			return {
				send: function send(headers, complete) {
					var i,
					    xhr = options.xhr();

					xhr.open(options.type, options.url, options.async, options.username, options.password);

					// Apply custom fields if provided
					if (options.xhrFields) {
						for (i in options.xhrFields) {
							xhr[i] = options.xhrFields[i];
						}
					}

					// Override mime type if needed
					if (options.mimeType && xhr.overrideMimeType) {
						xhr.overrideMimeType(options.mimeType);
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if (!options.crossDomain && !headers["X-Requested-With"]) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for (i in headers) {
						xhr.setRequestHeader(i, headers[i]);
					}

					// Callback
					_callback = function callback(type) {
						return function () {
							if (_callback) {
								_callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if (type === "abort") {
									xhr.abort();
								} else if (type === "error") {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if (typeof xhr.status !== "number") {
										complete(0, "error");
									} else {
										complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status, xhr.statusText);
									}
								} else {
									complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									(xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
								}
							}
						};
					};

					// Listen to events
					xhr.onload = _callback();
					errorCallback = xhr.onerror = _callback("error");

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if (xhr.onabort !== undefined) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function () {

							// Check readyState before timeout as it changes
							if (xhr.readyState === 4) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout(function () {
									if (_callback) {
										errorCallback();
									}
								});
							}
						};
					}

					// Create the abort callback
					_callback = _callback("abort");

					try {

						// Do send the request (this may raise an exception)
						xhr.send(options.hasContent && options.data || null);
					} catch (e) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if (_callback) {
							throw e;
						}
					}
				},

				abort: function abort() {
					if (_callback) {
						_callback();
					}
				}
			};
		}
	});

	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter(function (s) {
		if (s.crossDomain) {
			s.contents.script = false;
		}
	});

	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function textScript(text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script", function (s) {

		// This transport only deals with cross domain requests
		if (s.crossDomain) {
			var script, _callback2;
			return {
				send: function send(_, complete) {
					script = jQuery("<script>").prop({
						charset: s.scriptCharset,
						src: s.url
					}).on("load error", _callback2 = function callback(evt) {
						script.remove();
						_callback2 = null;
						if (evt) {
							complete(evt.type === "error" ? 404 : 200, evt.type);
						}
					});

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild(script[0]);
				},
				abort: function abort() {
					if (_callback2) {
						_callback2();
					}
				}
			};
		}
	});

	var oldCallbacks = [],
	    rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function jsonpCallback() {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		    overwritten,
		    responseContainer,
		    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if (jsonProp || s.dataTypes[0] === "jsonp") {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

			// Insert callback into url or form data
			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			// Force json dataType
			s.dataTypes[0] = "json";

			// Install callback
			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function () {

				// If previous value didn't exist - remove it
				if (overwritten === undefined) {
					jQuery(window).removeProp(callbackName);

					// Otherwise restore preexisting value
				} else {
					window[callbackName] = overwritten;
				}

				// Save back as free
				if (s[callbackName]) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push(callbackName);
				}

				// Call if it was a function and we have a response
				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});

	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = function () {
		var body = document.implementation.createHTMLDocument("").body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	}();

	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function (data, context, keepScripts) {
		if (typeof data !== "string") {
			return [];
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if (!context) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if (support.createHTMLDocument) {
				context = document.implementation.createHTMLDocument("");

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement("base");
				base.href = document.location.href;
				context.head.appendChild(base);
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec(data);
		scripts = !keepScripts && [];

		// Single tag
		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};

	/**
  * Load a url into a page
  */
	jQuery.fn.load = function (url, params, callback) {
		var selector,
		    type,
		    response,
		    self = this,
		    off = url.indexOf(" ");

		if (off > -1) {
			selector = stripAndCollapse(url.slice(off));
			url = url.slice(0, off);
		}

		// If it's a function
		if (jQuery.isFunction(params)) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			}).done(function (responseText) {

				// Save response for use in complete callback
				response = arguments;

				self.html(selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

				// Otherwise use the full result
				responseText);

				// If the request succeeds, this function gets "data", "status", "jqXHR"
				// but they are ignored because response was set above.
				// If it fails, this function gets "jqXHR", "status", "error"
			}).always(callback && function (jqXHR, status) {
				self.each(function () {
					callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
				});
			});
		}

		return this;
	};

	// Attach a bunch of functions for handling common AJAX events
	jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});

	jQuery.expr.pseudos.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};

	jQuery.offset = {
		setOffset: function setOffset(elem, options, i) {
			var curPosition,
			    curLeft,
			    curCSSTop,
			    curTop,
			    curOffset,
			    curCSSLeft,
			    calculatePosition,
			    position = jQuery.css(elem, "position"),
			    curElem = jQuery(elem),
			    props = {};

			// Set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (jQuery.isFunction(options)) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call(elem, i, jQuery.extend({}, curOffset));
			}

			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({
		offset: function offset(options) {

			// Preserve chaining for setter
			if (arguments.length) {
				return options === undefined ? this : this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}

			var doc,
			    docElem,
			    rect,
			    win,
			    elem = this[0];

			if (!elem) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if (!elem.getClientRects().length) {
				return { top: 0, left: 0 };
			}

			rect = elem.getBoundingClientRect();

			doc = elem.ownerDocument;
			docElem = doc.documentElement;
			win = doc.defaultView;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function position() {
			if (!this[0]) {
				return;
			}

			var offsetParent,
			    offset,
			    elem = this[0],
			    parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if (jQuery.css(elem, "position") === "fixed") {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if (!nodeName(offsetParent[0], "html")) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css(offsetParent[0], "borderTopWidth", true),
					left: parentOffset.left + jQuery.css(offsetParent[0], "borderLeftWidth", true)
				};
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function offsetParent() {
			return this.map(function () {
				var offsetParent = this.offsetParent;

				while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = "pageYOffset" === prop;

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {

				// Coalesce documents and windows
				var win;
				if (jQuery.isWindow(elem)) {
					win = elem;
				} else if (elem.nodeType === 9) {
					win = elem.defaultView;
				}

				if (val === undefined) {
					return win ? win[prop] : elem[method];
				}

				if (win) {
					win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length);
		};
	});

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
			if (computed) {
				computed = curCSS(elem, prop);

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
			}
		});
	});

	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (jQuery.isWindow(elem)) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
					}

					// Get document width or height
					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
					}

					return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css(elem, type, extra) :

					// Set width or height on the element
					jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable);
			};
		});
	});

	jQuery.fn.extend({

		bind: function bind(types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function unbind(types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function delegate(selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function undelegate(selector, types, fn) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		}
	});

	jQuery.holdReady = function (hold) {
		if (hold) {
			jQuery.readyWait++;
		} else {
			jQuery.ready(true);
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}

	var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,


	// Map over the $ in case of overwrite
	_$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if (!noGlobal) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)(module)))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Module dependencies.
 */

var url = __webpack_require__(30);
var parser = __webpack_require__(8);
var Manager = __webpack_require__(15);
var debug = __webpack_require__(1)('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup(uri, opts) {
  if ((typeof uri === 'undefined' ? 'undefined' : _typeof(uri)) === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }
  return io.socket(parsed.path, opts);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = __webpack_require__(15);
exports.Socket = __webpack_require__(21);

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module dependencies.
 */

var parseuri = __webpack_require__(12);
var debug = __webpack_require__(1)('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url(uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || global.location;
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : ':' + obj.port);

  return obj;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(33);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0,
      i;

  for (i in namespace) {
    hash = (hash << 5) - hash + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val === 'undefined' ? 'undefined' : _typeof(val);
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = __webpack_require__(36);
var isBuf = __webpack_require__(14);
var toString = Object.prototype.toString;
var withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';
var withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function (packet) {
  var buffers = [];
  var packetData = packet.data;
  var pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return { packet: pack, buffers: buffers };
};

function _deconstructPacket(data, buffers) {
  if (!data) return data;

  if (isBuf(data)) {
    var placeholder = { _placeholder: true, num: buffers.length };
    buffers.push(data);
    return placeholder;
  } else if (isArray(data)) {
    var newData = new Array(data.length);
    for (var i = 0; i < data.length; i++) {
      newData[i] = _deconstructPacket(data[i], buffers);
    }
    return newData;
  } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && !(data instanceof Date)) {
    var newData = {};
    for (var key in data) {
      newData[key] = _deconstructPacket(data[key], buffers);
    }
    return newData;
  }
  return data;
}

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function (packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  packet.attachments = undefined; // no longer useful
  return packet;
};

function _reconstructPacket(data, buffers) {
  if (!data) return data;

  if (data && data._placeholder) {
    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
  } else if (isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _reconstructPacket(data[i], buffers);
    }
  } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
    for (var key in data) {
      data[key] = _reconstructPacket(data[key], buffers);
    }
  }

  return data;
}

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function (data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if (withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function () {
        // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        } else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if (! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) {
      // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && !isBuf(obj)) {
      // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(38);

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(39);

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = __webpack_require__(4);

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Module dependencies.
 */

var transports = __webpack_require__(16);
var Emitter = __webpack_require__(3);
var debug = __webpack_require__(1)('engine.io-client:socket');
var index = __webpack_require__(20);
var parser = __webpack_require__(4);
var parseuri = __webpack_require__(12);
var parsejson = __webpack_require__(51);
var parseqs = __webpack_require__(6);

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket(uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === (typeof uri === 'undefined' ? 'undefined' : _typeof(uri))) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure : global.location && 'https:' === location.protocol;

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname || (global.location ? location.hostname : 'localhost');
  this.port = opts.port || (global.location && location.port ? location.port : this.secure ? 443 : 80);
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.transportOptions = opts.transportOptions || {};
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // other options for Node.js client
  var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global;
  if (freeGlobal.global === freeGlobal) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = __webpack_require__(10);
Socket.transports = __webpack_require__(16);
Socket.parser = __webpack_require__(4);

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // per-transport options
  var options = this.transportOptions[name] || {};

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    query: query,
    socket: this,
    agent: options.agent || this.agent,
    hostname: options.hostname || this.hostname,
    port: options.port || this.port,
    secure: options.secure || this.secure,
    path: options.path || this.path,
    forceJSONP: options.forceJSONP || this.forceJSONP,
    jsonp: options.jsonp || this.jsonp,
    forceBase64: options.forceBase64 || this.forceBase64,
    enablesXDR: options.enablesXDR || this.enablesXDR,
    timestampRequests: options.timestampRequests || this.timestampRequests,
    timestampParam: options.timestampParam || this.timestampParam,
    policyPort: options.policyPort || this.policyPort,
    pfx: options.pfx || this.pfx,
    key: options.key || this.key,
    passphrase: options.passphrase || this.passphrase,
    cert: options.cert || this.cert,
    ca: options.ca || this.ca,
    ciphers: options.ciphers || this.ciphers,
    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
    extraHeaders: options.extraHeaders || this.extraHeaders,
    forceNode: options.forceNode || this.forceNode,
    localAddress: options.localAddress || this.localAddress,
    requestTimeout: options.requestTimeout || this.requestTimeout,
    protocols: options.protocols || void 0
  });

  return transport;
};

function clone(obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport.on('drain', function () {
    self.onDrain();
  }).on('packet', function (packet) {
    self.onPacket(packet);
  }).on('error', function (e) {
    self.onError(e);
  }).on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen() {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport() {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror(err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose() {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose() {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade(to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup() {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(parsejson(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || self.pingInterval + self.pingTimeout);
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close() {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose() {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade() {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module requirements.
 */

var XMLHttpRequest = __webpack_require__(9);
var Polling = __webpack_require__(17);
var Emitter = __webpack_require__(3);
var inherit = __webpack_require__(7);
var debug = __webpack_require__(1)('engine.io-client:polling-xhr');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty() {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR(opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;
  this.extraHeaders = opts.extraHeaders;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = opts.hostname !== global.location.hostname || port !== opts.port;
    this.xs = opts.secure !== isSSL;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request(opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 2) {
          var contentType;
          try {
            contentType = xhr.getResponseHeader('Content-Type');
          } catch (e) {}
          if (contentType === 'application/octet-stream') {
            xhr.responseType = 'arraybuffer';
          }
        }
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (global.document) {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (global.document) {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}
    if (contentType === 'application/octet-stream') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      data = this.xhr.responseText;
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (global.document) {
  if (global.attachEvent) {
    global.attachEvent('onunload', unloadHandler);
  } else if (global.addEventListener) {
    global.addEventListener('beforeunload', unloadHandler, false);
  }
}

function unloadHandler() {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys(obj) {
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function (arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) {
    return arraybuffer.slice(start, end);
  }

  if (start < 0) {
    start += bytes;
  }
  if (end < 0) {
    end += bytes;
  }
  if (end > bytes) {
    end = bytes;
  }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = after;

function after(count, callback, err_cb) {
    var bail = false;
    err_cb = err_cb || noop;
    proxy.count = count;

    return count === 0 ? callback() : proxy;

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times');
        }
        --proxy.count;

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true;
            callback(err);
            // future error callbacks will go to error handler
            callback = err_cb;
        } else if (proxy.count === 0 && !bail) {
            callback(null, result);
        }
    }
}

function noop() {}

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! https://mths.be/utf8js v2.1.2 by @mathias */
;(function (root) {

	// Detect free variables `exports`
	var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports;

	// Detect free variable `module`
	var freeModule = ( false ? 'undefined' : _typeof(module)) == 'object' && module && module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`
	var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) {
					// low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	function checkScalarValue(codePoint, strict) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			if (strict) {
				throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');
			}
			return false;
		}
		return true;
	}
	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
	}

	function encodeCodePoint(codePoint, strict) {
		if ((codePoint & 0xFFFFFF80) == 0) {
			// 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) {
			// 2-byte sequence
			symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
		} else if ((codePoint & 0xFFFF0000) == 0) {
			// 3-byte sequence
			if (!checkScalarValue(codePoint, strict)) {
				codePoint = 0xFFFD;
			}
			symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
			symbol += createByte(codePoint, 6);
		} else if ((codePoint & 0xFFE00000) == 0) {
			// 4-byte sequence
			symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
		return symbol;
	}

	function utf8encode(string, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint, strict);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol(strict) {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			byte2 = readContinuationByte();
			codePoint = (byte1 & 0x1F) << 6 | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;
			if (codePoint >= 0x0800) {
				return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = (byte1 & 0x07) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol(strict)) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	var utf8 = {
		'version': '2.1.2',
		'encode': utf8encode,
		'decode': utf8decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if ("function" == 'function' && _typeof(__webpack_require__(18)) == 'object' && __webpack_require__(18)) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
			return utf8;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && !freeExports.nodeType) {
		if (freeModule) {
			// in Node.js or RingoJS v0.8.0+
			freeModule.exports = utf8;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			for (var key in utf8) {
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.utf8 = utf8;
	}
})(undefined);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)(module), __webpack_require__(0)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function () {
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function (arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
        i,
        len = bytes.length,
        base64 = "";

    for (i = 0; i < len; i += 3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
      base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
      base64 += chars[bytes[i + 2] & 63];
    }

    if (len % 3 === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode = function (base64) {
    var bufferLength = base64.length * 0.75,
        len = base64.length,
        i,
        p = 0,
        encoded1,
        encoded2,
        encoded3,
        encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
        bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i += 4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i + 1)];
      encoded3 = lookup[base64.charCodeAt(i + 2)];
      encoded4 = lookup[base64.charCodeAt(i + 3)];

      bytes[p++] = encoded1 << 2 | encoded2 >> 4;
      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }

    return arraybuffer;
  };
})();

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MSBlobBuilder || global.MozBlobBuilder;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = function () {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch (e) {
    return false;
  }
}();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && function () {
  try {
    var b = new Blob([new Uint8Array([1, 2])]);
    return b.size === 2;
  } catch (e) {
    return false;
  }
}();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  for (var i = 0; i < ary.length; i++) {
    var chunk = ary[i];
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      ary[i] = buf;
    }
  }
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary);

  for (var i = 0; i < ary.length; i++) {
    bb.append(ary[i]);
  }

  return options.type ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  mapArrayBufferViews(ary);
  return new Blob(ary, options || {});
};

module.exports = function () {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
}();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module requirements.
 */

var Polling = __webpack_require__(17);
var inherit = __webpack_require__(7);

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty() {}

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling(opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    if (!global.___eio) global.___eio = [];
    callbacks = global.___eio;
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (global.document && global.addEventListener) {
    global.addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete() {
    initIframe();
    fn();
  }

  function initIframe() {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module dependencies.
 */

var Transport = __webpack_require__(10);
var parser = __webpack_require__(4);
var parseqs = __webpack_require__(6);
var inherit = __webpack_require__(7);
var yeast = __webpack_require__(19);
var debug = __webpack_require__(1)('engine.io-client:websocket');
var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
var NodeWebSocket;
if (typeof window === 'undefined') {
  try {
    NodeWebSocket = __webpack_require__(50);
  } catch (e) {}
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocket = BrowserWebSocket;
if (!WebSocket && typeof window === 'undefined') {
  WebSocket = NodeWebSocket;
}

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS(opts) {
  var forceBase64 = opts && opts.forceBase64;
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  this.protocols = opts.protocols;
  if (!this.usingBrowserWebSocket) {
    WebSocket = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = this.protocols;
  var opts = {
    agent: this.agent,
    perMessageDeflate: this.perMessageDeflate
  };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws = this.usingBrowserWebSocket ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done() {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && ('wss' === schema && Number(this.port) !== 443 || 'ws' === schema && Number(this.port) !== 80)) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 50 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * JSON parse.
 *
 * @see Based on jQuery#parseJSON (MIT) and JSON2
 * @api private
 */

var rvalidchars = /^[\],:{}\s]*$/;
var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
var rtrimLeft = /^\s+/;
var rtrimRight = /\s+$/;

module.exports = function parsejson(data) {
  if ('string' != typeof data || !data) {
    return null;
  }

  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

  // Attempt to parse using the native JSON parser first
  if (global.JSON && JSON.parse) {
    return JSON.parse(data);
  }

  if (rvalidchars.test(data.replace(rvalidescape, '@').replace(rvalidtokens, ']').replace(rvalidbraces, ''))) {
    return new Function('return ' + data)();
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = toArray;

function toArray(list, index) {
    var array = [];

    index = index || 0;

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i];
    }

    return array;
}

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function () {
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand = Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function () {
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function (min) {
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function (max) {
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function (jitter) {
  this.jitter = jitter;
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Player = function Player(name) {
    _classCallCheck(this, Player);

    this.name = name;
    this.number = -1;
};

exports.default = Player;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cell = __webpack_require__(56);

var _cell2 = _interopRequireDefault(_cell);

var _piece = __webpack_require__(73);

var _tile = __webpack_require__(74);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Game = function () {
    function Game(rules, player1, player2) {
        _classCallCheck(this, Game);

        this.rules = rules;
        // stores all moves of the game
        this.gameLog = [];
        // stores moves of players until every player has submitted
        this.currentMoveCache = [];
        this.player1 = player1;
        this.player1.number = 1;
        this.player2 = player2;
        this.player2.number = 2;
        this.playerCount = 2;

        this.board = this.generateCheckedBoard(8, 8);
        this.height = this.board.length;
        this.width = this.board[0].length;

        for (var x = 0; x < 8; x++) {
            this.board[1][x].piece = new _piece.Pawn(this.player2);
            this.board[6][x].piece = new _piece.Pawn(this.player1);
        }
        this.board[0][0].piece = new _piece.Rook(this.player2);
        this.board[0][7].piece = new _piece.Rook(this.player2);
        this.board[7][0].piece = new _piece.Rook(this.player1);
        this.board[7][7].piece = new _piece.Rook(this.player1);
        this.board[0][1].piece = new _piece.Knight(this.player2);
        this.board[0][6].piece = new _piece.Knight(this.player2);
        this.board[7][1].piece = new _piece.Knight(this.player1);
        this.board[7][6].piece = new _piece.Knight(this.player1);
        this.board[0][2].piece = new _piece.Bishop(this.player2);
        this.board[0][5].piece = new _piece.Bishop(this.player2);
        this.board[7][2].piece = new _piece.Bishop(this.player1);
        this.board[7][5].piece = new _piece.Bishop(this.player1);
        this.board[0][4].piece = new _piece.Queen(this.player2);
        this.board[7][4].piece = new _piece.Queen(this.player1);
        this.board[0][3].piece = new _piece.King(this.player2);
        this.board[7][3].piece = new _piece.King(this.player1);

        // save coords on cell for easier lookup
        for (var y = 0; y < this.board.length; y++) {
            for (var _x = 0; _x < this.board[y].length; _x++) {
                var cell = this.board[y][_x];
                cell.x = _x;
                cell.y = y;
            }
        }
    }

    // generates a logEntry for a move
    // this logEntry can then be executed by all players


    _createClass(Game, [{
        key: 'prepareMove',
        value: function prepareMove(sourceCell, targetCell) {
            if (!sourceCell.piece) throw 'NoPieceToMove';

            var logEntry = {
                action: 'move',
                playerNumber: sourceCell.piece.owner.number,
                movedPieceClass: sourceCell.piece.class,
                source: { x: sourceCell.x, y: sourceCell.y },
                target: { x: targetCell.x, y: targetCell.y }
            };

            if (targetCell.piece) logEntry.killedPieceClass = targetCell.piece.class;

            return logEntry;
        }

        // checks if a move is valid

    }, {
        key: 'checkMove',
        value: function checkMove(logEntry) {
            // TODO check if he already submitted
            var sourceCell = this.getCell(logEntry.source);
            var targetCell = this.getCell(logEntry.target);
            if (!sourceCell.piece) throw 'NoPieceToMove';
            if (sourceCell.piece.class !== logEntry.movedPieceClass) throw 'OutOfSyncError: wrong source piece class';
            if (logEntry.killedPieceClass && logEntry.killedPieceClass !== targetCell.piece.class) throw 'OutOfSyncError: wrong killed piece class';
        }
    }, {
        key: 'execute',
        value: function execute(logEntry) {
            if (logEntry.action === 'move') {
                this.checkMove(logEntry);
                this.currentMoveCache.push(logEntry);

                // wait for other players
                if (this.currentMoveCache.length < this.playerCount) {
                    return {
                        action: 'notification',
                        type: 'PlayerMadeMove',
                        playerNumber: logEntry.playerNumber
                    };
                }

                var symLogEntry = {
                    action: 'sym move',
                    moves: this.currentMoveCache
                };
                this.currentMoveCache = [];
                this.execute(symLogEntry);
                console.log(symLogEntry);
                return symLogEntry;
            }
            if (logEntry.action === 'sym move') {
                var pieces = [];

                // pick up pieces
                for (var i = 0; i < logEntry.moves.length; i++) {
                    var sourceCell = this.getCell(logEntry.moves[i].source);
                    pieces[i] = sourceCell.piece;
                    delete sourceCell.piece;
                }

                // put pieces down
                //TODO detect collisions
                for (var j = 0; j < logEntry.moves.length; j++) {
                    var targetCell = this.getCell(logEntry.moves[j].target);
                    targetCell.piece = pieces[j];
                    targetCell.piece.hasMoved = true;
                }

                this.gameLog.push(logEntry);
            }
        }
    }, {
        key: 'getPossibleMoves',
        value: function getPossibleMoves(cell) {
            return cell.piece.getPossibleMoves(this, cell.x, cell.y);
        }
    }, {
        key: 'getCell',
        value: function getCell(x, y) {
            // pass only the x param to be handled as object: {x: 1, y: 1}
            if (y === undefined) {
                y = x.y;
                x = x.x;
            }

            if (y < 0 || y >= this.board.length) throw "OutsideOfBoard";
            var row = this.board[y];
            if (x < 0 || x >= row.length) throw "OutsideOfBoard";
            return row[x];
        }
    }, {
        key: 'render',
        value: function render() {
            var template = __webpack_require__(75);
            return template({ game: this, cols: this.board[0] });
        }
    }, {
        key: 'generateCheckedBoard',
        value: function generateCheckedBoard(width, height) {
            var board = [];
            for (var y = 0; y < height; y++) {
                board[y] = [];
                for (var x = 0; x < width; x++) {
                    board[y][x] = new _cell2.default((x + y) % 2 === 0 ? new _tile.BlackTile() : new _tile.WhiteTile());
                }
            }
            return board;
        }
    }]);

    return Game;
}();

exports.default = Game;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cell = function () {
    function Cell(tile, piece) {
        _classCallCheck(this, Cell);

        this._tile = tile;
        this.piece = piece;
        this.x = -1;
        this.y = -1;
    }

    _createClass(Cell, [{
        key: "render",
        value: function render() {
            var template = __webpack_require__(57);
            var params = { cell: this, classes: this.classes.join(' ') };
            return template(params);
        }
    }, {
        key: "tile",
        get: function get() {
            return this._tile;
        }
    }, {
        key: "classes",
        get: function get() {
            var cls = this.tile.classes;
            if (this.piece) cls.push(this.piece.class);
            return cls;
        }
    }]);

    return Cell;
}();

exports.default = Cell;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(24);
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    var helper;

  return "        <img src=\""
    + container.escapeExpression(((helper = (helper = helpers.image || (depth0 != null ? depth0.image : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"image","hash":{},"data":data}) : helper)))
    + "\" />\r\n";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.escapeExpression, alias3=container.lambda;

  return "<td class=\""
    + alias2(((helper = (helper = helpers.classes || (depth0 != null ? depth0.classes : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"classes","hash":{},"data":data}) : helper)))
    + "\" data-x=\""
    + alias2(alias3(((stack1 = (depth0 != null ? depth0.cell : depth0)) != null ? stack1.x : stack1), depth0))
    + "\" data-y=\""
    + alias2(alias3(((stack1 = (depth0 != null ? depth0.cell : depth0)) != null ? stack1.y : stack1), depth0))
    + "\">\r\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.image : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</td>";
},"useData":true});

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

// istanbul ignore next

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj['default'] = obj;return newObj;
  }
}

var _handlebarsBase = __webpack_require__(25);

var base = _interopRequireWildcard(_handlebarsBase);

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)

var _handlebarsSafeString = __webpack_require__(70);

var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

var _handlebarsException = __webpack_require__(5);

var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

var _handlebarsUtils = __webpack_require__(2);

var Utils = _interopRequireWildcard(_handlebarsUtils);

var _handlebarsRuntime = __webpack_require__(71);

var runtime = _interopRequireWildcard(_handlebarsRuntime);

var _handlebarsNoConflict = __webpack_require__(72);

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
function create() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = _handlebarsSafeString2['default'];
  hb.Exception = _handlebarsException2['default'];
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function (spec) {
    return runtime.template(spec, hb);
  };

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst['default'] = inst;

exports['default'] = inst;
module.exports = exports['default'];

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.registerDefaultHelpers = registerDefaultHelpers;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _helpersBlockHelperMissing = __webpack_require__(60);

var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

var _helpersEach = __webpack_require__(61);

var _helpersEach2 = _interopRequireDefault(_helpersEach);

var _helpersHelperMissing = __webpack_require__(62);

var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

var _helpersIf = __webpack_require__(63);

var _helpersIf2 = _interopRequireDefault(_helpersIf);

var _helpersLog = __webpack_require__(64);

var _helpersLog2 = _interopRequireDefault(_helpersLog);

var _helpersLookup = __webpack_require__(65);

var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

var _helpersWith = __webpack_require__(66);

var _helpersWith2 = _interopRequireDefault(_helpersWith);

function registerDefaultHelpers(instance) {
  _helpersBlockHelperMissing2['default'](instance);
  _helpersEach2['default'](instance);
  _helpersHelperMissing2['default'](instance);
  _helpersIf2['default'](instance);
  _helpersLog2['default'](instance);
  _helpersLookup2['default'](instance);
  _helpersWith2['default'](instance);
}

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(2);

exports['default'] = function (instance) {
  instance.registerHelper('blockHelperMissing', function (context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if (context === true) {
      return fn(this);
    } else if (context === false || context == null) {
      return inverse(this);
    } else if (_utils.isArray(context)) {
      if (context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
        options = { data: data };
      }

      return fn(context, options);
    }
  });
};

module.exports = exports['default'];

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _utils = __webpack_require__(2);

var _exception = __webpack_require__(5);

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('each', function (context, options) {
    if (!options) {
      throw new _exception2['default']('Must pass iterator to #each');
    }

    var fn = options.fn,
        inverse = options.inverse,
        i = 0,
        ret = '',
        data = undefined,
        contextPath = undefined;

    if (options.data && options.ids) {
      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    if (options.data) {
      data = _utils.createFrame(options.data);
    }

    function execIteration(field, index, last) {
      if (data) {
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;

        if (contextPath) {
          data.contextPath = contextPath + field;
        }
      }

      ret = ret + fn(context[field], {
        data: data,
        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
      });
    }

    if (context && (typeof context === 'undefined' ? 'undefined' : _typeof(context)) === 'object') {
      if (_utils.isArray(context)) {
        for (var j = context.length; i < j; i++) {
          if (i in context) {
            execIteration(i, i, i === context.length - 1);
          }
        }
      } else {
        var priorKey = undefined;

        for (var key in context) {
          if (context.hasOwnProperty(key)) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array.
            if (priorKey !== undefined) {
              execIteration(priorKey, i - 1);
            }
            priorKey = key;
            i++;
          }
        }
        if (priorKey !== undefined) {
          execIteration(priorKey, i - 1, true);
        }
      }
    }

    if (i === 0) {
      ret = inverse(this);
    }

    return ret;
  });
};

module.exports = exports['default'];

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _exception = __webpack_require__(5);

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('helperMissing', function () /* [args, ]options */{
    if (arguments.length === 1) {
      // A missing field in a {{foo}} construct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
    }
  });
};

module.exports = exports['default'];

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(2);

exports['default'] = function (instance) {
  instance.registerHelper('if', function (conditional, options) {
    if (_utils.isFunction(conditional)) {
      conditional = conditional.call(this);
    }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function (conditional, options) {
    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
  });
};

module.exports = exports['default'];

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('log', function () /* message, options */{
    var args = [undefined],
        options = arguments[arguments.length - 1];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i]);
    }

    var level = 1;
    if (options.hash.level != null) {
      level = options.hash.level;
    } else if (options.data && options.data.level != null) {
      level = options.data.level;
    }
    args[0] = level;

    instance.log.apply(instance, args);
  });
};

module.exports = exports['default'];

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('lookup', function (obj, field) {
    return obj && obj[field];
  });
};

module.exports = exports['default'];

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(2);

exports['default'] = function (instance) {
  instance.registerHelper('with', function (context, options) {
    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    var fn = options.fn;

    if (!_utils.isEmpty(context)) {
      var data = options.data;
      if (options.data && options.ids) {
        data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
      }

      return fn(context, {
        data: data,
        blockParams: _utils.blockParams([context], [data && data.contextPath])
      });
    } else {
      return options.inverse(this);
    }
  });
};

module.exports = exports['default'];

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.registerDefaultDecorators = registerDefaultDecorators;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _decoratorsInline = __webpack_require__(68);

var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

function registerDefaultDecorators(instance) {
  _decoratorsInline2['default'](instance);
}

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(2);

exports['default'] = function (instance) {
  instance.registerDecorator('inline', function (fn, props, container, options) {
    var ret = fn;
    if (!props.partials) {
      props.partials = {};
      ret = function ret(context, options) {
        // Create a new partials stack frame prior to exec.
        var original = container.partials;
        container.partials = _utils.extend({}, original, props.partials);
        var ret = fn(context, options);
        container.partials = original;
        return ret;
      };
    }

    props.partials[options.args[0]] = options.fn;

    return ret;
  });
};

module.exports = exports['default'];

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(2);

var logger = {
  methodMap: ['debug', 'info', 'warn', 'error'],
  level: 'info',

  // Maps a given level value to the `methodMap` indexes above.
  lookupLevel: function lookupLevel(level) {
    if (typeof level === 'string') {
      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
      if (levelMap >= 0) {
        level = levelMap;
      } else {
        level = parseInt(level, 10);
      }
    }

    return level;
  },

  // Can be overridden in the host environment
  log: function log(level) {
    level = logger.lookupLevel(level);

    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
      var method = logger.methodMap[level];
      if (!console[method]) {
        // eslint-disable-line no-console
        method = 'log';
      }

      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        message[_key - 1] = arguments[_key];
      }

      console[method].apply(console, message); // eslint-disable-line no-console
    }
  }
};

exports['default'] = logger;
module.exports = exports['default'];

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Build out our basic SafeString type


exports.__esModule = true;
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
  return '' + this.string;
};

exports['default'] = SafeString;
module.exports = exports['default'];

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.__esModule = true;
exports.checkRevision = checkRevision;
exports.template = template;
exports.wrapProgram = wrapProgram;
exports.resolvePartial = resolvePartial;
exports.invokePartial = invokePartial;
exports.noop = noop;
// istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

// istanbul ignore next

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj['default'] = obj;return newObj;
  }
}

var _utils = __webpack_require__(2);

var Utils = _interopRequireWildcard(_utils);

var _exception = __webpack_require__(5);

var _exception2 = _interopRequireDefault(_exception);

var _base = __webpack_require__(25);

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = _base.COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
    }
  }
}

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new _exception2['default']('No environment passed to template');
  }
  if (!templateSpec || !templateSpec.main) {
    throw new _exception2['default']('Unknown template object: ' + (typeof templateSpec === 'undefined' ? 'undefined' : _typeof(templateSpec)));
  }

  templateSpec.main.decorator = templateSpec.main_d;

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  function invokePartialWrapper(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
      if (options.ids) {
        options.ids[0] = true;
      }
    }

    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var result = env.VM.invokePartial.call(this, partial, context, options);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, options);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
    }
  }

  // Just add water
  var container = {
    strict: function strict(obj, name) {
      if (!(name in obj)) {
        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
      }
      return obj[name];
    },
    lookup: function lookup(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function lambda(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function fn(i) {
      var ret = templateSpec[i];
      ret.decorator = templateSpec[i + '_d'];
      return ret;
    },

    programs: [],
    program: function program(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
      }
      return programWrapper;
    },

    data: function data(value, depth) {
      while (value && depth--) {
        value = value._parent;
      }
      return value;
    },
    merge: function merge(param, common) {
      var obj = param || common;

      if (param && common && param !== common) {
        obj = Utils.extend({}, common, param);
      }

      return obj;
    },
    // An empty object to use as replacement for null-contexts
    nullContext: Object.seal({}),

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  function ret(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths = undefined,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      if (options.depths) {
        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
      } else {
        depths = [context];
      }
    }

    function main(context /*, options*/) {
      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
    }
    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
    return main(context, options);
  }
  ret.isTop = true;

  ret._setup = function (options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }
      if (templateSpec.usePartial || templateSpec.useDecorators) {
        container.decorators = container.merge(options.decorators, env.decorators);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
      container.decorators = options.decorators;
    }
  };

  ret._child = function (i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new _exception2['default']('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new _exception2['default']('must pass parent depths');
    }

    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  function prog(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var currentDepths = depths;
    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
      currentDepths = [context].concat(depths);
    }

    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
  }

  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

function resolvePartial(partial, context, options) {
  if (!partial) {
    if (options.name === '@partial-block') {
      partial = options.data['partial-block'];
    } else {
      partial = options.partials[options.name];
    }
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

function invokePartial(partial, context, options) {
  // Use the current closure context to save the partial-block if this partial
  var currentPartialBlock = options.data && options.data['partial-block'];
  options.partial = true;
  if (options.ids) {
    options.data.contextPath = options.ids[0] || options.data.contextPath;
  }

  var partialBlock = undefined;
  if (options.fn && options.fn !== noop) {
    (function () {
      options.data = _base.createFrame(options.data);
      // Wrapper function to get access to currentPartialBlock from the closure
      var fn = options.fn;
      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        // Restore the partial-block from the closure for the execution of the block
        // i.e. the part inside the block of the partial call.
        options.data = _base.createFrame(options.data);
        options.data['partial-block'] = currentPartialBlock;
        return fn(context, options);
      };
      if (fn.partials) {
        options.partials = Utils.extend({}, options.partials, fn.partials);
      }
    })();
  }

  if (partial === undefined && partialBlock) {
    partial = partialBlock;
  }

  if (partial === undefined) {
    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
  } else if (partial instanceof Function) {
    return partial(context, options);
  }
}

function noop() {
  return '';
}

function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? _base.createFrame(data) : {};
    data.root = context;
  }
  return data;
}

function executeDecorators(fn, prog, container, depths, data, blockParams) {
  if (fn.decorator) {
    var props = {};
    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
    Utils.extend(prog, props);
  }
  return prog;
}

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* global window */


exports.__esModule = true;

exports['default'] = function (Handlebars) {
  /* istanbul ignore next */
  var root = typeof global !== 'undefined' ? global : window,
      $Handlebars = root.Handlebars;
  /* istanbul ignore next */
  Handlebars.noConflict = function () {
    if (root.Handlebars === Handlebars) {
      root.Handlebars = $Handlebars;
    }
    return Handlebars;
  };
};

module.exports = exports['default'];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var STRAIGHT_DIRECTIONS = [{ x: 1, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }];
var DIAGONAL_DIRECTIONS = [{ x: 1, y: 1 }, { x: -1, y: -1 }, { x: -1, y: 1 }, { x: 1, y: -1 }];
var ALL_DIRECTIONS = [{ x: 1, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }, { x: 1, y: 1 }, { x: -1, y: -1 }, { x: -1, y: 1 }, { x: 1, y: -1 }];
var MOVING_BEHAVIORS = {
    // default: stops at first piece with option to kill an enemy piece
    HITTING: 0,
    // stopping is like hitting but without the option to kill (pawn)
    STOPPING: 1
};

var Piece = function () {
    function Piece(owner, name) {
        _classCallCheck(this, Piece);

        this.owner = owner;
        this._name = name;
        this.hasMoved = false;
    }

    _createClass(Piece, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            throw "NotImplemented";
        }
    }, {
        key: "getMovesInDirection",
        value: function getMovesInDirection(game, x, y, direction) {
            var maxDistance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            var behaviour = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : MOVING_BEHAVIORS.HITTING;

            var pos = { x: x, y: y };
            var moves = [];
            var distance = 0;

            while (true) {
                distance++;
                if (distance > maxDistance) break;

                pos.x += direction.x;
                pos.y += direction.y;
                try {
                    var cell = game.getCell(pos.x, pos.y);
                    if (!cell.tile.passable) break;

                    if (cell.piece) {
                        if (behaviour !== MOVING_BEHAVIORS.STOPPING && cell.piece.owner !== this.owner) moves.push({ x: pos.x, y: pos.y });
                        break;
                    }

                    moves.push({ x: pos.x, y: pos.y });
                } catch (err) {
                    // break if OutsideOfBoard. else its an unexpected error
                    if (err !== "OutsideOfBoard") throw err;
                    break;
                }
            }
            return moves;
        }
    }, {
        key: "getOwnerDirection",
        value: function getOwnerDirection() {
            switch (this.owner.number) {
                case 1:
                    return { x: 0, y: -1 };
                case 2:
                    return { x: 0, y: 1 };
                default:
                    throw 'UnknownOwnerDirection';
            }
        }
    }, {
        key: "name",
        get: function get() {
            return this._name;
        }
    }, {
        key: "class",
        get: function get() {
            throw "NotImplemented";
        }
    }]);

    return Piece;
}();

var BlackWhiteChessPiece = function (_Piece) {
    _inherits(BlackWhiteChessPiece, _Piece);

    function BlackWhiteChessPiece(owner, name, filename) {
        _classCallCheck(this, BlackWhiteChessPiece);

        var _this = _possibleConstructorReturn(this, (BlackWhiteChessPiece.__proto__ || Object.getPrototypeOf(BlackWhiteChessPiece)).call(this, owner, name));

        _this.filename = filename;
        return _this;
    }

    _createClass(BlackWhiteChessPiece, [{
        key: "class",
        get: function get() {
            if (this.owner.number === 1) return "white";
            if (this.owner.number === 2) return "black";
            throw "InvalidOwnerNumber";
        }
    }]);

    return BlackWhiteChessPiece;
}(Piece);

var Pawn = exports.Pawn = function (_BlackWhiteChessPiece) {
    _inherits(Pawn, _BlackWhiteChessPiece);

    function Pawn(owner) {
        _classCallCheck(this, Pawn);

        return _possibleConstructorReturn(this, (Pawn.__proto__ || Object.getPrototypeOf(Pawn)).call(this, owner, "Pawn"));
    }

    _createClass(Pawn, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            var moves = [];

            // a pawn can move two spaces if it hasn't moved yet
            var distance = this.hasMoved ? 1 : 2;

            // move in front
            Array.prototype.push.apply(moves, this.getMovesInDirection(game, x, y, this.getOwnerDirection(), distance, MOVING_BEHAVIORS.STOPPING));

            // diagonal moves - only available if the move can kill an opposing piece
            var hittingMoves = [{ x: 1, y: this.getOwnerDirection().y }, { x: -1, y: this.getOwnerDirection().y }];
            for (var d = 0; d < hittingMoves.length; d++) {
                var possibleHittingMove = this.getMovesInDirection(game, x, y, hittingMoves[d], 1);
                if (possibleHittingMove.length === 0) continue;
                var possibleMove = possibleHittingMove[0];
                // check for opposing piece
                if (game.getCell(possibleMove).piece) moves.push(possibleMove);
            }

            // TODO: en passent - oder o eifach nid..

            return moves;
        }
    }, {
        key: "class",
        get: function get() {
            return 'piece-pawn-' + _get(Pawn.prototype.__proto__ || Object.getPrototypeOf(Pawn.prototype), "class", this);
        }
    }]);

    return Pawn;
}(BlackWhiteChessPiece);

var Rook = exports.Rook = function (_BlackWhiteChessPiece2) {
    _inherits(Rook, _BlackWhiteChessPiece2);

    function Rook(owner) {
        _classCallCheck(this, Rook);

        return _possibleConstructorReturn(this, (Rook.__proto__ || Object.getPrototypeOf(Rook)).call(this, owner, "Rook"));
    }

    _createClass(Rook, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            var moves = [];

            for (var d = 0; d < STRAIGHT_DIRECTIONS.length; d++) {
                Array.prototype.push.apply(moves, this.getMovesInDirection(game, x, y, STRAIGHT_DIRECTIONS[d]));
            }

            return moves;
        }
    }, {
        key: "class",
        get: function get() {
            return 'piece-rook-' + _get(Rook.prototype.__proto__ || Object.getPrototypeOf(Rook.prototype), "class", this);
        }
    }]);

    return Rook;
}(BlackWhiteChessPiece);

var Knight = exports.Knight = function (_BlackWhiteChessPiece3) {
    _inherits(Knight, _BlackWhiteChessPiece3);

    function Knight(owner) {
        _classCallCheck(this, Knight);

        return _possibleConstructorReturn(this, (Knight.__proto__ || Object.getPrototypeOf(Knight)).call(this, owner, "Knight"));
    }

    _createClass(Knight, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            var relativeMoves = [{ x: 2, y: 1 }, { x: 2, y: -1 }, { x: -2, y: 1 }, { x: -2, y: -1 }, { x: 1, y: 2 }, { x: -1, y: 2 }, { x: 1, y: -2 }, { x: -1, y: -2 }];
            var moves = [];

            for (var d = 0; d < relativeMoves.length; d++) {
                Array.prototype.push.apply(moves, this.getMovesInDirection(game, x, y, relativeMoves[d], 1));
            }

            return moves;
        }
    }, {
        key: "class",
        get: function get() {
            return 'piece-knight-' + _get(Knight.prototype.__proto__ || Object.getPrototypeOf(Knight.prototype), "class", this);
        }
    }]);

    return Knight;
}(BlackWhiteChessPiece);

var Bishop = exports.Bishop = function (_BlackWhiteChessPiece4) {
    _inherits(Bishop, _BlackWhiteChessPiece4);

    function Bishop(owner) {
        _classCallCheck(this, Bishop);

        return _possibleConstructorReturn(this, (Bishop.__proto__ || Object.getPrototypeOf(Bishop)).call(this, owner, "Bishop"));
    }

    _createClass(Bishop, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            var moves = [];

            for (var d = 0; d < DIAGONAL_DIRECTIONS.length; d++) {
                Array.prototype.push.apply(moves, this.getMovesInDirection(game, x, y, DIAGONAL_DIRECTIONS[d]));
            }

            return moves;
        }
    }, {
        key: "class",
        get: function get() {
            return 'piece-bishop-' + _get(Bishop.prototype.__proto__ || Object.getPrototypeOf(Bishop.prototype), "class", this);
        }
    }]);

    return Bishop;
}(BlackWhiteChessPiece);

var Queen = exports.Queen = function (_BlackWhiteChessPiece5) {
    _inherits(Queen, _BlackWhiteChessPiece5);

    function Queen(owner) {
        _classCallCheck(this, Queen);

        return _possibleConstructorReturn(this, (Queen.__proto__ || Object.getPrototypeOf(Queen)).call(this, owner, "Queen"));
    }

    _createClass(Queen, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            var moves = [];

            for (var d = 0; d < ALL_DIRECTIONS.length; d++) {
                Array.prototype.push.apply(moves, this.getMovesInDirection(game, x, y, ALL_DIRECTIONS[d]));
            }

            return moves;
        }
    }, {
        key: "class",
        get: function get() {
            return 'piece-queen-' + _get(Queen.prototype.__proto__ || Object.getPrototypeOf(Queen.prototype), "class", this);
        }
    }]);

    return Queen;
}(BlackWhiteChessPiece);

var King = exports.King = function (_BlackWhiteChessPiece6) {
    _inherits(King, _BlackWhiteChessPiece6);

    function King(owner) {
        _classCallCheck(this, King);

        return _possibleConstructorReturn(this, (King.__proto__ || Object.getPrototypeOf(King)).call(this, owner, "King"));
    }

    _createClass(King, [{
        key: "getPossibleMoves",
        value: function getPossibleMoves(game, x, y) {
            var moves = [];

            for (var d = 0; d < ALL_DIRECTIONS.length; d++) {
                Array.prototype.push.apply(moves, this.getMovesInDirection(game, x, y, ALL_DIRECTIONS[d], 1));
            }

            return moves;
        }
    }, {
        key: "class",
        get: function get() {
            return 'piece-king-' + _get(King.prototype.__proto__ || Object.getPrototypeOf(King.prototype), "class", this);
        }
    }]);

    return King;
}(BlackWhiteChessPiece);

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Tile = function () {
    function Tile() {
        _classCallCheck(this, Tile);

        this.passable = true;
    }

    _createClass(Tile, [{
        key: "classes",
        get: function get() {
            throw "NotImplemented";
        }
    }]);

    return Tile;
}();

exports.default = Tile;

var BlackTile = exports.BlackTile = function (_Tile) {
    _inherits(BlackTile, _Tile);

    function BlackTile() {
        _classCallCheck(this, BlackTile);

        return _possibleConstructorReturn(this, (BlackTile.__proto__ || Object.getPrototypeOf(BlackTile)).apply(this, arguments));
    }

    _createClass(BlackTile, [{
        key: "classes",
        get: function get() {
            return ["tile-black"];
        }
    }]);

    return BlackTile;
}(Tile);

var WhiteTile = exports.WhiteTile = function (_Tile2) {
    _inherits(WhiteTile, _Tile2);

    function WhiteTile() {
        _classCallCheck(this, WhiteTile);

        return _possibleConstructorReturn(this, (WhiteTile.__proto__ || Object.getPrototypeOf(WhiteTile)).apply(this, arguments));
    }

    _createClass(WhiteTile, [{
        key: "classes",
        get: function get() {
            return ["tile-white"];
        }
    }]);

    return WhiteTile;
}(Tile);

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(24);
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    var stack1;

  return "        <tr>\r\n"
    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{"name":"each","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "        </tr>\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    var stack1;

  return "                "
    + ((stack1 = __default(__webpack_require__(76)).call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{"name":"rendercell","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    return "";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1;

  return "<div class=\"board\">\r\n    <table>\r\n"
    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? depth0.game : depth0)) != null ? stack1.board : stack1),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "    </table>\r\n    <div class=\"overlay\">\r\n        <div class=\"message\">\r\n            <p class=\"title\">So and so message</p>\r\n            <p class=\"content\">Please reload the app</p>\r\n        </div>\r\n    </div>\r\n</div>";
},"useData":true});

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (cell) {
    return cell.render();
};

/***/ }),
/* 77 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgY2Q1Njg0YzE4ZmY3NzZkYmZhMzkiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvZXhjZXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXFzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtaW5oZXJpdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIveG1saHR0cHJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXVyaS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvaXMtYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9tYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvZ2FtZW1hc3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2JpbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWNvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy14aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5YnVmZmVyLnNsaWNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hZnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvdXRmOC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWFycmF5YnVmZmVyL2xpYi9iYXNlNjQtYXJyYXlidWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jsb2IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy1qc29ucC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy93ZWJzb2NrZXQuanMiLCJ3ZWJwYWNrOi8vL3dzIChpZ25vcmVkKSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2Vqc29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90by1hcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFja28yL2luZGV4LmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qcy9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2pzL2dhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2pzL2NlbGwuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL3RlbXBsYXRlcy9jZWxsLmhicyIsIndlYnBhY2s6Ly8vLi4vLi4vbGliL2hhbmRsZWJhcnMucnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9lYWNoLmpzIiwid2VicGFjazovLy8uLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2hlbHBlci1taXNzaW5nLmpzIiwid2VicGFjazovLy8uLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2lmLmpzIiwid2VicGFjazovLy8uLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2xvZy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9sb29rdXAuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy9pbmxpbmUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvc2FmZS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qcy9waWVjZS5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvdGlsZS5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvdGVtcGxhdGVzL2JvYXJkLmhicyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvaGVscGVycy9yZW5kZXJjZWxsLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9jc3MvbWFpbi5zY3NzIl0sIm5hbWVzIjpbImciLCJGdW5jdGlvbiIsImV2YWwiLCJlIiwid2luZG93IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJsb2ciLCJmb3JtYXRBcmdzIiwic2F2ZSIsImxvYWQiLCJ1c2VDb2xvcnMiLCJzdG9yYWdlIiwiY2hyb21lIiwibG9jYWwiLCJsb2NhbHN0b3JhZ2UiLCJjb2xvcnMiLCJwcm9jZXNzIiwidHlwZSIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiY29uc29sZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwibWF0Y2giLCJwYXJzZUludCIsIlJlZ0V4cCIsIiQxIiwiZm9ybWF0dGVycyIsImoiLCJ2IiwiSlNPTiIsInN0cmluZ2lmeSIsImVyciIsIm1lc3NhZ2UiLCJhcmdzIiwibmFtZXNwYWNlIiwiaHVtYW5pemUiLCJkaWZmIiwiYyIsImNvbG9yIiwic3BsaWNlIiwiaW5kZXgiLCJsYXN0QyIsInJlcGxhY2UiLCJwcm90b3R5cGUiLCJhcHBseSIsImNhbGwiLCJhcmd1bWVudHMiLCJuYW1lc3BhY2VzIiwicmVtb3ZlSXRlbSIsImRlYnVnIiwiciIsImVudiIsIkRFQlVHIiwiZW5hYmxlIiwibG9jYWxTdG9yYWdlIiwiRW1pdHRlciIsIm9iaiIsIm1peGluIiwia2V5Iiwib24iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJmbiIsIl9jYWxsYmFja3MiLCJwdXNoIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxlbmd0aCIsImNhbGxiYWNrcyIsImNiIiwiaSIsImVtaXQiLCJzbGljZSIsImxlbiIsImxpc3RlbmVycyIsImhhc0xpc3RlbmVycyIsImtleXMiLCJoYXNCaW5hcnkiLCJzbGljZUJ1ZmZlciIsImFmdGVyIiwidXRmOCIsImJhc2U2NGVuY29kZXIiLCJnbG9iYWwiLCJBcnJheUJ1ZmZlciIsImlzQW5kcm9pZCIsInRlc3QiLCJpc1BoYW50b21KUyIsImRvbnRTZW5kQmxvYnMiLCJwcm90b2NvbCIsInBhY2tldHMiLCJvcGVuIiwiY2xvc2UiLCJwaW5nIiwicG9uZyIsInVwZ3JhZGUiLCJub29wIiwicGFja2V0c2xpc3QiLCJkYXRhIiwiQmxvYiIsImVuY29kZVBhY2tldCIsInBhY2tldCIsInN1cHBvcnRzQmluYXJ5IiwidXRmOGVuY29kZSIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwiYnVmZmVyIiwiZW5jb2RlQXJyYXlCdWZmZXIiLCJlbmNvZGVCbG9iIiwiYmFzZTY0IiwiZW5jb2RlQmFzZTY0T2JqZWN0IiwiZW5jb2RlZCIsImVuY29kZSIsIlN0cmluZyIsInN0cmljdCIsImVuY29kZUJhc2U2NFBhY2tldCIsImNvbnRlbnRBcnJheSIsIlVpbnQ4QXJyYXkiLCJyZXN1bHRCdWZmZXIiLCJieXRlTGVuZ3RoIiwiZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIiLCJmciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZXN1bHQiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJiNjQiLCJzcGxpdCIsInJlYWRBc0RhdGFVUkwiLCJiNjRkYXRhIiwiZnJvbUNoYXJDb2RlIiwidHlwZWQiLCJiYXNpYyIsIkFycmF5IiwiYnRvYSIsImRlY29kZVBhY2tldCIsImJpbmFyeVR5cGUiLCJ1dGY4ZGVjb2RlIiwiY2hhckF0IiwiZGVjb2RlQmFzZTY0UGFja2V0Iiwic3Vic3RyIiwidHJ5RGVjb2RlIiwiTnVtYmVyIiwic3Vic3RyaW5nIiwiYXNBcnJheSIsInJlc3QiLCJkZWNvZGUiLCJtc2ciLCJlbmNvZGVQYXlsb2FkIiwiaXNCaW5hcnkiLCJlbmNvZGVQYXlsb2FkQXNCbG9iIiwiZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIiLCJzZXRMZW5ndGhIZWFkZXIiLCJlbmNvZGVPbmUiLCJkb25lQ2FsbGJhY2siLCJtYXAiLCJyZXN1bHRzIiwiam9pbiIsImFyeSIsImVhY2giLCJkb25lIiwibmV4dCIsImVhY2hXaXRoSW5kZXgiLCJlbCIsImVycm9yIiwiZGVjb2RlUGF5bG9hZCIsImRlY29kZVBheWxvYWRBc0JpbmFyeSIsIm4iLCJsIiwiY2hyIiwicmV0IiwiZW5jb2RlZFBhY2tldHMiLCJ0b3RhbExlbmd0aCIsInJlZHVjZSIsImFjYyIsInAiLCJ0b1N0cmluZyIsInJlc3VsdEFycmF5IiwiYnVmZmVySW5kZXgiLCJmb3JFYWNoIiwiaXNTdHJpbmciLCJhYiIsInZpZXciLCJjaGFyQ29kZUF0IiwibGVuU3RyIiwiYmluYXJ5SWRlbnRpZmllciIsInNpemUiLCJsZW5ndGhBcnkiLCJidWZmZXJUYWlsIiwiYnVmZmVycyIsInRhaWxBcnJheSIsIm1zZ0xlbmd0aCIsInRvdGFsIiwic3RyIiwiaGFzT3duUHJvcGVydHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsImEiLCJiIiwiY29uc3RydWN0b3IiLCJoYXNCaW4iLCJiaW5hcnkiLCJpc0J1ZiIsInR5cGVzIiwiQ09OTkVDVCIsIkRJU0NPTk5FQ1QiLCJFVkVOVCIsIkFDSyIsIkVSUk9SIiwiQklOQVJZX0VWRU5UIiwiQklOQVJZX0FDSyIsIkVuY29kZXIiLCJEZWNvZGVyIiwiZW5jb2RlQXNCaW5hcnkiLCJlbmNvZGluZyIsImVuY29kZUFzU3RyaW5nIiwiYXR0YWNobWVudHMiLCJuc3AiLCJpZCIsIndyaXRlRW5jb2RpbmciLCJibG9ibGVzc0RhdGEiLCJkZWNvbnN0cnVjdGlvbiIsImRlY29uc3RydWN0UGFja2V0IiwicGFjayIsInVuc2hpZnQiLCJyZW1vdmVCbG9icyIsInJlY29uc3RydWN0b3IiLCJhZGQiLCJkZWNvZGVTdHJpbmciLCJCaW5hcnlSZWNvbnN0cnVjdG9yIiwicmVjb25QYWNrIiwiRXJyb3IiLCJ0YWtlQmluYXJ5RGF0YSIsImJ1ZiIsInRyeVBhcnNlIiwicGFyc2UiLCJkZXN0cm95IiwiZmluaXNoZWRSZWNvbnN0cnVjdGlvbiIsImJpbkRhdGEiLCJyZWNvbnN0cnVjdFBhY2tldCIsImhhc0NPUlMiLCJvcHRzIiwieGRvbWFpbiIsInhzY2hlbWUiLCJlbmFibGVzWERSIiwiWE1MSHR0cFJlcXVlc3QiLCJYRG9tYWluUmVxdWVzdCIsImNvbmNhdCIsInBhcnNlciIsIlRyYW5zcG9ydCIsInBhdGgiLCJob3N0bmFtZSIsInBvcnQiLCJzZWN1cmUiLCJxdWVyeSIsInRpbWVzdGFtcFBhcmFtIiwidGltZXN0YW1wUmVxdWVzdHMiLCJyZWFkeVN0YXRlIiwiYWdlbnQiLCJzb2NrZXQiLCJwZngiLCJwYXNzcGhyYXNlIiwiY2VydCIsImNhIiwiY2lwaGVycyIsInJlamVjdFVuYXV0aG9yaXplZCIsImZvcmNlTm9kZSIsImV4dHJhSGVhZGVycyIsImxvY2FsQWRkcmVzcyIsIm9uRXJyb3IiLCJkZXNjIiwiZGVzY3JpcHRpb24iLCJkb09wZW4iLCJkb0Nsb3NlIiwib25DbG9zZSIsInNlbmQiLCJ3cml0ZSIsIm9uT3BlbiIsIndyaXRhYmxlIiwib25EYXRhIiwib25QYWNrZXQiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImNoaWxkcmVuIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicmUiLCJwYXJ0cyIsInBhcnNldXJpIiwic3JjIiwiaW5kZXhPZiIsIm0iLCJleGVjIiwidXJpIiwic291cmNlIiwiaG9zdCIsImF1dGhvcml0eSIsImlwdjZ1cmkiLCJpc0FycmF5Iiwid2l0aE5hdGl2ZUJsb2IiLCJ3aXRoTmF0aXZlRmlsZSIsIkZpbGUiLCJCdWZmZXIiLCJpc0J1ZmZlciIsInRvSlNPTiIsImVpbyIsIlNvY2tldCIsImJpbmQiLCJCYWNrb2ZmIiwiaGFzIiwiTWFuYWdlciIsIm5zcHMiLCJzdWJzIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJJbmZpbml0eSIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsIm1pbiIsIm1heCIsImppdHRlciIsInRpbWVvdXQiLCJjb25uZWN0aW5nIiwibGFzdFBpbmciLCJwYWNrZXRCdWZmZXIiLCJfcGFyc2VyIiwiZW5jb2RlciIsImRlY29kZXIiLCJhdXRvQ29ubmVjdCIsImVtaXRBbGwiLCJ1cGRhdGVTb2NrZXRJZHMiLCJnZW5lcmF0ZUlkIiwiZW5naW5lIiwiX3JlY29ubmVjdGlvbiIsIl9yZWNvbm5lY3Rpb25BdHRlbXB0cyIsIl9yZWNvbm5lY3Rpb25EZWxheSIsInNldE1pbiIsIl9yYW5kb21pemF0aW9uRmFjdG9yIiwic2V0Sml0dGVyIiwiX3JlY29ubmVjdGlvbkRlbGF5TWF4Iiwic2V0TWF4IiwiX3RpbWVvdXQiLCJtYXliZVJlY29ubmVjdE9uT3BlbiIsInJlY29ubmVjdGluZyIsImF0dGVtcHRzIiwicmVjb25uZWN0IiwiY29ubmVjdCIsInNlbGYiLCJza2lwUmVjb25uZWN0Iiwib3BlblN1YiIsIm9ub3BlbiIsImVycm9yU3ViIiwiY2xlYW51cCIsInRpbWVyIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsIm9ucGluZyIsIkRhdGUiLCJvbnBvbmciLCJvbmRhdGEiLCJvbmRlY29kZWQiLCJvbmVycm9yIiwib25Db25uZWN0aW5nIiwib3B0aW9ucyIsInByb2Nlc3NQYWNrZXRRdWV1ZSIsInNoaWZ0Iiwic3Vic0xlbmd0aCIsInN1YiIsImRpc2Nvbm5lY3QiLCJyZXNldCIsIm9uY2xvc2UiLCJyZWFzb24iLCJkZWxheSIsImR1cmF0aW9uIiwib25yZWNvbm5lY3QiLCJhdHRlbXB0IiwiWEhSIiwiSlNPTlAiLCJ3ZWJzb2NrZXQiLCJwb2xsaW5nIiwieGhyIiwieGQiLCJ4cyIsImpzb25wIiwibG9jYXRpb24iLCJpc1NTTCIsImZvcmNlSlNPTlAiLCJwYXJzZXFzIiwiaW5oZXJpdCIsInllYXN0IiwiUG9sbGluZyIsImhhc1hIUjIiLCJyZXNwb25zZVR5cGUiLCJmb3JjZUJhc2U2NCIsIm5hbWUiLCJwb2xsIiwicGF1c2UiLCJvblBhdXNlIiwiZG9Qb2xsIiwiY2FsbGJhY2tmbiIsImRvV3JpdGUiLCJzY2hlbWEiLCJzaWQiLCJpcHY2IiwiYWxwaGFiZXQiLCJzZWVkIiwicHJldiIsIm51bSIsIk1hdGgiLCJmbG9vciIsImRlY29kZWQiLCJub3ciLCJhcnIiLCJ0b0FycmF5IiwiZXZlbnRzIiwiY29ubmVjdF9lcnJvciIsImNvbm5lY3RfdGltZW91dCIsInJlY29ubmVjdF9hdHRlbXB0IiwicmVjb25uZWN0X2ZhaWxlZCIsInJlY29ubmVjdF9lcnJvciIsImlvIiwianNvbiIsImlkcyIsImFja3MiLCJyZWNlaXZlQnVmZmVyIiwic2VuZEJ1ZmZlciIsImNvbm5lY3RlZCIsImRpc2Nvbm5lY3RlZCIsInN1YkV2ZW50cyIsImV2IiwiY29tcHJlc3MiLCJmbGFncyIsInBvcCIsIm9ucGFja2V0Iiwib25jb25uZWN0Iiwib25ldmVudCIsIm9uYWNrIiwib25kaXNjb25uZWN0IiwiYWNrIiwic2VudCIsImVtaXRCdWZmZXJlZCIsIkdBTUVfU1RBVEVTIiwiSU5QVVQiLCJXQUlUSU5HIiwiR2FtZW1hc3RlciIsImdhbWVTdGF0ZSIsImFkbWluIiwibG9jYWxQbGF5ZXIiLCJwbGF5ZXIyIiwiZ2FtZSIsImh0bWwiLCIkIiwicmVuZGVyIiwiYXBwZW5kIiwiZ20iLCJoYW5kbGVDbGljayIsImdldENlbGwiLCJhY3Rpb24iLCJleGVjdXRlIiwiZXhlY3V0ZUFjdGlvbiIsInNob3dOb3RpZmljYXRpb24iLCJzaG93RXJyb3IiLCJjZWxsIiwiZ2V0anFDZWxsIiwiaGFzQ2xhc3MiLCJzb3VyY2VKcUNlbGwiLCJzb3VyY2VDZWxsIiwibG9nRW50cnkiLCJwcmVwYXJlTW92ZSIsImRlc2VsZWN0UGllY2UiLCJwaWVjZSIsIm93bmVyIiwic2VsZWN0UGllY2UiLCJtb3ZlcyIsInJlbW92ZUNsYXNzIiwibW92ZWRQaWVjZUNsYXNzIiwidGFyZ2V0SnFDZWxsIiwidGFyZ2V0Iiwia2lsbGVkUGllY2VDbGFzcyIsImFkZENsYXNzIiwianFjZWxsIiwieCIsInkiLCJib2FyZCIsInBvc3NpYmxlTW92ZXMiLCJnZXRQb3NzaWJsZU1vdmVzIiwibW92ZSIsInRpdGxlIiwiY29udGVudCIsInRleHQiLCJzaG93IiwiaGlkZSIsImZhY3RvcnkiLCJ3Iiwibm9HbG9iYWwiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiY2xhc3MydHlwZSIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ2ZXJzaW9uIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiaW5pdCIsInJ0cmltIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImpxdWVyeSIsInB1c2hTdGFjayIsImVsZW1zIiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWxlbSIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZW5kIiwic29ydCIsImV4dGVuZCIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiZGVlcCIsImlzRnVuY3Rpb24iLCJpc1BsYWluT2JqZWN0IiwiZXhwYW5kbyIsInJhbmRvbSIsImlzUmVhZHkiLCJpc1dpbmRvdyIsImlzTnVtZXJpYyIsImlzTmFOIiwicGFyc2VGbG9hdCIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiaXNBcnJheUxpa2UiLCJ0cmltIiwibWFrZUFycmF5IiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJ2YWx1ZSIsImd1aWQiLCJwcm94eSIsInRtcCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsInNvcnRPcmRlciIsInB1c2hfbmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsIl8iLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwidW5sb2FkSGFuZGxlciIsImRpc2FibGVkQW5jZXN0b3IiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJkaXIiLCJjaGlsZE5vZGVzIiwibm9kZVR5cGUiLCJlbHMiLCJuaWQiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJub2RlTmFtZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInRvU2VsZWN0b3IiLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwibm9kZSIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImF0dHJJZCIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwiaW5uZXJIVE1MIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJ2YWwiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5IiwidG9rZW5zIiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsInRva2VuIiwiY29tcGlsZWQiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInJpc1NpbXBsZSIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInJvb3RqUXVlcnkiLCJyb290IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY29udGVudHMiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGRCYWNrIiwic2libGluZyIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwicmV2ZXJzZSIsInJub3RodG1sd2hpdGUiLCJjcmVhdGVPcHRpb25zIiwib2JqZWN0IiwiZmxhZyIsIkNhbGxiYWNrcyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIklkZW50aXR5IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93IiwiVHlwZUVycm9yIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJ3YXJuIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjYXRjaCIsInJlYWR5V2FpdCIsIndhaXQiLCJjb21wbGV0ZWQiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsImFjY2VwdERhdGEiLCJEYXRhIiwidWlkIiwiY29uZmlndXJhYmxlIiwic2V0IiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImdldERhdGEiLCJkYXRhQXR0ciIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiZGlzcGxheSIsImNzcyIsInN3YXAiLCJvbGQiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJib2R5Iiwic2hvd0hpZGUiLCJ2YWx1ZXMiLCJ0b2dnbGUiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJ3cmFwTWFwIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInJodG1sIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwiY3JlYXRlVGV4dE5vZGUiLCJodG1sUHJlZmlsdGVyIiwiZGl2IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50Iiwib25lIiwib3JpZ0ZuIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsInQiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJmaXgiLCJoYW5kbGVyUXVldWUiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsIm9yaWdpbmFsRXZlbnQiLCJub0J1YmJsZSIsImZvY3VzIiwidHJpZ2dlciIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybWFyZ2luIiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImNvbnRhaW5lciIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsIm1hcmdpbkxlZnQiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsIndpZHRoIiwibWFyZ2luUmlnaHQiLCJwaXhlbE1hcmdpblJpZ2h0VmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbE1hcmdpblJpZ2h0IiwicmVsaWFibGVNYXJnaW5MZWZ0IiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wTmFtZSIsImNhcE5hbWUiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRDbGllbnRSZWN0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJUd2VlbiIsImVhc2luZyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsImRlZmF1bHRQcmVmaWx0ZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImFuaW0iLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcm9wRmlsdGVyIiwic3BlY2lhbEVhc2luZyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsImNvbXBsZXRlIiwidHdlZW5lciIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJ0aW1lIiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsInJmb2N1c01vcnBoIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImV2ZW50UGF0aCIsImlzVHJpZ2dlciIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwiZm9jdXNpbiIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJzIiwidmFsdWVPckZ1bmN0aW9uIiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInRocm93cyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJtb2RpZmllZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVRleHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImRlZmluZSIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJsb29rdXAiLCJtYW5hZ2VycyIsInNhbWVOYW1lc3BhY2UiLCJuZXdDb25uZWN0aW9uIiwiZm9yY2VOZXciLCJtdWx0aXBsZXgiLCJsb2MiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwicnVuQ2xlYXJUaW1lb3V0IiwibWFya2VyIiwiZHJhaW5pbmciLCJjdXJyZW50UXVldWUiLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsIm5leHRUaWNrIiwiSXRlbSIsImFycmF5IiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiY3JlYXRlRGVidWciLCJjb2VyY2UiLCJlbmFibGVkIiwibmFtZXMiLCJza2lwcyIsInByZXZUaW1lIiwic2VsZWN0Q29sb3IiLCJhYnMiLCJjdXJyIiwibXMiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJsb2dGbiIsImgiLCJkIiwibG9uZyIsImZtdExvbmciLCJmbXRTaG9ydCIsInJvdW5kIiwicGx1cmFsIiwiY2VpbCIsInBhY2tldERhdGEiLCJfZGVjb25zdHJ1Y3RQYWNrZXQiLCJwbGFjZWhvbGRlciIsIl9wbGFjZWhvbGRlciIsIm5ld0RhdGEiLCJfcmVjb25zdHJ1Y3RQYWNrZXQiLCJfcmVtb3ZlQmxvYnMiLCJjdXJLZXkiLCJjb250YWluaW5nT2JqZWN0IiwicGVuZGluZ0Jsb2JzIiwiZmlsZVJlYWRlciIsInBhcnNlanNvbiIsInRyYW5zcG9ydE9wdGlvbnMiLCJ3cml0ZUJ1ZmZlciIsInByZXZCdWZmZXJMZW4iLCJwb2xpY3lQb3J0IiwicmVtZW1iZXJVcGdyYWRlIiwib25seUJpbmFyeVVwZ3JhZGVzIiwicGVyTWVzc2FnZURlZmxhdGUiLCJ0aHJlc2hvbGQiLCJmcmVlR2xvYmFsIiwidXBncmFkZXMiLCJwaW5nSW50ZXJ2YWwiLCJwaW5nVGltZW91dCIsInBpbmdJbnRlcnZhbFRpbWVyIiwicGluZ1RpbWVvdXRUaW1lciIsInByaW9yV2Vic29ja2V0U3VjY2VzcyIsImNyZWF0ZVRyYW5zcG9ydCIsIkVJTyIsInJlcXVlc3RUaW1lb3V0IiwicHJvdG9jb2xzIiwibyIsInNldFRyYW5zcG9ydCIsIm9uRHJhaW4iLCJwcm9iZSIsImZhaWxlZCIsIm9uVHJhbnNwb3J0T3BlbiIsInVwZ3JhZGVMb3Nlc0JpbmFyeSIsInVwZ3JhZGluZyIsImZsdXNoIiwiZnJlZXplVHJhbnNwb3J0Iiwib25UcmFuc3BvcnRDbG9zZSIsIm9udXBncmFkZSIsIm9uSGFuZHNoYWtlIiwic2V0UGluZyIsImZpbHRlclVwZ3JhZGVzIiwib25IZWFydGJlYXQiLCJzZW5kUGFja2V0Iiwid2FpdEZvclVwZ3JhZGUiLCJjbGVhbnVwQW5kQ2xvc2UiLCJmaWx0ZXJlZFVwZ3JhZGVzIiwiUmVxdWVzdCIsInJlcXVlc3QiLCJyZXEiLCJzZW5kWGhyIiwicG9sbFhociIsImNyZWF0ZSIsInNldERpc2FibGVIZWFkZXJDaGVjayIsIndpdGhDcmVkZW50aWFscyIsImhhc1hEUiIsIm9uTG9hZCIsInJlcXVlc3RzQ291bnQiLCJyZXF1ZXN0cyIsIm9uU3VjY2VzcyIsImZyb21FcnJvciIsImFycmF5YnVmZmVyIiwiYnl0ZXMiLCJhYnYiLCJpaSIsImVycl9jYiIsImJhaWwiLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJ1Y3MyZGVjb2RlIiwib3V0cHV0IiwiY291bnRlciIsInVjczJlbmNvZGUiLCJjaGVja1NjYWxhclZhbHVlIiwiY29kZVBvaW50IiwiY3JlYXRlQnl0ZSIsImVuY29kZUNvZGVQb2ludCIsInN5bWJvbCIsImNvZGVQb2ludHMiLCJieXRlU3RyaW5nIiwicmVhZENvbnRpbnVhdGlvbkJ5dGUiLCJieXRlSW5kZXgiLCJieXRlQ291bnQiLCJjb250aW51YXRpb25CeXRlIiwiYnl0ZUFycmF5IiwiZGVjb2RlU3ltYm9sIiwiYnl0ZTEiLCJieXRlMiIsImJ5dGUzIiwiYnl0ZTQiLCJjaGFycyIsImJ1ZmZlckxlbmd0aCIsImVuY29kZWQxIiwiZW5jb2RlZDIiLCJlbmNvZGVkMyIsImVuY29kZWQ0IiwiQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsImJsb2JTdXBwb3J0ZWQiLCJibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXciLCJibG9iQnVpbGRlclN1cHBvcnRlZCIsImdldEJsb2IiLCJtYXBBcnJheUJ1ZmZlclZpZXdzIiwiY2h1bmsiLCJieXRlT2Zmc2V0IiwiQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvciIsImJiIiwiQmxvYkNvbnN0cnVjdG9yIiwiSlNPTlBQb2xsaW5nIiwick5ld2xpbmUiLCJyRXNjYXBlZE5ld2xpbmUiLCJfX19laW8iLCJmb3JtIiwiaWZyYW1lIiwiaW5zZXJ0QXQiLCJpc1VBZ2Vja28iLCJhcmVhIiwiaWZyYW1lSWQiLCJpbml0SWZyYW1lIiwiQnJvd3NlcldlYlNvY2tldCIsIldlYlNvY2tldCIsIk1veldlYlNvY2tldCIsIk5vZGVXZWJTb2NrZXQiLCJXUyIsInVzaW5nQnJvd3NlcldlYlNvY2tldCIsIndzIiwic3VwcG9ydHMiLCJhZGRFdmVudExpc3RlbmVycyIsIm9ubWVzc2FnZSIsInJ2YWxpZGNoYXJzIiwicnZhbGlkZXNjYXBlIiwicnZhbGlkdG9rZW5zIiwicnZhbGlkYnJhY2VzIiwicnRyaW1MZWZ0IiwicnRyaW1SaWdodCIsImZhY3RvciIsInBvdyIsInJhbmQiLCJkZXZpYXRpb24iLCJQbGF5ZXIiLCJudW1iZXIiLCJHYW1lIiwicnVsZXMiLCJwbGF5ZXIxIiwiZ2FtZUxvZyIsImN1cnJlbnRNb3ZlQ2FjaGUiLCJwbGF5ZXJDb3VudCIsImdlbmVyYXRlQ2hlY2tlZEJvYXJkIiwidGFyZ2V0Q2VsbCIsInBsYXllck51bWJlciIsImNsYXNzIiwiY2hlY2tNb3ZlIiwic3ltTG9nRW50cnkiLCJwaWVjZXMiLCJoYXNNb3ZlZCIsInJvdyIsInRlbXBsYXRlIiwiY29scyIsIkNlbGwiLCJ0aWxlIiwiX3RpbGUiLCJjbHMiLCJTVFJBSUdIVF9ESVJFQ1RJT05TIiwiRElBR09OQUxfRElSRUNUSU9OUyIsIkFMTF9ESVJFQ1RJT05TIiwiTU9WSU5HX0JFSEFWSU9SUyIsIkhJVFRJTkciLCJTVE9QUElORyIsIlBpZWNlIiwiX25hbWUiLCJkaXJlY3Rpb24iLCJtYXhEaXN0YW5jZSIsImJlaGF2aW91ciIsImRpc3RhbmNlIiwicGFzc2FibGUiLCJCbGFja1doaXRlQ2hlc3NQaWVjZSIsImZpbGVuYW1lIiwiUGF3biIsImdldE1vdmVzSW5EaXJlY3Rpb24iLCJnZXRPd25lckRpcmVjdGlvbiIsImhpdHRpbmdNb3ZlcyIsInBvc3NpYmxlSGl0dGluZ01vdmUiLCJwb3NzaWJsZU1vdmUiLCJSb29rIiwiS25pZ2h0IiwicmVsYXRpdmVNb3ZlcyIsIkJpc2hvcCIsIlF1ZWVuIiwiS2luZyIsIlRpbGUiLCJCbGFja1RpbGUiLCJXaGl0ZVRpbGUiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7O0FDN0RBLElBQUlBLENBQUo7O0FBRUE7QUFD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QUs0dUMsbUJBQUwsQ0FBeUJwd0MsSUFBekIsRUFBK0JnQyxDQUEvQixFQUFrQ0MsQ0FBbEMsRUFBcUNxdEMsZUFBZWxMLENBQWYsQ0FBckMsRUFBd0QsQ0FBeEQsQ0FBbEM7QUFDSDs7QUFFRCxtQkFBTzVpQyxLQUFQO0FBQ0g7Ozs0QkFaVztBQUNSLG1CQUFPLHNHQUFQO0FBQ0g7Ozs7RUFQcUJ5dUMsb0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQ3ZPTGMsSTtBQUNqQixvQkFBYztBQUFBOztBQUNWLGFBQUtmLFFBQUwsR0FBZ0IsSUFBaEI7QUFDSDs7Ozs0QkFFYTtBQUNWLGtCQUFNLGdCQUFOO0FBQ0g7Ozs7OztrQkFQZ0JlLEk7O0lBVVJDLFMsV0FBQUEsUzs7Ozs7Ozs7Ozs7NEJBQ0s7QUFDVixtQkFBTyxDQUFDLFlBQUQsQ0FBUDtBQUNIOzs7O0VBSDBCRCxJOztJQU1sQkUsUyxXQUFBQSxTOzs7Ozs7Ozs7Ozs0QkFDSztBQUNWLG1CQUFPLENBQUMsWUFBRCxDQUFQO0FBQ0g7Ozs7RUFIMEJGLEk7Ozs7OztBQ2hCL0I7QUFDQSx5QkFBeUIsdURBQXVEO0FBQ2hGLGlFQUFpRTtBQUNqRTs7QUFFQTtBQUNBLHlGQUF5RixVQUFVLHVCQUF1Qix5RUFBeUU7QUFDbk07QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSwrR0FBaUssVUFBVSw2QkFBNkIseUVBQXlFO0FBQ2pSO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0EseUZBQXlGLHdGQUF3Rix1QkFBdUIseUVBQXlFO0FBQ2pSO0FBQ0EsQ0FBQyxnQkFBZ0IsRTs7Ozs7Ozs7O0FDdEJqQmh1RCxPQUFPQyxPQUFQLEdBQWlCLFVBQVM2ZCxJQUFULEVBQWU7QUFDNUIsV0FBT0EsS0FBS1YsTUFBTCxFQUFQO0FBQ0gsQ0FGRCxDOzs7Ozs7QUNBQSx5QyIsImZpbGUiOiJhcHAuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjYpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGNkNTY4NGMxOGZmNzc2ZGJmYTM5IiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZVxuICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlXG4gICAgICAgICAgICAgICAgICA/IGNocm9tZS5zdG9yYWdlLmxvY2FsXG4gICAgICAgICAgICAgICAgICA6IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcbiAgJ2xpZ2h0c2VhZ3JlZW4nLFxuICAnZm9yZXN0Z3JlZW4nLFxuICAnZ29sZGVucm9kJyxcbiAgJ2RvZGdlcmJsdWUnLFxuICAnZGFya29yY2hpZCcsXG4gICdjcmltc29uJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcbiAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgLy8gZXhwbGljaXRseVxuICBpZiAod2luZG93ICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG4gIHJldHVybiAoZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHdpbmRvdyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuICAgIC8vIGRvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgICAobmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0JylcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG5cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwiY29uc3QgZXNjYXBlID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiN4Mjc7JyxcbiAgJ2AnOiAnJiN4NjA7JyxcbiAgJz0nOiAnJiN4M0Q7J1xufTtcblxuY29uc3QgYmFkQ2hhcnMgPSAvWyY8PlwiJ2A9XS9nLFxuICAgICAgcG9zc2libGUgPSAvWyY8PlwiJ2A9XS87XG5cbmZ1bmN0aW9uIGVzY2FwZUNoYXIoY2hyKSB7XG4gIHJldHVybiBlc2NhcGVbY2hyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChvYmovKiAsIC4uLnNvdXJjZSAqLykge1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAobGV0IGtleSBpbiBhcmd1bWVudHNbaV0pIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJndW1lbnRzW2ldLCBrZXkpKSB7XG4gICAgICAgIG9ialtrZXldID0gYXJndW1lbnRzW2ldW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGxldCB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8vIFNvdXJjZWQgZnJvbSBsb2Rhc2hcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9sb2Rhc2gvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHRcbi8qIGVzbGludC1kaXNhYmxlIGZ1bmMtc3R5bGUgKi9cbmxldCBpc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn07XG4vLyBmYWxsYmFjayBmb3Igb2xkZXIgdmVyc2lvbnMgb2YgQ2hyb21lIGFuZCBTYWZhcmlcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaXNGdW5jdGlvbigveC8pKSB7XG4gIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH07XG59XG5leHBvcnQge2lzRnVuY3Rpb259O1xuLyogZXNsaW50LWVuYWJsZSBmdW5jLXN0eWxlICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSA/IHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nIDogZmFsc2U7XG59O1xuXG4vLyBPbGRlciBJRSB2ZXJzaW9ucyBkbyBub3QgZGlyZWN0bHkgc3VwcG9ydCBpbmRleE9mIHNvIHdlIG11c3QgaW1wbGVtZW50IG91ciBvd24sIHNhZGx5LlxuZXhwb3J0IGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUV4cHJlc3Npb24oc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGVzY2FwZSBTYWZlU3RyaW5ncywgc2luY2UgdGhleSdyZSBhbHJlYWR5IHNhZmVcbiAgICBpZiAoc3RyaW5nICYmIHN0cmluZy50b0hUTUwpIHtcbiAgICAgIHJldHVybiBzdHJpbmcudG9IVE1MKCk7XG4gICAgfSBlbHNlIGlmIChzdHJpbmcgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZyArICcnO1xuICAgIH1cblxuICAgIC8vIEZvcmNlIGEgc3RyaW5nIGNvbnZlcnNpb24gYXMgdGhpcyB3aWxsIGJlIGRvbmUgYnkgdGhlIGFwcGVuZCByZWdhcmRsZXNzIGFuZFxuICAgIC8vIHRoZSByZWdleCB0ZXN0IHdpbGwgZG8gdGhpcyB0cmFuc3BhcmVudGx5IGJlaGluZCB0aGUgc2NlbmVzLCBjYXVzaW5nIGlzc3VlcyBpZlxuICAgIC8vIGFuIG9iamVjdCdzIHRvIHN0cmluZyBoYXMgZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGl0LlxuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nO1xuICB9XG5cbiAgaWYgKCFwb3NzaWJsZS50ZXN0KHN0cmluZykpIHsgcmV0dXJuIHN0cmluZzsgfVxuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoYmFkQ2hhcnMsIGVzY2FwZUNoYXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGcmFtZShvYmplY3QpIHtcbiAgbGV0IGZyYW1lID0gZXh0ZW5kKHt9LCBvYmplY3QpO1xuICBmcmFtZS5fcGFyZW50ID0gb2JqZWN0O1xuICByZXR1cm4gZnJhbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBibG9ja1BhcmFtcyhwYXJhbXMsIGlkcykge1xuICBwYXJhbXMucGF0aCA9IGlkcztcbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZENvbnRleHRQYXRoKGNvbnRleHRQYXRoLCBpZCkge1xuICByZXR1cm4gKGNvbnRleHRQYXRoID8gY29udGV4dFBhdGggKyAnLicgOiAnJykgKyBpZDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi8uLi9saWIvaGFuZGxlYmFycy91dGlscy5qcyIsIlxyXG4vKipcclxuICogRXhwb3NlIGBFbWl0dGVyYC5cclxuICovXHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xyXG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcclxuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcclxuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cclxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcclxuICAgIC5wdXNoKGZuKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcclxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgZnVuY3Rpb24gb24oKSB7XHJcbiAgICB0aGlzLm9mZihldmVudCwgb24pO1xyXG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIG9uLmZuID0gZm47XHJcbiAgdGhpcy5vbihldmVudCwgb24pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXHJcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgLy8gYWxsXHJcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHNwZWNpZmljIGV2ZW50XHJcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xyXG5cclxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXHJcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXHJcbiAgdmFyIGNiO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcclxuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XHJcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXHJcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcblxyXG4gIGlmIChjYWxsYmFja3MpIHtcclxuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xudmFyIGhhc0JpbmFyeSA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG52YXIgc2xpY2VCdWZmZXIgPSByZXF1aXJlKCdhcnJheWJ1ZmZlci5zbGljZScpO1xudmFyIGFmdGVyID0gcmVxdWlyZSgnYWZ0ZXInKTtcbnZhciB1dGY4ID0gcmVxdWlyZSgnLi91dGY4Jyk7XG5cbnZhciBiYXNlNjRlbmNvZGVyO1xuaWYgKGdsb2JhbCAmJiBnbG9iYWwuQXJyYXlCdWZmZXIpIHtcbiAgYmFzZTY0ZW5jb2RlciA9IHJlcXVpcmUoJ2Jhc2U2NC1hcnJheWJ1ZmZlcicpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBydW5uaW5nIGFuIGFuZHJvaWQgYnJvd3Nlci4gVGhhdCByZXF1aXJlcyB1cyB0byB1c2VcbiAqIEFycmF5QnVmZmVyIHdpdGggcG9sbGluZyB0cmFuc3BvcnRzLi4uXG4gKlxuICogaHR0cDovL2doaW5kYS5uZXQvanBlZy1ibG9iLWFqYXgtYW5kcm9pZC9cbiAqL1xuXG52YXIgaXNBbmRyb2lkID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL0FuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBydW5uaW5nIGluIFBoYW50b21KUy5cbiAqIFVwbG9hZGluZyBhIEJsb2Igd2l0aCBQaGFudG9tSlMgZG9lcyBub3Qgd29yayBjb3JyZWN0bHksIGFzIHJlcG9ydGVkIGhlcmU6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYXJpeWEvcGhhbnRvbWpzL2lzc3Vlcy8xMTM5NVxuICogQHR5cGUgYm9vbGVhblxuICovXG52YXIgaXNQaGFudG9tSlMgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvUGhhbnRvbUpTL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBXaGVuIHRydWUsIGF2b2lkcyB1c2luZyBCbG9icyB0byBlbmNvZGUgcGF5bG9hZHMuXG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBkb250U2VuZEJsb2JzID0gaXNBbmRyb2lkIHx8IGlzUGhhbnRvbUpTO1xuXG4vKipcbiAqIEN1cnJlbnQgcHJvdG9jb2wgdmVyc2lvbi5cbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gMztcblxuLyoqXG4gKiBQYWNrZXQgdHlwZXMuXG4gKi9cblxudmFyIHBhY2tldHMgPSBleHBvcnRzLnBhY2tldHMgPSB7XG4gICAgb3BlbjogICAgIDAgICAgLy8gbm9uLXdzXG4gICwgY2xvc2U6ICAgIDEgICAgLy8gbm9uLXdzXG4gICwgcGluZzogICAgIDJcbiAgLCBwb25nOiAgICAgM1xuICAsIG1lc3NhZ2U6ICA0XG4gICwgdXBncmFkZTogIDVcbiAgLCBub29wOiAgICAgNlxufTtcblxudmFyIHBhY2tldHNsaXN0ID0ga2V5cyhwYWNrZXRzKTtcblxuLyoqXG4gKiBQcmVtYWRlIGVycm9yIHBhY2tldC5cbiAqL1xuXG52YXIgZXJyID0geyB0eXBlOiAnZXJyb3InLCBkYXRhOiAncGFyc2VyIGVycm9yJyB9O1xuXG4vKipcbiAqIENyZWF0ZSBhIGJsb2IgYXBpIGV2ZW4gZm9yIGJsb2IgYnVpbGRlciB3aGVuIHZlbmRvciBwcmVmaXhlcyBleGlzdFxuICovXG5cbnZhciBCbG9iID0gcmVxdWlyZSgnYmxvYicpO1xuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQuXG4gKlxuICogICAgIDxwYWNrZXQgdHlwZSBpZD4gWyA8ZGF0YT4gXVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDVoZWxsbyB3b3JsZFxuICogICAgIDNcbiAqICAgICA0XG4gKlxuICogQmluYXJ5IGlzIGVuY29kZWQgaW4gYW4gaWRlbnRpY2FsIHByaW5jaXBsZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIHV0ZjhlbmNvZGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIHV0ZjhlbmNvZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHV0ZjhlbmNvZGU7XG4gICAgdXRmOGVuY29kZSA9IG51bGw7XG4gIH1cblxuICB2YXIgZGF0YSA9IChwYWNrZXQuZGF0YSA9PT0gdW5kZWZpbmVkKVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiBwYWNrZXQuZGF0YS5idWZmZXIgfHwgcGFja2V0LmRhdGE7XG5cbiAgaWYgKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKEJsb2IgJiYgZGF0YSBpbnN0YW5jZW9mIGdsb2JhbC5CbG9iKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gbWlnaHQgYmUgYW4gb2JqZWN0IHdpdGggeyBiYXNlNjQ6IHRydWUsIGRhdGE6IGRhdGFBc0Jhc2U2NFN0cmluZyB9XG4gIGlmIChkYXRhICYmIGRhdGEuYmFzZTY0KSB7XG4gICAgcmV0dXJuIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFNlbmRpbmcgZGF0YSBhcyBhIHV0Zi04IHN0cmluZ1xuICB2YXIgZW5jb2RlZCA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuXG4gIC8vIGRhdGEgZnJhZ21lbnQgaXMgb3B0aW9uYWxcbiAgaWYgKHVuZGVmaW5lZCAhPT0gcGFja2V0LmRhdGEpIHtcbiAgICBlbmNvZGVkICs9IHV0ZjhlbmNvZGUgPyB1dGY4LmVuY29kZShTdHJpbmcocGFja2V0LmRhdGEpLCB7IHN0cmljdDogZmFsc2UgfSkgOiBTdHJpbmcocGFja2V0LmRhdGEpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKCcnICsgZW5jb2RlZCk7XG5cbn07XG5cbmZ1bmN0aW9uIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKSB7XG4gIC8vIHBhY2tldCBkYXRhIGlzIGFuIG9iamVjdCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdICsgcGFja2V0LmRhdGEuZGF0YTtcbiAgcmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpO1xufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgaGVscGVycyBmb3IgYmluYXJ5IHR5cGVzXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBjb250ZW50QXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgdmFyIHJlc3VsdEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDEgKyBkYXRhLmJ5dGVMZW5ndGgpO1xuXG4gIHJlc3VsdEJ1ZmZlclswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRlbnRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdEJ1ZmZlcltpKzFdID0gY29udGVudEFycmF5W2ldO1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEJ1ZmZlci5idWZmZXIpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgZnIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgcGFja2V0LmRhdGEgPSBmci5yZXN1bHQ7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgdHJ1ZSwgY2FsbGJhY2spO1xuICB9O1xuICByZXR1cm4gZnIucmVhZEFzQXJyYXlCdWZmZXIocGFja2V0LmRhdGEpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVCbG9iKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAoZG9udFNlbmRCbG9icykge1xuICAgIHJldHVybiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gIGxlbmd0aFswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtsZW5ndGguYnVmZmVyLCBwYWNrZXQuZGF0YV0pO1xuXG4gIHJldHVybiBjYWxsYmFjayhibG9iKTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgcGFja2V0IHdpdGggYmluYXJ5IGRhdGEgaW4gYSBiYXNlNjQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCwgaGFzIGB0eXBlYCBhbmQgYGRhdGFgXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGJhc2U2NCBlbmNvZGVkIG1lc3NhZ2VcbiAqL1xuXG5leHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgY2FsbGJhY2spIHtcbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdO1xuICBpZiAoQmxvYiAmJiBwYWNrZXQuZGF0YSBpbnN0YW5jZW9mIGdsb2JhbC5CbG9iKSB7XG4gICAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiNjQgPSBmci5yZXN1bHQuc3BsaXQoJywnKVsxXTtcbiAgICAgIGNhbGxiYWNrKG1lc3NhZ2UgKyBiNjQpO1xuICAgIH07XG4gICAgcmV0dXJuIGZyLnJlYWRBc0RhdGFVUkwocGFja2V0LmRhdGEpO1xuICB9XG5cbiAgdmFyIGI2NGRhdGE7XG4gIHRyeSB7XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlQaG9uZSBTYWZhcmkgZG9lc24ndCBsZXQgeW91IGFwcGx5IHdpdGggdHlwZWQgYXJyYXlzXG4gICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpO1xuICAgIHZhciBiYXNpYyA9IG5ldyBBcnJheSh0eXBlZC5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJhc2ljW2ldID0gdHlwZWRbaV07XG4gICAgfVxuICAgIGI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJhc2ljKTtcbiAgfVxuICBtZXNzYWdlICs9IGdsb2JhbC5idG9hKGI2NGRhdGEpO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59O1xuXG4vKipcbiAqIERlY29kZXMgYSBwYWNrZXQuIENoYW5nZXMgZm9ybWF0IHRvIEJsb2IgaWYgcmVxdWVzdGVkLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBgdHlwZWAgYW5kIGBkYXRhYCAoaWYgYW55KVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYWNrZXQgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgdXRmOGRlY29kZSkge1xuICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGVycjtcbiAgfVxuICAvLyBTdHJpbmcgZGF0YVxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGRhdGEuY2hhckF0KDApID09PSAnYicpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldChkYXRhLnN1YnN0cigxKSwgYmluYXJ5VHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHV0ZjhkZWNvZGUpIHtcbiAgICAgIGRhdGEgPSB0cnlEZWNvZGUoZGF0YSk7XG4gICAgICBpZiAoZGF0YSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHR5cGUgPSBkYXRhLmNoYXJBdCgwKTtcblxuICAgIGlmIChOdW1iZXIodHlwZSkgIT0gdHlwZSB8fCAhcGFja2V0c2xpc3RbdHlwZV0pIHtcbiAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IGRhdGEuc3Vic3RyaW5nKDEpIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIGFzQXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgdmFyIHR5cGUgPSBhc0FycmF5WzBdO1xuICB2YXIgcmVzdCA9IHNsaWNlQnVmZmVyKGRhdGEsIDEpO1xuICBpZiAoQmxvYiAmJiBiaW5hcnlUeXBlID09PSAnYmxvYicpIHtcbiAgICByZXN0ID0gbmV3IEJsb2IoW3Jlc3RdKTtcbiAgfVxuICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogcmVzdCB9O1xufTtcblxuZnVuY3Rpb24gdHJ5RGVjb2RlKGRhdGEpIHtcbiAgdHJ5IHtcbiAgICBkYXRhID0gdXRmOC5kZWNvZGUoZGF0YSwgeyBzdHJpY3Q6IGZhbHNlIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIERlY29kZXMgYSBwYWNrZXQgZW5jb2RlZCBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihtc2csIGJpbmFyeVR5cGUpIHtcbiAgdmFyIHR5cGUgPSBwYWNrZXRzbGlzdFttc2cuY2hhckF0KDApXTtcbiAgaWYgKCFiYXNlNjRlbmNvZGVyKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogeyBiYXNlNjQ6IHRydWUsIGRhdGE6IG1zZy5zdWJzdHIoMSkgfSB9O1xuICB9XG5cbiAgdmFyIGRhdGEgPSBiYXNlNjRlbmNvZGVyLmRlY29kZShtc2cuc3Vic3RyKDEpKTtcblxuICBpZiAoYmluYXJ5VHlwZSA9PT0gJ2Jsb2InICYmIEJsb2IpIHtcbiAgICBkYXRhID0gbmV3IEJsb2IoW2RhdGFdKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IGRhdGEgfTtcbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkuXG4gKlxuICogICAgIDxsZW5ndGg+OmRhdGFcbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICAxMTpoZWxsbyB3b3JsZDI6aGlcbiAqXG4gKiBJZiBhbnkgY29udGVudHMgYXJlIGJpbmFyeSwgdGhleSB3aWxsIGJlIGVuY29kZWQgYXMgYmFzZTY0IHN0cmluZ3MuIEJhc2U2NFxuICogZW5jb2RlZCBzdHJpbmdzIGFyZSBtYXJrZWQgd2l0aCBhIGIgYmVmb3JlIHRoZSBsZW5ndGggc3BlY2lmaWVyXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKHBhY2tldHMsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHN1cHBvcnRzQmluYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBzdXBwb3J0c0JpbmFyeTtcbiAgICBzdXBwb3J0c0JpbmFyeSA9IG51bGw7XG4gIH1cblxuICB2YXIgaXNCaW5hcnkgPSBoYXNCaW5hcnkocGFja2V0cyk7XG5cbiAgaWYgKHN1cHBvcnRzQmluYXJ5ICYmIGlzQmluYXJ5KSB7XG4gICAgaWYgKEJsb2IgJiYgIWRvbnRTZW5kQmxvYnMpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IocGFja2V0cywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyKHBhY2tldHMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soJzA6Jyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkge1xuICAgIHJldHVybiBtZXNzYWdlLmxlbmd0aCArICc6JyArIG1lc3NhZ2U7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsICFpc0JpbmFyeSA/IGZhbHNlIDogc3VwcG9ydHNCaW5hcnksIGZhbHNlLCBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICBkb25lQ2FsbGJhY2sobnVsbCwgc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRzLmpvaW4oJycpKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEFzeW5jIGFycmF5IG1hcCB1c2luZyBhZnRlclxuICovXG5cbmZ1bmN0aW9uIG1hcChhcnksIGVhY2gsIGRvbmUpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShhcnkubGVuZ3RoKTtcbiAgdmFyIG5leHQgPSBhZnRlcihhcnkubGVuZ3RoLCBkb25lKTtcblxuICB2YXIgZWFjaFdpdGhJbmRleCA9IGZ1bmN0aW9uKGksIGVsLCBjYikge1xuICAgIGVhY2goZWwsIGZ1bmN0aW9uKGVycm9yLCBtc2cpIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1zZztcbiAgICAgIGNiKGVycm9yLCByZXN1bHQpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgZWFjaFdpdGhJbmRleChpLCBhcnlbaV0sIG5leHQpO1xuICB9XG59XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFBvc3NpYmxlIGJpbmFyeSBjb250ZW50cyBhcmVcbiAqIGRlY29kZWQgZnJvbSB0aGVpciBiYXNlNjQgcmVwcmVzZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSwgY2FsbGJhY2sgbWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5KGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYmluYXJ5VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gYmluYXJ5VHlwZTtcbiAgICBiaW5hcnlUeXBlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBwYWNrZXQ7XG4gIGlmIChkYXRhID09PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSAnJywgbiwgbXNnO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gZGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hyID0gZGF0YS5jaGFyQXQoaSk7XG5cbiAgICBpZiAoY2hyICE9PSAnOicpIHtcbiAgICAgIGxlbmd0aCArPSBjaHI7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoID09PSAnJyB8fCAobGVuZ3RoICE9IChuID0gTnVtYmVyKGxlbmd0aCkpKSkge1xuICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgfVxuXG4gICAgbXNnID0gZGF0YS5zdWJzdHIoaSArIDEsIG4pO1xuXG4gICAgaWYgKGxlbmd0aCAhPSBtc2cubGVuZ3RoKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBpZiAobXNnLmxlbmd0aCkge1xuICAgICAgcGFja2V0ID0gZXhwb3J0cy5kZWNvZGVQYWNrZXQobXNnLCBiaW5hcnlUeXBlLCBmYWxzZSk7XG5cbiAgICAgIGlmIChlcnIudHlwZSA9PT0gcGFja2V0LnR5cGUgJiYgZXJyLmRhdGEgPT09IHBhY2tldC5kYXRhKSB7XG4gICAgICAgIC8vIHBhcnNlciBlcnJvciBpbiBpbmRpdmlkdWFsIHBhY2tldCAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXQgPSBjYWxsYmFjayhwYWNrZXQsIGkgKyBuLCBsKTtcbiAgICAgIGlmIChmYWxzZSA9PT0gcmV0KSByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWR2YW5jZSBjdXJzb3JcbiAgICBpICs9IG47XG4gICAgbGVuZ3RoID0gJyc7XG4gIH1cblxuICBpZiAobGVuZ3RoICE9PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG59O1xuXG4vKipcbiAqIEVuY29kZXMgbXVsdGlwbGUgbWVzc2FnZXMgKHBheWxvYWQpIGFzIGJpbmFyeS5cbiAqXG4gKiA8MSA9IGJpbmFyeSwgMCA9IHN0cmluZz48bnVtYmVyIGZyb20gMC05PjxudW1iZXIgZnJvbSAwLTk+Wy4uLl08bnVtYmVyXG4gKiAyNTU+PGRhdGE+XG4gKlxuICogRXhhbXBsZTpcbiAqIDEgMyAyNTUgMSAyIDMsIGlmIHRoZSBiaW5hcnkgY29udGVudHMgYXJlIGludGVycHJldGVkIGFzIDggYml0IGludGVnZXJzXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQHJldHVybiB7QXJyYXlCdWZmZXJ9IGVuY29kZWQgcGF5bG9hZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEFycmF5QnVmZmVyKDApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIGRvbmVDYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgZW5jb2RlZFBhY2tldHMpIHtcbiAgICB2YXIgdG90YWxMZW5ndGggPSBlbmNvZGVkUGFja2V0cy5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBwKSB7XG4gICAgICB2YXIgbGVuO1xuICAgICAgaWYgKHR5cGVvZiBwID09PSAnc3RyaW5nJyl7XG4gICAgICAgIGxlbiA9IHAubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVuID0gcC5ieXRlTGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYyArIGxlbi50b1N0cmluZygpLmxlbmd0aCArIGxlbiArIDI7IC8vIHN0cmluZy9iaW5hcnkgaWRlbnRpZmllciArIHNlcGFyYXRvciA9IDJcbiAgICB9LCAwKTtcblxuICAgIHZhciByZXN1bHRBcnJheSA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcblxuICAgIHZhciBidWZmZXJJbmRleCA9IDA7XG4gICAgZW5jb2RlZFBhY2tldHMuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICB2YXIgaXNTdHJpbmcgPSB0eXBlb2YgcCA9PT0gJ3N0cmluZyc7XG4gICAgICB2YXIgYWIgPSBwO1xuICAgICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkocC5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2aWV3W2ldID0gcC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGFiID0gdmlldy5idWZmZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZykgeyAvLyBub3QgdHJ1ZSBiaW5hcnlcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAwO1xuICAgICAgfSBlbHNlIHsgLy8gdHJ1ZSBiaW5hcnlcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuU3RyID0gYWIuYnl0ZUxlbmd0aC50b1N0cmluZygpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAyNTU7XG5cbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gdmlld1tpXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRBcnJheS5idWZmZXIpO1xuICB9KTtcbn07XG5cbi8qKlxuICogRW5jb2RlIGFzIEJsb2JcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IgPSBmdW5jdGlvbihwYWNrZXRzLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHRydWUsIHRydWUsIGZ1bmN0aW9uKGVuY29kZWQpIHtcbiAgICAgIHZhciBiaW5hcnlJZGVudGlmaWVyID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMTtcbiAgICAgIGlmICh0eXBlb2YgZW5jb2RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShlbmNvZGVkLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jb2RlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBlbmNvZGVkLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RlZCA9IHZpZXcuYnVmZmVyO1xuICAgICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlbiA9IChlbmNvZGVkIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpXG4gICAgICAgID8gZW5jb2RlZC5ieXRlTGVuZ3RoXG4gICAgICAgIDogZW5jb2RlZC5zaXplO1xuXG4gICAgICB2YXIgbGVuU3RyID0gbGVuLnRvU3RyaW5nKCk7XG4gICAgICB2YXIgbGVuZ3RoQXJ5ID0gbmV3IFVpbnQ4QXJyYXkobGVuU3RyLmxlbmd0aCArIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGVuZ3RoQXJ5W2ldID0gcGFyc2VJbnQobGVuU3RyW2ldKTtcbiAgICAgIH1cbiAgICAgIGxlbmd0aEFyeVtsZW5TdHIubGVuZ3RoXSA9IDI1NTtcblxuICAgICAgaWYgKEJsb2IpIHtcbiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbYmluYXJ5SWRlbnRpZmllci5idWZmZXIsIGxlbmd0aEFyeS5idWZmZXIsIGVuY29kZWRdKTtcbiAgICAgICAgZG9uZUNhbGxiYWNrKG51bGwsIGJsb2IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBCbG9iKHJlc3VsdHMpKTtcbiAgfSk7XG59O1xuXG4vKlxuICogRGVjb2RlcyBkYXRhIHdoZW4gYSBwYXlsb2FkIGlzIG1heWJlIGV4cGVjdGVkLiBTdHJpbmdzIGFyZSBkZWNvZGVkIGJ5XG4gKiBpbnRlcnByZXRpbmcgZWFjaCBieXRlIGFzIGEga2V5IGNvZGUgZm9yIGVudHJpZXMgbWFya2VkIHRvIHN0YXJ0IHdpdGggMC4gU2VlXG4gKiBkZXNjcmlwdGlvbiBvZiBlbmNvZGVQYXlsb2FkQXNCaW5hcnlcbiAqXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIGJ1ZmZlclRhaWwgPSBkYXRhO1xuICB2YXIgYnVmZmVycyA9IFtdO1xuXG4gIHdoaWxlIChidWZmZXJUYWlsLmJ5dGVMZW5ndGggPiAwKSB7XG4gICAgdmFyIHRhaWxBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlclRhaWwpO1xuICAgIHZhciBpc1N0cmluZyA9IHRhaWxBcnJheVswXSA9PT0gMDtcbiAgICB2YXIgbXNnTGVuZ3RoID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgOyBpKyspIHtcbiAgICAgIGlmICh0YWlsQXJyYXlbaV0gPT09IDI1NSkgYnJlYWs7XG5cbiAgICAgIC8vIDMxMCA9IGNoYXIgbGVuZ3RoIG9mIE51bWJlci5NQVhfVkFMVUVcbiAgICAgIGlmIChtc2dMZW5ndGgubGVuZ3RoID4gMzEwKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgfVxuXG4gICAgICBtc2dMZW5ndGggKz0gdGFpbEFycmF5W2ldO1xuICAgIH1cblxuICAgIGJ1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAyICsgbXNnTGVuZ3RoLmxlbmd0aCk7XG4gICAgbXNnTGVuZ3RoID0gcGFyc2VJbnQobXNnTGVuZ3RoKTtcblxuICAgIHZhciBtc2cgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAwLCBtc2dMZW5ndGgpO1xuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbXNnID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShtc2cpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgdG8gdHlwZWQgYXJyYXlzXG4gICAgICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KG1zZyk7XG4gICAgICAgIG1zZyA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbXNnICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodHlwZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYnVmZmVycy5wdXNoKG1zZyk7XG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIG1zZ0xlbmd0aCk7XG4gIH1cblxuICB2YXIgdG90YWwgPSBidWZmZXJzLmxlbmd0aDtcbiAgYnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uKGJ1ZmZlciwgaSkge1xuICAgIGNhbGxiYWNrKGV4cG9ydHMuZGVjb2RlUGFja2V0KGJ1ZmZlciwgYmluYXJ5VHlwZSwgdHJ1ZSksIGksIHRvdGFsKTtcbiAgfSk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2Jyb3dzZXIuanMiLCJcbmNvbnN0IGVycm9yUHJvcHMgPSBbJ2Rlc2NyaXB0aW9uJywgJ2ZpbGVOYW1lJywgJ2xpbmVOdW1iZXInLCAnbWVzc2FnZScsICduYW1lJywgJ251bWJlcicsICdzdGFjayddO1xuXG5mdW5jdGlvbiBFeGNlcHRpb24obWVzc2FnZSwgbm9kZSkge1xuICBsZXQgbG9jID0gbm9kZSAmJiBub2RlLmxvYyxcbiAgICAgIGxpbmUsXG4gICAgICBjb2x1bW47XG4gIGlmIChsb2MpIHtcbiAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XG4gICAgY29sdW1uID0gbG9jLnN0YXJ0LmNvbHVtbjtcblxuICAgIG1lc3NhZ2UgKz0gJyAtICcgKyBsaW5lICsgJzonICsgY29sdW1uO1xuICB9XG5cbiAgbGV0IHRtcCA9IEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuXG4gIC8vIFVuZm9ydHVuYXRlbHkgZXJyb3JzIGFyZSBub3QgZW51bWVyYWJsZSBpbiBDaHJvbWUgKGF0IGxlYXN0KSwgc28gYGZvciBwcm9wIGluIHRtcGAgZG9lc24ndCB3b3JrLlxuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBlcnJvclByb3BzLmxlbmd0aDsgaWR4KyspIHtcbiAgICB0aGlzW2Vycm9yUHJvcHNbaWR4XV0gPSB0bXBbZXJyb3JQcm9wc1tpZHhdXTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEV4Y2VwdGlvbik7XG4gIH1cblxuICB0cnkge1xuICAgIGlmIChsb2MpIHtcbiAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmU7XG5cbiAgICAgIC8vIFdvcmsgYXJvdW5kIGlzc3VlIHVuZGVyIHNhZmFyaSB3aGVyZSB3ZSBjYW4ndCBkaXJlY3RseSBzZXQgdGhlIGNvbHVtbiB2YWx1ZVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2x1bW4nLCB7XG4gICAgICAgICAgdmFsdWU6IGNvbHVtbixcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChub3ApIHtcbiAgICAvKiBJZ25vcmUgaWYgdGhlIGJyb3dzZXIgaXMgdmVyeSBwYXJ0aWN1bGFyICovXG4gIH1cbn1cblxuRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5leHBvcnQgZGVmYXVsdCBFeGNlcHRpb247XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvZXhjZXB0aW9uLmpzIiwiLyoqXHJcbiAqIENvbXBpbGVzIGEgcXVlcnlzdHJpbmdcclxuICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgdmFyIHN0ciA9ICcnO1xyXG5cclxuICBmb3IgKHZhciBpIGluIG9iaikge1xyXG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xyXG4gICAgICBpZiAoc3RyLmxlbmd0aCkgc3RyICs9ICcmJztcclxuICAgICAgc3RyICs9IGVuY29kZVVSSUNvbXBvbmVudChpKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0cjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZXMgYSBzaW1wbGUgcXVlcnlzdHJpbmcgaW50byBhbiBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IHFzXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24ocXMpe1xyXG4gIHZhciBxcnkgPSB7fTtcclxuICB2YXIgcGFpcnMgPSBxcy5zcGxpdCgnJicpO1xyXG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XHJcbiAgICBxcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcclxuICB9XHJcbiAgcmV0dXJuIHFyeTtcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYSwgYil7XG4gIHZhciBmbiA9IGZ1bmN0aW9uKCl7fTtcbiAgZm4ucHJvdG90eXBlID0gYi5wcm90b3R5cGU7XG4gIGEucHJvdG90eXBlID0gbmV3IGZuO1xuICBhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGE7XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb21wb25lbnQtaW5oZXJpdC9pbmRleC5qcyIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBoYXNCaW4gPSByZXF1aXJlKCdoYXMtYmluYXJ5MicpO1xudmFyIGJpbmFyeSA9IHJlcXVpcmUoJy4vYmluYXJ5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gNDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZXMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnR5cGVzID0gW1xuICAnQ09OTkVDVCcsXG4gICdESVNDT05ORUNUJyxcbiAgJ0VWRU5UJyxcbiAgJ0FDSycsXG4gICdFUlJPUicsXG4gICdCSU5BUllfRVZFTlQnLFxuICAnQklOQVJZX0FDSydcbl07XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGNvbm5lY3RgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5DT05ORUNUID0gMDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZGlzY29ubmVjdGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkRJU0NPTk5FQ1QgPSAxO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBldmVudGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVWRU5UID0gMjtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgYWNrYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQUNLID0gMztcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZXJyb3JgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FUlJPUiA9IDQ7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgJ2JpbmFyeSBldmVudCdcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQklOQVJZX0VWRU5UID0gNTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgYmluYXJ5IGFja2AuIEZvciBhY2tzIHdpdGggYmluYXJ5IGFyZ3VtZW50cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQklOQVJZX0FDSyA9IDY7XG5cbi8qKlxuICogRW5jb2RlciBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRW5jb2RlciA9IEVuY29kZXI7XG5cbi8qKlxuICogRGVjb2RlciBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRGVjb2RlciA9IERlY29kZXI7XG5cbi8qKlxuICogQSBzb2NrZXQuaW8gRW5jb2RlciBpbnN0YW5jZVxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRW5jb2RlcigpIHt9XG5cbi8qKlxuICogRW5jb2RlIGEgcGFja2V0IGFzIGEgc2luZ2xlIHN0cmluZyBpZiBub24tYmluYXJ5LCBvciBhcyBhXG4gKiBidWZmZXIgc2VxdWVuY2UsIGRlcGVuZGluZyBvbiBwYWNrZXQgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gcGFja2V0IG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBoYW5kbGUgZW5jb2RpbmdzIChsaWtlbHkgZW5naW5lLndyaXRlKVxuICogQHJldHVybiBDYWxscyBjYWxsYmFjayB3aXRoIEFycmF5IG9mIGVuY29kaW5nc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbihvYmosIGNhbGxiYWNrKXtcbiAgaWYgKChvYmoudHlwZSA9PT0gZXhwb3J0cy5FVkVOVCB8fCBvYmoudHlwZSA9PT0gZXhwb3J0cy5BQ0spICYmIGhhc0JpbihvYmouZGF0YSkpIHtcbiAgICBvYmoudHlwZSA9IG9iai50eXBlID09PSBleHBvcnRzLkVWRU5UID8gZXhwb3J0cy5CSU5BUllfRVZFTlQgOiBleHBvcnRzLkJJTkFSWV9BQ0s7XG4gIH1cblxuICBkZWJ1ZygnZW5jb2RpbmcgcGFja2V0ICVqJywgb2JqKTtcblxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gb2JqLnR5cGUpIHtcbiAgICBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKTtcbiAgfVxuICBlbHNlIHtcbiAgICB2YXIgZW5jb2RpbmcgPSBlbmNvZGVBc1N0cmluZyhvYmopO1xuICAgIGNhbGxiYWNrKFtlbmNvZGluZ10pO1xuICB9XG59O1xuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge1N0cmluZ30gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNTdHJpbmcob2JqKSB7XG5cbiAgLy8gZmlyc3QgaXMgdHlwZVxuICB2YXIgc3RyID0gJycgKyBvYmoudHlwZTtcblxuICAvLyBhdHRhY2htZW50cyBpZiB3ZSBoYXZlIHRoZW1cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgc3RyICs9IG9iai5hdHRhY2htZW50cyArICctJztcbiAgfVxuXG4gIC8vIGlmIHdlIGhhdmUgYSBuYW1lc3BhY2Ugb3RoZXIgdGhhbiBgL2BcbiAgLy8gd2UgYXBwZW5kIGl0IGZvbGxvd2VkIGJ5IGEgY29tbWEgYCxgXG4gIGlmIChvYmoubnNwICYmICcvJyAhPT0gb2JqLm5zcCkge1xuICAgIHN0ciArPSBvYmoubnNwICsgJywnO1xuICB9XG5cbiAgLy8gaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgdGhlIGlkXG4gIGlmIChudWxsICE9IG9iai5pZCkge1xuICAgIHN0ciArPSBvYmouaWQ7XG4gIH1cblxuICAvLyBqc29uIGRhdGFcbiAgaWYgKG51bGwgIT0gb2JqLmRhdGEpIHtcbiAgICBzdHIgKz0gSlNPTi5zdHJpbmdpZnkob2JqLmRhdGEpO1xuICB9XG5cbiAgZGVidWcoJ2VuY29kZWQgJWogYXMgJXMnLCBvYmosIHN0cik7XG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBhcyAnYnVmZmVyIHNlcXVlbmNlJyBieSByZW1vdmluZyBibG9icywgYW5kXG4gKiBkZWNvbnN0cnVjdGluZyBwYWNrZXQgaW50byBvYmplY3Qgd2l0aCBwbGFjZWhvbGRlcnMgYW5kXG4gKiBhIGxpc3Qgb2YgYnVmZmVycy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtCdWZmZXJ9IGVuY29kZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFzQmluYXJ5KG9iaiwgY2FsbGJhY2spIHtcblxuICBmdW5jdGlvbiB3cml0ZUVuY29kaW5nKGJsb2JsZXNzRGF0YSkge1xuICAgIHZhciBkZWNvbnN0cnVjdGlvbiA9IGJpbmFyeS5kZWNvbnN0cnVjdFBhY2tldChibG9ibGVzc0RhdGEpO1xuICAgIHZhciBwYWNrID0gZW5jb2RlQXNTdHJpbmcoZGVjb25zdHJ1Y3Rpb24ucGFja2V0KTtcbiAgICB2YXIgYnVmZmVycyA9IGRlY29uc3RydWN0aW9uLmJ1ZmZlcnM7XG5cbiAgICBidWZmZXJzLnVuc2hpZnQocGFjayk7IC8vIGFkZCBwYWNrZXQgaW5mbyB0byBiZWdpbm5pbmcgb2YgZGF0YSBsaXN0XG4gICAgY2FsbGJhY2soYnVmZmVycyk7IC8vIHdyaXRlIGFsbCB0aGUgYnVmZmVyc1xuICB9XG5cbiAgYmluYXJ5LnJlbW92ZUJsb2JzKG9iaiwgd3JpdGVFbmNvZGluZyk7XG59XG5cbi8qKlxuICogQSBzb2NrZXQuaW8gRGVjb2RlciBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gZGVjb2RlclxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBEZWNvZGVyKCkge1xuICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAgd2l0aCBEZWNvZGVyLlxuICovXG5cbkVtaXR0ZXIoRGVjb2Rlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERlY29kZXMgYW4gZWNvZGVkIHBhY2tldCBzdHJpbmcgaW50byBwYWNrZXQgSlNPTi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gb2JqIC0gZW5jb2RlZCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlY29kZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcGFja2V0O1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICBwYWNrZXQgPSBkZWNvZGVTdHJpbmcob2JqKTtcbiAgICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IHBhY2tldC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gcGFja2V0LnR5cGUpIHsgLy8gYmluYXJ5IHBhY2tldCdzIGpzb25cbiAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG5ldyBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCk7XG5cbiAgICAgIC8vIG5vIGF0dGFjaG1lbnRzLCBsYWJlbGVkIGJpbmFyeSBidXQgbm8gYmluYXJ5IGRhdGEgdG8gZm9sbG93XG4gICAgICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yLnJlY29uUGFjay5hdHRhY2htZW50cyA9PT0gMCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7IC8vIG5vbi1iaW5hcnkgZnVsbCBwYWNrZXRcbiAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGlzQnVmKG9iaikgfHwgb2JqLmJhc2U2NCkgeyAvLyByYXcgYmluYXJ5IGRhdGFcbiAgICBpZiAoIXRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdnb3QgYmluYXJ5IGRhdGEgd2hlbiBub3QgcmVjb25zdHJ1Y3RpbmcgYSBwYWNrZXQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFja2V0ID0gdGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7XG4gICAgICBpZiAocGFja2V0KSB7IC8vIHJlY2VpdmVkIGZpbmFsIGJ1ZmZlclxuICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xuICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZTogJyArIG9iaik7XG4gIH1cbn07XG5cbi8qKlxuICogRGVjb2RlIGEgcGFja2V0IFN0cmluZyAoSlNPTiBkYXRhKVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBkZWNvZGVTdHJpbmcoc3RyKSB7XG4gIHZhciBpID0gMDtcbiAgLy8gbG9vayB1cCB0eXBlXG4gIHZhciBwID0ge1xuICAgIHR5cGU6IE51bWJlcihzdHIuY2hhckF0KDApKVxuICB9O1xuXG4gIGlmIChudWxsID09IGV4cG9ydHMudHlwZXNbcC50eXBlXSkgcmV0dXJuIGVycm9yKCk7XG5cbiAgLy8gbG9vayB1cCBhdHRhY2htZW50cyBpZiB0eXBlIGJpbmFyeVxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IHAudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IHAudHlwZSkge1xuICAgIHZhciBidWYgPSAnJztcbiAgICB3aGlsZSAoc3RyLmNoYXJBdCgrK2kpICE9PSAnLScpIHtcbiAgICAgIGJ1ZiArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKGkgPT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICAgIGlmIChidWYgIT0gTnVtYmVyKGJ1ZikgfHwgc3RyLmNoYXJBdChpKSAhPT0gJy0nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgYXR0YWNobWVudHMnKTtcbiAgICB9XG4gICAgcC5hdHRhY2htZW50cyA9IE51bWJlcihidWYpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBuYW1lc3BhY2UgKGlmIGFueSlcbiAgaWYgKCcvJyA9PT0gc3RyLmNoYXJBdChpICsgMSkpIHtcbiAgICBwLm5zcCA9ICcnO1xuICAgIHdoaWxlICgrK2kpIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmICgnLCcgPT09IGMpIGJyZWFrO1xuICAgICAgcC5uc3AgKz0gYztcbiAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcC5uc3AgPSAnLyc7XG4gIH1cblxuICAvLyBsb29rIHVwIGlkXG4gIHZhciBuZXh0ID0gc3RyLmNoYXJBdChpICsgMSk7XG4gIGlmICgnJyAhPT0gbmV4dCAmJiBOdW1iZXIobmV4dCkgPT0gbmV4dCkge1xuICAgIHAuaWQgPSAnJztcbiAgICB3aGlsZSAoKytpKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAobnVsbCA9PSBjIHx8IE51bWJlcihjKSAhPSBjKSB7XG4gICAgICAgIC0taTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwLmlkICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICAgIHAuaWQgPSBOdW1iZXIocC5pZCk7XG4gIH1cblxuICAvLyBsb29rIHVwIGpzb24gZGF0YVxuICBpZiAoc3RyLmNoYXJBdCgrK2kpKSB7XG4gICAgcCA9IHRyeVBhcnNlKHAsIHN0ci5zdWJzdHIoaSkpO1xuICB9XG5cbiAgZGVidWcoJ2RlY29kZWQgJXMgYXMgJWonLCBzdHIsIHApO1xuICByZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gdHJ5UGFyc2UocCwgc3RyKSB7XG4gIHRyeSB7XG4gICAgcC5kYXRhID0gSlNPTi5wYXJzZShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBlcnJvcigpO1xuICB9XG4gIHJldHVybiBwOyBcbn1cblxuLyoqXG4gKiBEZWFsbG9jYXRlcyBhIHBhcnNlcidzIHJlc291cmNlc1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVjb2Rlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgdGhpcy5yZWNvbnN0cnVjdG9yLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBIG1hbmFnZXIgb2YgYSBiaW5hcnkgZXZlbnQncyAnYnVmZmVyIHNlcXVlbmNlJy4gU2hvdWxkXG4gKiBiZSBjb25zdHJ1Y3RlZCB3aGVuZXZlciBhIHBhY2tldCBvZiB0eXBlIEJJTkFSWV9FVkVOVCBpc1xuICogZGVjb2RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtCaW5hcnlSZWNvbnN0cnVjdG9yfSBpbml0aWFsaXplZCByZWNvbnN0cnVjdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCkge1xuICB0aGlzLnJlY29uUGFjayA9IHBhY2tldDtcbiAgdGhpcy5idWZmZXJzID0gW107XG59XG5cbi8qKlxuICogTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIGJpbmFyeSBkYXRhIHJlY2VpdmVkIGZyb20gY29ubmVjdGlvblxuICogYWZ0ZXIgYSBCSU5BUllfRVZFTlQgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyIHwgQXJyYXlCdWZmZXJ9IGJpbkRhdGEgLSB0aGUgcmF3IGJpbmFyeSBkYXRhIHJlY2VpdmVkXG4gKiBAcmV0dXJuIHtudWxsIHwgT2JqZWN0fSByZXR1cm5zIG51bGwgaWYgbW9yZSBiaW5hcnkgZGF0YSBpcyBleHBlY3RlZCBvclxuICogICBhIHJlY29uc3RydWN0ZWQgcGFja2V0IG9iamVjdCBpZiBhbGwgYnVmZmVycyBoYXZlIGJlZW4gcmVjZWl2ZWQuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5CaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS50YWtlQmluYXJ5RGF0YSA9IGZ1bmN0aW9uKGJpbkRhdGEpIHtcbiAgdGhpcy5idWZmZXJzLnB1c2goYmluRGF0YSk7XG4gIGlmICh0aGlzLmJ1ZmZlcnMubGVuZ3RoID09PSB0aGlzLnJlY29uUGFjay5hdHRhY2htZW50cykgeyAvLyBkb25lIHdpdGggYnVmZmVyIGxpc3RcbiAgICB2YXIgcGFja2V0ID0gYmluYXJ5LnJlY29uc3RydWN0UGFja2V0KHRoaXMucmVjb25QYWNrLCB0aGlzLmJ1ZmZlcnMpO1xuICAgIHRoaXMuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICAgIHJldHVybiBwYWNrZXQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBiaW5hcnkgcGFja2V0IHJlY29uc3RydWN0aW9uIHZhcmlhYmxlcy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5CaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS5maW5pc2hlZFJlY29uc3RydWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVjb25QYWNrID0gbnVsbDtcbiAgdGhpcy5idWZmZXJzID0gW107XG59O1xuXG5mdW5jdGlvbiBlcnJvcigpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBleHBvcnRzLkVSUk9SLFxuICAgIGRhdGE6ICdwYXJzZXIgZXJyb3InXG4gIH07XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pbmRleC5qcyIsIi8vIGJyb3dzZXIgc2hpbSBmb3IgeG1saHR0cHJlcXVlc3QgbW9kdWxlXG5cbnZhciBoYXNDT1JTID0gcmVxdWlyZSgnaGFzLWNvcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgeGRvbWFpbiA9IG9wdHMueGRvbWFpbjtcblxuICAvLyBzY2hlbWUgbXVzdCBiZSBzYW1lIHdoZW4gdXNpZ24gWERvbWFpblJlcXVlc3RcbiAgLy8gaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWVpbnRlcm5hbHMvYXJjaGl2ZS8yMDEwLzA1LzEzL3hkb21haW5yZXF1ZXN0LXJlc3RyaWN0aW9ucy1saW1pdGF0aW9ucy1hbmQtd29ya2Fyb3VuZHMuYXNweFxuICB2YXIgeHNjaGVtZSA9IG9wdHMueHNjaGVtZTtcblxuICAvLyBYRG9tYWluUmVxdWVzdCBoYXMgYSBmbG93IG9mIG5vdCBzZW5kaW5nIGNvb2tpZSwgdGhlcmVmb3JlIGl0IHNob3VsZCBiZSBkaXNhYmxlZCBhcyBhIGRlZmF1bHQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2VuZ2luZS5pby1jbGllbnQvcHVsbC8yMTdcbiAgdmFyIGVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gWE1MSHR0cFJlcXVlc3QgY2FuIGJlIGRpc2FibGVkIG9uIElFXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgJiYgKCF4ZG9tYWluIHx8IGhhc0NPUlMpKSB7XG4gICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICAvLyBVc2UgWERvbWFpblJlcXVlc3QgZm9yIElFOCBpZiBlbmFibGVzWERSIGlzIHRydWVcbiAgLy8gYmVjYXVzZSBsb2FkaW5nIGJhciBrZWVwcyBmbGFzaGluZyB3aGVuIHVzaW5nIGpzb25wLXBvbGxpbmdcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3l1amlvc2FrYS9zb2NrZS5pby1pZTgtbG9hZGluZy1leGFtcGxlXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWERvbWFpblJlcXVlc3QgJiYgIXhzY2hlbWUgJiYgZW5hYmxlc1hEUikge1xuICAgICAgcmV0dXJuIG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkgeyB9XG5cbiAgaWYgKCF4ZG9tYWluKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsW1snQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJyldKCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xuICAgIH0gY2F0Y2ggKGUpIHsgfVxuICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3htbGh0dHByZXF1ZXN0LmpzIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnQ7XG5cbi8qKlxuICogVHJhbnNwb3J0IGFic3RyYWN0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gVHJhbnNwb3J0IChvcHRzKSB7XG4gIHRoaXMucGF0aCA9IG9wdHMucGF0aDtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWU7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydDtcbiAgdGhpcy5zZWN1cmUgPSBvcHRzLnNlY3VyZTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9IG9wdHMuZm9yY2VOb2RlO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gIHRoaXMubG9jYWxBZGRyZXNzID0gb3B0cy5sb2NhbEFkZHJlc3M7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFRyYW5zcG9ydC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIEVtaXRzIGFuIGVycm9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChtc2csIGRlc2MpIHtcbiAgdmFyIGVyciA9IG5ldyBFcnJvcihtc2cpO1xuICBlcnIudHlwZSA9ICdUcmFuc3BvcnRFcnJvcic7XG4gIGVyci5kZXNjcmlwdGlvbiA9IGRlc2M7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogT3BlbnMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuaW5nJztcbiAgICB0aGlzLmRvT3BlbigpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMuZG9DbG9zZSgpO1xuICAgIHRoaXMub25DbG9zZSgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIG11bHRpcGxlIHBhY2tldHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy53cml0ZShwYWNrZXRzKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBub3Qgb3BlbicpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIG9wZW5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW4nO1xuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGRhdGEuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGFcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHBhY2tldCA9IHBhcnNlci5kZWNvZGVQYWNrZXQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSk7XG4gIHRoaXMub25QYWNrZXQocGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggYSBkZWNvZGVkIHBhY2tldC5cbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB0aGlzLmVtaXQoJ3BhY2tldCcsIHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcclxuXHRpZighbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIi8qKlxyXG4gKiBQYXJzZXMgYW4gVVJJXHJcbiAqXHJcbiAqIEBhdXRob3IgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+IChNSVQgbGljZW5zZSlcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxudmFyIHJlID0gL14oPzooPyFbXjpAXSs6W146QFxcL10qQCkoaHR0cHxodHRwc3x3c3x3c3MpOlxcL1xcLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oKD86W2EtZjAtOV17MCw0fTopezIsN31bYS1mMC05XXswLDR9fFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS87XHJcblxyXG52YXIgcGFydHMgPSBbXHJcbiAgICAnc291cmNlJywgJ3Byb3RvY29sJywgJ2F1dGhvcml0eScsICd1c2VySW5mbycsICd1c2VyJywgJ3Bhc3N3b3JkJywgJ2hvc3QnLCAncG9ydCcsICdyZWxhdGl2ZScsICdwYXRoJywgJ2RpcmVjdG9yeScsICdmaWxlJywgJ3F1ZXJ5JywgJ2FuY2hvcidcclxuXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2V1cmkoc3RyKSB7XHJcbiAgICB2YXIgc3JjID0gc3RyLFxyXG4gICAgICAgIGIgPSBzdHIuaW5kZXhPZignWycpLFxyXG4gICAgICAgIGUgPSBzdHIuaW5kZXhPZignXScpO1xyXG5cclxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcclxuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGIpICsgc3RyLnN1YnN0cmluZyhiLCBlKS5yZXBsYWNlKC86L2csICc7JykgKyBzdHIuc3Vic3RyaW5nKGUsIHN0ci5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBtID0gcmUuZXhlYyhzdHIgfHwgJycpLFxyXG4gICAgICAgIHVyaSA9IHt9LFxyXG4gICAgICAgIGkgPSAxNDtcclxuXHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgdXJpW3BhcnRzW2ldXSA9IG1baV0gfHwgJyc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHVyaS5zb3VyY2UgPSBzcmM7XHJcbiAgICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdC5zdWJzdHJpbmcoMSwgdXJpLmhvc3QubGVuZ3RoIC0gMSkucmVwbGFjZSgvOy9nLCAnOicpO1xyXG4gICAgICAgIHVyaS5hdXRob3JpdHkgPSB1cmkuYXV0aG9yaXR5LnJlcGxhY2UoJ1snLCAnJykucmVwbGFjZSgnXScsICcnKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmlwdjZ1cmkgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmk7XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9wYXJzZXVyaS9pbmRleC5qcyIsIi8qIGdsb2JhbCBCbG9iIEZpbGUgKi9cblxuLypcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgZ2xvYmFsLkJsb2IgPT09ICdmdW5jdGlvbicgfHwgdG9TdHJpbmcuY2FsbChnbG9iYWwuQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nO1xudmFyIHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIGdsb2JhbC5GaWxlID09PSAnZnVuY3Rpb24nIHx8IHRvU3RyaW5nLmNhbGwoZ2xvYmFsLkZpbGUpID09PSAnW29iamVjdCBGaWxlQ29uc3RydWN0b3JdJztcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0JpbmFyeTtcblxuLyoqXG4gKiBDaGVja3MgZm9yIGJpbmFyeSBkYXRhLlxuICpcbiAqIFN1cHBvcnRzIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEJsb2IgYW5kIEZpbGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFueXRoaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGhhc0JpbmFyeSAob2JqKSB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGhhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBnbG9iYWwuQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIgJiYgZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICAodHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHxcbiAgICAgKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKVxuICAgICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9oYXMtYmluYXJ5L3B1bGwvNFxuICBpZiAob2JqLnRvSlNPTiAmJiB0eXBlb2Ygb2JqLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGhhc0JpbmFyeShvYmoudG9KU09OKCksIHRydWUpO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICYmIGhhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9oYXMtYmluYXJ5Mi9pbmRleC5qcyIsIlxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZjtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqIGlzIGEgYnVmZmVyIG9yIGFuIGFycmF5YnVmZmVyLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzQnVmKG9iaikge1xuICByZXR1cm4gKGdsb2JhbC5CdWZmZXIgJiYgZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICAgICAgKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pcy1idWZmZXIuanMiLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZWlvID0gcmVxdWlyZSgnZW5naW5lLmlvLWNsaWVudCcpO1xudmFyIFNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDptYW5hZ2VyJyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcbnZhciBCYWNrb2ZmID0gcmVxdWlyZSgnYmFja28yJyk7XG5cbi8qKlxuICogSUU2KyBoYXNPd25Qcm9wZXJ0eVxuICovXG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNYW5hZ2VyO1xuXG4vKipcbiAqIGBNYW5hZ2VyYCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5naW5lIGluc3RhbmNlIG9yIGVuZ2luZSB1cmkvb3B0c1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTWFuYWdlciAodXJpLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYW5hZ2VyKSkgcmV0dXJuIG5ldyBNYW5hZ2VyKHVyaSwgb3B0cyk7XG4gIGlmICh1cmkgJiYgKCdvYmplY3QnID09PSB0eXBlb2YgdXJpKSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCAnL3NvY2tldC5pbyc7XG4gIHRoaXMubnNwcyA9IHt9O1xuICB0aGlzLnN1YnMgPSBbXTtcbiAgdGhpcy5vcHRzID0gb3B0cztcbiAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgMC41KTtcbiAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgIG1pbjogdGhpcy5yZWNvbm5lY3Rpb25EZWxheSgpLFxuICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKClcbiAgfSk7XG4gIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMudXJpID0gdXJpO1xuICB0aGlzLmNvbm5lY3RpbmcgPSBbXTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdmFyIF9wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XG4gIHRoaXMuZW5jb2RlciA9IG5ldyBfcGFyc2VyLkVuY29kZXIoKTtcbiAgdGhpcy5kZWNvZGVyID0gbmV3IF9wYXJzZXIuRGVjb2RlcigpO1xuICB0aGlzLmF1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBQcm9wYWdhdGUgZ2l2ZW4gZXZlbnQgdG8gc29ja2V0cyBhbmQgZW1pdCBvbiBgdGhpc2BcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5lbWl0QWxsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmVtaXQuYXBwbHkodGhpcy5uc3BzW25zcF0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBgc29ja2V0LmlkYCBvZiBhbGwgc29ja2V0c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVNvY2tldElkcyA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmlkID0gdGhpcy5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGdlbmVyYXRlIGBzb2NrZXQuaWRgIGZvciB0aGUgZ2l2ZW4gYG5zcGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbnNwXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKG5zcCkge1xuICByZXR1cm4gKG5zcCA9PT0gJy8nID8gJycgOiAobnNwICsgJyMnKSkgKyB0aGlzLmVuZ2luZS5pZDtcbn07XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKE1hbmFnZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgcmVjb25uZWN0aW9uYCBjb25maWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB0cnVlL2ZhbHNlIGlmIGl0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHJlY29ubmVjdFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb24gPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBjb25maWcuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgYmVmb3JlIGdpdmluZyB1cFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO1xuICB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNaW4odik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuTWFuYWdlci5wcm90b3R5cGUucmFuZG9taXphdGlvbkZhY3RvciA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7XG4gIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3IgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldEppdHRlcih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1heGltdW0gZGVsYXkgYmV0d2VlbiByZWNvbm5lY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheU1heCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWF4KHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29ubmVjdGlvbiB0aW1lb3V0LiBgZmFsc2VgIHRvIGRpc2FibGVcbiAqXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICogc3RhcnRlZCByZWNvbm5lY3RpbmcgeWV0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUubWF5YmVSZWNvbm5lY3RPbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgaWYgKCF0aGlzLnJlY29ubmVjdGluZyAmJiB0aGlzLl9yZWNvbm5lY3Rpb24gJiYgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgLy8ga2VlcHMgcmVjb25uZWN0aW9uIGZyb20gZmlyaW5nIHR3aWNlIGZvciB0aGUgc2FtZSByZWNvbm5lY3Rpb24gbG9vcFxuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9uYWwsIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9wZW4gPVxuTWFuYWdlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChmbiwgb3B0cykge1xuICBkZWJ1ZygncmVhZHlTdGF0ZSAlcycsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIGlmICh+dGhpcy5yZWFkeVN0YXRlLmluZGV4T2YoJ29wZW4nKSkgcmV0dXJuIHRoaXM7XG5cbiAgZGVidWcoJ29wZW5pbmcgJXMnLCB0aGlzLnVyaSk7XG4gIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICB0aGlzLnNraXBSZWNvbm5lY3QgPSBmYWxzZTtcblxuICAvLyBlbWl0IGBvcGVuYFxuICB2YXIgb3BlblN1YiA9IG9uKHNvY2tldCwgJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbm9wZW4oKTtcbiAgICBmbiAmJiBmbigpO1xuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X2Vycm9yYFxuICB2YXIgZXJyb3JTdWIgPSBvbihzb2NrZXQsICdlcnJvcicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGVidWcoJ2Nvbm5lY3RfZXJyb3InKTtcbiAgICBzZWxmLmNsZWFudXAoKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfZXJyb3InLCBkYXRhKTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gZXJyb3InKTtcbiAgICAgIGVyci5kYXRhID0gZGF0YTtcbiAgICAgIGZuKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICBzZWxmLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X3RpbWVvdXRgXG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuXG4gICAgLy8gc2V0IHRpbWVyXG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuICAgICAgb3BlblN1Yi5kZXN0cm95KCk7XG4gICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgIHNvY2tldC5lbWl0KCdlcnJvcicsICd0aW1lb3V0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfdGltZW91dCcsIHRpbWVvdXQpO1xuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5zdWJzLnB1c2gob3BlblN1Yik7XG4gIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnb3BlbicpO1xuXG4gIC8vIGNsZWFyIG9sZCBzdWJzXG4gIHRoaXMuY2xlYW51cCgpO1xuXG4gIC8vIG1hcmsgYXMgb3BlblxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuXG4gIC8vIGFkZCBuZXcgc3Vic1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2RhdGEnLCBiaW5kKHRoaXMsICdvbmRhdGEnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwaW5nJywgYmluZCh0aGlzLCAnb25waW5nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncG9uZycsIGJpbmQodGhpcywgJ29ucG9uZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Vycm9yJywgYmluZCh0aGlzLCAnb25lcnJvcicpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlciwgJ2RlY29kZWQnLCBiaW5kKHRoaXMsICdvbmRlY29kZWQnKSkpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25waW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxhc3RQaW5nID0gbmV3IERhdGUoKTtcbiAgdGhpcy5lbWl0QWxsKCdwaW5nJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucG9uZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0QWxsKCdwb25nJywgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5lbWl0QWxsKCdlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gKlxuICogQHJldHVybiB7U29ja2V0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5zb2NrZXQgPSBmdW5jdGlvbiAobnNwLCBvcHRzKSB7XG4gIHZhciBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNvY2tldC5vbignY29ubmVjdGluZycsIG9uQ29ubmVjdGluZyk7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc29ja2V0LmlkID0gc2VsZi5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5hdXRvQ29ubmVjdCkge1xuICAgICAgLy8gbWFudWFsbHkgY2FsbCBoZXJlIHNpbmNlIGNvbm5lY3RpbmcgZXZlbnQgaXMgZmlyZWQgYmVmb3JlIGxpc3RlbmluZ1xuICAgICAgb25Db25uZWN0aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db25uZWN0aW5nICgpIHtcbiAgICBpZiAoIX5pbmRleE9mKHNlbGYuY29ubmVjdGluZywgc29ja2V0KSkge1xuICAgICAgc2VsZi5jb25uZWN0aW5nLnB1c2goc29ja2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc29ja2V0O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAqXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgdmFyIGluZGV4ID0gaW5kZXhPZih0aGlzLmNvbm5lY3RpbmcsIHNvY2tldCk7XG4gIGlmICh+aW5kZXgpIHRoaXMuY29ubmVjdGluZy5zcGxpY2UoaW5kZXgsIDEpO1xuICBpZiAodGhpcy5jb25uZWN0aW5nLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHRoaXMuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgZGVidWcoJ3dyaXRpbmcgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAocGFja2V0LnF1ZXJ5ICYmIHBhY2tldC50eXBlID09PSAwKSBwYWNrZXQubnNwICs9ICc/JyArIHBhY2tldC5xdWVyeTtcblxuICBpZiAoIXNlbGYuZW5jb2RpbmcpIHtcbiAgICAvLyBlbmNvZGUsIHRoZW4gd3JpdGUgdG8gZW5naW5lIHdpdGggcmVzdWx0XG4gICAgc2VsZi5lbmNvZGluZyA9IHRydWU7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0cykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2VsZi5lbmNvZGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5wcm9jZXNzUGFja2V0UXVldWUoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHsgLy8gYWRkIHBhY2tldCB0byB0aGUgcXVldWVcbiAgICBzZWxmLnBhY2tldEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cbn07XG5cbi8qKlxuICogSWYgcGFja2V0IGJ1ZmZlciBpcyBub24tZW1wdHksIGJlZ2lucyBlbmNvZGluZyB0aGVcbiAqIG5leHQgcGFja2V0IGluIGxpbmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucHJvY2Vzc1BhY2tldFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRCdWZmZXIubGVuZ3RoID4gMCAmJiAhdGhpcy5lbmNvZGluZykge1xuICAgIHZhciBwYWNrID0gdGhpcy5wYWNrZXRCdWZmZXIuc2hpZnQoKTtcbiAgICB0aGlzLnBhY2tldChwYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuXG4gIHZhciBzdWJzTGVuZ3RoID0gdGhpcy5zdWJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3ViID0gdGhpcy5zdWJzLnNoaWZ0KCk7XG4gICAgc3ViLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG5cbiAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsb3NlID1cbk1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdkaXNjb25uZWN0Jyk7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGBvbmNsb3NlYCB3aWxsIG5vdCBmaXJlIGJlY2F1c2VcbiAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICBpZiAodGhpcy5lbmdpbmUpIHRoaXMuZW5naW5lLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1Zygnb25jbG9zZScpO1xuXG4gIHRoaXMuY2xlYW51cCgpO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24pO1xuXG4gIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnJlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgZGVidWcoJ3JlY29ubmVjdCBmYWlsZWQnKTtcbiAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdF9mYWlsZWQnKTtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgIGRlYnVnKCd3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHQnLCBkZWxheSk7XG5cbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIGRlYnVnKCdhdHRlbXB0aW5nIHJlY29ubmVjdCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfYXR0ZW1wdCcsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdGluZycsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG5cbiAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBzZWxmLm9wZW4oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBhdHRlbXB0IGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2Vycm9yJywgZXJyLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3Qgc3VjY2VzcycpO1xuICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZGVsYXkpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMudXBkYXRlU29ja2V0SWRzKCk7XG4gIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0JywgYXR0ZW1wdCk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL21hbmFnZXIuanMiLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbnZhciBYSFIgPSByZXF1aXJlKCcuL3BvbGxpbmcteGhyJyk7XG52YXIgSlNPTlAgPSByZXF1aXJlKCcuL3BvbGxpbmctanNvbnAnKTtcbnZhciB3ZWJzb2NrZXQgPSByZXF1aXJlKCcuL3dlYnNvY2tldCcpO1xuXG4vKipcbiAqIEV4cG9ydCB0cmFuc3BvcnRzLlxuICovXG5cbmV4cG9ydHMucG9sbGluZyA9IHBvbGxpbmc7XG5leHBvcnRzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcblxuLyoqXG4gKiBQb2xsaW5nIHRyYW5zcG9ydCBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cbiAqIERlY2lkZXMgb24geGhyIHZzIGpzb25wIGJhc2VkIG9uIGZlYXR1cmUgZGV0ZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIHhocjtcbiAgdmFyIHhkID0gZmFsc2U7XG4gIHZhciB4cyA9IGZhbHNlO1xuICB2YXIganNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDtcblxuICBpZiAoZ2xvYmFsLmxvY2F0aW9uKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHhkID0gb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUgfHwgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG5cbiAgb3B0cy54ZG9tYWluID0geGQ7XG4gIG9wdHMueHNjaGVtZSA9IHhzO1xuICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG5cbiAgaWYgKCdvcGVuJyBpbiB4aHIgJiYgIW9wdHMuZm9yY2VKU09OUCkge1xuICAgIHJldHVybiBuZXcgWEhSKG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghanNvbnApIHRocm93IG5ldyBFcnJvcignSlNPTlAgZGlzYWJsZWQnKTtcbiAgICByZXR1cm4gbmV3IEpTT05QKG9wdHMpO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9pbmRleC5qcyIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG4vKipcbiAqIElzIFhIUjIgc3VwcG9ydGVkP1xuICovXG5cbnZhciBoYXNYSFIyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbi8qKlxuICogUG9sbGluZyBpbnRlcmZhY2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmICghaGFzWEhSMiB8fCBmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFBvbGxpbmcsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUubmFtZSA9ICdwb2xsaW5nJztcblxuLyoqXG4gKiBPcGVucyB0aGUgc29ja2V0ICh0cmlnZ2VycyBwb2xsaW5nKS4gV2Ugd3JpdGUgYSBQSU5HIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lXG4gKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucG9sbCgpO1xufTtcblxuLyoqXG4gKiBQYXVzZXMgcG9sbGluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG9uUGF1c2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdwYXVzaW5nJztcblxuICBmdW5jdGlvbiBwYXVzZSAoKSB7XG4gICAgZGVidWcoJ3BhdXNlZCcpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdwYXVzZWQnO1xuICAgIG9uUGF1c2UoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ3BvbGxDb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgd3JpdGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHdyaXRpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhdXNlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygncG9sbGluZycpO1xuICB0aGlzLnBvbGxpbmcgPSB0cnVlO1xuICB0aGlzLmRvUG9sbCgpO1xuICB0aGlzLmVtaXQoJ3BvbGwnKTtcbn07XG5cbi8qKlxuICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBkZWJ1ZygncG9sbGluZyBnb3QgZGF0YSAlcycsIGRhdGEpO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocGFja2V0LCBpbmRleCwgdG90YWwpIHtcbiAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgaWYgKCdvcGVuaW5nJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICBzZWxmLm9uT3BlbigpO1xuICAgIH1cblxuICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICBpZiAoJ2Nsb3NlJyA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIG90aGVyd2lzZSBieXBhc3Mgb25EYXRhIGFuZCBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH07XG5cbiAgLy8gZGVjb2RlIHBheWxvYWRcbiAgcGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuXG4gIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gIGlmICgnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gaWYgd2UgZ290IGRhdGEgd2UncmUgbm90IHBvbGxpbmdcbiAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BvbGxDb21wbGV0ZScpO1xuXG4gICAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnBvbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ2lnbm9yaW5nIHBvbGwgLSB0cmFuc3BvcnQgc3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGNsb3NlICgpIHtcbiAgICBkZWJ1Zygnd3JpdGluZyBjbG9zZSBwYWNrZXQnKTtcbiAgICBzZWxmLndyaXRlKFt7IHR5cGU6ICdjbG9zZScgfV0pO1xuICB9XG5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBvcGVuIC0gY2xvc2luZycpO1xuICAgIGNsb3NlKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgIGRlYnVnKCd0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2UnKTtcbiAgICB0aGlzLm9uY2UoJ29wZW4nLCBjbG9zZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHZhciBjYWxsYmFja2ZuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgfTtcblxuICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYuZG9Xcml0ZShkYXRhLCBjYWxsYmFja2ZuKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkXG4gIGlmIChmYWxzZSAhPT0gdGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnaHR0cHMnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgKCdodHRwJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLmpzIiwiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXycuc3BsaXQoJycpXG4gICwgbGVuZ3RoID0gNjRcbiAgLCBtYXAgPSB7fVxuICAsIHNlZWQgPSAwXG4gICwgaSA9IDBcbiAgLCBwcmV2O1xuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBlbmNvZGUobnVtKSB7XG4gIHZhciBlbmNvZGVkID0gJyc7XG5cbiAgZG8ge1xuICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtcbiAgICBudW0gPSBNYXRoLmZsb29yKG51bSAvIGxlbmd0aCk7XG4gIH0gd2hpbGUgKG51bSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW50ZWdlciB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBpbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gIHZhciBkZWNvZGVkID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVjb2RlZCA9IGRlY29kZWQgKiBsZW5ndGggKyBtYXBbc3RyLmNoYXJBdChpKV07XG4gIH1cblxuICByZXR1cm4gZGVjb2RlZDtcbn1cblxuLyoqXG4gKiBZZWFzdDogQSB0aW55IGdyb3dpbmcgaWQgZ2VuZXJhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgdW5pcXVlIGlkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24geWVhc3QoKSB7XG4gIHZhciBub3cgPSBlbmNvZGUoK25ldyBEYXRlKCkpO1xuXG4gIGlmIChub3cgIT09IHByZXYpIHJldHVybiBzZWVkID0gMCwgcHJldiA9IG5vdztcbiAgcmV0dXJuIG5vdyArJy4nKyBlbmNvZGUoc2VlZCsrKTtcbn1cblxuLy9cbi8vIE1hcCBlYWNoIGNoYXJhY3RlciB0byBpdHMgaW5kZXguXG4vL1xuZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgbWFwW2FscGhhYmV0W2ldXSA9IGk7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIGB5ZWFzdGAsIGBlbmNvZGVgIGFuZCBgZGVjb2RlYCBmdW5jdGlvbnMuXG4vL1xueWVhc3QuZW5jb2RlID0gZW5jb2RlO1xueWVhc3QuZGVjb2RlID0gZGVjb2RlO1xubW9kdWxlLmV4cG9ydHMgPSB5ZWFzdDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcyIsIlxudmFyIGluZGV4T2YgPSBbXS5pbmRleE9mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFyciwgb2JqKXtcbiAgaWYgKGluZGV4T2YpIHJldHVybiBhcnIuaW5kZXhPZihvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgIGlmIChhcnJbaV0gPT09IG9iaikgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgdG9BcnJheSA9IHJlcXVpcmUoJ3RvLWFycmF5Jyk7XG52YXIgb24gPSByZXF1aXJlKCcuL29uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIEludGVybmFsIGV2ZW50cyAoYmxhY2tsaXN0ZWQpLlxuICogVGhlc2UgZXZlbnRzIGNhbid0IGJlIGVtaXR0ZWQgYnkgdGhlIHVzZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIGV2ZW50cyA9IHtcbiAgY29ubmVjdDogMSxcbiAgY29ubmVjdF9lcnJvcjogMSxcbiAgY29ubmVjdF90aW1lb3V0OiAxLFxuICBjb25uZWN0aW5nOiAxLFxuICBkaXNjb25uZWN0OiAxLFxuICBlcnJvcjogMSxcbiAgcmVjb25uZWN0OiAxLFxuICByZWNvbm5lY3RfYXR0ZW1wdDogMSxcbiAgcmVjb25uZWN0X2ZhaWxlZDogMSxcbiAgcmVjb25uZWN0X2Vycm9yOiAxLFxuICByZWNvbm5lY3Rpbmc6IDEsXG4gIHBpbmc6IDEsXG4gIHBvbmc6IDFcbn07XG5cbi8qKlxuICogU2hvcnRjdXQgdG8gYEVtaXR0ZXIjZW1pdGAuXG4gKi9cblxudmFyIGVtaXQgPSBFbWl0dGVyLnByb3RvdHlwZS5lbWl0O1xuXG4vKipcbiAqIGBTb2NrZXRgIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0IChpbywgbnNwLCBvcHRzKSB7XG4gIHRoaXMuaW8gPSBpbztcbiAgdGhpcy5uc3AgPSBuc3A7XG4gIHRoaXMuanNvbiA9IHRoaXM7IC8vIGNvbXBhdFxuICB0aGlzLmlkcyA9IDA7XG4gIHRoaXMuYWNrcyA9IHt9O1xuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgaWYgKG9wdHMgJiYgb3B0cy5xdWVyeSkge1xuICAgIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB9XG4gIGlmICh0aGlzLmlvLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIG9wZW4sIGNsb3NlIGFuZCBwYWNrZXQgZXZlbnRzXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zdWJFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN1YnMpIHJldHVybjtcblxuICB2YXIgaW8gPSB0aGlzLmlvO1xuICB0aGlzLnN1YnMgPSBbXG4gICAgb24oaW8sICdvcGVuJywgYmluZCh0aGlzLCAnb25vcGVuJykpLFxuICAgIG9uKGlvLCAncGFja2V0JywgYmluZCh0aGlzLCAnb25wYWNrZXQnKSksXG4gICAgb24oaW8sICdjbG9zZScsIGJpbmQodGhpcywgJ29uY2xvc2UnKSlcbiAgXTtcbn07XG5cbi8qKlxuICogXCJPcGVuc1wiIHRoZSBzb2NrZXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9wZW4gPVxuU29ja2V0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHJldHVybiB0aGlzO1xuXG4gIHRoaXMuc3ViRXZlbnRzKCk7XG4gIHRoaXMuaW8ub3BlbigpOyAvLyBlbnN1cmUgb3BlblxuICBpZiAoJ29wZW4nID09PSB0aGlzLmlvLnJlYWR5U3RhdGUpIHRoaXMub25vcGVuKCk7XG4gIHRoaXMuZW1pdCgnY29ubmVjdGluZycpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBgbWVzc2FnZWAgZXZlbnQuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gIGFyZ3MudW5zaGlmdCgnbWVzc2FnZScpO1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPdmVycmlkZSBgZW1pdGAuXG4gKiBJZiB0aGUgZXZlbnQgaXMgaW4gYGV2ZW50c2AsIGl0J3MgZW1pdHRlZCBub3JtYWxseS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIChldikge1xuICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGV2KSkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICB2YXIgcGFja2V0ID0geyB0eXBlOiBwYXJzZXIuRVZFTlQsIGRhdGE6IGFyZ3MgfTtcblxuICBwYWNrZXQub3B0aW9ucyA9IHt9O1xuICBwYWNrZXQub3B0aW9ucy5jb21wcmVzcyA9ICF0aGlzLmZsYWdzIHx8IGZhbHNlICE9PSB0aGlzLmZsYWdzLmNvbXByZXNzO1xuXG4gIC8vIGV2ZW50IGFjayBjYWxsYmFja1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSkge1xuICAgIGRlYnVnKCdlbWl0dGluZyBwYWNrZXQgd2l0aCBhY2sgaWQgJWQnLCB0aGlzLmlkcyk7XG4gICAgdGhpcy5hY2tzW3RoaXMuaWRzXSA9IGFyZ3MucG9wKCk7XG4gICAgcGFja2V0LmlkID0gdGhpcy5pZHMrKztcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIHRoaXMucGFja2V0KHBhY2tldCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZW5kQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgfVxuXG4gIGRlbGV0ZSB0aGlzLmZsYWdzO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgcGFja2V0Lm5zcCA9IHRoaXMubnNwO1xuICB0aGlzLmlvLnBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgYG9wZW5gLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygndHJhbnNwb3J0IGlzIG9wZW4gLSBjb25uZWN0aW5nJyk7XG5cbiAgLy8gd3JpdGUgY29ubmVjdCBwYWNrZXQgaWYgbmVjZXNzYXJ5XG4gIGlmICgnLycgIT09IHRoaXMubnNwKSB7XG4gICAgaWYgKHRoaXMucXVlcnkpIHtcbiAgICAgIHZhciBxdWVyeSA9IHR5cGVvZiB0aGlzLnF1ZXJ5ID09PSAnb2JqZWN0JyA/IHBhcnNlcXMuZW5jb2RlKHRoaXMucXVlcnkpIDogdGhpcy5xdWVyeTtcbiAgICAgIGRlYnVnKCdzZW5kaW5nIGNvbm5lY3QgcGFja2V0IHdpdGggcXVlcnkgJXMnLCBxdWVyeSk7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1QsIHF1ZXJ5OiBxdWVyeX0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1R9KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGBjbG9zZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlYXNvblxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1ZygnY2xvc2UgKCVzKScsIHJlYXNvbik7XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgZGVsZXRlIHRoaXMuaWQ7XG4gIHRoaXMuZW1pdCgnZGlzY29ubmVjdCcsIHJlYXNvbik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIHNvY2tldCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgaWYgKHBhY2tldC5uc3AgIT09IHRoaXMubnNwKSByZXR1cm47XG5cbiAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgIGNhc2UgcGFyc2VyLkNPTk5FQ1Q6XG4gICAgICB0aGlzLm9uY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfRVZFTlQ6XG4gICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5ESVNDT05ORUNUOlxuICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRVJST1I6XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgcGFja2V0LmRhdGEpO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmV2ZW50ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICBkZWJ1ZygnZW1pdHRpbmcgZXZlbnQgJWonLCBhcmdzKTtcblxuICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICBkZWJ1ZygnYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudCcpO1xuICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goYXJncyk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmFjayA9IGZ1bmN0aW9uIChpZCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzZW50ID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcHJldmVudCBkb3VibGUgY2FsbGJhY2tzXG4gICAgaWYgKHNlbnQpIHJldHVybjtcbiAgICBzZW50ID0gdHJ1ZTtcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICBkZWJ1Zygnc2VuZGluZyBhY2sgJWonLCBhcmdzKTtcblxuICAgIHNlbGYucGFja2V0KHtcbiAgICAgIHR5cGU6IHBhcnNlci5BQ0ssXG4gICAgICBpZDogaWQsXG4gICAgICBkYXRhOiBhcmdzXG4gICAgfSk7XG4gIH07XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGFja25vd2xlZ2VtZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25hY2sgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBhY2sgPSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhY2spIHtcbiAgICBkZWJ1ZygnY2FsbGluZyBhY2sgJXMgd2l0aCAlaicsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO1xuICAgIGFjay5hcHBseSh0aGlzLCBwYWNrZXQuZGF0YSk7XG4gICAgZGVsZXRlIHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICB9IGVsc2Uge1xuICAgIGRlYnVnKCdiYWQgYWNrICVzJywgcGFja2V0LmlkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzZXJ2ZXIgY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmVtaXQoJ2Nvbm5lY3QnKTtcbiAgdGhpcy5lbWl0QnVmZmVyZWQoKTtcbn07XG5cbi8qKlxuICogRW1pdCBidWZmZXJlZCBldmVudHMgKHJlY2VpdmVkIGFuZCBlbWl0dGVkKS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmVtaXRCdWZmZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLnJlY2VpdmVCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIHRoaXMucmVjZWl2ZUJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucGFja2V0KHRoaXMuc2VuZEJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBkaXNjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnc2VydmVyIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgdGhpcy5kZXN0cm95KCk7XG4gIHRoaXMub25jbG9zZSgnaW8gc2VydmVyIGRpc2Nvbm5lY3QnKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZm9yY2VkIGNsaWVudC9zZXJ2ZXIgc2lkZSBkaXNjb25uZWN0aW9ucyxcbiAqIHRoaXMgbWV0aG9kIGVuc3VyZXMgdGhlIG1hbmFnZXIgc3RvcHMgdHJhY2tpbmcgdXMgYW5kXG4gKiB0aGF0IHJlY29ubmVjdGlvbnMgZG9uJ3QgZ2V0IHRyaWdnZXJlZCBmb3IgdGhpcy5cbiAqXG4gKiBAYXBpIHByaXZhdGUuXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdWJzKSB7XG4gICAgLy8gY2xlYW4gc3Vic2NyaXB0aW9ucyB0byBhdm9pZCByZWNvbm5lY3Rpb25zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuc3Vic1tpXS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuc3VicyA9IG51bGw7XG4gIH1cblxuICB0aGlzLmlvLmRlc3Ryb3kodGhpcyk7XG59O1xuXG4vKipcbiAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXQgbWFudWFsbHkuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY2xvc2UgPVxuU29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICBkZWJ1ZygncGVyZm9ybWluZyBkaXNjb25uZWN0ICglcyknLCB0aGlzLm5zcCk7XG4gICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBwYXJzZXIuRElTQ09OTkVDVCB9KTtcbiAgfVxuXG4gIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gIHRoaXMuZGVzdHJveSgpO1xuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgdGhpcy5vbmNsb3NlKCdpbyBjbGllbnQgZGlzY29ubmVjdCcpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb21wcmVzcyBmbGFnLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaWYgYHRydWVgLCBjb21wcmVzc2VzIHRoZSBzZW5kaW5nIGRhdGFcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNvbXByZXNzID0gZnVuY3Rpb24gKGNvbXByZXNzKSB7XG4gIHRoaXMuZmxhZ3MgPSB0aGlzLmZsYWdzIHx8IHt9O1xuICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9zb2NrZXQuanMiLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBvbjtcblxuLyoqXG4gKiBIZWxwZXIgZm9yIHN1YnNjcmlwdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8RXZlbnRFbWl0dGVyfSBvYmogd2l0aCBgRW1pdHRlcmAgbWl4aW4gb3IgYEV2ZW50RW1pdHRlcmBcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBuYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBvbiAob2JqLCBldiwgZm4pIHtcbiAgb2JqLm9uKGV2LCBmbik7XG4gIHJldHVybiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgb2JqLnJlbW92ZUxpc3RlbmVyKGV2LCBmbik7XG4gICAgfVxuICB9O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL29uLmpzIiwiLyoqXG4gKiBTbGljZSByZWZlcmVuY2UuXG4gKi9cblxudmFyIHNsaWNlID0gW10uc2xpY2U7XG5cbi8qKlxuICogQmluZCBgb2JqYCB0byBgZm5gLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBmbiBvciBzdHJpbmdcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgZm4pe1xuICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIGZuKSBmbiA9IG9ialtmbl07XG4gIGlmICgnZnVuY3Rpb24nICE9IHR5cGVvZiBmbikgdGhyb3cgbmV3IEVycm9yKCdiaW5kKCkgcmVxdWlyZXMgYSBmdW5jdGlvbicpO1xuICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KG9iaiwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWJpbmQvaW5kZXguanMiLCIvLyBDcmVhdGUgYSBzaW1wbGUgcGF0aCBhbGlhcyB0byBhbGxvdyBicm93c2VyaWZ5IHRvIHJlc29sdmVcbi8vIHRoZSBydW50aW1lIG9uIGEgc3VwcG9ydGVkIHBhdGguXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9janMvaGFuZGxlYmFycy5ydW50aW1lJylbJ2RlZmF1bHQnXTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanMiLCJpbXBvcnQge2NyZWF0ZUZyYW1lLCBleHRlbmQsIHRvU3RyaW5nfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9leGNlcHRpb24nO1xuaW1wb3J0IHtyZWdpc3RlckRlZmF1bHRIZWxwZXJzfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHtyZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzfSBmcm9tICcuL2RlY29yYXRvcnMnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5cbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzQuMC4xMCc7XG5leHBvcnQgY29uc3QgQ09NUElMRVJfUkVWSVNJT04gPSA3O1xuXG5leHBvcnQgY29uc3QgUkVWSVNJT05fQ0hBTkdFUyA9IHtcbiAgMTogJzw9IDEuMC5yYy4yJywgLy8gMS4wLnJjLjIgaXMgYWN0dWFsbHkgcmV2MiBidXQgZG9lc24ndCByZXBvcnQgaXRcbiAgMjogJz09IDEuMC4wLXJjLjMnLFxuICAzOiAnPT0gMS4wLjAtcmMuNCcsXG4gIDQ6ICc9PSAxLngueCcsXG4gIDU6ICc9PSAyLjAuMC1hbHBoYS54JyxcbiAgNjogJz49IDIuMC4wLWJldGEuMScsXG4gIDc6ICc+PSA0LjAuMCdcbn07XG5cbmNvbnN0IG9iamVjdFR5cGUgPSAnW29iamVjdCBPYmplY3RdJztcblxuZXhwb3J0IGZ1bmN0aW9uIEhhbmRsZWJhcnNFbnZpcm9ubWVudChoZWxwZXJzLCBwYXJ0aWFscywgZGVjb3JhdG9ycykge1xuICB0aGlzLmhlbHBlcnMgPSBoZWxwZXJzIHx8IHt9O1xuICB0aGlzLnBhcnRpYWxzID0gcGFydGlhbHMgfHwge307XG4gIHRoaXMuZGVjb3JhdG9ycyA9IGRlY29yYXRvcnMgfHwge307XG5cbiAgcmVnaXN0ZXJEZWZhdWx0SGVscGVycyh0aGlzKTtcbiAgcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyh0aGlzKTtcbn1cblxuSGFuZGxlYmFyc0Vudmlyb25tZW50LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEhhbmRsZWJhcnNFbnZpcm9ubWVudCxcblxuICBsb2dnZXI6IGxvZ2dlcixcbiAgbG9nOiBsb2dnZXIubG9nLFxuXG4gIHJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBpZiAoZm4pIHsgdGhyb3cgbmV3IEV4Y2VwdGlvbignQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBoZWxwZXJzJyk7IH1cbiAgICAgIGV4dGVuZCh0aGlzLmhlbHBlcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlbHBlcnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJIZWxwZXI6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5oZWxwZXJzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24obmFtZSwgcGFydGlhbCkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBleHRlbmQodGhpcy5wYXJ0aWFscywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgcGFydGlhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihgQXR0ZW1wdGluZyB0byByZWdpc3RlciBhIHBhcnRpYWwgY2FsbGVkIFwiJHtuYW1lfVwiIGFzIHVuZGVmaW5lZGApO1xuICAgICAgfVxuICAgICAgdGhpcy5wYXJ0aWFsc1tuYW1lXSA9IHBhcnRpYWw7XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLnBhcnRpYWxzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBpZiAoZm4pIHsgdGhyb3cgbmV3IEV4Y2VwdGlvbignQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBkZWNvcmF0b3JzJyk7IH1cbiAgICAgIGV4dGVuZCh0aGlzLmRlY29yYXRvcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlY29yYXRvcnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5kZWNvcmF0b3JzW25hbWVdO1xuICB9XG59O1xuXG5leHBvcnQgbGV0IGxvZyA9IGxvZ2dlci5sb2c7XG5cbmV4cG9ydCB7Y3JlYXRlRnJhbWUsIGxvZ2dlcn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvYmFzZS5qcyIsImltcG9ydCBQbGF5ZXIgZnJvbSAnLi9wbGF5ZXInXHJcbmltcG9ydCBHYW1lIGZyb20gJy4vZ2FtZSdcclxuXHJcbmNvbnN0IEdBTUVfU1RBVEVTID0ge1xyXG4gICAgLy8gd2FpdGluZyBmb3IgdGhlIHVzZXIgdG8gbWFrZSBhIHBsYXlcclxuICAgIElOUFVUOiAxLFxyXG4gICAgLy8gd2FpdGluZyBvbiBvdGhlciBwbGF5ZXJzIC0gaW5wdXQgaXMgYmxvY2tlZFxyXG4gICAgV0FJVElORzogMlxyXG59O1xyXG5cclxuLy8gY2xpZW50IHNpZGVcclxuY2xhc3MgR2FtZW1hc3RlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZSA9IEdBTUVfU1RBVEVTLklOUFVUO1xyXG4gICAgICAgIHRoaXMuYWRtaW4gPSB0cnVlOyAvLyBhZG1pbiBjYW4gbW92ZSBib3RoIHBpZWNlc1xyXG4gICAgICAgIHRoaXMubG9jYWxQbGF5ZXIgPSBuZXcgUGxheWVyKFwiQmlzYWZsb3JcIik7XHJcbiAgICAgICAgbGV0IHBsYXllcjIgPSBuZXcgUGxheWVyKFwiTWV3dHdvXCIpO1xyXG5cclxuICAgICAgICB0aGlzLmdhbWUgPSBuZXcgR2FtZSh7fSwgdGhpcy5sb2NhbFBsYXllciwgcGxheWVyMik7XHJcbiAgICAgICAgdGhpcy5odG1sID0gJCh0aGlzLmdhbWUucmVuZGVyKCkpO1xyXG5cclxuICAgICAgICAkKCcjYm9hcmQtd3JhcHBlcicpLmFwcGVuZCh0aGlzLmh0bWwpO1xyXG4gICAgICAgICQoJ3RkJywgdGhpcy5odG1sKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZ20uaGFuZGxlQ2xpY2soZ20uZ2V0Q2VsbCgkKHRoaXMpKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuc29ja2V0ID0gaW8oKTtcclxuICAgICAgICB0aGlzLnNvY2tldC5vbignZ2FtZSBhY3Rpb24nLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICAgICAgc3dpdGNoIChkYXRhLmFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWN0aW9uJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3N5bSBtb3ZlJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUuZXhlY3V0ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWN1dGVBY3Rpb24oZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdub3RpZmljYXRpb24nOlxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1BsYXllck1hZGVNb3ZlJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd05vdGlmaWNhdGlvbignUGxlYXNlIHdhaXQuLi4nLCAnV2FpdGluZyBmb3Igb3RoZXIgcGxheWVyIHRvIG1ha2UgaGlzIG1vdmUuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Vycm9yKCdVbmtub3duTm90aWZpY2F0aW9uVHlwZTogJytkYXRhLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93RXJyb3IoJ1Vua25vd25HYW1lQWN0aW9uOiAnK2RhdGEuYWN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKCdlcnJvciBtZXNzYWdlJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93RXJyb3IoZGF0YSk7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDbGljayhjZWxsKSB7XHJcbiAgICAgICAgLy8gZXhlY3V0ZSBtb3ZlXHJcbiAgICAgICAgaWYgKHRoaXMuZ2V0anFDZWxsKGNlbGwpLmhhc0NsYXNzKCdwb3NzaWJsZU1vdmUnKSkge1xyXG4gICAgICAgICAgICBsZXQgc291cmNlSnFDZWxsID0gJCgndGQuc2VsZWN0ZWQnLCB0aGlzLmh0bWwpO1xyXG4gICAgICAgICAgICBsZXQgc291cmNlQ2VsbCA9IHRoaXMuZ2V0Q2VsbChzb3VyY2VKcUNlbGwpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGxvZ0VudHJ5ID0gdGhpcy5nYW1lLnByZXBhcmVNb3ZlKHNvdXJjZUNlbGwsIGNlbGwpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kZXNlbGVjdFBpZWNlKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNvY2tldC5lbWl0KCdnYW1lIGFjdGlvbicsIGxvZ0VudHJ5KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNob3cgcG9zc2libGUgbW92ZXNcclxuICAgICAgICBpZiAoY2VsbC5waWVjZSAmJiAoY2VsbC5waWVjZS5vd25lciA9PT0gdGhpcy5sb2NhbFBsYXllciB8fCB0aGlzLmFkbWluKSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5nZXRqcUNlbGwoY2VsbCkuaGFzQ2xhc3MoJ3NlbGVjdGVkJykpIHtcclxuICAgICAgICAgICAgICAgIC8vIGEgY2xpY2sgb24gYSBzZWxlY3RlZCBwaWVjZSBkZXNlbGVjdHMgaXRcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVzZWxlY3RQaWVjZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gc2VsZWN0ZWQgaGlzIG93biBwaWVjZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RQaWVjZShjZWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleGVjdXRlQWN0aW9uKGxvZ0VudHJ5KSB7XHJcbiAgICAgICAgaWYgKGxvZ0VudHJ5LmFjdGlvbiA9PT0gJ3N5bSBtb3ZlJykge1xyXG4gICAgICAgICAgICAvLyBwaWNrIHVwIHBpZWNlc1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvZ0VudHJ5Lm1vdmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc291cmNlSnFDZWxsID0gdGhpcy5nZXRqcUNlbGwobG9nRW50cnkubW92ZXNbaV0uc291cmNlKTtcclxuICAgICAgICAgICAgICAgIHNvdXJjZUpxQ2VsbC5yZW1vdmVDbGFzcyhsb2dFbnRyeS5tb3Zlc1tpXS5tb3ZlZFBpZWNlQ2xhc3MpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBwdXQgcGllY2VzIGRvd25cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2dFbnRyeS5tb3Zlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldEpxQ2VsbCA9IHRoaXMuZ2V0anFDZWxsKGxvZ0VudHJ5Lm1vdmVzW2ldLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobG9nRW50cnkubW92ZXNbaV0ua2lsbGVkUGllY2VDbGFzcylcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRKcUNlbGwucmVtb3ZlQ2xhc3MobG9nRW50cnkubW92ZXNbaV0ua2lsbGVkUGllY2VDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRKcUNlbGwuYWRkQ2xhc3MobG9nRW50cnkubW92ZXNbaV0ubW92ZWRQaWVjZUNsYXNzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRDZWxsKGpxY2VsbCkge1xyXG4gICAgICAgIGxldCB4ID0ganFjZWxsLmRhdGEoJ3gnKTtcclxuICAgICAgICBsZXQgeSA9IGpxY2VsbC5kYXRhKCd5Jyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZS5ib2FyZFt5XVt4XTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRqcUNlbGwoY2VsbCkge1xyXG4gICAgICAgIHJldHVybiAkKCd0ZFtkYXRhLXg9XCInK2NlbGwueCsnXCJdW2RhdGEteT1cIicrY2VsbC55KydcIl0nLCB0aGlzLmh0bWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdFBpZWNlKGNlbGwpIHtcclxuICAgICAgICAkKCcuc2VsZWN0ZWQnLCB0aGlzLmh0bWwpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgIHRoaXMuZ2V0anFDZWxsKGNlbGwpLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xyXG5cclxuICAgICAgICAkKCcucG9zc2libGVNb3ZlJywgdGhpcy5odG1sKS5yZW1vdmVDbGFzcygncG9zc2libGVNb3ZlJyk7XHJcbiAgICAgICAgbGV0IHBvc3NpYmxlTW92ZXMgPSB0aGlzLmdhbWUuZ2V0UG9zc2libGVNb3ZlcyhjZWxsKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3NpYmxlTW92ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IG1vdmUgPSBwb3NzaWJsZU1vdmVzW2ldO1xyXG4gICAgICAgICAgICBsZXQganFjZWxsID0gdGhpcy5nZXRqcUNlbGwobW92ZSk7XHJcbiAgICAgICAgICAgIGpxY2VsbC5hZGRDbGFzcygncG9zc2libGVNb3ZlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGVzZWxlY3RQaWVjZSgpIHtcclxuICAgICAgICAkKCcuc2VsZWN0ZWQnLCB0aGlzLmh0bWwpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICQoJy5wb3NzaWJsZU1vdmUnLCB0aGlzLmh0bWwpLnJlbW92ZUNsYXNzKCdwb3NzaWJsZU1vdmUnKTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93Tm90aWZpY2F0aW9uKHRpdGxlLCBjb250ZW50KSB7XHJcbiAgICAgICAgJCgnLm1lc3NhZ2UgLnRpdGxlJywgdGhpcy5odG1sKS50ZXh0KHRpdGxlKTtcclxuICAgICAgICAkKCcubWVzc2FnZSAuY29udGVudCcsIHRoaXMuaHRtbCkuaHRtbChjb250ZW50KTtcclxuICAgICAgICAkKCcub3ZlcmxheScsIHRoaXMuaHRtbCkuc2hvdygpO1xyXG4gICAgfVxyXG4gICAgc2hvd0Vycm9yKG1lc3NhZ2UpIHtcclxuICAgICAgICAkKCcubWVzc2FnZScsIHRoaXMuaHRtbCkuYWRkQ2xhc3MoJ2Vycm9yJyk7XHJcbiAgICAgICAgdGhpcy5zaG93Tm90aWZpY2F0aW9uKFxyXG4gICAgICAgICAgICAnRXJyb3I6ICcgKyBtZXNzYWdlLFxyXG4gICAgICAgICAgICAnVHJ5IHRvIDxhIGhyZWY9XCIuXCI+cmVsb2FkPC9hPi4gJyArXHJcbiAgICAgICAgICAgICdJZiB0aGF0IGRvZXNuXFwndCB3b3JrIHllbGwgYXQgdGhlIGRldjogPGEgaHJlZj1cIm1haWx0bzpzaHlsdXhAZ21haWwuY29tXCI+c2h5bHV4QGdtYWlsLmNvbTwvYT4nKTtcclxuICAgIH1cclxuICAgIGhpZGVOb3RpZmljYXRpb24oKSB7XHJcbiAgICAgICAgJCgnLm92ZXJsYXknLCB0aGlzLmh0bWwpLmhpZGUoKTtcclxuICAgIH1cclxufVxyXG5cclxudmFyIGdtID0gbmV3IEdhbWVtYXN0ZXIoKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wdWJsaWMvanMvZ2FtZW1hc3Rlci5qcyIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4yLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE3LTAzLTIwVDE4OjU5WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxuXG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy4yLjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBBcnJheS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0XHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdFx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0XHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0XHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdERPTUV2YWwoIGNvZGUgKTtcblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbXBsZSBzZWxlY3RvciB0aGF0IGNhbiBiZSBmaWx0ZXJlZCBkaXJlY3RseSwgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0fVxuXG5cdC8vIENvbXBsZXggc2VsZWN0b3IsIGNvbXBhcmUgdGhlIHR3byBzZXRzLCByZW1vdmluZyBub24tRWxlbWVudHNcblx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90ICYmIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwiaWZyYW1lXCIgKSApIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuICAgICAgICAvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcbiAgICAgICAgLy8gZG9uJ3Qgc3VwcG9ydCBpdC5cbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG4gICAgICAgICAgICBlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCxcblx0XHRzY2FsZSA9IDEsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0ZG8ge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cblx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG5cdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cblx0XHR9IHdoaWxlIChcblx0XHRcdHNjYWxlICE9PSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsICkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zXG5cdFx0KTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGpRdWVyeS5pc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBcIj50Ym9keVwiLCBlbGVtIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXG5cdGlmICggbWF0Y2ggKSB7XG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCBpc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJtYXJnaW4gPSAoIC9ebWFyZ2luLyApO1xuXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSBkaXZTdHlsZS5tYXJnaW5MZWZ0ID09PSBcIjJweFwiO1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcblx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArXG5cdFx0XCJwYWRkaW5nOjA7bWFyZ2luLXRvcDoxcHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsTWFyZ2luUmlnaHRWYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxNYXJnaW5SaWdodCgpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwcm9wZXJ0eSBtYXBwZWQgYWxvbmcgd2hhdCBqUXVlcnkuY3NzUHJvcHMgc3VnZ2VzdHMgb3IgdG9cbi8vIGEgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5LlxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdO1xuXHRpZiAoICFyZXQgKSB7XG5cdFx0cmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xuXHR2YXIgaSxcblx0XHR2YWwgPSAwO1xuXG5cdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRpZiAoIGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0aSA9IDQ7XG5cblx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHR9IGVsc2Uge1xuXHRcdGkgPSBuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxuXHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL0hlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0aWYgKCB2YWwgPT09IFwiYXV0b1wiICkge1xuXHRcdHZhbCA9IGVsZW1bIFwib2Zmc2V0XCIgKyBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSBdO1xuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIFVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG5cdHJldHVybiAoIHZhbCArXG5cdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0bmFtZSxcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXNcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7XG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcblx0fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgJiYgYXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1lcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZnJhc3RydWN0dXJlLmh0bWwjc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciBkb2MsIGRvY0VsZW0sIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0d2luID0gZG9jLmRlZmF1bHRWaWV3O1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdH07XG5cdH0sXG5cblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXG5cdFx0Ly8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIW5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdHBhcmVudE9mZnNldCA9IHtcblx0XHRcdFx0dG9wOiBwYXJlbnRPZmZzZXQudG9wICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApLFxuXHRcdFx0XHRsZWZ0OiBwYXJlbnRPZmZzZXQubGVmdCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlIClcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdXJsID0gcmVxdWlyZSgnLi91cmwnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcblxuLyoqXG4gKiBNYW5hZ2VycyBjYWNoZS5cbiAqL1xuXG52YXIgY2FjaGUgPSBleHBvcnRzLm1hbmFnZXJzID0ge307XG5cbi8qKlxuICogTG9va3MgdXAgYW4gZXhpc3RpbmcgYE1hbmFnZXJgIGZvciBtdWx0aXBsZXhpbmcuXG4gKiBJZiB0aGUgdXNlciBzdW1tb25zOlxuICpcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2EnKTtgXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9iJyk7YFxuICpcbiAqIFdlIHJldXNlIHRoZSBleGlzdGluZyBpbnN0YW5jZSBiYXNlZCBvbiBzYW1lIHNjaGVtZS9wb3J0L2hvc3QsXG4gKiBhbmQgd2UgaW5pdGlhbGl6ZSBzb2NrZXRzIGZvciBlYWNoIG5hbWVzcGFjZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvb2t1cCAodXJpLCBvcHRzKSB7XG4gIGlmICh0eXBlb2YgdXJpID09PSAnb2JqZWN0Jykge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgdmFyIHBhcnNlZCA9IHVybCh1cmkpO1xuICB2YXIgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgdmFyIGlkID0gcGFyc2VkLmlkO1xuICB2YXIgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXS5uc3BzO1xuICB2YXIgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHwgb3B0c1snZm9yY2UgbmV3IGNvbm5lY3Rpb24nXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fCBzYW1lTmFtZXNwYWNlO1xuXG4gIHZhciBpbztcblxuICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgIGRlYnVnKCdpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzJywgc291cmNlKTtcbiAgICBpbyA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgZGVidWcoJ25ldyBpbyBpbnN0YW5jZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgICAgY2FjaGVbaWRdID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgIH1cbiAgICBpbyA9IGNhY2hlW2lkXTtcbiAgfVxuICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XG4gICAgb3B0cy5xdWVyeSA9IHBhcnNlZC5xdWVyeTtcbiAgfVxuICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDtcblxuLyoqXG4gKiBgY29ubmVjdGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNvbm5lY3QgPSBsb29rdXA7XG5cbi8qKlxuICogRXhwb3NlIGNvbnN0cnVjdG9ycyBmb3Igc3RhbmRhbG9uZSBidWlsZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xuZXhwb3J0cy5Tb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL2luZGV4LmpzIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6dXJsJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG5cbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdH0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVybCAodXJpLCBsb2MpIHtcbiAgdmFyIG9iaiA9IHVyaTtcblxuICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICBsb2MgPSBsb2MgfHwgZ2xvYmFsLmxvY2F0aW9uO1xuICBpZiAobnVsbCA9PSB1cmkpIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyBsb2MuaG9zdDtcblxuICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgZGVidWcoJ3Byb3RvY29sLWxlc3MgdXJsICVzJywgdXJpKTtcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZVxuICAgIGRlYnVnKCdwYXJzZSAlcycsIHVyaSk7XG4gICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgfVxuXG4gIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICBpZiAoIW9iai5wb3J0KSB7XG4gICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc4MCc7XG4gICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzQ0Myc7XG4gICAgfVxuICB9XG5cbiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7XG5cbiAgdmFyIGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKCc6JykgIT09IC0xO1xuICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0O1xuXG4gIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7XG4gIC8vIGRlZmluZSBocmVmXG4gIG9iai5ocmVmID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyAnJyA6ICgnOicgKyBvYmoucG9ydCkpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBQcmV2aW91cyBsb2cgdGltZXN0YW1wLlxuICovXG5cbnZhciBwcmV2VGltZTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgLy8gZGlzYWJsZWQ/XG4gICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSByZXR1cm47XG5cbiAgICB2YXIgc2VsZiA9IGRlYnVnO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyB0dXJuIHRoZSBgYXJndW1lbnRzYCBpbnRvIGEgcHJvcGVyIEFycmF5XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIC8vIGFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG4gICAgZXhwb3J0cy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cbiAgICB2YXIgbG9nRm4gPSBkZWJ1Zy5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuXG4gIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZGVidWcuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpO1xuICBkZWJ1Zy51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIGV4cG9ydHMubmFtZXMgPSBbXTtcbiAgZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwiLypnbG9iYWwgQmxvYixGaWxlKi9cblxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBnbG9iYWwuQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fCB0b1N0cmluZy5jYWxsKGdsb2JhbC5CbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXSc7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgZ2xvYmFsLkZpbGUgPT09ICdmdW5jdGlvbicgfHwgdG9TdHJpbmcuY2FsbChnbG9iYWwuRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nO1xuXG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIGluIHBhY2tldCB3aXRoIGEgbnVtYmVyZWQgcGxhY2Vob2xkZXIuXG4gKiBBbnl0aGluZyB3aXRoIGJsb2JzIG9yIGZpbGVzIHNob3VsZCBiZSBmZWQgdGhyb3VnaCByZW1vdmVCbG9icyBiZWZvcmUgY29taW5nXG4gKiBoZXJlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBzb2NrZXQuaW8gZXZlbnQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggZGVjb25zdHJ1Y3RlZCBwYWNrZXQgYW5kIGxpc3Qgb2YgYnVmZmVyc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciBwYWNrZXREYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBwYWNrID0gcGFja2V0O1xuICBwYWNrLmRhdGEgPSBfZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0RGF0YSwgYnVmZmVycyk7XG4gIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gIHJldHVybiB7cGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzfTtcbn07XG5cbmZ1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGlzQnVmKGRhdGEpKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICBidWZmZXJzLnB1c2goZGF0YSk7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuZXdEYXRhW2ldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBuZXdEYXRhW2tleV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnJlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBidWZmZXJzKSB7XG4gIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gIHJldHVybiBwYWNrZXQ7XG59O1xuXG5mdW5jdGlvbiBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcnNbZGF0YS5udW1dOyAvLyBhcHByb3ByaWF0ZSBidWZmZXIgKHNob3VsZCBiZSBuYXR1cmFsIG9yZGVyIGFueXdheSlcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgcmVtb3ZlcyBCbG9icyBvciBGaWxlcyBmcm9tIGRhdGEgdmlhXG4gKiBGaWxlUmVhZGVyJ3MgcmVhZEFzQXJyYXlCdWZmZXIgbWV0aG9kLiBVc2VkIGJlZm9yZSBlbmNvZGluZ1xuICogZGF0YSBhcyBtc2dwYWNrLiBDYWxscyBjYWxsYmFjayB3aXRoIHRoZSBibG9ibGVzcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5yZW1vdmVCbG9icyA9IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIF9yZW1vdmVCbG9icyhvYmosIGN1cktleSwgY29udGFpbmluZ09iamVjdCkge1xuICAgIGlmICghb2JqKSByZXR1cm4gb2JqO1xuXG4gICAgLy8gY29udmVydCBhbnkgYmxvYlxuICAgIGlmICgod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKSB7XG4gICAgICBwZW5kaW5nQmxvYnMrKztcblxuICAgICAgLy8gYXN5bmMgZmlsZXJlYWRlclxuICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHsgLy8gdGhpcy5yZXN1bHQgPT0gYXJyYXlidWZmZXJcbiAgICAgICAgaWYgKGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICAgICAgICBjb250YWluaW5nT2JqZWN0W2N1cktleV0gPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBibG9ibGVzc0RhdGEgPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vdGhpbmcgcGVuZGluZyBpdHMgY2FsbGJhY2sgdGltZVxuICAgICAgICBpZighIC0tcGVuZGluZ0Jsb2JzKSB7XG4gICAgICAgICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihvYmopOyAvLyBibG9iIC0+IGFycmF5YnVmZmVyXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikpIHsgLy8gaGFuZGxlIGFycmF5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIWlzQnVmKG9iaikpIHsgLy8gYW5kIG9iamVjdFxuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcGVuZGluZ0Jsb2JzID0gMDtcbiAgdmFyIGJsb2JsZXNzRGF0YSA9IGRhdGE7XG4gIF9yZW1vdmVCbG9icyhibG9ibGVzc0RhdGEpO1xuICBpZiAoIXBlbmRpbmdCbG9icykge1xuICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9iaW5hcnkuanMiLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2luZGV4Jyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9pbmRleC5qcyIsIlxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuXG4vKipcbiAqIEV4cG9ydHMgcGFyc2VyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzLnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9pbmRleCcpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpzb2NrZXQnKTtcbnZhciBpbmRleCA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgcGFyc2V1cmkgPSByZXF1aXJlKCdwYXJzZXVyaScpO1xudmFyIHBhcnNlanNvbiA9IHJlcXVpcmUoJ3BhcnNlanNvbicpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBTb2NrZXQ7XG5cbi8qKlxuICogU29ja2V0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gdXJpIG9yIG9wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFNvY2tldCAodXJpLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTb2NrZXQpKSByZXR1cm4gbmV3IFNvY2tldCh1cmksIG9wdHMpO1xuXG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIGlmICh1cmkgJiYgJ29iamVjdCcgPT09IHR5cGVvZiB1cmkpIHtcbiAgICBvcHRzID0gdXJpO1xuICAgIHVyaSA9IG51bGw7XG4gIH1cblxuICBpZiAodXJpKSB7XG4gICAgdXJpID0gcGFyc2V1cmkodXJpKTtcbiAgICBvcHRzLmhvc3RuYW1lID0gdXJpLmhvc3Q7XG4gICAgb3B0cy5zZWN1cmUgPSB1cmkucHJvdG9jb2wgPT09ICdodHRwcycgfHwgdXJpLnByb3RvY29sID09PSAnd3NzJztcbiAgICBvcHRzLnBvcnQgPSB1cmkucG9ydDtcbiAgICBpZiAodXJpLnF1ZXJ5KSBvcHRzLnF1ZXJ5ID0gdXJpLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKG9wdHMuaG9zdCkge1xuICAgIG9wdHMuaG9zdG5hbWUgPSBwYXJzZXVyaShvcHRzLmhvc3QpLmhvc3Q7XG4gIH1cblxuICB0aGlzLnNlY3VyZSA9IG51bGwgIT0gb3B0cy5zZWN1cmUgPyBvcHRzLnNlY3VyZVxuICAgIDogKGdsb2JhbC5sb2NhdGlvbiAmJiAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2wpO1xuXG4gIGlmIChvcHRzLmhvc3RuYW1lICYmICFvcHRzLnBvcnQpIHtcbiAgICAvLyBpZiBubyBwb3J0IGlzIHNwZWNpZmllZCBtYW51YWxseSwgdXNlIHRoZSBwcm90b2NvbCBkZWZhdWx0XG4gICAgb3B0cy5wb3J0ID0gdGhpcy5zZWN1cmUgPyAnNDQzJyA6ICc4MCc7XG4gIH1cblxuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWUgfHxcbiAgICAoZ2xvYmFsLmxvY2F0aW9uID8gbG9jYXRpb24uaG9zdG5hbWUgOiAnbG9jYWxob3N0Jyk7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydCB8fCAoZ2xvYmFsLmxvY2F0aW9uICYmIGxvY2F0aW9uLnBvcnRcbiAgICAgID8gbG9jYXRpb24ucG9ydFxuICAgICAgOiAodGhpcy5zZWN1cmUgPyA0NDMgOiA4MCkpO1xuICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeSB8fCB7fTtcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdGhpcy5xdWVyeSkgdGhpcy5xdWVyeSA9IHBhcnNlcXMuZGVjb2RlKHRoaXMucXVlcnkpO1xuICB0aGlzLnVwZ3JhZGUgPSBmYWxzZSAhPT0gb3B0cy51cGdyYWRlO1xuICB0aGlzLnBhdGggPSAob3B0cy5wYXRoIHx8ICcvZW5naW5lLmlvJykucmVwbGFjZSgvXFwvJC8sICcnKSArICcvJztcbiAgdGhpcy5mb3JjZUpTT05QID0gISFvcHRzLmZvcmNlSlNPTlA7XG4gIHRoaXMuanNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDtcbiAgdGhpcy5mb3JjZUJhc2U2NCA9ICEhb3B0cy5mb3JjZUJhc2U2NDtcbiAgdGhpcy5lbmFibGVzWERSID0gISFvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtIHx8ICd0JztcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMudHJhbnNwb3J0cyA9IG9wdHMudHJhbnNwb3J0cyB8fCBbJ3BvbGxpbmcnLCAnd2Vic29ja2V0J107XG4gIHRoaXMudHJhbnNwb3J0T3B0aW9ucyA9IG9wdHMudHJhbnNwb3J0T3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcbiAgdGhpcy5wb2xpY3lQb3J0ID0gb3B0cy5wb2xpY3lQb3J0IHx8IDg0MztcbiAgdGhpcy5yZW1lbWJlclVwZ3JhZGUgPSBvcHRzLnJlbWVtYmVyVXBncmFkZSB8fCBmYWxzZTtcbiAgdGhpcy5iaW5hcnlUeXBlID0gbnVsbDtcbiAgdGhpcy5vbmx5QmluYXJ5VXBncmFkZXMgPSBvcHRzLm9ubHlCaW5hcnlVcGdyYWRlcztcbiAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IGZhbHNlICE9PSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlID8gKG9wdHMucGVyTWVzc2FnZURlZmxhdGUgfHwge30pIDogZmFsc2U7XG5cbiAgaWYgKHRydWUgPT09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUpIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSB7fTtcbiAgaWYgKHRoaXMucGVyTWVzc2FnZURlZmxhdGUgJiYgbnVsbCA9PSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgIHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkID0gMTAyNDtcbiAgfVxuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4IHx8IG51bGw7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXkgfHwgbnVsbDtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlIHx8IG51bGw7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydCB8fCBudWxsO1xuICB0aGlzLmNhID0gb3B0cy5jYSB8fCBudWxsO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnMgfHwgbnVsbDtcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9ICEhb3B0cy5mb3JjZU5vZGU7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG4gIGlmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCkge1xuICAgIGlmIChvcHRzLmV4dHJhSGVhZGVycyAmJiBPYmplY3Qua2V5cyhvcHRzLmV4dHJhSGVhZGVycykubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcbiAgICB9XG5cbiAgICBpZiAob3B0cy5sb2NhbEFkZHJlc3MpIHtcbiAgICAgIHRoaXMubG9jYWxBZGRyZXNzID0gb3B0cy5sb2NhbEFkZHJlc3M7XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IG9uIGhhbmRzaGFrZVxuICB0aGlzLmlkID0gbnVsbDtcbiAgdGhpcy51cGdyYWRlcyA9IG51bGw7XG4gIHRoaXMucGluZ0ludGVydmFsID0gbnVsbDtcbiAgdGhpcy5waW5nVGltZW91dCA9IG51bGw7XG5cbiAgLy8gc2V0IG9uIGhlYXJ0YmVhdFxuICB0aGlzLnBpbmdJbnRlcnZhbFRpbWVyID0gbnVsbDtcbiAgdGhpcy5waW5nVGltZW91dFRpbWVyID0gbnVsbDtcblxuICB0aGlzLm9wZW4oKTtcbn1cblxuU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihTb2NrZXQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sOyAvLyB0aGlzIGlzIGFuIGludFxuXG4vKipcbiAqIEV4cG9zZSBkZXBzIGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eVxuICogYW5kIHN0YW5kYWxvbmUgYnJvd3NlciBhY2Nlc3MuXG4gKi9cblxuU29ja2V0LlNvY2tldCA9IFNvY2tldDtcblNvY2tldC5UcmFuc3BvcnQgPSByZXF1aXJlKCcuL3RyYW5zcG9ydCcpO1xuU29ja2V0LnRyYW5zcG9ydHMgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvaW5kZXgnKTtcblNvY2tldC5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyB0cmFuc3BvcnQgb2YgdGhlIGdpdmVuIHR5cGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zcG9ydCBuYW1lXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNyZWF0ZVRyYW5zcG9ydCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlYnVnKCdjcmVhdGluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gIHZhciBxdWVyeSA9IGNsb25lKHRoaXMucXVlcnkpO1xuXG4gIC8vIGFwcGVuZCBlbmdpbmUuaW8gcHJvdG9jb2wgaWRlbnRpZmllclxuICBxdWVyeS5FSU8gPSBwYXJzZXIucHJvdG9jb2w7XG5cbiAgLy8gdHJhbnNwb3J0IG5hbWVcbiAgcXVlcnkudHJhbnNwb3J0ID0gbmFtZTtcblxuICAvLyBwZXItdHJhbnNwb3J0IG9wdGlvbnNcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLnRyYW5zcG9ydE9wdGlvbnNbbmFtZV0gfHwge307XG5cbiAgLy8gc2Vzc2lvbiBpZCBpZiB3ZSBhbHJlYWR5IGhhdmUgb25lXG4gIGlmICh0aGlzLmlkKSBxdWVyeS5zaWQgPSB0aGlzLmlkO1xuXG4gIHZhciB0cmFuc3BvcnQgPSBuZXcgdHJhbnNwb3J0c1tuYW1lXSh7XG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIHNvY2tldDogdGhpcyxcbiAgICBhZ2VudDogb3B0aW9ucy5hZ2VudCB8fCB0aGlzLmFnZW50LFxuICAgIGhvc3RuYW1lOiBvcHRpb25zLmhvc3RuYW1lIHx8IHRoaXMuaG9zdG5hbWUsXG4gICAgcG9ydDogb3B0aW9ucy5wb3J0IHx8IHRoaXMucG9ydCxcbiAgICBzZWN1cmU6IG9wdGlvbnMuc2VjdXJlIHx8IHRoaXMuc2VjdXJlLFxuICAgIHBhdGg6IG9wdGlvbnMucGF0aCB8fCB0aGlzLnBhdGgsXG4gICAgZm9yY2VKU09OUDogb3B0aW9ucy5mb3JjZUpTT05QIHx8IHRoaXMuZm9yY2VKU09OUCxcbiAgICBqc29ucDogb3B0aW9ucy5qc29ucCB8fCB0aGlzLmpzb25wLFxuICAgIGZvcmNlQmFzZTY0OiBvcHRpb25zLmZvcmNlQmFzZTY0IHx8IHRoaXMuZm9yY2VCYXNlNjQsXG4gICAgZW5hYmxlc1hEUjogb3B0aW9ucy5lbmFibGVzWERSIHx8IHRoaXMuZW5hYmxlc1hEUixcbiAgICB0aW1lc3RhbXBSZXF1ZXN0czogb3B0aW9ucy50aW1lc3RhbXBSZXF1ZXN0cyB8fCB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzLFxuICAgIHRpbWVzdGFtcFBhcmFtOiBvcHRpb25zLnRpbWVzdGFtcFBhcmFtIHx8IHRoaXMudGltZXN0YW1wUGFyYW0sXG4gICAgcG9saWN5UG9ydDogb3B0aW9ucy5wb2xpY3lQb3J0IHx8IHRoaXMucG9saWN5UG9ydCxcbiAgICBwZng6IG9wdGlvbnMucGZ4IHx8IHRoaXMucGZ4LFxuICAgIGtleTogb3B0aW9ucy5rZXkgfHwgdGhpcy5rZXksXG4gICAgcGFzc3BocmFzZTogb3B0aW9ucy5wYXNzcGhyYXNlIHx8IHRoaXMucGFzc3BocmFzZSxcbiAgICBjZXJ0OiBvcHRpb25zLmNlcnQgfHwgdGhpcy5jZXJ0LFxuICAgIGNhOiBvcHRpb25zLmNhIHx8IHRoaXMuY2EsXG4gICAgY2lwaGVyczogb3B0aW9ucy5jaXBoZXJzIHx8IHRoaXMuY2lwaGVycyxcbiAgICByZWplY3RVbmF1dGhvcml6ZWQ6IG9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkIHx8IHRoaXMucmVqZWN0VW5hdXRob3JpemVkLFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiBvcHRpb25zLnBlck1lc3NhZ2VEZWZsYXRlIHx8IHRoaXMucGVyTWVzc2FnZURlZmxhdGUsXG4gICAgZXh0cmFIZWFkZXJzOiBvcHRpb25zLmV4dHJhSGVhZGVycyB8fCB0aGlzLmV4dHJhSGVhZGVycyxcbiAgICBmb3JjZU5vZGU6IG9wdGlvbnMuZm9yY2VOb2RlIHx8IHRoaXMuZm9yY2VOb2RlLFxuICAgIGxvY2FsQWRkcmVzczogb3B0aW9ucy5sb2NhbEFkZHJlc3MgfHwgdGhpcy5sb2NhbEFkZHJlc3MsXG4gICAgcmVxdWVzdFRpbWVvdXQ6IG9wdGlvbnMucmVxdWVzdFRpbWVvdXQgfHwgdGhpcy5yZXF1ZXN0VGltZW91dCxcbiAgICBwcm90b2NvbHM6IG9wdGlvbnMucHJvdG9jb2xzIHx8IHZvaWQgKDApXG4gIH0pO1xuXG4gIHJldHVybiB0cmFuc3BvcnQ7XG59O1xuXG5mdW5jdGlvbiBjbG9uZSAob2JqKSB7XG4gIHZhciBvID0ge307XG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgb1tpXSA9IG9ialtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG87XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgdHJhbnNwb3J0IHRvIHVzZSBhbmQgc3RhcnRzIHByb2JlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5Tb2NrZXQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0cmFuc3BvcnQ7XG4gIGlmICh0aGlzLnJlbWVtYmVyVXBncmFkZSAmJiBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzICYmIHRoaXMudHJhbnNwb3J0cy5pbmRleE9mKCd3ZWJzb2NrZXQnKSAhPT0gLTEpIHtcbiAgICB0cmFuc3BvcnQgPSAnd2Vic29ja2V0JztcbiAgfSBlbHNlIGlmICgwID09PSB0aGlzLnRyYW5zcG9ydHMubGVuZ3RoKSB7XG4gICAgLy8gRW1pdCBlcnJvciBvbiBuZXh0IHRpY2sgc28gaXQgY2FuIGJlIGxpc3RlbmVkIHRvXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5lbWl0KCdlcnJvcicsICdObyB0cmFuc3BvcnRzIGF2YWlsYWJsZScpO1xuICAgIH0sIDApO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIHtcbiAgICB0cmFuc3BvcnQgPSB0aGlzLnRyYW5zcG9ydHNbMF07XG4gIH1cbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuXG4gIC8vIFJldHJ5IHdpdGggdGhlIG5leHQgdHJhbnNwb3J0IGlmIHRoZSB0cmFuc3BvcnQgaXMgZGlzYWJsZWQgKGpzb25wOiBmYWxzZSlcbiAgdHJ5IHtcbiAgICB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy50cmFuc3BvcnRzLnNoaWZ0KCk7XG4gICAgdGhpcy5vcGVuKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJhbnNwb3J0Lm9wZW4oKTtcbiAgdGhpcy5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQuIERpc2FibGVzIHRoZSBleGlzdGluZyBvbmUgKGlmIGFueSkuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZXRUcmFuc3BvcnQgPSBmdW5jdGlvbiAodHJhbnNwb3J0KSB7XG4gIGRlYnVnKCdzZXR0aW5nIHRyYW5zcG9ydCAlcycsIHRyYW5zcG9ydC5uYW1lKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICh0aGlzLnRyYW5zcG9ydCkge1xuICAgIGRlYnVnKCdjbGVhcmluZyBleGlzdGluZyB0cmFuc3BvcnQgJXMnLCB0aGlzLnRyYW5zcG9ydC5uYW1lKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8vIHNldCB1cCB0cmFuc3BvcnRcbiAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG5cbiAgLy8gc2V0IHVwIHRyYW5zcG9ydCBsaXN0ZW5lcnNcbiAgdHJhbnNwb3J0XG4gIC5vbignZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkRyYWluKCk7XG4gIH0pXG4gIC5vbigncGFja2V0JywgZnVuY3Rpb24gKHBhY2tldCkge1xuICAgIHNlbGYub25QYWNrZXQocGFja2V0KTtcbiAgfSlcbiAgLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKGUpO1xuICB9KVxuICAub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25DbG9zZSgndHJhbnNwb3J0IGNsb3NlJyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBQcm9iZXMgYSB0cmFuc3BvcnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zcG9ydCBuYW1lXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnByb2JlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVidWcoJ3Byb2JpbmcgdHJhbnNwb3J0IFwiJXNcIicsIG5hbWUpO1xuICB2YXIgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQobmFtZSwgeyBwcm9iZTogMSB9KTtcbiAgdmFyIGZhaWxlZCA9IGZhbHNlO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIG9uVHJhbnNwb3J0T3BlbiAoKSB7XG4gICAgaWYgKHNlbGYub25seUJpbmFyeVVwZ3JhZGVzKSB7XG4gICAgICB2YXIgdXBncmFkZUxvc2VzQmluYXJ5ID0gIXRoaXMuc3VwcG9ydHNCaW5hcnkgJiYgc2VsZi50cmFuc3BvcnQuc3VwcG9ydHNCaW5hcnk7XG4gICAgICBmYWlsZWQgPSBmYWlsZWQgfHwgdXBncmFkZUxvc2VzQmluYXJ5O1xuICAgIH1cbiAgICBpZiAoZmFpbGVkKSByZXR1cm47XG5cbiAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBvcGVuZWQnLCBuYW1lKTtcbiAgICB0cmFuc3BvcnQuc2VuZChbeyB0eXBlOiAncGluZycsIGRhdGE6ICdwcm9iZScgfV0pO1xuICAgIHRyYW5zcG9ydC5vbmNlKCdwYWNrZXQnLCBmdW5jdGlvbiAobXNnKSB7XG4gICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICBpZiAoJ3BvbmcnID09PSBtc2cudHlwZSAmJiAncHJvYmUnID09PSBtc2cuZGF0YSkge1xuICAgICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBwb25nJywgbmFtZSk7XG4gICAgICAgIHNlbGYudXBncmFkaW5nID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRpbmcnLCB0cmFuc3BvcnQpO1xuICAgICAgICBpZiAoIXRyYW5zcG9ydCkgcmV0dXJuO1xuICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gJ3dlYnNvY2tldCcgPT09IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgICAgIGRlYnVnKCdwYXVzaW5nIGN1cnJlbnQgdHJhbnNwb3J0IFwiJXNcIicsIHNlbGYudHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgICBzZWxmLnRyYW5zcG9ydC5wYXVzZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuICAgICAgICAgIGlmICgnY2xvc2VkJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgICAgZGVidWcoJ2NoYW5naW5nIHRyYW5zcG9ydCBhbmQgc2VuZGluZyB1cGdyYWRlIHBhY2tldCcpO1xuXG4gICAgICAgICAgY2xlYW51cCgpO1xuXG4gICAgICAgICAgc2VsZi5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgICAgICAgICB0cmFuc3BvcnQuc2VuZChbeyB0eXBlOiAndXBncmFkZScgfV0pO1xuICAgICAgICAgIHNlbGYuZW1pdCgndXBncmFkZScsIHRyYW5zcG9ydCk7XG4gICAgICAgICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgICAgICAgICBzZWxmLnVwZ3JhZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHNlbGYuZmx1c2goKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQnLCBuYW1lKTtcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcigncHJvYmUgZXJyb3InKTtcbiAgICAgICAgZXJyLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGVFcnJvcicsIGVycik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBmcmVlemVUcmFuc3BvcnQgKCkge1xuICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgIC8vIEFueSBjYWxsYmFjayBjYWxsZWQgYnkgdHJhbnNwb3J0IHNob3VsZCBiZSBpZ25vcmVkIHNpbmNlIG5vd1xuICAgIGZhaWxlZCA9IHRydWU7XG5cbiAgICBjbGVhbnVwKCk7XG5cbiAgICB0cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB0cmFuc3BvcnQgPSBudWxsO1xuICB9XG5cbiAgLy8gSGFuZGxlIGFueSBlcnJvciB0aGF0IGhhcHBlbnMgd2hpbGUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbmVycm9yIChlcnIpIHtcbiAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ3Byb2JlIGVycm9yOiAnICsgZXJyKTtcbiAgICBlcnJvci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcblxuICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuXG4gICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgZmFpbGVkIGJlY2F1c2Ugb2YgZXJyb3I6ICVzJywgbmFtZSwgZXJyKTtcblxuICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyb3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25UcmFuc3BvcnRDbG9zZSAoKSB7XG4gICAgb25lcnJvcigndHJhbnNwb3J0IGNsb3NlZCcpO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIGNsb3NlZCB3aGlsZSB3ZSdyZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9uY2xvc2UgKCkge1xuICAgIG9uZXJyb3IoJ3NvY2tldCBjbG9zZWQnKTtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHNvY2tldCBpcyB1cGdyYWRlZCB3aGlsZSB3ZSdyZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9udXBncmFkZSAodG8pIHtcbiAgICBpZiAodHJhbnNwb3J0ICYmIHRvLm5hbWUgIT09IHRyYW5zcG9ydC5uYW1lKSB7XG4gICAgICBkZWJ1ZygnXCIlc1wiIHdvcmtzIC0gYWJvcnRpbmcgXCIlc1wiJywgdG8ubmFtZSwgdHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgZnJlZXplVHJhbnNwb3J0KCk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgb24gdGhlIHRyYW5zcG9ydCBhbmQgb24gc2VsZlxuICBmdW5jdGlvbiBjbGVhbnVwICgpIHtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ29wZW4nLCBvblRyYW5zcG9ydE9wZW4pO1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25UcmFuc3BvcnRDbG9zZSk7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRpbmcnLCBvbnVwZ3JhZGUpO1xuICB9XG5cbiAgdHJhbnNwb3J0Lm9uY2UoJ29wZW4nLCBvblRyYW5zcG9ydE9wZW4pO1xuICB0cmFuc3BvcnQub25jZSgnZXJyb3InLCBvbmVycm9yKTtcbiAgdHJhbnNwb3J0Lm9uY2UoJ2Nsb3NlJywgb25UcmFuc3BvcnRDbG9zZSk7XG5cbiAgdGhpcy5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuICB0aGlzLm9uY2UoJ3VwZ3JhZGluZycsIG9udXBncmFkZSk7XG5cbiAgdHJhbnNwb3J0Lm9wZW4oKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gY29ubmVjdGlvbiBpcyBkZWVtZWQgb3Blbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnc29ja2V0IG9wZW4nKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW4nO1xuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gJ3dlYnNvY2tldCcgPT09IHRoaXMudHJhbnNwb3J0Lm5hbWU7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuICB0aGlzLmZsdXNoKCk7XG5cbiAgLy8gd2UgY2hlY2sgZm9yIGByZWFkeVN0YXRlYCBpbiBjYXNlIGFuIGBvcGVuYFxuICAvLyBsaXN0ZW5lciBhbHJlYWR5IGNsb3NlZCB0aGUgc29ja2V0XG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSAmJiB0aGlzLnVwZ3JhZGUgJiYgdGhpcy50cmFuc3BvcnQucGF1c2UpIHtcbiAgICBkZWJ1Zygnc3RhcnRpbmcgdXBncmFkZSBwcm9iZXMnKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMudXBncmFkZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0aGlzLnByb2JlKHRoaXMudXBncmFkZXNbaV0pO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBIYW5kbGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgJ2Nsb3NpbmcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICBkZWJ1Zygnc29ja2V0IHJlY2VpdmU6IHR5cGUgXCIlc1wiLCBkYXRhIFwiJXNcIicsIHBhY2tldC50eXBlLCBwYWNrZXQuZGF0YSk7XG5cbiAgICB0aGlzLmVtaXQoJ3BhY2tldCcsIHBhY2tldCk7XG5cbiAgICAvLyBTb2NrZXQgaXMgbGl2ZSAtIGFueSBwYWNrZXQgY291bnRzXG4gICAgdGhpcy5lbWl0KCdoZWFydGJlYXQnKTtcblxuICAgIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICAgIGNhc2UgJ29wZW4nOlxuICAgICAgICB0aGlzLm9uSGFuZHNoYWtlKHBhcnNlanNvbihwYWNrZXQuZGF0YSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncG9uZyc6XG4gICAgICAgIHRoaXMuc2V0UGluZygpO1xuICAgICAgICB0aGlzLmVtaXQoJ3BvbmcnKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignc2VydmVyIGVycm9yJyk7XG4gICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgIHRoaXMub25FcnJvcihlcnIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbWVzc2FnZSc6XG4gICAgICAgIHRoaXMuZW1pdCgnZGF0YScsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgcGFja2V0LmRhdGEpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ3BhY2tldCByZWNlaXZlZCB3aXRoIHNvY2tldCByZWFkeVN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gaGFuZHNoYWtlIGNvbXBsZXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhhbmRzaGFrZSBvYmpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IYW5kc2hha2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmVtaXQoJ2hhbmRzaGFrZScsIGRhdGEpO1xuICB0aGlzLmlkID0gZGF0YS5zaWQ7XG4gIHRoaXMudHJhbnNwb3J0LnF1ZXJ5LnNpZCA9IGRhdGEuc2lkO1xuICB0aGlzLnVwZ3JhZGVzID0gdGhpcy5maWx0ZXJVcGdyYWRlcyhkYXRhLnVwZ3JhZGVzKTtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBkYXRhLnBpbmdJbnRlcnZhbDtcbiAgdGhpcy5waW5nVGltZW91dCA9IGRhdGEucGluZ1RpbWVvdXQ7XG4gIHRoaXMub25PcGVuKCk7XG4gIC8vIEluIGNhc2Ugb3BlbiBoYW5kbGVyIGNsb3NlcyBzb2NrZXRcbiAgaWYgKCdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgdGhpcy5zZXRQaW5nKCk7XG5cbiAgLy8gUHJvbG9uZyBsaXZlbmVzcyBvZiBzb2NrZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xuICB0aGlzLm9uKCdoZWFydGJlYXQnLCB0aGlzLm9uSGVhcnRiZWF0KTtcbn07XG5cbi8qKlxuICogUmVzZXRzIHBpbmcgdGltZW91dC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uSGVhcnRiZWF0ID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc2VsZi5waW5nVGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICBzZWxmLm9uQ2xvc2UoJ3BpbmcgdGltZW91dCcpO1xuICB9LCB0aW1lb3V0IHx8IChzZWxmLnBpbmdJbnRlcnZhbCArIHNlbGYucGluZ1RpbWVvdXQpKTtcbn07XG5cbi8qKlxuICogUGluZ3Mgc2VydmVyIGV2ZXJ5IGB0aGlzLnBpbmdJbnRlcnZhbGAgYW5kIGV4cGVjdHMgcmVzcG9uc2VcbiAqIHdpdGhpbiBgdGhpcy5waW5nVGltZW91dGAgb3IgY2xvc2VzIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZXRQaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNsZWFyVGltZW91dChzZWxmLnBpbmdJbnRlcnZhbFRpbWVyKTtcbiAgc2VsZi5waW5nSW50ZXJ2YWxUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cml0aW5nIHBpbmcgcGFja2V0IC0gZXhwZWN0aW5nIHBvbmcgd2l0aGluICVzbXMnLCBzZWxmLnBpbmdUaW1lb3V0KTtcbiAgICBzZWxmLnBpbmcoKTtcbiAgICBzZWxmLm9uSGVhcnRiZWF0KHNlbGYucGluZ1RpbWVvdXQpO1xuICB9LCBzZWxmLnBpbmdJbnRlcnZhbCk7XG59O1xuXG4vKipcbiogU2VuZHMgYSBwaW5nIHBhY2tldC5cbipcbiogQGFwaSBwcml2YXRlXG4qL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZW5kUGFja2V0KCdwaW5nJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuZW1pdCgncGluZycpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIG9uIGBkcmFpbmAgZXZlbnRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG5cbiAgLy8gc2V0dGluZyBwcmV2QnVmZmVyTGVuID0gMCBpcyB2ZXJ5IGltcG9ydGFudFxuICAvLyBmb3IgZXhhbXBsZSwgd2hlbiB1cGdyYWRpbmcsIHVwZ3JhZGUgcGFja2V0IGlzIHNlbnQgb3ZlcixcbiAgLy8gYW5kIGEgbm9uemVybyBwcmV2QnVmZmVyTGVuIGNvdWxkIGNhdXNlIHByb2JsZW1zIG9uIGBkcmFpbmBcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcblxuICBpZiAoMCA9PT0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICB0aGlzLmVtaXQoJ2RyYWluJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5mbHVzaCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEZsdXNoIHdyaXRlIGJ1ZmZlcnMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy50cmFuc3BvcnQud3JpdGFibGUgJiZcbiAgICAhdGhpcy51cGdyYWRpbmcgJiYgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICBkZWJ1ZygnZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXQnLCB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCk7XG4gICAgdGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIGN1cnJlbnQgbGVuZ3RoIG9mIHdyaXRlQnVmZmVyXG4gICAgLy8gc3BsaWNlIHdyaXRlQnVmZmVyIGFuZCBjYWxsYmFja0J1ZmZlciBvbiBgZHJhaW5gXG4gICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7XG4gICAgdGhpcy5lbWl0KCdmbHVzaCcpO1xuICB9XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS53cml0ZSA9XG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobXNnLCBvcHRpb25zLCBmbikge1xuICB0aGlzLnNlbmRQYWNrZXQoJ21lc3NhZ2UnLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYWNrZXQgdHlwZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZFBhY2tldCA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCBvcHRpb25zLCBmbikge1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGRhdGEpIHtcbiAgICBmbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgIGZuID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuXG4gIGlmICgnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuY29tcHJlc3MgPSBmYWxzZSAhPT0gb3B0aW9ucy5jb21wcmVzcztcblxuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgZGF0YTogZGF0YSxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH07XG4gIHRoaXMuZW1pdCgncGFja2V0Q3JlYXRlJywgcGFja2V0KTtcbiAgdGhpcy53cml0ZUJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIGlmIChmbikgdGhpcy5vbmNlKCdmbHVzaCcsIGZuKTtcbiAgdGhpcy5mbHVzaCgpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NpbmcnO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UgKCkge1xuICAgIHNlbGYub25DbG9zZSgnZm9yY2VkIGNsb3NlJyk7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zaW5nIC0gdGVsbGluZyB0cmFuc3BvcnQgdG8gY2xvc2UnKTtcbiAgICBzZWxmLnRyYW5zcG9ydC5jbG9zZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW51cEFuZENsb3NlICgpIHtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlJywgY2xlYW51cEFuZENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIGNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiB3YWl0Rm9yVXBncmFkZSAoKSB7XG4gICAgLy8gd2FpdCBmb3IgdXBncmFkZSB0byBmaW5pc2ggc2luY2Ugd2UgY2FuJ3Qgc2VuZCBwYWNrZXRzIHdoaWxlIHBhdXNpbmcgYSB0cmFuc3BvcnRcbiAgICBzZWxmLm9uY2UoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYub25jZSgndXBncmFkZUVycm9yJywgY2xlYW51cEFuZENsb3NlKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgZXJyb3JcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIGRlYnVnKCdzb2NrZXQgZXJyb3IgJWonLCBlcnIpO1xuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLm9uQ2xvc2UoJ3RyYW5zcG9ydCBlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAocmVhc29uLCBkZXNjKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgY2xvc2Ugd2l0aCByZWFzb246IFwiJXNcIicsIHJlYXNvbik7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gY2xlYXIgdGltZXJzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ0ludGVydmFsVGltZXIpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuXG4gICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCdjbG9zZScpO1xuXG4gICAgLy8gZW5zdXJlIHRyYW5zcG9ydCB3b24ndCBzdGF5IG9wZW5cbiAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuXG4gICAgLy8gaWdub3JlIGZ1cnRoZXIgdHJhbnNwb3J0IGNvbW11bmljYXRpb25cbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblxuICAgIC8vIHNldCByZWFkeSBzdGF0ZVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuXG4gICAgLy8gY2xlYXIgc2Vzc2lvbiBpZFxuICAgIHRoaXMuaWQgPSBudWxsO1xuXG4gICAgLy8gZW1pdCBjbG9zZSBldmVudFxuICAgIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24sIGRlc2MpO1xuXG4gICAgLy8gY2xlYW4gYnVmZmVycyBhZnRlciwgc28gdXNlcnMgY2FuIHN0aWxsXG4gICAgLy8gZ3JhYiB0aGUgYnVmZmVycyBvbiBgY2xvc2VgIGV2ZW50XG4gICAgc2VsZi53cml0ZUJ1ZmZlciA9IFtdO1xuICAgIHNlbGYucHJldkJ1ZmZlckxlbiA9IDA7XG4gIH1cbn07XG5cbi8qKlxuICogRmlsdGVycyB1cGdyYWRlcywgcmV0dXJuaW5nIG9ubHkgdGhvc2UgbWF0Y2hpbmcgY2xpZW50IHRyYW5zcG9ydHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2VydmVyIHVwZ3JhZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5maWx0ZXJVcGdyYWRlcyA9IGZ1bmN0aW9uICh1cGdyYWRlcykge1xuICB2YXIgZmlsdGVyZWRVcGdyYWRlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgaiA9IHVwZ3JhZGVzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGlmICh+aW5kZXgodGhpcy50cmFuc3BvcnRzLCB1cGdyYWRlc1tpXSkpIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGZpbHRlcmVkVXBncmFkZXM7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqXG4gKiBMb2dpYyBib3Jyb3dlZCBmcm9tIE1vZGVybml6cjpcbiAqXG4gKiAgIC0gaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2NvcnMuanNcbiAqL1xuXG50cnkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAnd2l0aENyZWRlbnRpYWxzJyBpbiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbn0gY2F0Y2ggKGVycikge1xuICAvLyBpZiBYTUxIdHRwIHN1cHBvcnQgaXMgZGlzYWJsZWQgaW4gSUUgdGhlbiBpdCB3aWxsIHRocm93XG4gIC8vIHdoZW4gdHJ5aW5nIHRvIGNyZWF0ZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2hhcy1jb3JzL2luZGV4LmpzIiwiLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xudmFyIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6cG9sbGluZy14aHInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUjtcbm1vZHVsZS5leHBvcnRzLlJlcXVlc3QgPSBSZXF1ZXN0O1xuXG4vKipcbiAqIEVtcHR5IGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkgKCkge31cblxuLyoqXG4gKiBYSFIgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBYSFIgKG9wdHMpIHtcbiAgUG9sbGluZy5jYWxsKHRoaXMsIG9wdHMpO1xuICB0aGlzLnJlcXVlc3RUaW1lb3V0ID0gb3B0cy5yZXF1ZXN0VGltZW91dDtcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcblxuICBpZiAoZ2xvYmFsLmxvY2F0aW9uKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHRoaXMueGQgPSBvcHRzLmhvc3RuYW1lICE9PSBnbG9iYWwubG9jYXRpb24uaG9zdG5hbWUgfHxcbiAgICAgIHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICB0aGlzLnhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLlxuICovXG5cbmluaGVyaXQoWEhSLCBQb2xsaW5nKTtcblxuLyoqXG4gKiBYSFIgc3VwcG9ydHMgYmluYXJ5XG4gKi9cblxuWEhSLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIG9wdHMudXJpID0gdGhpcy51cmkoKTtcbiAgb3B0cy54ZCA9IHRoaXMueGQ7XG4gIG9wdHMueHMgPSB0aGlzLnhzO1xuICBvcHRzLmFnZW50ID0gdGhpcy5hZ2VudCB8fCBmYWxzZTtcbiAgb3B0cy5zdXBwb3J0c0JpbmFyeSA9IHRoaXMuc3VwcG9ydHNCaW5hcnk7XG4gIG9wdHMuZW5hYmxlc1hEUiA9IHRoaXMuZW5hYmxlc1hEUjtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIG9wdHMucmVxdWVzdFRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMuZXh0cmFIZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KG9wdHMpO1xufTtcblxuLyoqXG4gKiBTZW5kcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgaXNCaW5hcnkgPSB0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycgJiYgZGF0YSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KHsgbWV0aG9kOiAnUE9TVCcsIGRhdGE6IGRhdGEsIGlzQmluYXJ5OiBpc0JpbmFyeSB9KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ3N1Y2Nlc3MnLCBmbik7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9zdCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnNlbmRYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd4aHIgcG9sbCcpO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVxLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBzZWxmLm9uRGF0YShkYXRhKTtcbiAgfSk7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9sbCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnBvbGxYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFJlcXVlc3QgY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXF1ZXN0IChvcHRzKSB7XG4gIHRoaXMubWV0aG9kID0gb3B0cy5tZXRob2QgfHwgJ0dFVCc7XG4gIHRoaXMudXJpID0gb3B0cy51cmk7XG4gIHRoaXMueGQgPSAhIW9wdHMueGQ7XG4gIHRoaXMueHMgPSAhIW9wdHMueHM7XG4gIHRoaXMuYXN5bmMgPSBmYWxzZSAhPT0gb3B0cy5hc3luYztcbiAgdGhpcy5kYXRhID0gdW5kZWZpbmVkICE9PSBvcHRzLmRhdGEgPyBvcHRzLmRhdGEgOiBudWxsO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudDtcbiAgdGhpcy5pc0JpbmFyeSA9IG9wdHMuaXNCaW5hcnk7XG4gIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBvcHRzLnN1cHBvcnRzQmluYXJ5O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIHRoaXMuY3JlYXRlKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFJlcXVlc3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBYSFIgb2JqZWN0IGFuZCBzZW5kcyB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvcHRzID0geyBhZ2VudDogdGhpcy5hZ2VudCwgeGRvbWFpbjogdGhpcy54ZCwgeHNjaGVtZTogdGhpcy54cywgZW5hYmxlc1hEUjogdGhpcy5lbmFibGVzWERSIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIHZhciB4aHIgPSB0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRyeSB7XG4gICAgZGVidWcoJ3hociBvcGVuICVzOiAlcycsIHRoaXMubWV0aG9kLCB0aGlzLnVyaSk7XG4gICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJpLCB0aGlzLmFzeW5jKTtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sgJiYgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayh0cnVlKTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaSwgdGhpcy5leHRyYUhlYWRlcnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICBpZiAoJ1BPU1QnID09PSB0aGlzLm1ldGhvZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuaXNCaW5hcnkpIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnKi8qJyk7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIC8vIGllNiBjaGVja1xuICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlcXVlc3RUaW1lb3V0KSB7XG4gICAgICB4aHIudGltZW91dCA9IHRoaXMucmVxdWVzdFRpbWVvdXQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICB9O1xuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25FcnJvcih4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gMikge1xuICAgICAgICAgIHZhciBjb250ZW50VHlwZTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29udGVudFR5cGUgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgaWYgKGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJykge1xuICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICg0ICE9PSB4aHIucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICBpZiAoMjAwID09PSB4aHIuc3RhdHVzIHx8IDEyMjMgPT09IHhoci5zdGF0dXMpIHtcbiAgICAgICAgICBzZWxmLm9uTG9hZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgYGVycm9yYCBldmVudCBoYW5kbGVyIHRoYXQncyB1c2VyLXNldFxuICAgICAgICAgIC8vIGRvZXMgbm90IHRocm93IGluIHRoZSBzYW1lIHRpY2sgYW5kIGdldHMgY2F1Z2h0IGhlcmVcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYub25FcnJvcih4aHIuc3RhdHVzKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBkZWJ1ZygneGhyIGRhdGEgJXMnLCB0aGlzLmRhdGEpO1xuICAgIHhoci5zZW5kKHRoaXMuZGF0YSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBOZWVkIHRvIGRlZmVyIHNpbmNlIC5jcmVhdGUoKSBpcyBjYWxsZWQgZGlyZWN0bHkgZmhyb20gdGhlIGNvbnN0cnVjdG9yXG4gICAgLy8gYW5kIHRodXMgdGhlICdlcnJvcicgZXZlbnQgY2FuIG9ubHkgYmUgb25seSBib3VuZCAqYWZ0ZXIqIHRoaXMgZXhjZXB0aW9uXG4gICAgLy8gb2NjdXJzLiAgVGhlcmVmb3JlLCBhbHNvLCB3ZSBjYW5ub3QgdGhyb3cgaGVyZSBhdCBhbGwuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLm9uRXJyb3IoZSk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICAgIHRoaXMuaW5kZXggPSBSZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztcbiAgICBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdID0gdGhpcztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlc3BvbnNlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdzdWNjZXNzJyk7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgaWYgd2UgaGF2ZSBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnZGF0YScsIGRhdGEpO1xuICB0aGlzLm9uU3VjY2VzcygpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5jbGVhbnVwKHRydWUpO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgaG91c2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uIChmcm9tRXJyb3IpIHtcbiAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgdGhpcy54aHIgfHwgbnVsbCA9PT0gdGhpcy54aHIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8geG1saHR0cHJlcXVlc3RcbiAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICB0aGlzLnhoci5vbmxvYWQgPSB0aGlzLnhoci5vbmVycm9yID0gZW1wdHk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gIH1cblxuICBpZiAoZnJvbUVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIGlmIChnbG9iYWwuZG9jdW1lbnQpIHtcbiAgICBkZWxldGUgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XTtcbiAgfVxuXG4gIHRoaXMueGhyID0gbnVsbDtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gbG9hZC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBkYXRhO1xuICB0cnkge1xuICAgIHZhciBjb250ZW50VHlwZTtcbiAgICB0cnkge1xuICAgICAgY29udGVudFR5cGUgPSB0aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICBpZiAoY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSB7XG4gICAgICBkYXRhID0gdGhpcy54aHIucmVzcG9uc2UgfHwgdGhpcy54aHIucmVzcG9uc2VUZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gdGhpcy54aHIucmVzcG9uc2VUZXh0O1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMub25FcnJvcihlKTtcbiAgfVxuICBpZiAobnVsbCAhPSBkYXRhKSB7XG4gICAgdGhpcy5vbkRhdGEoZGF0YSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgaXQgaGFzIFhEb21haW5SZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmhhc1hEUiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICd1bmRlZmluZWQnICE9PSB0eXBlb2YgZ2xvYmFsLlhEb21haW5SZXF1ZXN0ICYmICF0aGlzLnhzICYmIHRoaXMuZW5hYmxlc1hEUjtcbn07XG5cbi8qKlxuICogQWJvcnRzIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgcGVuZGluZyByZXF1ZXN0cyB3aGVuIHVubG9hZGluZyB0aGUgd2luZG93LiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50XG4gKiBtZW1vcnkgbGVha3MgKGUuZy4gd2hlbiB1c2luZyBJRSkgYW5kIHRvIGVuc3VyZSB0aGF0IG5vIHNwdXJpb3VzIGVycm9yIGlzXG4gKiBlbWl0dGVkLlxuICovXG5cblJlcXVlc3QucmVxdWVzdHNDb3VudCA9IDA7XG5SZXF1ZXN0LnJlcXVlc3RzID0ge307XG5cbmlmIChnbG9iYWwuZG9jdW1lbnQpIHtcbiAgaWYgKGdsb2JhbC5hdHRhY2hFdmVudCkge1xuICAgIGdsb2JhbC5hdHRhY2hFdmVudCgnb251bmxvYWQnLCB1bmxvYWRIYW5kbGVyKTtcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5sb2FkSGFuZGxlciAoKSB7XG4gIGZvciAodmFyIGkgaW4gUmVxdWVzdC5yZXF1ZXN0cykge1xuICAgIGlmIChSZXF1ZXN0LnJlcXVlc3RzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBSZXF1ZXN0LnJlcXVlc3RzW2ldLmFib3J0KCk7XG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLXhoci5qcyIsIlxuLyoqXG4gKiBHZXRzIHRoZSBrZXlzIGZvciBhbiBvYmplY3QuXG4gKlxuICogQHJldHVybiB7QXJyYXl9IGtleXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyAob2JqKXtcbiAgdmFyIGFyciA9IFtdO1xuICB2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGkpKSB7XG4gICAgICBhcnIucHVzaChpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycjtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIva2V5cy5qcyIsIi8qKlxuICogQW4gYWJzdHJhY3Rpb24gZm9yIHNsaWNpbmcgYW4gYXJyYXlidWZmZXIgZXZlbiB3aGVuXG4gKiBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgaXMgbm90IHN1cHBvcnRlZFxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnJheWJ1ZmZlciwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBhcnJheWJ1ZmZlci5ieXRlTGVuZ3RoO1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIGVuZCA9IGVuZCB8fCBieXRlcztcblxuICBpZiAoYXJyYXlidWZmZXIuc2xpY2UpIHsgcmV0dXJuIGFycmF5YnVmZmVyLnNsaWNlKHN0YXJ0LCBlbmQpOyB9XG5cbiAgaWYgKHN0YXJ0IDwgMCkgeyBzdGFydCArPSBieXRlczsgfVxuICBpZiAoZW5kIDwgMCkgeyBlbmQgKz0gYnl0ZXM7IH1cbiAgaWYgKGVuZCA+IGJ5dGVzKSB7IGVuZCA9IGJ5dGVzOyB9XG5cbiAgaWYgKHN0YXJ0ID49IGJ5dGVzIHx8IHN0YXJ0ID49IGVuZCB8fCBieXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gIH1cblxuICB2YXIgYWJ2ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoZW5kIC0gc3RhcnQpO1xuICBmb3IgKHZhciBpID0gc3RhcnQsIGlpID0gMDsgaSA8IGVuZDsgaSsrLCBpaSsrKSB7XG4gICAgcmVzdWx0W2lpXSA9IGFidltpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LmJ1ZmZlcjtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvYXJyYXlidWZmZXIuc2xpY2UvaW5kZXguanMiLCJtb2R1bGUuZXhwb3J0cyA9IGFmdGVyXG5cbmZ1bmN0aW9uIGFmdGVyKGNvdW50LCBjYWxsYmFjaywgZXJyX2NiKSB7XG4gICAgdmFyIGJhaWwgPSBmYWxzZVxuICAgIGVycl9jYiA9IGVycl9jYiB8fCBub29wXG4gICAgcHJveHkuY291bnQgPSBjb3VudFxuXG4gICAgcmV0dXJuIChjb3VudCA9PT0gMCkgPyBjYWxsYmFjaygpIDogcHJveHlcblxuICAgIGZ1bmN0aW9uIHByb3h5KGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChwcm94eS5jb3VudCA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FmdGVyIGNhbGxlZCB0b28gbWFueSB0aW1lcycpXG4gICAgICAgIH1cbiAgICAgICAgLS1wcm94eS5jb3VudFxuXG4gICAgICAgIC8vIGFmdGVyIGZpcnN0IGVycm9yLCByZXN0IGFyZSBwYXNzZWQgdG8gZXJyX2NiXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGJhaWwgPSB0cnVlXG4gICAgICAgICAgICBjYWxsYmFjayhlcnIpXG4gICAgICAgICAgICAvLyBmdXR1cmUgZXJyb3IgY2FsbGJhY2tzIHdpbGwgZ28gdG8gZXJyb3IgaGFuZGxlclxuICAgICAgICAgICAgY2FsbGJhY2sgPSBlcnJfY2JcbiAgICAgICAgfSBlbHNlIGlmIChwcm94eS5jb3VudCA9PT0gMCAmJiAhYmFpbCkge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9hZnRlci9pbmRleC5qcyIsIi8qISBodHRwczovL210aHMuYmUvdXRmOGpzIHYyLjEuMiBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGVzIGBleHBvcnRzYFxuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzO1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgXG5cdHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiZcblx0XHRtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cyAmJiBtb2R1bGU7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAsIGZyb20gTm9kZS5qcyBvciBCcm93c2VyaWZpZWQgY29kZSxcblx0Ly8gYW5kIHVzZSBpdCBhcyBgcm9vdGBcblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDtcblx0aWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsKSB7XG5cdFx0cm9vdCA9IGZyZWVHbG9iYWw7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHR2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuXHQvLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZVxuXHRmdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHR2YXIgY291bnRlciA9IDA7XG5cdFx0dmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cdFx0dmFyIHZhbHVlO1xuXHRcdHZhciBleHRyYTtcblx0XHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdFx0ZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZVxuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0XHR2YXIgaW5kZXggPSAtMTtcblx0XHR2YXIgdmFsdWU7XG5cdFx0dmFyIG91dHB1dCA9ICcnO1xuXHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IGFycmF5W2luZGV4XTtcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSB7XG5cdFx0aWYgKGNvZGVQb2ludCA+PSAweEQ4MDAgJiYgY29kZVBvaW50IDw9IDB4REZGRikge1xuXHRcdFx0aWYgKHN0cmljdCkge1xuXHRcdFx0XHR0aHJvdyBFcnJvcihcblx0XHRcdFx0XHQnTG9uZSBzdXJyb2dhdGUgVSsnICsgY29kZVBvaW50LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICtcblx0XHRcdFx0XHQnIGlzIG5vdCBhIHNjYWxhciB2YWx1ZSdcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0ZnVuY3Rpb24gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIHNoaWZ0KSB7XG5cdFx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiBzaGlmdCkgJiAweDNGKSB8IDB4ODApO1xuXHR9XG5cblx0ZnVuY3Rpb24gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KSB7XG5cdFx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGRjgwKSA9PSAwKSB7IC8vIDEtYnl0ZSBzZXF1ZW5jZVxuXHRcdFx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuXHRcdH1cblx0XHR2YXIgc3ltYm9sID0gJyc7XG5cdFx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGODAwKSA9PSAwKSB7IC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRcdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDYpICYgMHgxRikgfCAweEMwKTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoKGNvZGVQb2ludCAmIDB4RkZGRjAwMDApID09IDApIHsgLy8gMy1ieXRlIHNlcXVlbmNlXG5cdFx0XHRpZiAoIWNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpKSB7XG5cdFx0XHRcdGNvZGVQb2ludCA9IDB4RkZGRDtcblx0XHRcdH1cblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxMikgJiAweDBGKSB8IDB4RTApO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoKGNvZGVQb2ludCAmIDB4RkZFMDAwMDApID09IDApIHsgLy8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTgpICYgMHgwNykgfCAweEYwKTtcblx0XHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgMTIpO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0XHR9XG5cdFx0c3ltYm9sICs9IHN0cmluZ0Zyb21DaGFyQ29kZSgoY29kZVBvaW50ICYgMHgzRikgfCAweDgwKTtcblx0XHRyZXR1cm4gc3ltYm9sO1xuXHR9XG5cblx0ZnVuY3Rpb24gdXRmOGVuY29kZShzdHJpbmcsIG9wdHMpIHtcblx0XHRvcHRzID0gb3B0cyB8fCB7fTtcblx0XHR2YXIgc3RyaWN0ID0gZmFsc2UgIT09IG9wdHMuc3RyaWN0O1xuXG5cdFx0dmFyIGNvZGVQb2ludHMgPSB1Y3MyZGVjb2RlKHN0cmluZyk7XG5cdFx0dmFyIGxlbmd0aCA9IGNvZGVQb2ludHMubGVuZ3RoO1xuXHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdHZhciBjb2RlUG9pbnQ7XG5cdFx0dmFyIGJ5dGVTdHJpbmcgPSAnJztcblx0XHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0Y29kZVBvaW50ID0gY29kZVBvaW50c1tpbmRleF07XG5cdFx0XHRieXRlU3RyaW5nICs9IGVuY29kZUNvZGVQb2ludChjb2RlUG9pbnQsIHN0cmljdCk7XG5cdFx0fVxuXHRcdHJldHVybiBieXRlU3RyaW5nO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0ZnVuY3Rpb24gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKSB7XG5cdFx0aWYgKGJ5dGVJbmRleCA+PSBieXRlQ291bnQpIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0XHR9XG5cblx0XHR2YXIgY29udGludWF0aW9uQnl0ZSA9IGJ5dGVBcnJheVtieXRlSW5kZXhdICYgMHhGRjtcblx0XHRieXRlSW5kZXgrKztcblxuXHRcdGlmICgoY29udGludWF0aW9uQnl0ZSAmIDB4QzApID09IDB4ODApIHtcblx0XHRcdHJldHVybiBjb250aW51YXRpb25CeXRlICYgMHgzRjtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBlbmQgdXAgaGVyZSwgaXTigJlzIG5vdCBhIGNvbnRpbnVhdGlvbiBieXRlXG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRlY29kZVN5bWJvbChzdHJpY3QpIHtcblx0XHR2YXIgYnl0ZTE7XG5cdFx0dmFyIGJ5dGUyO1xuXHRcdHZhciBieXRlMztcblx0XHR2YXIgYnl0ZTQ7XG5cdFx0dmFyIGNvZGVQb2ludDtcblxuXHRcdGlmIChieXRlSW5kZXggPiBieXRlQ291bnQpIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0XHR9XG5cblx0XHRpZiAoYnl0ZUluZGV4ID09IGJ5dGVDb3VudCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIFJlYWQgZmlyc3QgYnl0ZVxuXHRcdGJ5dGUxID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRcdGJ5dGVJbmRleCsrO1xuXG5cdFx0Ly8gMS1ieXRlIHNlcXVlbmNlIChubyBjb250aW51YXRpb24gYnl0ZXMpXG5cdFx0aWYgKChieXRlMSAmIDB4ODApID09IDApIHtcblx0XHRcdHJldHVybiBieXRlMTtcblx0XHR9XG5cblx0XHQvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRpZiAoKGJ5dGUxICYgMHhFMCkgPT0gMHhDMCkge1xuXHRcdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MUYpIDw8IDYpIHwgYnl0ZTI7XG5cdFx0XHRpZiAoY29kZVBvaW50ID49IDB4ODApIHtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gMy1ieXRlIHNlcXVlbmNlIChtYXkgaW5jbHVkZSB1bnBhaXJlZCBzdXJyb2dhdGVzKVxuXHRcdGlmICgoYnl0ZTEgJiAweEYwKSA9PSAweEUwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwRikgPDwgMTIpIHwgKGJ5dGUyIDw8IDYpIHwgYnl0ZTM7XG5cdFx0XHRpZiAoY29kZVBvaW50ID49IDB4MDgwMCkge1xuXHRcdFx0XHRyZXR1cm4gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkgPyBjb2RlUG9pbnQgOiAweEZGRkQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIDQtYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICgoYnl0ZTEgJiAweEY4KSA9PSAweEYwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRieXRlNCA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwNykgPDwgMHgxMikgfCAoYnl0ZTIgPDwgMHgwQykgfFxuXHRcdFx0XHQoYnl0ZTMgPDwgMHgwNikgfCBieXRlNDtcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwMTAwMDAgJiYgY29kZVBvaW50IDw9IDB4MTBGRkZGKSB7XG5cdFx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgVVRGLTggZGV0ZWN0ZWQnKTtcblx0fVxuXG5cdHZhciBieXRlQXJyYXk7XG5cdHZhciBieXRlQ291bnQ7XG5cdHZhciBieXRlSW5kZXg7XG5cdGZ1bmN0aW9uIHV0ZjhkZWNvZGUoYnl0ZVN0cmluZywgb3B0cykge1xuXHRcdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHRcdHZhciBzdHJpY3QgPSBmYWxzZSAhPT0gb3B0cy5zdHJpY3Q7XG5cblx0XHRieXRlQXJyYXkgPSB1Y3MyZGVjb2RlKGJ5dGVTdHJpbmcpO1xuXHRcdGJ5dGVDb3VudCA9IGJ5dGVBcnJheS5sZW5ndGg7XG5cdFx0Ynl0ZUluZGV4ID0gMDtcblx0XHR2YXIgY29kZVBvaW50cyA9IFtdO1xuXHRcdHZhciB0bXA7XG5cdFx0d2hpbGUgKCh0bXAgPSBkZWNvZGVTeW1ib2woc3RyaWN0KSkgIT09IGZhbHNlKSB7XG5cdFx0XHRjb2RlUG9pbnRzLnB1c2godG1wKTtcblx0XHR9XG5cdFx0cmV0dXJuIHVjczJlbmNvZGUoY29kZVBvaW50cyk7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHR2YXIgdXRmOCA9IHtcblx0XHQndmVyc2lvbic6ICcyLjEuMicsXG5cdFx0J2VuY29kZSc6IHV0ZjhlbmNvZGUsXG5cdFx0J2RlY29kZSc6IHV0ZjhkZWNvZGVcblx0fTtcblxuXHQvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnNcblx0Ly8gbGlrZSB0aGUgZm9sbG93aW5nOlxuXHRpZiAoXG5cdFx0dHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiZcblx0XHRkZWZpbmUuYW1kXG5cdCkge1xuXHRcdGRlZmluZShmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB1dGY4O1xuXHRcdH0pO1xuXHR9XHRlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiAhZnJlZUV4cG9ydHMubm9kZVR5cGUpIHtcblx0XHRpZiAoZnJlZU1vZHVsZSkgeyAvLyBpbiBOb2RlLmpzIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gdXRmODtcblx0XHR9IGVsc2UgeyAvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0dmFyIG9iamVjdCA9IHt9O1xuXHRcdFx0dmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0Lmhhc093blByb3BlcnR5O1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIHV0ZjgpIHtcblx0XHRcdFx0aGFzT3duUHJvcGVydHkuY2FsbCh1dGY4LCBrZXkpICYmIChmcmVlRXhwb3J0c1trZXldID0gdXRmOFtrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7IC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LnV0ZjggPSB1dGY4O1xuXHR9XG5cbn0odGhpcykpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL3V0ZjguanMiLCIvKlxuICogYmFzZTY0LWFycmF5YnVmZmVyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE5pa2xhcyB2b24gSGVydHplblxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG4oZnVuY3Rpb24oKXtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIGNoYXJzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG5cbiAgLy8gVXNlIGEgbG9va3VwIHRhYmxlIHRvIGZpbmQgdGhlIGluZGV4LlxuICB2YXIgbG9va3VwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykge1xuICAgIGxvb2t1cFtjaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7XG4gIH1cblxuICBleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyKSB7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLFxuICAgIGksIGxlbiA9IGJ5dGVzLmxlbmd0aCwgYmFzZTY0ID0gXCJcIjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTMpIHtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpXSA+PiAyXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2ldICYgMykgPDwgNCkgfCAoYnl0ZXNbaSArIDFdID4+IDQpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2kgKyAyXSAmIDYzXTtcbiAgICB9XG5cbiAgICBpZiAoKGxlbiAlIDMpID09PSAyKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArIFwiPVwiO1xuICAgIH0gZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMikgKyBcIj09XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U2NDtcbiAgfTtcblxuICBleHBvcnRzLmRlY29kZSA9ICBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsXG4gICAgbGVuID0gYmFzZTY0Lmxlbmd0aCwgaSwgcCA9IDAsXG4gICAgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7XG5cbiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gXCI9XCIpIHtcbiAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09IFwiPVwiKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhcnJheWJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJMZW5ndGgpLFxuICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9NCkge1xuICAgICAgZW5jb2RlZDEgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSldO1xuICAgICAgZW5jb2RlZDIgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsxKV07XG4gICAgICBlbmNvZGVkMyA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzIpXTtcbiAgICAgIGVuY29kZWQ0ID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMyldO1xuXG4gICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMyAmIDMpIDw8IDYpIHwgKGVuY29kZWQ0ICYgNjMpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheWJ1ZmZlcjtcbiAgfTtcbn0pKCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvYmFzZTY0LWFycmF5YnVmZmVyL2xpYi9iYXNlNjQtYXJyYXlidWZmZXIuanMiLCIvKipcbiAqIENyZWF0ZSBhIGJsb2IgYnVpbGRlciBldmVuIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XG4gKi9cblxudmFyIEJsb2JCdWlsZGVyID0gZ2xvYmFsLkJsb2JCdWlsZGVyXG4gIHx8IGdsb2JhbC5XZWJLaXRCbG9iQnVpbGRlclxuICB8fCBnbG9iYWwuTVNCbG9iQnVpbGRlclxuICB8fCBnbG9iYWwuTW96QmxvYkJ1aWxkZXI7XG5cbi8qKlxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBpcyBzdXBwb3J0ZWRcbiAqL1xuXG52YXIgYmxvYlN1cHBvcnRlZCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYSA9IG5ldyBCbG9iKFsnaGknXSk7XG4gICAgcmV0dXJuIGEuc2l6ZSA9PT0gMjtcbiAgfSBjYXRjaChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59KSgpO1xuXG4vKipcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3Igc3VwcG9ydHMgQXJyYXlCdWZmZXJWaWV3c1xuICogRmFpbHMgaW4gU2FmYXJpIDYsIHNvIHdlIG5lZWQgdG8gbWFwIHRvIEFycmF5QnVmZmVycyB0aGVyZS5cbiAqL1xuXG52YXIgYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID0gYmxvYlN1cHBvcnRlZCAmJiAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGIgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsMl0pXSk7XG4gICAgcmV0dXJuIGIuc2l6ZSA9PT0gMjtcbiAgfSBjYXRjaChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59KSgpO1xuXG4vKipcbiAqIENoZWNrIGlmIEJsb2JCdWlsZGVyIGlzIHN1cHBvcnRlZFxuICovXG5cbnZhciBibG9iQnVpbGRlclN1cHBvcnRlZCA9IEJsb2JCdWlsZGVyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmRcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmdldEJsb2I7XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgbWFwcyBBcnJheUJ1ZmZlclZpZXdzIHRvIEFycmF5QnVmZmVyc1xuICogVXNlZCBieSBCbG9iQnVpbGRlciBjb25zdHJ1Y3RvciBhbmQgb2xkIGJyb3dzZXJzIHRoYXQgZGlkbid0XG4gKiBzdXBwb3J0IGl0IGluIHRoZSBCbG9iIGNvbnN0cnVjdG9yLlxuICovXG5cbmZ1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNodW5rID0gYXJ5W2ldO1xuICAgIGlmIChjaHVuay5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIGJ1ZiA9IGNodW5rLmJ1ZmZlcjtcblxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHN1YmFycmF5LCBtYWtlIGEgY29weSBzbyB3ZSBvbmx5XG4gICAgICAvLyBpbmNsdWRlIHRoZSBzdWJhcnJheSByZWdpb24gZnJvbSB0aGUgdW5kZXJseWluZyBidWZmZXJcbiAgICAgIGlmIChjaHVuay5ieXRlTGVuZ3RoICE9PSBidWYuYnl0ZUxlbmd0aCkge1xuICAgICAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpO1xuICAgICAgICBjb3B5LnNldChuZXcgVWludDhBcnJheShidWYsIGNodW5rLmJ5dGVPZmZzZXQsIGNodW5rLmJ5dGVMZW5ndGgpKTtcbiAgICAgICAgYnVmID0gY29weS5idWZmZXI7XG4gICAgICB9XG5cbiAgICAgIGFyeVtpXSA9IGJ1ZjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7XG4gIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkrKykge1xuICAgIGJiLmFwcGVuZChhcnlbaV0pO1xuICB9XG5cbiAgcmV0dXJuIChvcHRpb25zLnR5cGUpID8gYmIuZ2V0QmxvYihvcHRpb25zLnR5cGUpIDogYmIuZ2V0QmxvYigpO1xufTtcblxuZnVuY3Rpb24gQmxvYkNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xuICBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSk7XG4gIHJldHVybiBuZXcgQmxvYihhcnksIG9wdGlvbnMgfHwge30pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gIGlmIChibG9iU3VwcG9ydGVkKSB7XG4gICAgcmV0dXJuIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA/IGdsb2JhbC5CbG9iIDogQmxvYkNvbnN0cnVjdG9yO1xuICB9IGVsc2UgaWYgKGJsb2JCdWlsZGVyU3VwcG9ydGVkKSB7XG4gICAgcmV0dXJuIEJsb2JCdWlsZGVyQ29uc3RydWN0b3I7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufSkoKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9ibG9iL2luZGV4LmpzIiwiXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpTT05QUG9sbGluZztcblxuLyoqXG4gKiBDYWNoZWQgcmVndWxhciBleHByZXNzaW9ucy5cbiAqL1xuXG52YXIgck5ld2xpbmUgPSAvXFxuL2c7XG52YXIgckVzY2FwZWROZXdsaW5lID0gL1xcXFxuL2c7XG5cbi8qKlxuICogR2xvYmFsIEpTT05QIGNhbGxiYWNrcy5cbiAqL1xuXG52YXIgY2FsbGJhY2tzO1xuXG4vKipcbiAqIE5vb3AuXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkgKCkgeyB9XG5cbi8qKlxuICogSlNPTlAgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gSlNPTlBQb2xsaW5nIChvcHRzKSB7XG4gIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTtcblxuICB0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcblxuICAvLyBkZWZpbmUgZ2xvYmFsIGNhbGxiYWNrcyBhcnJheSBpZiBub3QgcHJlc2VudFxuICAvLyB3ZSBkbyB0aGlzIGhlcmUgKGxhemlseSkgdG8gYXZvaWQgdW5uZWVkZWQgZ2xvYmFsIHBvbGx1dGlvblxuICBpZiAoIWNhbGxiYWNrcykge1xuICAgIC8vIHdlIG5lZWQgdG8gY29uc2lkZXIgbXVsdGlwbGUgZW5naW5lcyBpbiB0aGUgc2FtZSBwYWdlXG4gICAgaWYgKCFnbG9iYWwuX19fZWlvKSBnbG9iYWwuX19fZWlvID0gW107XG4gICAgY2FsbGJhY2tzID0gZ2xvYmFsLl9fX2VpbztcbiAgfVxuXG4gIC8vIGNhbGxiYWNrIGlkZW50aWZpZXJcbiAgdGhpcy5pbmRleCA9IGNhbGxiYWNrcy5sZW5ndGg7XG5cbiAgLy8gYWRkIGNhbGxiYWNrIHRvIGpzb25wIGdsb2JhbFxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uIChtc2cpIHtcbiAgICBzZWxmLm9uRGF0YShtc2cpO1xuICB9KTtcblxuICAvLyBhcHBlbmQgdG8gcXVlcnkgc3RyaW5nXG4gIHRoaXMucXVlcnkuaiA9IHRoaXMuaW5kZXg7XG5cbiAgLy8gcHJldmVudCBzcHVyaW91cyBlcnJvcnMgZnJvbSBiZWluZyBlbWl0dGVkIHdoZW4gdGhlIHdpbmRvdyBpcyB1bmxvYWRlZFxuICBpZiAoZ2xvYmFsLmRvY3VtZW50ICYmIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLnNjcmlwdCkgc2VsZi5zY3JpcHQub25lcnJvciA9IGVtcHR5O1xuICAgIH0sIGZhbHNlKTtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy5cbiAqL1xuXG5pbmhlcml0KEpTT05QUG9sbGluZywgUG9sbGluZyk7XG5cbi8qXG4gKiBKU09OUCBvbmx5IHN1cHBvcnRzIGJpbmFyeSBhcyBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuXG4vKipcbiAqIENsb3NlcyB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7XG4gICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICB9XG5cbiAgaWYgKHRoaXMuZm9ybSkge1xuICAgIHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSk7XG4gICAgdGhpcy5mb3JtID0gbnVsbDtcbiAgICB0aGlzLmlmcmFtZSA9IG51bGw7XG4gIH1cblxuICBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gIHNjcmlwdC5zcmMgPSB0aGlzLnVyaSgpO1xuICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsIGVycm9yJywgZSk7XG4gIH07XG5cbiAgdmFyIGluc2VydEF0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICBpZiAoaW5zZXJ0QXQpIHtcbiAgICBpbnNlcnRBdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGluc2VydEF0KTtcbiAgfSBlbHNlIHtcbiAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICB9XG4gIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuXG4gIHZhciBpc1VBZ2Vja28gPSAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG5hdmlnYXRvciAmJiAvZ2Vja28vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gIGlmIChpc1VBZ2Vja28pIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICB9LCAxMDApO1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlcyB3aXRoIGEgaGlkZGVuIGlmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICB2YXIgYXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdmFyIGlkID0gdGhpcy5pZnJhbWVJZCA9ICdlaW9faWZyYW1lXycgKyB0aGlzLmluZGV4O1xuICAgIHZhciBpZnJhbWU7XG5cbiAgICBmb3JtLmNsYXNzTmFtZSA9ICdzb2NrZXRpbyc7XG4gICAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZm9ybS5zdHlsZS50b3AgPSAnLTEwMDBweCc7XG4gICAgZm9ybS5zdHlsZS5sZWZ0ID0gJy0xMDAwcHgnO1xuICAgIGZvcm0udGFyZ2V0ID0gaWQ7XG4gICAgZm9ybS5tZXRob2QgPSAnUE9TVCc7XG4gICAgZm9ybS5zZXRBdHRyaWJ1dGUoJ2FjY2VwdC1jaGFyc2V0JywgJ3V0Zi04Jyk7XG4gICAgYXJlYS5uYW1lID0gJ2QnO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoYXJlYSk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgdGhpcy5hcmVhID0gYXJlYTtcbiAgfVxuXG4gIHRoaXMuZm9ybS5hY3Rpb24gPSB0aGlzLnVyaSgpO1xuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlICgpIHtcbiAgICBpbml0SWZyYW1lKCk7XG4gICAgZm4oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRJZnJhbWUgKCkge1xuICAgIGlmIChzZWxmLmlmcmFtZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2VsZi5mb3JtLnJlbW92ZUNoaWxkKHNlbGYuaWZyYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsaW5nIGlmcmFtZSByZW1vdmFsIGVycm9yJywgZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9XCJcIiBzdXBwb3J0ICh0aGFua3MgQ2hyaXMgTGFtYmFjaGVyKVxuICAgICAgdmFyIGh0bWwgPSAnPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OjBcIiBuYW1lPVwiJyArIHNlbGYuaWZyYW1lSWQgKyAnXCI+JztcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaHRtbCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBpZnJhbWUubmFtZSA9IHNlbGYuaWZyYW1lSWQ7XG4gICAgICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6MCc7XG4gICAgfVxuXG4gICAgaWZyYW1lLmlkID0gc2VsZi5pZnJhbWVJZDtcblxuICAgIHNlbGYuZm9ybS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIHNlbGYuaWZyYW1lID0gaWZyYW1lO1xuICB9XG5cbiAgaW5pdElmcmFtZSgpO1xuXG4gIC8vIGVzY2FwZSBcXG4gdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGNvbnZlcnRlZCBpbnRvIFxcclxcbiBieSBzb21lIFVBc1xuICAvLyBkb3VibGUgZXNjYXBpbmcgaXMgcmVxdWlyZWQgZm9yIGVzY2FwZWQgbmV3IGxpbmVzIGJlY2F1c2UgdW5lc2NhcGluZyBvZiBuZXcgbGluZXMgY2FuIGJlIGRvbmUgc2FmZWx5IG9uIHNlcnZlci1zaWRlXG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UockVzY2FwZWROZXdsaW5lLCAnXFxcXFxcbicpO1xuICB0aGlzLmFyZWEudmFsdWUgPSBkYXRhLnJlcGxhY2Uock5ld2xpbmUsICdcXFxcbicpO1xuXG4gIHRyeSB7XG4gICAgdGhpcy5mb3JtLnN1Ym1pdCgpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIGlmICh0aGlzLmlmcmFtZS5hdHRhY2hFdmVudCkge1xuICAgIHRoaXMuaWZyYW1lLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmlmcmFtZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlmcmFtZS5vbmxvYWQgPSBjb21wbGV0ZTtcbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmctanNvbnAuanMiLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4uL3RyYW5zcG9ydCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIHllYXN0ID0gcmVxdWlyZSgneWVhc3QnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6d2Vic29ja2V0Jyk7XG52YXIgQnJvd3NlcldlYlNvY2tldCA9IGdsb2JhbC5XZWJTb2NrZXQgfHwgZ2xvYmFsLk1veldlYlNvY2tldDtcbnZhciBOb2RlV2ViU29ja2V0O1xuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gIHRyeSB7XG4gICAgTm9kZVdlYlNvY2tldCA9IHJlcXVpcmUoJ3dzJyk7XG4gIH0gY2F0Y2ggKGUpIHsgfVxufVxuXG4vKipcbiAqIEdldCBlaXRoZXIgdGhlIGBXZWJTb2NrZXRgIG9yIGBNb3pXZWJTb2NrZXRgIGdsb2JhbHNcbiAqIGluIHRoZSBicm93c2VyIG9yIHRyeSB0byByZXNvbHZlIFdlYlNvY2tldC1jb21wYXRpYmxlXG4gKiBpbnRlcmZhY2UgZXhwb3NlZCBieSBgd3NgIGZvciBOb2RlLWxpa2UgZW52aXJvbm1lbnQuXG4gKi9cblxudmFyIFdlYlNvY2tldCA9IEJyb3dzZXJXZWJTb2NrZXQ7XG5pZiAoIVdlYlNvY2tldCAmJiB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICBXZWJTb2NrZXQgPSBOb2RlV2ViU29ja2V0O1xufVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gV1M7XG5cbi8qKlxuICogV2ViU29ja2V0IHRyYW5zcG9ydCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHtPYmplY3R9IGNvbm5lY3Rpb24gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBXUyAob3B0cykge1xuICB2YXIgZm9yY2VCYXNlNjQgPSAob3B0cyAmJiBvcHRzLmZvcmNlQmFzZTY0KTtcbiAgaWYgKGZvcmNlQmFzZTY0KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG4gIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlO1xuICB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCA9IEJyb3dzZXJXZWJTb2NrZXQgJiYgIW9wdHMuZm9yY2VOb2RlO1xuICB0aGlzLnByb3RvY29scyA9IG9wdHMucHJvdG9jb2xzO1xuICBpZiAoIXRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgV2ViU29ja2V0ID0gTm9kZVdlYlNvY2tldDtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFdTLCBUcmFuc3BvcnQpO1xuXG4vKipcbiAqIFRyYW5zcG9ydCBuYW1lLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLm5hbWUgPSAnd2Vic29ja2V0JztcblxuLypcbiAqIFdlYlNvY2tldHMgc3VwcG9ydCBiaW5hcnlcbiAqL1xuXG5XUy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuXG4vKipcbiAqIE9wZW5zIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9PcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuY2hlY2soKSkge1xuICAgIC8vIGxldCBwcm9iZSB0aW1lb3V0XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHVyaSA9IHRoaXMudXJpKCk7XG4gIHZhciBwcm90b2NvbHMgPSB0aGlzLnByb3RvY29scztcbiAgdmFyIG9wdHMgPSB7XG4gICAgYWdlbnQ6IHRoaXMuYWdlbnQsXG4gICAgcGVyTWVzc2FnZURlZmxhdGU6IHRoaXMucGVyTWVzc2FnZURlZmxhdGVcbiAgfTtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIGlmICh0aGlzLmV4dHJhSGVhZGVycykge1xuICAgIG9wdHMuaGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzO1xuICB9XG4gIGlmICh0aGlzLmxvY2FsQWRkcmVzcykge1xuICAgIG9wdHMubG9jYWxBZGRyZXNzID0gdGhpcy5sb2NhbEFkZHJlc3M7XG4gIH1cblxuICB0cnkge1xuICAgIHRoaXMud3MgPSB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCA/IChwcm90b2NvbHMgPyBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzKSA6IG5ldyBXZWJTb2NrZXQodXJpKSkgOiBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzLCBvcHRzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG5cbiAgaWYgKHRoaXMud3MuYmluYXJ5VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMud3Muc3VwcG9ydHMgJiYgdGhpcy53cy5zdXBwb3J0cy5iaW5hcnkpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcbiAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnbm9kZWJ1ZmZlcic7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgfVxuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbn07XG5cbi8qKlxuICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIHNvY2tldFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMud3Mub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25PcGVuKCk7XG4gIH07XG4gIHRoaXMud3Mub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgfTtcbiAgdGhpcy53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICBzZWxmLm9uRGF0YShldi5kYXRhKTtcbiAgfTtcbiAgdGhpcy53cy5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3dlYnNvY2tldCBlcnJvcicsIGUpO1xuICB9O1xufTtcblxuLyoqXG4gKiBXcml0ZXMgZGF0YSB0byBzb2NrZXQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgb2YgcGFja2V0cy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIC8vIGVuY29kZVBhY2tldCBlZmZpY2llbnQgYXMgaXQgdXNlcyBXUyBmcmFtaW5nXG4gIC8vIG5vIG5lZWQgZm9yIGVuY29kZVBheWxvYWRcbiAgdmFyIHRvdGFsID0gcGFja2V0cy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdG90YWw7IGkgPCBsOyBpKyspIHtcbiAgICAoZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgcGFyc2VyLmVuY29kZVBhY2tldChwYWNrZXQsIHNlbGYuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICghc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAvLyBhbHdheXMgY3JlYXRlIGEgbmV3IG9iamVjdCAoR0gtNDM3KVxuICAgICAgICAgIHZhciBvcHRzID0ge307XG4gICAgICAgICAgaWYgKHBhY2tldC5vcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gcGFja2V0Lm9wdGlvbnMuY29tcHJlc3M7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSAnc3RyaW5nJyA9PT0gdHlwZW9mIGRhdGEgPyBnbG9iYWwuQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkgOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW4gPCBzZWxmLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29tZXRpbWVzIHRoZSB3ZWJzb2NrZXQgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQgYnV0IHRoZSBicm93c2VyIGRpZG4ndFxuICAgICAgICAvLyBoYXZlIGEgY2hhbmNlIG9mIGluZm9ybWluZyB1cyBhYm91dCBpdCB5ZXQsIGluIHRoYXQgY2FzZSBzZW5kIHdpbGxcbiAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgIC8vIFR5cGVFcnJvciBpcyB0aHJvd24gd2hlbiBwYXNzaW5nIHRoZSBzZWNvbmQgYXJndW1lbnQgb24gU2FmYXJpXG4gICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhLCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1Zygnd2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLS10b3RhbCB8fCBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KShwYWNrZXRzW2ldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbmUgKCkge1xuICAgIHNlbGYuZW1pdCgnZmx1c2gnKTtcblxuICAgIC8vIGZha2UgZHJhaW5cbiAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgICB9LCAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogQ2xvc2VzIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gIHZhciBzY2hlbWEgPSB0aGlzLnNlY3VyZSA/ICd3c3MnIDogJ3dzJztcbiAgdmFyIHBvcnQgPSAnJztcblxuICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICBpZiAodGhpcy5wb3J0ICYmICgoJ3dzcycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICgnd3MnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDgwKSkpIHtcbiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0O1xuICB9XG5cbiAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgaWYgKHRoaXMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICBxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gIH1cblxuICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXNcbiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG5cbi8qKlxuICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoaXMgdHJhbnNwb3J0IGlzIGF2YWlsYWJsZS5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISFXZWJTb2NrZXQgJiYgISgnX19pbml0aWFsaXplJyBpbiBXZWJTb2NrZXQgJiYgdGhpcy5uYW1lID09PSBXUy5wcm90b3R5cGUubmFtZSk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwiLyogKGlnbm9yZWQpICovXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gd3MgKGlnbm9yZWQpXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcclxuICogSlNPTiBwYXJzZS5cclxuICpcclxuICogQHNlZSBCYXNlZCBvbiBqUXVlcnkjcGFyc2VKU09OIChNSVQpIGFuZCBKU09OMlxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG52YXIgcnZhbGlkY2hhcnMgPSAvXltcXF0sOnt9XFxzXSokLztcclxudmFyIHJ2YWxpZGVzY2FwZSA9IC9cXFxcKD86W1wiXFxcXFxcL2JmbnJ0XXx1WzAtOWEtZkEtRl17NH0pL2c7XHJcbnZhciBydmFsaWR0b2tlbnMgPSAvXCJbXlwiXFxcXFxcblxccl0qXCJ8dHJ1ZXxmYWxzZXxudWxsfC0/XFxkKyg/OlxcLlxcZCopPyg/OltlRV1bK1xcLV0/XFxkKyk/L2c7XHJcbnZhciBydmFsaWRicmFjZXMgPSAvKD86Xnw6fCwpKD86XFxzKlxcWykrL2c7XHJcbnZhciBydHJpbUxlZnQgPSAvXlxccysvO1xyXG52YXIgcnRyaW1SaWdodCA9IC9cXHMrJC87XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlanNvbihkYXRhKSB7XHJcbiAgaWYgKCdzdHJpbmcnICE9IHR5cGVvZiBkYXRhIHx8ICFkYXRhKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UocnRyaW1MZWZ0LCAnJykucmVwbGFjZShydHJpbVJpZ2h0LCAnJyk7XHJcblxyXG4gIC8vIEF0dGVtcHQgdG8gcGFyc2UgdXNpbmcgdGhlIG5hdGl2ZSBKU09OIHBhcnNlciBmaXJzdFxyXG4gIGlmIChnbG9iYWwuSlNPTiAmJiBKU09OLnBhcnNlKSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcclxuICB9XHJcblxyXG4gIGlmIChydmFsaWRjaGFycy50ZXN0KGRhdGEucmVwbGFjZShydmFsaWRlc2NhcGUsICdAJylcclxuICAgICAgLnJlcGxhY2UocnZhbGlkdG9rZW5zLCAnXScpXHJcbiAgICAgIC5yZXBsYWNlKHJ2YWxpZGJyYWNlcywgJycpKSkge1xyXG4gICAgcmV0dXJuIChuZXcgRnVuY3Rpb24oJ3JldHVybiAnICsgZGF0YSkpKCk7XHJcbiAgfVxyXG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9wYXJzZWpzb24vaW5kZXguanMiLCJtb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXlcblxuZnVuY3Rpb24gdG9BcnJheShsaXN0LCBpbmRleCkge1xuICAgIHZhciBhcnJheSA9IFtdXG5cbiAgICBpbmRleCA9IGluZGV4IHx8IDBcblxuICAgIGZvciAodmFyIGkgPSBpbmRleCB8fCAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJheVtpIC0gaW5kZXhdID0gbGlzdFtpXVxuICAgIH1cblxuICAgIHJldHVybiBhcnJheVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RvLWFycmF5L2luZGV4LmpzIiwiXG4vKipcbiAqIEV4cG9zZSBgQmFja29mZmAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBCYWNrb2ZmO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYmFja29mZiB0aW1lciB3aXRoIGBvcHRzYC5cbiAqXG4gKiAtIGBtaW5gIGluaXRpYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgWzEwMF1cbiAqIC0gYG1heGAgbWF4IHRpbWVvdXQgWzEwMDAwXVxuICogLSBgaml0dGVyYCBbMF1cbiAqIC0gYGZhY3RvcmAgWzJdXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQmFja29mZihvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICB0aGlzLm1zID0gb3B0cy5taW4gfHwgMTAwO1xuICB0aGlzLm1heCA9IG9wdHMubWF4IHx8IDEwMDAwO1xuICB0aGlzLmZhY3RvciA9IG9wdHMuZmFjdG9yIHx8IDI7XG4gIHRoaXMuaml0dGVyID0gb3B0cy5qaXR0ZXIgPiAwICYmIG9wdHMuaml0dGVyIDw9IDEgPyBvcHRzLmppdHRlciA6IDA7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgYmFja29mZiBkdXJhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24oKXtcbiAgdmFyIG1zID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspO1xuICBpZiAodGhpcy5qaXR0ZXIpIHtcbiAgICB2YXIgcmFuZCA9ICBNYXRoLnJhbmRvbSgpO1xuICAgIHZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTtcbiAgICBtcyA9IChNYXRoLmZsb29yKHJhbmQgKiAxMCkgJiAxKSA9PSAwICA/IG1zIC0gZGV2aWF0aW9uIDogbXMgKyBkZXZpYXRpb247XG4gIH1cbiAgcmV0dXJuIE1hdGgubWluKG1zLCB0aGlzLm1heCkgfCAwO1xufTtcblxuLyoqXG4gKiBSZXNldCB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpe1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtaW5pbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbihtaW4pe1xuICB0aGlzLm1zID0gbWluO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1heGltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1heCA9IGZ1bmN0aW9uKG1heCl7XG4gIHRoaXMubWF4ID0gbWF4O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGppdHRlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0Sml0dGVyID0gZnVuY3Rpb24oaml0dGVyKXtcbiAgdGhpcy5qaXR0ZXIgPSBqaXR0ZXI7XG59O1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvYmFja28yL2luZGV4LmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMubnVtYmVyID0gLTE7XHJcbiAgICB9XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wdWJsaWMvanMvcGxheWVyLmpzIiwiaW1wb3J0IENlbGwgZnJvbSAnLi9jZWxsJ1xyXG5pbXBvcnQge1Bhd24sIFJvb2ssIEtuaWdodCwgQmlzaG9wLCBRdWVlbiwgS2luZ30gZnJvbSAnLi9waWVjZSdcclxuaW1wb3J0IHtXaGl0ZVRpbGUsIEJsYWNrVGlsZX0gZnJvbSAnLi90aWxlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWUge1xyXG4gICAgY29uc3RydWN0b3IocnVsZXMsIHBsYXllcjEsIHBsYXllcjIpIHtcclxuICAgICAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XHJcbiAgICAgICAgLy8gc3RvcmVzIGFsbCBtb3ZlcyBvZiB0aGUgZ2FtZVxyXG4gICAgICAgIHRoaXMuZ2FtZUxvZyA9IFtdO1xyXG4gICAgICAgIC8vIHN0b3JlcyBtb3ZlcyBvZiBwbGF5ZXJzIHVudGlsIGV2ZXJ5IHBsYXllciBoYXMgc3VibWl0dGVkXHJcbiAgICAgICAgdGhpcy5jdXJyZW50TW92ZUNhY2hlID0gW107XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIxID0gcGxheWVyMTtcclxuICAgICAgICB0aGlzLnBsYXllcjEubnVtYmVyID0gMTtcclxuICAgICAgICB0aGlzLnBsYXllcjIgPSBwbGF5ZXIyO1xyXG4gICAgICAgIHRoaXMucGxheWVyMi5udW1iZXIgPSAyO1xyXG4gICAgICAgIHRoaXMucGxheWVyQ291bnQgPSAyO1xyXG5cclxuICAgICAgICB0aGlzLmJvYXJkID0gdGhpcy5nZW5lcmF0ZUNoZWNrZWRCb2FyZCg4LCA4KTtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm9hcmQubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmJvYXJkWzBdLmxlbmd0aDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCA4OyB4KyspIHtcclxuICAgICAgICAgICAgdGhpcy5ib2FyZFsxXVt4XS5waWVjZSA9IG5ldyBQYXduKHRoaXMucGxheWVyMik7XHJcbiAgICAgICAgICAgIHRoaXMuYm9hcmRbNl1beF0ucGllY2UgPSBuZXcgUGF3bih0aGlzLnBsYXllcjEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJvYXJkWzBdWzBdLnBpZWNlID0gbmV3IFJvb2sodGhpcy5wbGF5ZXIyKTtcclxuICAgICAgICB0aGlzLmJvYXJkWzBdWzddLnBpZWNlID0gbmV3IFJvb2sodGhpcy5wbGF5ZXIyKTtcclxuICAgICAgICB0aGlzLmJvYXJkWzddWzBdLnBpZWNlID0gbmV3IFJvb2sodGhpcy5wbGF5ZXIxKTtcclxuICAgICAgICB0aGlzLmJvYXJkWzddWzddLnBpZWNlID0gbmV3IFJvb2sodGhpcy5wbGF5ZXIxKTtcclxuICAgICAgICB0aGlzLmJvYXJkWzBdWzFdLnBpZWNlID0gbmV3IEtuaWdodCh0aGlzLnBsYXllcjIpO1xyXG4gICAgICAgIHRoaXMuYm9hcmRbMF1bNl0ucGllY2UgPSBuZXcgS25pZ2h0KHRoaXMucGxheWVyMik7XHJcbiAgICAgICAgdGhpcy5ib2FyZFs3XVsxXS5waWVjZSA9IG5ldyBLbmlnaHQodGhpcy5wbGF5ZXIxKTtcclxuICAgICAgICB0aGlzLmJvYXJkWzddWzZdLnBpZWNlID0gbmV3IEtuaWdodCh0aGlzLnBsYXllcjEpO1xyXG4gICAgICAgIHRoaXMuYm9hcmRbMF1bMl0ucGllY2UgPSBuZXcgQmlzaG9wKHRoaXMucGxheWVyMik7XHJcbiAgICAgICAgdGhpcy5ib2FyZFswXVs1XS5waWVjZSA9IG5ldyBCaXNob3AodGhpcy5wbGF5ZXIyKTtcclxuICAgICAgICB0aGlzLmJvYXJkWzddWzJdLnBpZWNlID0gbmV3IEJpc2hvcCh0aGlzLnBsYXllcjEpO1xyXG4gICAgICAgIHRoaXMuYm9hcmRbN11bNV0ucGllY2UgPSBuZXcgQmlzaG9wKHRoaXMucGxheWVyMSk7XHJcbiAgICAgICAgdGhpcy5ib2FyZFswXVs0XS5waWVjZSA9IG5ldyBRdWVlbih0aGlzLnBsYXllcjIpO1xyXG4gICAgICAgIHRoaXMuYm9hcmRbN11bNF0ucGllY2UgPSBuZXcgUXVlZW4odGhpcy5wbGF5ZXIxKTtcclxuICAgICAgICB0aGlzLmJvYXJkWzBdWzNdLnBpZWNlID0gbmV3IEtpbmcodGhpcy5wbGF5ZXIyKTtcclxuICAgICAgICB0aGlzLmJvYXJkWzddWzNdLnBpZWNlID0gbmV3IEtpbmcodGhpcy5wbGF5ZXIxKTtcclxuXHJcbiAgICAgICAgLy8gc2F2ZSBjb29yZHMgb24gY2VsbCBmb3IgZWFzaWVyIGxvb2t1cFxyXG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5ib2FyZC5sZW5ndGg7IHkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMuYm9hcmRbeV0ubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBjZWxsID0gdGhpcy5ib2FyZFt5XVt4XTtcclxuICAgICAgICAgICAgICAgIGNlbGwueCA9IHg7XHJcbiAgICAgICAgICAgICAgICBjZWxsLnkgPSB5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGdlbmVyYXRlcyBhIGxvZ0VudHJ5IGZvciBhIG1vdmVcclxuICAgIC8vIHRoaXMgbG9nRW50cnkgY2FuIHRoZW4gYmUgZXhlY3V0ZWQgYnkgYWxsIHBsYXllcnNcclxuICAgIHByZXBhcmVNb3ZlKHNvdXJjZUNlbGwsIHRhcmdldENlbGwpIHtcclxuICAgICAgICBpZiAoIXNvdXJjZUNlbGwucGllY2UpIHRocm93ICdOb1BpZWNlVG9Nb3ZlJztcclxuXHJcbiAgICAgICAgbGV0IGxvZ0VudHJ5ID0ge1xyXG4gICAgICAgICAgICBhY3Rpb246ICdtb3ZlJyxcclxuICAgICAgICAgICAgcGxheWVyTnVtYmVyOiBzb3VyY2VDZWxsLnBpZWNlLm93bmVyLm51bWJlcixcclxuICAgICAgICAgICAgbW92ZWRQaWVjZUNsYXNzOiBzb3VyY2VDZWxsLnBpZWNlLmNsYXNzLFxyXG4gICAgICAgICAgICBzb3VyY2U6IHt4OiBzb3VyY2VDZWxsLngsIHk6IHNvdXJjZUNlbGwueX0sXHJcbiAgICAgICAgICAgIHRhcmdldDoge3g6IHRhcmdldENlbGwueCwgeTogdGFyZ2V0Q2VsbC55fSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAodGFyZ2V0Q2VsbC5waWVjZSlcclxuICAgICAgICAgICAgbG9nRW50cnkua2lsbGVkUGllY2VDbGFzcyA9IHRhcmdldENlbGwucGllY2UuY2xhc3M7XHJcblxyXG4gICAgICAgIHJldHVybiBsb2dFbnRyeTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjaGVja3MgaWYgYSBtb3ZlIGlzIHZhbGlkXHJcbiAgICBjaGVja01vdmUobG9nRW50cnkpIHtcclxuICAgICAgICAvLyBUT0RPIGNoZWNrIGlmIGhlIGFscmVhZHkgc3VibWl0dGVkXHJcbiAgICAgICAgbGV0IHNvdXJjZUNlbGwgPSB0aGlzLmdldENlbGwobG9nRW50cnkuc291cmNlKTtcclxuICAgICAgICBsZXQgdGFyZ2V0Q2VsbCA9IHRoaXMuZ2V0Q2VsbChsb2dFbnRyeS50YXJnZXQpO1xyXG4gICAgICAgIGlmICghc291cmNlQ2VsbC5waWVjZSkgdGhyb3cgJ05vUGllY2VUb01vdmUnO1xyXG4gICAgICAgIGlmIChzb3VyY2VDZWxsLnBpZWNlLmNsYXNzICE9PSBsb2dFbnRyeS5tb3ZlZFBpZWNlQ2xhc3MpIHRocm93ICdPdXRPZlN5bmNFcnJvcjogd3Jvbmcgc291cmNlIHBpZWNlIGNsYXNzJztcclxuICAgICAgICBpZiAobG9nRW50cnkua2lsbGVkUGllY2VDbGFzcyAmJlxyXG4gICAgICAgICAgICBsb2dFbnRyeS5raWxsZWRQaWVjZUNsYXNzICE9PSB0YXJnZXRDZWxsLnBpZWNlLmNsYXNzKSB0aHJvdyAnT3V0T2ZTeW5jRXJyb3I6IHdyb25nIGtpbGxlZCBwaWVjZSBjbGFzcyc7XHJcbiAgICB9XHJcblxyXG4gICAgZXhlY3V0ZShsb2dFbnRyeSkge1xyXG4gICAgICAgIGlmIChsb2dFbnRyeS5hY3Rpb24gPT09ICdtb3ZlJykge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrTW92ZShsb2dFbnRyeSk7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE1vdmVDYWNoZS5wdXNoKGxvZ0VudHJ5KTtcclxuXHJcbiAgICAgICAgICAgIC8vIHdhaXQgZm9yIG90aGVyIHBsYXllcnNcclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudE1vdmVDYWNoZS5sZW5ndGggPCB0aGlzLnBsYXllckNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ25vdGlmaWNhdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BsYXllck1hZGVNb3ZlJyxcclxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJOdW1iZXI6IGxvZ0VudHJ5LnBsYXllck51bWJlclxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCBzeW1Mb2dFbnRyeSA9IHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ3N5bSBtb3ZlJyxcclxuICAgICAgICAgICAgICAgIG1vdmVzOiB0aGlzLmN1cnJlbnRNb3ZlQ2FjaGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50TW92ZUNhY2hlID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZShzeW1Mb2dFbnRyeSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHN5bUxvZ0VudHJ5KTtcclxuICAgICAgICAgICAgcmV0dXJuIHN5bUxvZ0VudHJ5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobG9nRW50cnkuYWN0aW9uID09PSAnc3ltIG1vdmUnKSB7XHJcbiAgICAgICAgICAgIGxldCBwaWVjZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIC8vIHBpY2sgdXAgcGllY2VzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9nRW50cnkubW92ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBzb3VyY2VDZWxsID0gdGhpcy5nZXRDZWxsKGxvZ0VudHJ5Lm1vdmVzW2ldLnNvdXJjZSk7XHJcbiAgICAgICAgICAgICAgICBwaWVjZXNbaV0gPSBzb3VyY2VDZWxsLnBpZWNlO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHNvdXJjZUNlbGwucGllY2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHB1dCBwaWVjZXMgZG93blxyXG4gICAgICAgICAgICAvL1RPRE8gZGV0ZWN0IGNvbGxpc2lvbnNcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsb2dFbnRyeS5tb3Zlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldENlbGwgPSB0aGlzLmdldENlbGwobG9nRW50cnkubW92ZXNbal0udGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIHRhcmdldENlbGwucGllY2UgPSBwaWVjZXNbal07XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRDZWxsLnBpZWNlLmhhc01vdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5nYW1lTG9nLnB1c2gobG9nRW50cnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRQb3NzaWJsZU1vdmVzKGNlbGwpIHtcclxuICAgICAgICByZXR1cm4gY2VsbC5waWVjZS5nZXRQb3NzaWJsZU1vdmVzKHRoaXMsIGNlbGwueCwgY2VsbC55KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDZWxsKHgsIHkpIHtcclxuICAgICAgICAvLyBwYXNzIG9ubHkgdGhlIHggcGFyYW0gdG8gYmUgaGFuZGxlZCBhcyBvYmplY3Q6IHt4OiAxLCB5OiAxfVxyXG4gICAgICAgIGlmICh5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgeSA9IHgueTtcclxuICAgICAgICAgICAgeCA9IHgueDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh5IDwgMCB8fCB5ID49IHRoaXMuYm9hcmQubGVuZ3RoKSB0aHJvdyBcIk91dHNpZGVPZkJvYXJkXCI7XHJcbiAgICAgICAgbGV0IHJvdyA9IHRoaXMuYm9hcmRbeV07XHJcbiAgICAgICAgaWYgKHggPCAwIHx8IHggPj0gcm93Lmxlbmd0aCkgdGhyb3cgXCJPdXRzaWRlT2ZCb2FyZFwiO1xyXG4gICAgICAgIHJldHVybiByb3dbeF07XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCB0ZW1wbGF0ZSA9IHJlcXVpcmUoXCIuLi90ZW1wbGF0ZXMvYm9hcmQuaGJzXCIpO1xyXG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZSh7Z2FtZTogdGhpcywgY29sczogdGhpcy5ib2FyZFswXX0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlQ2hlY2tlZEJvYXJkKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgICBsZXQgYm9hcmQgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XHJcbiAgICAgICAgICAgIGJvYXJkW3ldID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgYm9hcmRbeV1beF0gPSBuZXcgQ2VsbCgoKHggKyB5KSAlIDIgPT09IDAgPyBuZXcgQmxhY2tUaWxlKCkgOiBuZXcgV2hpdGVUaWxlKCkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYm9hcmQ7XHJcbiAgICB9XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wdWJsaWMvanMvZ2FtZS5qcyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENlbGwge1xyXG4gICAgY29uc3RydWN0b3IodGlsZSwgcGllY2UpIHtcclxuICAgICAgICB0aGlzLl90aWxlID0gdGlsZTtcclxuICAgICAgICB0aGlzLnBpZWNlID0gcGllY2U7XHJcbiAgICAgICAgdGhpcy54ID0gLTE7XHJcbiAgICAgICAgdGhpcy55ID0gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRpbGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNsYXNzZXMoKSB7XHJcbiAgICAgICAgbGV0IGNscyA9IHRoaXMudGlsZS5jbGFzc2VzO1xyXG4gICAgICAgIGlmICh0aGlzLnBpZWNlKSBjbHMucHVzaCh0aGlzLnBpZWNlLmNsYXNzKTtcclxuICAgICAgICByZXR1cm4gY2xzO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgdGVtcGxhdGUgPSByZXF1aXJlKFwiLi4vdGVtcGxhdGVzL2NlbGwuaGJzXCIpO1xyXG4gICAgICAgIGxldCBwYXJhbXMgPSB7Y2VsbDogdGhpcywgY2xhc3NlczogdGhpcy5jbGFzc2VzLmpvaW4oJyAnKX07XHJcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlKHBhcmFtcyk7XHJcbiAgICB9XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wdWJsaWMvanMvY2VsbC5qcyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXFNoeWx1eFxcXFxnaXRcXFxcZHNcXFxcbm9kZV9tb2R1bGVzXFxcXGhhbmRsZWJhcnNcXFxccnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlcjtcblxuICByZXR1cm4gXCIgICAgICAgIDxpbWcgc3JjPVxcXCJcIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pbWFnZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaW1hZ2UgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJpbWFnZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIC8+XFxyXFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9Y29udGFpbmVyLmxhbWJkYTtcblxuICByZXR1cm4gXCI8dGQgY2xhc3M9XFxcIlwiXG4gICAgKyBhbGlhczIoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5jbGFzc2VzIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jbGFzc2VzIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJjbGFzc2VzXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgZGF0YS14PVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMygoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jZWxsIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS54IDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBkYXRhLXk9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMzKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNlbGwgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnkgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiPlxcclxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaW1hZ2UgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvdGQ+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3B1YmxpYy90ZW1wbGF0ZXMvY2VsbC5oYnNcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCAqIGFzIGJhc2UgZnJvbSAnLi9oYW5kbGViYXJzL2Jhc2UnO1xuXG4vLyBFYWNoIG9mIHRoZXNlIGF1Z21lbnQgdGhlIEhhbmRsZWJhcnMgb2JqZWN0LiBObyBuZWVkIHRvIHNldHVwIGhlcmUuXG4vLyAoVGhpcyBpcyBkb25lIHRvIGVhc2lseSBzaGFyZSBjb2RlIGJldHdlZW4gY29tbW9uanMgYW5kIGJyb3dzZSBlbnZzKVxuaW1wb3J0IFNhZmVTdHJpbmcgZnJvbSAnLi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9oYW5kbGViYXJzL2V4Y2VwdGlvbic7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL2hhbmRsZWJhcnMvdXRpbHMnO1xuaW1wb3J0ICogYXMgcnVudGltZSBmcm9tICcuL2hhbmRsZWJhcnMvcnVudGltZSc7XG5cbmltcG9ydCBub0NvbmZsaWN0IGZyb20gJy4vaGFuZGxlYmFycy9uby1jb25mbGljdCc7XG5cbi8vIEZvciBjb21wYXRpYmlsaXR5IGFuZCB1c2FnZSBvdXRzaWRlIG9mIG1vZHVsZSBzeXN0ZW1zLCBtYWtlIHRoZSBIYW5kbGViYXJzIG9iamVjdCBhIG5hbWVzcGFjZVxuZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgaGIgPSBuZXcgYmFzZS5IYW5kbGViYXJzRW52aXJvbm1lbnQoKTtcblxuICBVdGlscy5leHRlbmQoaGIsIGJhc2UpO1xuICBoYi5TYWZlU3RyaW5nID0gU2FmZVN0cmluZztcbiAgaGIuRXhjZXB0aW9uID0gRXhjZXB0aW9uO1xuICBoYi5VdGlscyA9IFV0aWxzO1xuICBoYi5lc2NhcGVFeHByZXNzaW9uID0gVXRpbHMuZXNjYXBlRXhwcmVzc2lvbjtcblxuICBoYi5WTSA9IHJ1bnRpbWU7XG4gIGhiLnRlbXBsYXRlID0gZnVuY3Rpb24oc3BlYykge1xuICAgIHJldHVybiBydW50aW1lLnRlbXBsYXRlKHNwZWMsIGhiKTtcbiAgfTtcblxuICByZXR1cm4gaGI7XG59XG5cbmxldCBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxubm9Db25mbGljdChpbnN0KTtcblxuaW5zdFsnZGVmYXVsdCddID0gaW5zdDtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi9saWIvaGFuZGxlYmFycy5ydW50aW1lLmpzIiwiaW1wb3J0IHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJFYWNoIGZyb20gJy4vaGVscGVycy9lYWNoJztcbmltcG9ydCByZWdpc3RlckhlbHBlck1pc3NpbmcgZnJvbSAnLi9oZWxwZXJzL2hlbHBlci1taXNzaW5nJztcbmltcG9ydCByZWdpc3RlcklmIGZyb20gJy4vaGVscGVycy9pZic7XG5pbXBvcnQgcmVnaXN0ZXJMb2cgZnJvbSAnLi9oZWxwZXJzL2xvZyc7XG5pbXBvcnQgcmVnaXN0ZXJMb29rdXAgZnJvbSAnLi9oZWxwZXJzL2xvb2t1cCc7XG5pbXBvcnQgcmVnaXN0ZXJXaXRoIGZyb20gJy4vaGVscGVycy93aXRoJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMoaW5zdGFuY2UpIHtcbiAgcmVnaXN0ZXJCbG9ja0hlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlckVhY2goaW5zdGFuY2UpO1xuICByZWdpc3RlckhlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlcklmKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb2coaW5zdGFuY2UpO1xuICByZWdpc3Rlckxvb2t1cChpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyV2l0aChpbnN0YW5jZSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy5qcyIsImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGNyZWF0ZUZyYW1lLCBpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgbGV0IGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcbiAgICAgICAgb3B0aW9ucyA9IHtkYXRhOiBkYXRhfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZy5qcyIsImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGJsb2NrUGFyYW1zLCBjcmVhdGVGcmFtZSwgaXNBcnJheSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm4sXG4gICAgICAgIGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICByZXQgPSAnJyxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dFBhdGg7XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICBjb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7IGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7IH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4ZWNJdGVyYXRpb24oZmllbGQsIGluZGV4LCBsYXN0KSB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBkYXRhLmtleSA9IGZpZWxkO1xuICAgICAgICBkYXRhLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIGRhdGEuZmlyc3QgPSBpbmRleCA9PT0gMDtcbiAgICAgICAgZGF0YS5sYXN0ID0gISFsYXN0O1xuXG4gICAgICAgIGlmIChjb250ZXh0UGF0aCkge1xuICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGZpZWxkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldCA9IHJldCArIGZuKGNvbnRleHRbZmllbGRdLCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dFtmaWVsZF0sIGZpZWxkXSwgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgICBmb3IgKGxldCBqID0gY29udGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJpb3JLZXk7XG5cbiAgICAgICAgZm9yIChsZXQga2V5IGluIGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoY29udGV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAvLyBXZSdyZSBydW5uaW5nIHRoZSBpdGVyYXRpb25zIG9uZSBzdGVwIG91dCBvZiBzeW5jIHNvIHdlIGNhbiBkZXRlY3RcbiAgICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAgIC8vIGFuIGl0ZXJtZWRpYXRlIGtleXMgYXJyYXkuXG4gICAgICAgICAgICBpZiAocHJpb3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmlvcktleSA9IGtleTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2VhY2guanMiLCJpbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdoZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24oLyogW2FyZ3MsIF1vcHRpb25zICovKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIEEgbWlzc2luZyBmaWVsZCBpbiBhIHt7Zm9vfX0gY29uc3RydWN0LlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdNaXNzaW5nIGhlbHBlcjogXCInICsgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXS5uYW1lICsgJ1wiJyk7XG4gICAgfVxuICB9KTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2hlbHBlci1taXNzaW5nLmpzIiwiaW1wb3J0IHtpc0VtcHR5LCBpc0Z1bmN0aW9ufSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdpZicsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY29uZGl0aW9uYWwpKSB7IGNvbmRpdGlvbmFsID0gY29uZGl0aW9uYWwuY2FsbCh0aGlzKTsgfVxuXG4gICAgLy8gRGVmYXVsdCBiZWhhdmlvciBpcyB0byByZW5kZXIgdGhlIHBvc2l0aXZlIHBhdGggaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBhbmQgbm90IGVtcHR5LlxuICAgIC8vIFRoZSBgaW5jbHVkZVplcm9gIG9wdGlvbiBtYXkgYmUgc2V0IHRvIHRyZWF0IHRoZSBjb25kdGlvbmFsIGFzIHB1cmVseSBub3QgZW1wdHkgYmFzZWQgb24gdGhlXG4gICAgLy8gYmVoYXZpb3Igb2YgaXNFbXB0eS4gRWZmZWN0aXZlbHkgdGhpcyBkZXRlcm1pbmVzIGlmIDAgaXMgaGFuZGxlZCBieSB0aGUgcG9zaXRpdmUgcGF0aCBvciBuZWdhdGl2ZS5cbiAgICBpZiAoKCFvcHRpb25zLmhhc2guaW5jbHVkZVplcm8gJiYgIWNvbmRpdGlvbmFsKSB8fCBpc0VtcHR5KGNvbmRpdGlvbmFsKSkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcigndW5sZXNzJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVyc1snaWYnXS5jYWxsKHRoaXMsIGNvbmRpdGlvbmFsLCB7Zm46IG9wdGlvbnMuaW52ZXJzZSwgaW52ZXJzZTogb3B0aW9ucy5mbiwgaGFzaDogb3B0aW9ucy5oYXNofSk7XG4gIH0pO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9nJywgZnVuY3Rpb24oLyogbWVzc2FnZSwgb3B0aW9ucyAqLykge1xuICAgIGxldCBhcmdzID0gW3VuZGVmaW5lZF0sXG4gICAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuXG4gICAgbGV0IGxldmVsID0gMTtcbiAgICBpZiAob3B0aW9ucy5oYXNoLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5oYXNoLmxldmVsO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YS5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuZGF0YS5sZXZlbDtcbiAgICB9XG4gICAgYXJnc1swXSA9IGxldmVsO1xuXG4gICAgaW5zdGFuY2UubG9nKC4uLiBhcmdzKTtcbiAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9sb2cuanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9va3VwJywgZnVuY3Rpb24ob2JqLCBmaWVsZCkge1xuICAgIHJldHVybiBvYmogJiYgb2JqW2ZpZWxkXTtcbiAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9sb29rdXAuanMiLCJpbXBvcnQge2FwcGVuZENvbnRleHRQYXRoLCBibG9ja1BhcmFtcywgY3JlYXRlRnJhbWUsIGlzRW1wdHksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3dpdGgnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHsgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTsgfVxuXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmICghaXNFbXB0eShjb250ZXh0KSkge1xuICAgICAgbGV0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfVxuICB9KTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL3dpdGguanMiLCJpbXBvcnQgcmVnaXN0ZXJJbmxpbmUgZnJvbSAnLi9kZWNvcmF0b3JzL2lubGluZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKGluc3RhbmNlKSB7XG4gIHJlZ2lzdGVySW5saW5lKGluc3RhbmNlKTtcbn1cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiLCJpbXBvcnQge2V4dGVuZH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckRlY29yYXRvcignaW5saW5lJywgZnVuY3Rpb24oZm4sIHByb3BzLCBjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgICBsZXQgcmV0ID0gZm47XG4gICAgaWYgKCFwcm9wcy5wYXJ0aWFscykge1xuICAgICAgcHJvcHMucGFydGlhbHMgPSB7fTtcbiAgICAgIHJldCA9IGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhcnRpYWxzIHN0YWNrIGZyYW1lIHByaW9yIHRvIGV4ZWMuXG4gICAgICAgIGxldCBvcmlnaW5hbCA9IGNvbnRhaW5lci5wYXJ0aWFscztcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gZXh0ZW5kKHt9LCBvcmlnaW5hbCwgcHJvcHMucGFydGlhbHMpO1xuICAgICAgICBsZXQgcmV0ID0gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IG9yaWdpbmFsO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBwcm9wcy5wYXJ0aWFsc1tvcHRpb25zLmFyZ3NbMF1dID0gb3B0aW9ucy5mbjtcblxuICAgIHJldHVybiByZXQ7XG4gIH0pO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMvaW5saW5lLmpzIiwiaW1wb3J0IHtpbmRleE9mfSBmcm9tICcuL3V0aWxzJztcblxubGV0IGxvZ2dlciA9IHtcbiAgbWV0aG9kTWFwOiBbJ2RlYnVnJywgJ2luZm8nLCAnd2FybicsICdlcnJvciddLFxuICBsZXZlbDogJ2luZm8nLFxuXG4gIC8vIE1hcHMgYSBnaXZlbiBsZXZlbCB2YWx1ZSB0byB0aGUgYG1ldGhvZE1hcGAgaW5kZXhlcyBhYm92ZS5cbiAgbG9va3VwTGV2ZWw6IGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBsZXZlbE1hcCA9IGluZGV4T2YobG9nZ2VyLm1ldGhvZE1hcCwgbGV2ZWwudG9Mb3dlckNhc2UoKSk7XG4gICAgICBpZiAobGV2ZWxNYXAgPj0gMCkge1xuICAgICAgICBsZXZlbCA9IGxldmVsTWFwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV2ZWwgPSBwYXJzZUludChsZXZlbCwgMTApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsZXZlbDtcbiAgfSxcblxuICAvLyBDYW4gYmUgb3ZlcnJpZGRlbiBpbiB0aGUgaG9zdCBlbnZpcm9ubWVudFxuICBsb2c6IGZ1bmN0aW9uKGxldmVsLCAuLi5tZXNzYWdlKSB7XG4gICAgbGV2ZWwgPSBsb2dnZXIubG9va3VwTGV2ZWwobGV2ZWwpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBsb2dnZXIubG9va3VwTGV2ZWwobG9nZ2VyLmxldmVsKSA8PSBsZXZlbCkge1xuICAgICAgbGV0IG1ldGhvZCA9IGxvZ2dlci5tZXRob2RNYXBbbGV2ZWxdO1xuICAgICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHsgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgbWV0aG9kID0gJ2xvZyc7XG4gICAgICB9XG4gICAgICBjb25zb2xlW21ldGhvZF0oLi4ubWVzc2FnZSk7ICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9nZ2VyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyIsIi8vIEJ1aWxkIG91dCBvdXIgYmFzaWMgU2FmZVN0cmluZyB0eXBlXG5mdW5jdGlvbiBTYWZlU3RyaW5nKHN0cmluZykge1xuICB0aGlzLnN0cmluZyA9IHN0cmluZztcbn1cblxuU2FmZVN0cmluZy5wcm90b3R5cGUudG9TdHJpbmcgPSBTYWZlU3RyaW5nLnByb3RvdHlwZS50b0hUTUwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICcnICsgdGhpcy5zdHJpbmc7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTYWZlU3RyaW5nO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIiwiaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vZXhjZXB0aW9uJztcbmltcG9ydCB7IENPTVBJTEVSX1JFVklTSU9OLCBSRVZJU0lPTl9DSEFOR0VTLCBjcmVhdGVGcmFtZSB9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1JldmlzaW9uKGNvbXBpbGVySW5mbykge1xuICBjb25zdCBjb21waWxlclJldmlzaW9uID0gY29tcGlsZXJJbmZvICYmIGNvbXBpbGVySW5mb1swXSB8fCAxLFxuICAgICAgICBjdXJyZW50UmV2aXNpb24gPSBDT01QSUxFUl9SRVZJU0lPTjtcblxuICBpZiAoY29tcGlsZXJSZXZpc2lvbiAhPT0gY3VycmVudFJldmlzaW9uKSB7XG4gICAgaWYgKGNvbXBpbGVyUmV2aXNpb24gPCBjdXJyZW50UmV2aXNpb24pIHtcbiAgICAgIGNvbnN0IHJ1bnRpbWVWZXJzaW9ucyA9IFJFVklTSU9OX0NIQU5HRVNbY3VycmVudFJldmlzaW9uXSxcbiAgICAgICAgICAgIGNvbXBpbGVyVmVyc2lvbnMgPSBSRVZJU0lPTl9DSEFOR0VTW2NvbXBpbGVyUmV2aXNpb25dO1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYW4gb2xkZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArXG4gICAgICAgICAgICAnUGxlYXNlIHVwZGF0ZSB5b3VyIHByZWNvbXBpbGVyIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArIHJ1bnRpbWVWZXJzaW9ucyArICcpIG9yIGRvd25ncmFkZSB5b3VyIHJ1bnRpbWUgdG8gYW4gb2xkZXIgdmVyc2lvbiAoJyArIGNvbXBpbGVyVmVyc2lvbnMgKyAnKS4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVXNlIHRoZSBlbWJlZGRlZCB2ZXJzaW9uIGluZm8gc2luY2UgdGhlIHJ1bnRpbWUgZG9lc24ndCBrbm93IGFib3V0IHRoaXMgcmV2aXNpb24geWV0XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUZW1wbGF0ZSB3YXMgcHJlY29tcGlsZWQgd2l0aCBhIG5ld2VyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgK1xuICAgICAgICAgICAgJ1BsZWFzZSB1cGRhdGUgeW91ciBydW50aW1lIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArIGNvbXBpbGVySW5mb1sxXSArICcpLicpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGUodGVtcGxhdGVTcGVjLCBlbnYpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKCFlbnYpIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdObyBlbnZpcm9ubWVudCBwYXNzZWQgdG8gdGVtcGxhdGUnKTtcbiAgfVxuICBpZiAoIXRlbXBsYXRlU3BlYyB8fCAhdGVtcGxhdGVTcGVjLm1haW4pIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmtub3duIHRlbXBsYXRlIG9iamVjdDogJyArIHR5cGVvZiB0ZW1wbGF0ZVNwZWMpO1xuICB9XG5cbiAgdGVtcGxhdGVTcGVjLm1haW4uZGVjb3JhdG9yID0gdGVtcGxhdGVTcGVjLm1haW5fZDtcblxuICAvLyBOb3RlOiBVc2luZyBlbnYuVk0gcmVmZXJlbmNlcyByYXRoZXIgdGhhbiBsb2NhbCB2YXIgcmVmZXJlbmNlcyB0aHJvdWdob3V0IHRoaXMgc2VjdGlvbiB0byBhbGxvd1xuICAvLyBmb3IgZXh0ZXJuYWwgdXNlcnMgdG8gb3ZlcnJpZGUgdGhlc2UgYXMgcHN1ZWRvLXN1cHBvcnRlZCBBUElzLlxuICBlbnYuVk0uY2hlY2tSZXZpc2lvbih0ZW1wbGF0ZVNwZWMuY29tcGlsZXIpO1xuXG4gIGZ1bmN0aW9uIGludm9rZVBhcnRpYWxXcmFwcGVyKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgICBjb250ZXh0ID0gVXRpbHMuZXh0ZW5kKHt9LCBjb250ZXh0LCBvcHRpb25zLmhhc2gpO1xuICAgICAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIG9wdGlvbnMuaWRzWzBdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJ0aWFsID0gZW52LlZNLnJlc29sdmVQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgb3B0aW9ucyk7XG4gICAgbGV0IHJlc3VsdCA9IGVudi5WTS5pbnZva2VQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgb3B0aW9ucyk7XG5cbiAgICBpZiAocmVzdWx0ID09IG51bGwgJiYgZW52LmNvbXBpbGUpIHtcbiAgICAgIG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXSA9IGVudi5jb21waWxlKHBhcnRpYWwsIHRlbXBsYXRlU3BlYy5jb21waWxlck9wdGlvbnMsIGVudik7XG4gICAgICByZXN1bHQgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV0oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgaWYgKG9wdGlvbnMuaW5kZW50KSB7XG4gICAgICAgIGxldCBsaW5lcyA9IHJlc3VsdC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCFsaW5lc1tpXSAmJiBpICsgMSA9PT0gbCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluZXNbaV0gPSBvcHRpb25zLmluZGVudCArIGxpbmVzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVGhlIHBhcnRpYWwgJyArIG9wdGlvbnMubmFtZSArICcgY291bGQgbm90IGJlIGNvbXBpbGVkIHdoZW4gcnVubmluZyBpbiBydW50aW1lLW9ubHkgbW9kZScpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEp1c3QgYWRkIHdhdGVyXG4gIGxldCBjb250YWluZXIgPSB7XG4gICAgc3RyaWN0OiBmdW5jdGlvbihvYmosIG5hbWUpIHtcbiAgICAgIGlmICghKG5hbWUgaW4gb2JqKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdcIicgKyBuYW1lICsgJ1wiIG5vdCBkZWZpbmVkIGluICcgKyBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialtuYW1lXTtcbiAgICB9LFxuICAgIGxvb2t1cDogZnVuY3Rpb24oZGVwdGhzLCBuYW1lKSB7XG4gICAgICBjb25zdCBsZW4gPSBkZXB0aHMubGVuZ3RoO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoZGVwdGhzW2ldICYmIGRlcHRoc1tpXVtuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGRlcHRoc1tpXVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbGFtYmRhOiBmdW5jdGlvbihjdXJyZW50LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGN1cnJlbnQgPT09ICdmdW5jdGlvbicgPyBjdXJyZW50LmNhbGwoY29udGV4dCkgOiBjdXJyZW50O1xuICAgIH0sXG5cbiAgICBlc2NhcGVFeHByZXNzaW9uOiBVdGlscy5lc2NhcGVFeHByZXNzaW9uLFxuICAgIGludm9rZVBhcnRpYWw6IGludm9rZVBhcnRpYWxXcmFwcGVyLFxuXG4gICAgZm46IGZ1bmN0aW9uKGkpIHtcbiAgICAgIGxldCByZXQgPSB0ZW1wbGF0ZVNwZWNbaV07XG4gICAgICByZXQuZGVjb3JhdG9yID0gdGVtcGxhdGVTcGVjW2kgKyAnX2QnXTtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcblxuICAgIHByb2dyYW1zOiBbXSxcbiAgICBwcm9ncmFtOiBmdW5jdGlvbihpLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgICBsZXQgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldLFxuICAgICAgICAgIGZuID0gdGhpcy5mbihpKTtcbiAgICAgIGlmIChkYXRhIHx8IGRlcHRocyB8fCBibG9ja1BhcmFtcyB8fCBkZWNsYXJlZEJsb2NrUGFyYW1zKSB7XG4gICAgICAgIHByb2dyYW1XcmFwcGVyID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4sIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgICAgfSBlbHNlIGlmICghcHJvZ3JhbVdyYXBwZXIpIHtcbiAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2dyYW1XcmFwcGVyO1xuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbih2YWx1ZSwgZGVwdGgpIHtcbiAgICAgIHdoaWxlICh2YWx1ZSAmJiBkZXB0aC0tKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuX3BhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIG1lcmdlOiBmdW5jdGlvbihwYXJhbSwgY29tbW9uKSB7XG4gICAgICBsZXQgb2JqID0gcGFyYW0gfHwgY29tbW9uO1xuXG4gICAgICBpZiAocGFyYW0gJiYgY29tbW9uICYmIChwYXJhbSAhPT0gY29tbW9uKSkge1xuICAgICAgICBvYmogPSBVdGlscy5leHRlbmQoe30sIGNvbW1vbiwgcGFyYW0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgLy8gQW4gZW1wdHkgb2JqZWN0IHRvIHVzZSBhcyByZXBsYWNlbWVudCBmb3IgbnVsbC1jb250ZXh0c1xuICAgIG51bGxDb250ZXh0OiBPYmplY3Quc2VhbCh7fSksXG5cbiAgICBub29wOiBlbnYuVk0ubm9vcCxcbiAgICBjb21waWxlckluZm86IHRlbXBsYXRlU3BlYy5jb21waWxlclxuICB9O1xuXG4gIGZ1bmN0aW9uIHJldChjb250ZXh0LCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgZGF0YSA9IG9wdGlvbnMuZGF0YTtcblxuICAgIHJldC5fc2V0dXAob3B0aW9ucyk7XG4gICAgaWYgKCFvcHRpb25zLnBhcnRpYWwgJiYgdGVtcGxhdGVTcGVjLnVzZURhdGEpIHtcbiAgICAgIGRhdGEgPSBpbml0RGF0YShjb250ZXh0LCBkYXRhKTtcbiAgICB9XG4gICAgbGV0IGRlcHRocyxcbiAgICAgICAgYmxvY2tQYXJhbXMgPSB0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgPyBbXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocykge1xuICAgICAgaWYgKG9wdGlvbnMuZGVwdGhzKSB7XG4gICAgICAgIGRlcHRocyA9IGNvbnRleHQgIT0gb3B0aW9ucy5kZXB0aHNbMF0gPyBbY29udGV4dF0uY29uY2F0KG9wdGlvbnMuZGVwdGhzKSA6IG9wdGlvbnMuZGVwdGhzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVwdGhzID0gW2NvbnRleHRdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1haW4oY29udGV4dC8qLCBvcHRpb25zKi8pIHtcbiAgICAgIHJldHVybiAnJyArIHRlbXBsYXRlU3BlYy5tYWluKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgfVxuICAgIG1haW4gPSBleGVjdXRlRGVjb3JhdG9ycyh0ZW1wbGF0ZVNwZWMubWFpbiwgbWFpbiwgY29udGFpbmVyLCBvcHRpb25zLmRlcHRocyB8fCBbXSwgZGF0YSwgYmxvY2tQYXJhbXMpO1xuICAgIHJldHVybiBtYWluKGNvbnRleHQsIG9wdGlvbnMpO1xuICB9XG4gIHJldC5pc1RvcCA9IHRydWU7XG5cbiAgcmV0Ll9zZXR1cCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCkge1xuICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5oZWxwZXJzLCBlbnYuaGVscGVycyk7XG5cbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCkge1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5wYXJ0aWFscywgZW52LnBhcnRpYWxzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCB8fCB0ZW1wbGF0ZVNwZWMudXNlRGVjb3JhdG9ycykge1xuICAgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmRlY29yYXRvcnMsIGVudi5kZWNvcmF0b3JzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBvcHRpb25zLmhlbHBlcnM7XG4gICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcHRpb25zLnBhcnRpYWxzO1xuICAgICAgY29udGFpbmVyLmRlY29yYXRvcnMgPSBvcHRpb25zLmRlY29yYXRvcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldC5fY2hpbGQgPSBmdW5jdGlvbihpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyAmJiAhYmxvY2tQYXJhbXMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ211c3QgcGFzcyBibG9jayBwYXJhbXMnKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VEZXB0aHMgJiYgIWRlcHRocykge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignbXVzdCBwYXNzIHBhcmVudCBkZXB0aHMnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCB0ZW1wbGF0ZVNwZWNbaV0sIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICB9O1xuICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICBmdW5jdGlvbiBwcm9nKGNvbnRleHQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBjdXJyZW50RGVwdGhzID0gZGVwdGhzO1xuICAgIGlmIChkZXB0aHMgJiYgY29udGV4dCAhPSBkZXB0aHNbMF0gJiYgIShjb250ZXh0ID09PSBjb250YWluZXIubnVsbENvbnRleHQgJiYgZGVwdGhzWzBdID09PSBudWxsKSkge1xuICAgICAgY3VycmVudERlcHRocyA9IFtjb250ZXh0XS5jb25jYXQoZGVwdGhzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm4oY29udGFpbmVyLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjb250YWluZXIuaGVscGVycywgY29udGFpbmVyLnBhcnRpYWxzLFxuICAgICAgICBvcHRpb25zLmRhdGEgfHwgZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXMgJiYgW29wdGlvbnMuYmxvY2tQYXJhbXNdLmNvbmNhdChibG9ja1BhcmFtcyksXG4gICAgICAgIGN1cnJlbnREZXB0aHMpO1xuICB9XG5cbiAgcHJvZyA9IGV4ZWN1dGVEZWNvcmF0b3JzKGZuLCBwcm9nLCBjb250YWluZXIsIGRlcHRocywgZGF0YSwgYmxvY2tQYXJhbXMpO1xuXG4gIHByb2cucHJvZ3JhbSA9IGk7XG4gIHByb2cuZGVwdGggPSBkZXB0aHMgPyBkZXB0aHMubGVuZ3RoIDogMDtcbiAgcHJvZy5ibG9ja1BhcmFtcyA9IGRlY2xhcmVkQmxvY2tQYXJhbXMgfHwgMDtcbiAgcmV0dXJuIHByb2c7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlUGFydGlhbChwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIGlmICghcGFydGlhbCkge1xuICAgIGlmIChvcHRpb25zLm5hbWUgPT09ICdAcGFydGlhbC1ibG9jaycpIHtcbiAgICAgIHBhcnRpYWwgPSBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFydGlhbCA9IG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIXBhcnRpYWwuY2FsbCAmJiAhb3B0aW9ucy5uYW1lKSB7XG4gICAgLy8gVGhpcyBpcyBhIGR5bmFtaWMgcGFydGlhbCB0aGF0IHJldHVybmVkIGEgc3RyaW5nXG4gICAgb3B0aW9ucy5uYW1lID0gcGFydGlhbDtcbiAgICBwYXJ0aWFsID0gb3B0aW9ucy5wYXJ0aWFsc1twYXJ0aWFsXTtcbiAgfVxuICByZXR1cm4gcGFydGlhbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludm9rZVBhcnRpYWwocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICAvLyBVc2UgdGhlIGN1cnJlbnQgY2xvc3VyZSBjb250ZXh0IHRvIHNhdmUgdGhlIHBhcnRpYWwtYmxvY2sgaWYgdGhpcyBwYXJ0aWFsXG4gIGNvbnN0IGN1cnJlbnRQYXJ0aWFsQmxvY2sgPSBvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ107XG4gIG9wdGlvbnMucGFydGlhbCA9IHRydWU7XG4gIGlmIChvcHRpb25zLmlkcykge1xuICAgIG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCA9IG9wdGlvbnMuaWRzWzBdIHx8IG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aDtcbiAgfVxuXG4gIGxldCBwYXJ0aWFsQmxvY2s7XG4gIGlmIChvcHRpb25zLmZuICYmIG9wdGlvbnMuZm4gIT09IG5vb3ApIHtcbiAgICBvcHRpb25zLmRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgIC8vIFdyYXBwZXIgZnVuY3Rpb24gdG8gZ2V0IGFjY2VzcyB0byBjdXJyZW50UGFydGlhbEJsb2NrIGZyb20gdGhlIGNsb3N1cmVcbiAgICBsZXQgZm4gPSBvcHRpb25zLmZuO1xuICAgIHBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddID0gZnVuY3Rpb24gcGFydGlhbEJsb2NrV3JhcHBlcihjb250ZXh0LCBvcHRpb25zID0ge30pIHtcblxuICAgICAgLy8gUmVzdG9yZSB0aGUgcGFydGlhbC1ibG9jayBmcm9tIHRoZSBjbG9zdXJlIGZvciB0aGUgZXhlY3V0aW9uIG9mIHRoZSBibG9ja1xuICAgICAgLy8gaS5lLiB0aGUgcGFydCBpbnNpZGUgdGhlIGJsb2NrIG9mIHRoZSBwYXJ0aWFsIGNhbGwuXG4gICAgICBvcHRpb25zLmRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBjdXJyZW50UGFydGlhbEJsb2NrO1xuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgaWYgKGZuLnBhcnRpYWxzKSB7XG4gICAgICBvcHRpb25zLnBhcnRpYWxzID0gVXRpbHMuZXh0ZW5kKHt9LCBvcHRpb25zLnBhcnRpYWxzLCBmbi5wYXJ0aWFscyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCAmJiBwYXJ0aWFsQmxvY2spIHtcbiAgICBwYXJ0aWFsID0gcGFydGlhbEJsb2NrO1xuICB9XG5cbiAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBmb3VuZCcpO1xuICB9IGVsc2UgaWYgKHBhcnRpYWwgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIHJldHVybiBwYXJ0aWFsKGNvbnRleHQsIG9wdGlvbnMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyByZXR1cm4gJyc7IH1cblxuZnVuY3Rpb24gaW5pdERhdGEoY29udGV4dCwgZGF0YSkge1xuICBpZiAoIWRhdGEgfHwgISgncm9vdCcgaW4gZGF0YSkpIHtcbiAgICBkYXRhID0gZGF0YSA/IGNyZWF0ZUZyYW1lKGRhdGEpIDoge307XG4gICAgZGF0YS5yb290ID0gY29udGV4dDtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcykge1xuICBpZiAoZm4uZGVjb3JhdG9yKSB7XG4gICAgbGV0IHByb3BzID0ge307XG4gICAgcHJvZyA9IGZuLmRlY29yYXRvcihwcm9nLCBwcm9wcywgY29udGFpbmVyLCBkZXB0aHMgJiYgZGVwdGhzWzBdLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgICBVdGlscy5leHRlbmQocHJvZywgcHJvcHMpO1xuICB9XG4gIHJldHVybiBwcm9nO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3J1bnRpbWUuanMiLCIvKiBnbG9iYWwgd2luZG93ICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGxldCByb290ID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3csXG4gICAgICAkSGFuZGxlYmFycyA9IHJvb3QuSGFuZGxlYmFycztcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgSGFuZGxlYmFycy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHJvb3QuSGFuZGxlYmFycyA9PT0gSGFuZGxlYmFycykge1xuICAgICAgcm9vdC5IYW5kbGViYXJzID0gJEhhbmRsZWJhcnM7XG4gICAgfVxuICAgIHJldHVybiBIYW5kbGViYXJzO1xuICB9O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIiwiY29uc3QgU1RSQUlHSFRfRElSRUNUSU9OUyA9IFtcclxuICAgIHt4OiAxLCB5OiAwfSxcclxuICAgIHt4OiAtMSwgeTogMH0sXHJcbiAgICB7eDogMCwgeTogMX0sXHJcbiAgICB7eDogMCwgeTogLTF9XHJcbl07XHJcbmNvbnN0IERJQUdPTkFMX0RJUkVDVElPTlMgPSBbXHJcbiAgICB7eDogMSwgeTogMX0sXHJcbiAgICB7eDogLTEsIHk6IC0xfSxcclxuICAgIHt4OiAtMSwgeTogMX0sXHJcbiAgICB7eDogMSwgeTogLTF9XHJcbl07XHJcbmNvbnN0IEFMTF9ESVJFQ1RJT05TID0gW1xyXG4gICAge3g6IDEsIHk6IDB9LFxyXG4gICAge3g6IC0xLCB5OiAwfSxcclxuICAgIHt4OiAwLCB5OiAxfSxcclxuICAgIHt4OiAwLCB5OiAtMX0sXHJcbiAgICB7eDogMSwgeTogMX0sXHJcbiAgICB7eDogLTEsIHk6IC0xfSxcclxuICAgIHt4OiAtMSwgeTogMX0sXHJcbiAgICB7eDogMSwgeTogLTF9XHJcbl07XHJcbmNvbnN0IE1PVklOR19CRUhBVklPUlMgPSB7XHJcbiAgICAvLyBkZWZhdWx0OiBzdG9wcyBhdCBmaXJzdCBwaWVjZSB3aXRoIG9wdGlvbiB0byBraWxsIGFuIGVuZW15IHBpZWNlXHJcbiAgICBISVRUSU5HOiAwLFxyXG4gICAgLy8gc3RvcHBpbmcgaXMgbGlrZSBoaXR0aW5nIGJ1dCB3aXRob3V0IHRoZSBvcHRpb24gdG8ga2lsbCAocGF3bilcclxuICAgIFNUT1BQSU5HOiAxXHJcbn07XHJcblxyXG5jbGFzcyBQaWVjZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihvd25lciwgbmFtZSkge1xyXG4gICAgICAgIHRoaXMub3duZXIgPSBvd25lcjtcclxuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmhhc01vdmVkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG5hbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UG9zc2libGVNb3ZlcyhnYW1lLCB4LCB5KSB7XHJcbiAgICAgICAgdGhyb3cgXCJOb3RJbXBsZW1lbnRlZFwiXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNsYXNzKCkge1xyXG4gICAgICAgIHRocm93IFwiTm90SW1wbGVtZW50ZWRcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIGRpcmVjdGlvbiwgbWF4RGlzdGFuY2UgPSBmYWxzZSwgYmVoYXZpb3VyID0gTU9WSU5HX0JFSEFWSU9SUy5ISVRUSU5HKSB7XHJcbiAgICAgICAgbGV0IHBvcyA9IHt4OiB4LCB5OiB5fTtcclxuICAgICAgICBsZXQgbW92ZXMgPSBbXTtcclxuICAgICAgICBsZXQgZGlzdGFuY2UgPSAwO1xyXG5cclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICBkaXN0YW5jZSsrO1xyXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPiBtYXhEaXN0YW5jZSkgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBwb3MueCArPSBkaXJlY3Rpb24ueDtcclxuICAgICAgICAgICAgcG9zLnkgKz0gZGlyZWN0aW9uLnk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IGdhbWUuZ2V0Q2VsbChwb3MueCwgcG9zLnkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjZWxsLnRpbGUucGFzc2FibGUpIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjZWxsLnBpZWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlaGF2aW91ciAhPT0gTU9WSU5HX0JFSEFWSU9SUy5TVE9QUElORyAmJiBjZWxsLnBpZWNlLm93bmVyICE9PSB0aGlzLm93bmVyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3Zlcy5wdXNoKHt4OiBwb3MueCwgeTogcG9zLnl9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBtb3Zlcy5wdXNoKHt4OiBwb3MueCwgeTogcG9zLnl9KTtcclxuICAgICAgICAgICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICAgICAgICAgIC8vIGJyZWFrIGlmIE91dHNpZGVPZkJvYXJkLiBlbHNlIGl0cyBhbiB1bmV4cGVjdGVkIGVycm9yXHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyICE9PSBcIk91dHNpZGVPZkJvYXJkXCIpIHRocm93IGVycjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtb3ZlcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRPd25lckRpcmVjdGlvbigpIHtcclxuICAgICAgICBzd2l0Y2godGhpcy5vd25lci5udW1iZXIpIHtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt4OiAwLCB5OiAtMX07XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB7eDogMCwgeTogMX07XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyAnVW5rbm93bk93bmVyRGlyZWN0aW9uJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEJsYWNrV2hpdGVDaGVzc1BpZWNlIGV4dGVuZHMgUGllY2Uge1xyXG4gICAgY29uc3RydWN0b3Iob3duZXIsIG5hbWUsIGZpbGVuYW1lKSB7XHJcbiAgICAgICAgc3VwZXIob3duZXIsIG5hbWUpO1xyXG4gICAgICAgIHRoaXMuZmlsZW5hbWUgPSBmaWxlbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2xhc3MoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3duZXIubnVtYmVyID09PSAxKSByZXR1cm4gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIGlmICh0aGlzLm93bmVyLm51bWJlciA9PT0gMikgcmV0dXJuIFwiYmxhY2tcIjtcclxuICAgICAgICB0aHJvdyBcIkludmFsaWRPd25lck51bWJlclwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUGF3biBleHRlbmRzIEJsYWNrV2hpdGVDaGVzc1BpZWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKG93bmVyKSB7XHJcbiAgICAgICAgc3VwZXIob3duZXIsIFwiUGF3blwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2xhc3MoKSB7XHJcbiAgICAgICAgcmV0dXJuICdwaWVjZS1wYXduLScgKyBzdXBlci5jbGFzcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRQb3NzaWJsZU1vdmVzKGdhbWUsIHgsIHkpIHtcclxuICAgICAgICBsZXQgbW92ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgLy8gYSBwYXduIGNhbiBtb3ZlIHR3byBzcGFjZXMgaWYgaXQgaGFzbid0IG1vdmVkIHlldFxyXG4gICAgICAgIGxldCBkaXN0YW5jZSA9ICh0aGlzLmhhc01vdmVkID8gMSA6IDIpO1xyXG5cclxuICAgICAgICAvLyBtb3ZlIGluIGZyb250XHJcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobW92ZXMsIHRoaXMuZ2V0TW92ZXNJbkRpcmVjdGlvbihnYW1lLCB4LCB5LCB0aGlzLmdldE93bmVyRGlyZWN0aW9uKCksIGRpc3RhbmNlLCBNT1ZJTkdfQkVIQVZJT1JTLlNUT1BQSU5HKSk7XHJcblxyXG4gICAgICAgIC8vIGRpYWdvbmFsIG1vdmVzIC0gb25seSBhdmFpbGFibGUgaWYgdGhlIG1vdmUgY2FuIGtpbGwgYW4gb3Bwb3NpbmcgcGllY2VcclxuICAgICAgICBsZXQgaGl0dGluZ01vdmVzID0gW1xyXG4gICAgICAgICAgICB7eDogMSwgeTogdGhpcy5nZXRPd25lckRpcmVjdGlvbigpLnl9LFxyXG4gICAgICAgICAgICB7eDogLTEsIHk6IHRoaXMuZ2V0T3duZXJEaXJlY3Rpb24oKS55fSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgaGl0dGluZ01vdmVzLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgICAgICAgIGxldCBwb3NzaWJsZUhpdHRpbmdNb3ZlID0gdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIGhpdHRpbmdNb3Zlc1tkXSwgMSk7XHJcbiAgICAgICAgICAgIGlmIChwb3NzaWJsZUhpdHRpbmdNb3ZlLmxlbmd0aCA9PT0gMCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGxldCBwb3NzaWJsZU1vdmUgPSBwb3NzaWJsZUhpdHRpbmdNb3ZlWzBdO1xyXG4gICAgICAgICAgICAvLyBjaGVjayBmb3Igb3Bwb3NpbmcgcGllY2VcclxuICAgICAgICAgICAgaWYgKGdhbWUuZ2V0Q2VsbChwb3NzaWJsZU1vdmUpLnBpZWNlKSBtb3Zlcy5wdXNoKHBvc3NpYmxlTW92ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUT0RPOiBlbiBwYXNzZW50IC0gb2RlciBvIGVpZmFjaCBuaWQuLlxyXG5cclxuICAgICAgICByZXR1cm4gbW92ZXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSb29rIGV4dGVuZHMgQmxhY2tXaGl0ZUNoZXNzUGllY2Uge1xyXG4gICAgY29uc3RydWN0b3Iob3duZXIpIHtcclxuICAgICAgICBzdXBlcihvd25lciwgXCJSb29rXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbGFzcygpIHtcclxuICAgICAgICByZXR1cm4gJ3BpZWNlLXJvb2stJyArIHN1cGVyLmNsYXNzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBvc3NpYmxlTW92ZXMoZ2FtZSwgeCwgeSkge1xyXG4gICAgICAgIGxldCBtb3ZlcyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBkID0gMDsgZCA8IFNUUkFJR0hUX0RJUkVDVElPTlMubGVuZ3RoOyBkKyspIHtcclxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobW92ZXMsIHRoaXMuZ2V0TW92ZXNJbkRpcmVjdGlvbihnYW1lLCB4LCB5LCBTVFJBSUdIVF9ESVJFQ1RJT05TW2RdKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbW92ZXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBLbmlnaHQgZXh0ZW5kcyBCbGFja1doaXRlQ2hlc3NQaWVjZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihvd25lcikge1xyXG4gICAgICAgIHN1cGVyKG93bmVyLCBcIktuaWdodFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2xhc3MoKSB7XHJcbiAgICAgICAgcmV0dXJuICdwaWVjZS1rbmlnaHQtJyArIHN1cGVyLmNsYXNzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBvc3NpYmxlTW92ZXMoZ2FtZSwgeCwgeSkge1xyXG4gICAgICAgIGxldCByZWxhdGl2ZU1vdmVzID0gW1xyXG4gICAgICAgICAgICB7eDogMiwgeTogMX0sXHJcbiAgICAgICAgICAgIHt4OiAyLCB5OiAtMX0sXHJcbiAgICAgICAgICAgIHt4OiAtMiwgeTogMX0sXHJcbiAgICAgICAgICAgIHt4OiAtMiwgeTogLTF9LFxyXG4gICAgICAgICAgICB7eDogMSwgeTogMn0sXHJcbiAgICAgICAgICAgIHt4OiAtMSwgeTogMn0sXHJcbiAgICAgICAgICAgIHt4OiAxLCB5OiAtMn0sXHJcbiAgICAgICAgICAgIHt4OiAtMSwgeTogLTJ9LFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgbGV0IG1vdmVzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgcmVsYXRpdmVNb3Zlcy5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShtb3ZlcywgdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIHJlbGF0aXZlTW92ZXNbZF0sIDEpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtb3ZlcztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJpc2hvcCBleHRlbmRzIEJsYWNrV2hpdGVDaGVzc1BpZWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKG93bmVyKSB7XHJcbiAgICAgICAgc3VwZXIob3duZXIsIFwiQmlzaG9wXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbGFzcygpIHtcclxuICAgICAgICByZXR1cm4gJ3BpZWNlLWJpc2hvcC0nICsgc3VwZXIuY2xhc3M7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UG9zc2libGVNb3ZlcyhnYW1lLCB4LCB5KSB7XHJcbiAgICAgICAgbGV0IG1vdmVzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgRElBR09OQUxfRElSRUNUSU9OUy5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShtb3ZlcywgdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIERJQUdPTkFMX0RJUkVDVElPTlNbZF0pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtb3ZlcztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFF1ZWVuIGV4dGVuZHMgQmxhY2tXaGl0ZUNoZXNzUGllY2Uge1xyXG4gICAgY29uc3RydWN0b3Iob3duZXIpIHtcclxuICAgICAgICBzdXBlcihvd25lciwgXCJRdWVlblwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2xhc3MoKSB7XHJcbiAgICAgICAgcmV0dXJuICdwaWVjZS1xdWVlbi0nICsgc3VwZXIuY2xhc3M7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UG9zc2libGVNb3ZlcyhnYW1lLCB4LCB5KSB7XHJcbiAgICAgICAgbGV0IG1vdmVzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgQUxMX0RJUkVDVElPTlMubGVuZ3RoOyBkKyspIHtcclxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobW92ZXMsIHRoaXMuZ2V0TW92ZXNJbkRpcmVjdGlvbihnYW1lLCB4LCB5LCBBTExfRElSRUNUSU9OU1tkXSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1vdmVzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgS2luZyBleHRlbmRzIEJsYWNrV2hpdGVDaGVzc1BpZWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKG93bmVyKSB7XHJcbiAgICAgICAgc3VwZXIob3duZXIsIFwiS2luZ1wiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2xhc3MoKSB7XHJcbiAgICAgICAgcmV0dXJuICdwaWVjZS1raW5nLScgKyBzdXBlci5jbGFzcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRQb3NzaWJsZU1vdmVzKGdhbWUsIHgsIHkpIHtcclxuICAgICAgICBsZXQgbW92ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgZCA9IDA7IGQgPCBBTExfRElSRUNUSU9OUy5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShtb3ZlcywgdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIEFMTF9ESVJFQ1RJT05TW2RdLCAxKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbW92ZXM7XHJcbiAgICB9XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wdWJsaWMvanMvcGllY2UuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUaWxlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMucGFzc2FibGUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbGFzc2VzKCkge1xyXG4gICAgICAgIHRocm93IFwiTm90SW1wbGVtZW50ZWRcIjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJsYWNrVGlsZSBleHRlbmRzIFRpbGUge1xyXG4gICAgZ2V0IGNsYXNzZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcInRpbGUtYmxhY2tcIl07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBXaGl0ZVRpbGUgZXh0ZW5kcyBUaWxlIHtcclxuICAgIGdldCBjbGFzc2VzKCkge1xyXG4gICAgICAgIHJldHVybiBbXCJ0aWxlLXdoaXRlXCJdO1xyXG4gICAgfVxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcHVibGljL2pzL3RpbGUuanMiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxTaHlsdXhcXFxcZ2l0XFxcXGRzXFxcXG5vZGVfbW9kdWxlc1xcXFxoYW5kbGViYXJzXFxcXHJ1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiICAgICAgICA8dHI+XFxyXFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSxkZXB0aDAse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgyLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgIDwvdHI+XFxyXFxuXCI7XG59LFwiMlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgXCJcbiAgICArICgoc3RhY2sxID0gX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxTaHlsdXhcXFxcZ2l0XFxcXGRzXFxcXHB1YmxpY1xcXFxqc1xcXFxoZWxwZXJzXFxcXHJlbmRlcmNlbGwuanNcIikpLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSxkZXB0aDAse1wibmFtZVwiOlwicmVuZGVyY2VsbFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgzLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCJcXHJcXG5cIjtcbn0sXCIzXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCJcIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImJvYXJkXFxcIj5cXHJcXG4gICAgPHRhYmxlPlxcclxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZ2FtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuYm9hcmQgOiBzdGFjazEpLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgIDwvdGFibGU+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcIm92ZXJsYXlcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibWVzc2FnZVxcXCI+XFxyXFxuICAgICAgICAgICAgPHAgY2xhc3M9XFxcInRpdGxlXFxcIj5TbyBhbmQgc28gbWVzc2FnZTwvcD5cXHJcXG4gICAgICAgICAgICA8cCBjbGFzcz1cXFwiY29udGVudFxcXCI+UGxlYXNlIHJlbG9hZCB0aGUgYXBwPC9wPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9wdWJsaWMvdGVtcGxhdGVzL2JvYXJkLmhic1xuLy8gbW9kdWxlIGlkID0gNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjZWxsKSB7XHJcbiAgICByZXR1cm4gY2VsbC5yZW5kZXIoKTtcclxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wdWJsaWMvanMvaGVscGVycy9yZW5kZXJjZWxsLmpzIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3B1YmxpYy9jc3MvbWFpbi5zY3NzXG4vLyBtb2R1bGUgaWQgPSA3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9