/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/polyfill/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@babel/polyfill/lib/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./noConflict */ "./node_modules/@babel/polyfill/lib/noConflict.js");

var _global = _interopRequireDefault(__webpack_require__(/*! core-js/library/fn/global */ "./node_modules/core-js/library/fn/global.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

if (_global["default"]._babelPolyfill && typeof console !== "undefined" && console.warn) {
  console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");
}

_global["default"]._babelPolyfill = true;

/***/ }),

/***/ "./node_modules/@babel/polyfill/lib/noConflict.js":
/*!********************************************************!*\
  !*** ./node_modules/@babel/polyfill/lib/noConflict.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! core-js/es6 */ "./node_modules/core-js/es6/index.js");

__webpack_require__(/*! core-js/fn/array/includes */ "./node_modules/core-js/fn/array/includes.js");

__webpack_require__(/*! core-js/fn/array/flat-map */ "./node_modules/core-js/fn/array/flat-map.js");

__webpack_require__(/*! core-js/fn/string/pad-start */ "./node_modules/core-js/fn/string/pad-start.js");

__webpack_require__(/*! core-js/fn/string/pad-end */ "./node_modules/core-js/fn/string/pad-end.js");

__webpack_require__(/*! core-js/fn/string/trim-start */ "./node_modules/core-js/fn/string/trim-start.js");

__webpack_require__(/*! core-js/fn/string/trim-end */ "./node_modules/core-js/fn/string/trim-end.js");

__webpack_require__(/*! core-js/fn/symbol/async-iterator */ "./node_modules/core-js/fn/symbol/async-iterator.js");

__webpack_require__(/*! core-js/fn/object/get-own-property-descriptors */ "./node_modules/core-js/fn/object/get-own-property-descriptors.js");

__webpack_require__(/*! core-js/fn/object/values */ "./node_modules/core-js/fn/object/values.js");

__webpack_require__(/*! core-js/fn/object/entries */ "./node_modules/core-js/fn/object/entries.js");

__webpack_require__(/*! core-js/fn/promise/finally */ "./node_modules/core-js/fn/promise/finally.js");

__webpack_require__(/*! core-js/web */ "./node_modules/core-js/web/index.js");

__webpack_require__(/*! regenerator-runtime/runtime */ "./node_modules/@babel/polyfill/node_modules/regenerator-runtime/runtime.js");

/***/ }),

/***/ "./node_modules/@babel/polyfill/node_modules/regenerator-runtime/runtime.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@babel/polyfill/node_modules/regenerator-runtime/runtime.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;

      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
( false ? undefined : _typeof(module)) === "object" ? module.exports : {});

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/after/index.js":
/*!*************************************!*\
  !*** ./node_modules/after/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = after;

function after(count, callback, err_cb) {
  var bail = false;
  err_cb = err_cb || noop;
  proxy.count = count;
  return count === 0 ? callback() : proxy;

  function proxy(err, result) {
    if (proxy.count <= 0) {
      throw new Error('after called too many times');
    }

    --proxy.count; // after first error, rest are passed to err_cb

    if (err) {
      bail = true;
      callback(err); // future error callbacks will go to error handler

      callback = err_cb;
    } else if (proxy.count === 0 && !bail) {
      callback(null, result);
    }
  }
}

function noop() {}

/***/ }),

/***/ "./node_modules/arraybuffer.slice/index.js":
/*!*************************************************!*\
  !*** ./node_modules/arraybuffer.slice/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */
module.exports = function (arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) {
    return arraybuffer.slice(start, end);
  }

  if (start < 0) {
    start += bytes;
  }

  if (end < 0) {
    end += bytes;
  }

  if (end > bytes) {
    end = bytes;
  }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);

  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }

  return result.buffer;
};

/***/ }),

/***/ "./node_modules/backo2/index.js":
/*!**************************************!*\
  !*** ./node_modules/backo2/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Expose `Backoff`.
 */
module.exports = Backoff;
/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}
/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */


Backoff.prototype.duration = function () {
  var ms = this.ms * Math.pow(this.factor, this.attempts++);

  if (this.jitter) {
    var rand = Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
  }

  return Math.min(ms, this.max) | 0;
};
/**
 * Reset the number of attempts.
 *
 * @api public
 */


Backoff.prototype.reset = function () {
  this.attempts = 0;
};
/**
 * Set the minimum duration
 *
 * @api public
 */


Backoff.prototype.setMin = function (min) {
  this.ms = min;
};
/**
 * Set the maximum duration
 *
 * @api public
 */


Backoff.prototype.setMax = function (max) {
  this.max = max;
};
/**
 * Set the jitter
 *
 * @api public
 */


Backoff.prototype.setJitter = function (jitter) {
  this.jitter = jitter;
};

/***/ }),

/***/ "./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function () {
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; // Use a lookup table to find the index.

  var lookup = new Uint8Array(256);

  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function (arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
        i,
        len = bytes.length,
        base64 = "";

    for (i = 0; i < len; i += 3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
      base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
      base64 += chars[bytes[i + 2] & 63];
    }

    if (len % 3 === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode = function (base64) {
    var bufferLength = base64.length * 0.75,
        len = base64.length,
        i,
        p = 0,
        encoded1,
        encoded2,
        encoded3,
        encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;

      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
        bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i += 4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i + 1)];
      encoded3 = lookup[base64.charCodeAt(i + 2)];
      encoded4 = lookup[base64.charCodeAt(i + 3)];
      bytes[p++] = encoded1 << 2 | encoded2 >> 4;
      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }

    return arraybuffer;
  };
})();

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

  for (var i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),

/***/ "./node_modules/blob/index.js":
/*!************************************!*\
  !*** ./node_modules/blob/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Create a blob builder even when vendor prefixes exist
 */
var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : false;
/**
 * Check if Blob constructor is supported
 */

var blobSupported = function () {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch (e) {
    return false;
  }
}();
/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */


var blobSupportsArrayBufferView = blobSupported && function () {
  try {
    var b = new Blob([new Uint8Array([1, 2])]);
    return b.size === 2;
  } catch (e) {
    return false;
  }
}();
/**
 * Check if BlobBuilder is supported
 */


var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;
/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  return ary.map(function (chunk) {
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer; // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer

      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      return buf;
    }

    return chunk;
  });
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};
  var bb = new BlobBuilder();
  mapArrayBufferViews(ary).forEach(function (part) {
    bb.append(part);
  });
  return options.type ? bb.getBlob(options.type) : bb.getBlob();
}

;

function BlobConstructor(ary, options) {
  return new Blob(mapArrayBufferViews(ary), options || {});
}

;

if (typeof Blob !== 'undefined') {
  BlobBuilderConstructor.prototype = Blob.prototype;
  BlobConstructor.prototype = Blob.prototype;
}

module.exports = function () {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
}();

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */


var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js");

var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js");

var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
/*
 * Export kMaxLength after typed array support is determined.
 */

exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function foo() {
        return 42;
      }
    };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }

    that.length = length;
  }

  return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  } // Common case.


  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }

    return allocUnsafe(this, arg);
  }

  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.

Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;

  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(that, size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }

  return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }

  return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }

  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }

  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }

      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;

  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }

  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  } // must be an even number of digits


  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;

    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    } // legacy write(string, encoding, offset, length) - remove in v0.13

  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);

    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (code < 256) {
        val = code;
      }
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/component-bind/index.js":
/*!**********************************************!*\
  !*** ./node_modules/component-bind/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Slice reference.
 */
var slice = [].slice;
/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function (obj, fn) {
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function () {
    return fn.apply(obj, args.concat(slice.call(arguments)));
  };
};

/***/ }),

/***/ "./node_modules/component-emitter/index.js":
/*!*************************************************!*\
  !*** ./node_modules/component-emitter/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Expose `Emitter`.
 */
if (true) {
  module.exports = Emitter;
}
/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */


function Emitter(obj) {
  if (obj) return mixin(obj);
}

;
/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }

  return obj;
}
/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */


Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
  return this;
};
/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */


Emitter.prototype.once = function (event, fn) {
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};
/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */


Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
  this._callbacks = this._callbacks || {}; // all

  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  } // specific event


  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this; // remove all handlers

  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  } // remove specific handler


  var cb;

  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];

    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }

  return this;
};
/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */


Emitter.prototype.emit = function (event) {
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1),
      callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);

    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};
/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */


Emitter.prototype.listeners = function (event) {
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};
/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */


Emitter.prototype.hasListeners = function (event) {
  return !!this.listeners(event).length;
};

/***/ }),

/***/ "./node_modules/component-inherit/index.js":
/*!*************************************************!*\
  !*** ./node_modules/component-inherit/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (a, b) {
  var fn = function fn() {};

  fn.prototype = b.prototype;
  a.prototype = new fn();
  a.prototype.constructor = a;
};

/***/ }),

/***/ "./node_modules/core-js/es6/index.js":
/*!*******************************************!*\
  !*** ./node_modules/core-js/es6/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/es6.symbol */ "./node_modules/core-js/modules/es6.symbol.js");

__webpack_require__(/*! ../modules/es6.object.create */ "./node_modules/core-js/modules/es6.object.create.js");

__webpack_require__(/*! ../modules/es6.object.define-property */ "./node_modules/core-js/modules/es6.object.define-property.js");

__webpack_require__(/*! ../modules/es6.object.define-properties */ "./node_modules/core-js/modules/es6.object.define-properties.js");

__webpack_require__(/*! ../modules/es6.object.get-own-property-descriptor */ "./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js");

__webpack_require__(/*! ../modules/es6.object.get-prototype-of */ "./node_modules/core-js/modules/es6.object.get-prototype-of.js");

__webpack_require__(/*! ../modules/es6.object.keys */ "./node_modules/core-js/modules/es6.object.keys.js");

__webpack_require__(/*! ../modules/es6.object.get-own-property-names */ "./node_modules/core-js/modules/es6.object.get-own-property-names.js");

__webpack_require__(/*! ../modules/es6.object.freeze */ "./node_modules/core-js/modules/es6.object.freeze.js");

__webpack_require__(/*! ../modules/es6.object.seal */ "./node_modules/core-js/modules/es6.object.seal.js");

__webpack_require__(/*! ../modules/es6.object.prevent-extensions */ "./node_modules/core-js/modules/es6.object.prevent-extensions.js");

__webpack_require__(/*! ../modules/es6.object.is-frozen */ "./node_modules/core-js/modules/es6.object.is-frozen.js");

__webpack_require__(/*! ../modules/es6.object.is-sealed */ "./node_modules/core-js/modules/es6.object.is-sealed.js");

__webpack_require__(/*! ../modules/es6.object.is-extensible */ "./node_modules/core-js/modules/es6.object.is-extensible.js");

__webpack_require__(/*! ../modules/es6.object.assign */ "./node_modules/core-js/modules/es6.object.assign.js");

__webpack_require__(/*! ../modules/es6.object.is */ "./node_modules/core-js/modules/es6.object.is.js");

__webpack_require__(/*! ../modules/es6.object.set-prototype-of */ "./node_modules/core-js/modules/es6.object.set-prototype-of.js");

__webpack_require__(/*! ../modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");

__webpack_require__(/*! ../modules/es6.function.bind */ "./node_modules/core-js/modules/es6.function.bind.js");

__webpack_require__(/*! ../modules/es6.function.name */ "./node_modules/core-js/modules/es6.function.name.js");

__webpack_require__(/*! ../modules/es6.function.has-instance */ "./node_modules/core-js/modules/es6.function.has-instance.js");

__webpack_require__(/*! ../modules/es6.parse-int */ "./node_modules/core-js/modules/es6.parse-int.js");

__webpack_require__(/*! ../modules/es6.parse-float */ "./node_modules/core-js/modules/es6.parse-float.js");

__webpack_require__(/*! ../modules/es6.number.constructor */ "./node_modules/core-js/modules/es6.number.constructor.js");

__webpack_require__(/*! ../modules/es6.number.to-fixed */ "./node_modules/core-js/modules/es6.number.to-fixed.js");

__webpack_require__(/*! ../modules/es6.number.to-precision */ "./node_modules/core-js/modules/es6.number.to-precision.js");

__webpack_require__(/*! ../modules/es6.number.epsilon */ "./node_modules/core-js/modules/es6.number.epsilon.js");

__webpack_require__(/*! ../modules/es6.number.is-finite */ "./node_modules/core-js/modules/es6.number.is-finite.js");

__webpack_require__(/*! ../modules/es6.number.is-integer */ "./node_modules/core-js/modules/es6.number.is-integer.js");

__webpack_require__(/*! ../modules/es6.number.is-nan */ "./node_modules/core-js/modules/es6.number.is-nan.js");

__webpack_require__(/*! ../modules/es6.number.is-safe-integer */ "./node_modules/core-js/modules/es6.number.is-safe-integer.js");

__webpack_require__(/*! ../modules/es6.number.max-safe-integer */ "./node_modules/core-js/modules/es6.number.max-safe-integer.js");

__webpack_require__(/*! ../modules/es6.number.min-safe-integer */ "./node_modules/core-js/modules/es6.number.min-safe-integer.js");

__webpack_require__(/*! ../modules/es6.number.parse-float */ "./node_modules/core-js/modules/es6.number.parse-float.js");

__webpack_require__(/*! ../modules/es6.number.parse-int */ "./node_modules/core-js/modules/es6.number.parse-int.js");

__webpack_require__(/*! ../modules/es6.math.acosh */ "./node_modules/core-js/modules/es6.math.acosh.js");

__webpack_require__(/*! ../modules/es6.math.asinh */ "./node_modules/core-js/modules/es6.math.asinh.js");

__webpack_require__(/*! ../modules/es6.math.atanh */ "./node_modules/core-js/modules/es6.math.atanh.js");

__webpack_require__(/*! ../modules/es6.math.cbrt */ "./node_modules/core-js/modules/es6.math.cbrt.js");

__webpack_require__(/*! ../modules/es6.math.clz32 */ "./node_modules/core-js/modules/es6.math.clz32.js");

__webpack_require__(/*! ../modules/es6.math.cosh */ "./node_modules/core-js/modules/es6.math.cosh.js");

__webpack_require__(/*! ../modules/es6.math.expm1 */ "./node_modules/core-js/modules/es6.math.expm1.js");

__webpack_require__(/*! ../modules/es6.math.fround */ "./node_modules/core-js/modules/es6.math.fround.js");

__webpack_require__(/*! ../modules/es6.math.hypot */ "./node_modules/core-js/modules/es6.math.hypot.js");

__webpack_require__(/*! ../modules/es6.math.imul */ "./node_modules/core-js/modules/es6.math.imul.js");

__webpack_require__(/*! ../modules/es6.math.log10 */ "./node_modules/core-js/modules/es6.math.log10.js");

__webpack_require__(/*! ../modules/es6.math.log1p */ "./node_modules/core-js/modules/es6.math.log1p.js");

__webpack_require__(/*! ../modules/es6.math.log2 */ "./node_modules/core-js/modules/es6.math.log2.js");

__webpack_require__(/*! ../modules/es6.math.sign */ "./node_modules/core-js/modules/es6.math.sign.js");

__webpack_require__(/*! ../modules/es6.math.sinh */ "./node_modules/core-js/modules/es6.math.sinh.js");

__webpack_require__(/*! ../modules/es6.math.tanh */ "./node_modules/core-js/modules/es6.math.tanh.js");

__webpack_require__(/*! ../modules/es6.math.trunc */ "./node_modules/core-js/modules/es6.math.trunc.js");

__webpack_require__(/*! ../modules/es6.string.from-code-point */ "./node_modules/core-js/modules/es6.string.from-code-point.js");

__webpack_require__(/*! ../modules/es6.string.raw */ "./node_modules/core-js/modules/es6.string.raw.js");

__webpack_require__(/*! ../modules/es6.string.trim */ "./node_modules/core-js/modules/es6.string.trim.js");

__webpack_require__(/*! ../modules/es6.string.iterator */ "./node_modules/core-js/modules/es6.string.iterator.js");

__webpack_require__(/*! ../modules/es6.string.code-point-at */ "./node_modules/core-js/modules/es6.string.code-point-at.js");

__webpack_require__(/*! ../modules/es6.string.ends-with */ "./node_modules/core-js/modules/es6.string.ends-with.js");

__webpack_require__(/*! ../modules/es6.string.includes */ "./node_modules/core-js/modules/es6.string.includes.js");

__webpack_require__(/*! ../modules/es6.string.repeat */ "./node_modules/core-js/modules/es6.string.repeat.js");

__webpack_require__(/*! ../modules/es6.string.starts-with */ "./node_modules/core-js/modules/es6.string.starts-with.js");

__webpack_require__(/*! ../modules/es6.string.anchor */ "./node_modules/core-js/modules/es6.string.anchor.js");

__webpack_require__(/*! ../modules/es6.string.big */ "./node_modules/core-js/modules/es6.string.big.js");

__webpack_require__(/*! ../modules/es6.string.blink */ "./node_modules/core-js/modules/es6.string.blink.js");

__webpack_require__(/*! ../modules/es6.string.bold */ "./node_modules/core-js/modules/es6.string.bold.js");

__webpack_require__(/*! ../modules/es6.string.fixed */ "./node_modules/core-js/modules/es6.string.fixed.js");

__webpack_require__(/*! ../modules/es6.string.fontcolor */ "./node_modules/core-js/modules/es6.string.fontcolor.js");

__webpack_require__(/*! ../modules/es6.string.fontsize */ "./node_modules/core-js/modules/es6.string.fontsize.js");

__webpack_require__(/*! ../modules/es6.string.italics */ "./node_modules/core-js/modules/es6.string.italics.js");

__webpack_require__(/*! ../modules/es6.string.link */ "./node_modules/core-js/modules/es6.string.link.js");

__webpack_require__(/*! ../modules/es6.string.small */ "./node_modules/core-js/modules/es6.string.small.js");

__webpack_require__(/*! ../modules/es6.string.strike */ "./node_modules/core-js/modules/es6.string.strike.js");

__webpack_require__(/*! ../modules/es6.string.sub */ "./node_modules/core-js/modules/es6.string.sub.js");

__webpack_require__(/*! ../modules/es6.string.sup */ "./node_modules/core-js/modules/es6.string.sup.js");

__webpack_require__(/*! ../modules/es6.date.now */ "./node_modules/core-js/modules/es6.date.now.js");

__webpack_require__(/*! ../modules/es6.date.to-json */ "./node_modules/core-js/modules/es6.date.to-json.js");

__webpack_require__(/*! ../modules/es6.date.to-iso-string */ "./node_modules/core-js/modules/es6.date.to-iso-string.js");

__webpack_require__(/*! ../modules/es6.date.to-string */ "./node_modules/core-js/modules/es6.date.to-string.js");

__webpack_require__(/*! ../modules/es6.date.to-primitive */ "./node_modules/core-js/modules/es6.date.to-primitive.js");

__webpack_require__(/*! ../modules/es6.array.is-array */ "./node_modules/core-js/modules/es6.array.is-array.js");

__webpack_require__(/*! ../modules/es6.array.from */ "./node_modules/core-js/modules/es6.array.from.js");

__webpack_require__(/*! ../modules/es6.array.of */ "./node_modules/core-js/modules/es6.array.of.js");

__webpack_require__(/*! ../modules/es6.array.join */ "./node_modules/core-js/modules/es6.array.join.js");

__webpack_require__(/*! ../modules/es6.array.slice */ "./node_modules/core-js/modules/es6.array.slice.js");

__webpack_require__(/*! ../modules/es6.array.sort */ "./node_modules/core-js/modules/es6.array.sort.js");

__webpack_require__(/*! ../modules/es6.array.for-each */ "./node_modules/core-js/modules/es6.array.for-each.js");

__webpack_require__(/*! ../modules/es6.array.map */ "./node_modules/core-js/modules/es6.array.map.js");

__webpack_require__(/*! ../modules/es6.array.filter */ "./node_modules/core-js/modules/es6.array.filter.js");

__webpack_require__(/*! ../modules/es6.array.some */ "./node_modules/core-js/modules/es6.array.some.js");

__webpack_require__(/*! ../modules/es6.array.every */ "./node_modules/core-js/modules/es6.array.every.js");

__webpack_require__(/*! ../modules/es6.array.reduce */ "./node_modules/core-js/modules/es6.array.reduce.js");

__webpack_require__(/*! ../modules/es6.array.reduce-right */ "./node_modules/core-js/modules/es6.array.reduce-right.js");

__webpack_require__(/*! ../modules/es6.array.index-of */ "./node_modules/core-js/modules/es6.array.index-of.js");

__webpack_require__(/*! ../modules/es6.array.last-index-of */ "./node_modules/core-js/modules/es6.array.last-index-of.js");

__webpack_require__(/*! ../modules/es6.array.copy-within */ "./node_modules/core-js/modules/es6.array.copy-within.js");

__webpack_require__(/*! ../modules/es6.array.fill */ "./node_modules/core-js/modules/es6.array.fill.js");

__webpack_require__(/*! ../modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");

__webpack_require__(/*! ../modules/es6.array.find-index */ "./node_modules/core-js/modules/es6.array.find-index.js");

__webpack_require__(/*! ../modules/es6.array.species */ "./node_modules/core-js/modules/es6.array.species.js");

__webpack_require__(/*! ../modules/es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");

__webpack_require__(/*! ../modules/es6.regexp.constructor */ "./node_modules/core-js/modules/es6.regexp.constructor.js");

__webpack_require__(/*! ../modules/es6.regexp.exec */ "./node_modules/core-js/modules/es6.regexp.exec.js");

__webpack_require__(/*! ../modules/es6.regexp.to-string */ "./node_modules/core-js/modules/es6.regexp.to-string.js");

__webpack_require__(/*! ../modules/es6.regexp.flags */ "./node_modules/core-js/modules/es6.regexp.flags.js");

__webpack_require__(/*! ../modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");

__webpack_require__(/*! ../modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");

__webpack_require__(/*! ../modules/es6.regexp.search */ "./node_modules/core-js/modules/es6.regexp.search.js");

__webpack_require__(/*! ../modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");

__webpack_require__(/*! ../modules/es6.promise */ "./node_modules/core-js/modules/es6.promise.js");

__webpack_require__(/*! ../modules/es6.map */ "./node_modules/core-js/modules/es6.map.js");

__webpack_require__(/*! ../modules/es6.set */ "./node_modules/core-js/modules/es6.set.js");

__webpack_require__(/*! ../modules/es6.weak-map */ "./node_modules/core-js/modules/es6.weak-map.js");

__webpack_require__(/*! ../modules/es6.weak-set */ "./node_modules/core-js/modules/es6.weak-set.js");

__webpack_require__(/*! ../modules/es6.typed.array-buffer */ "./node_modules/core-js/modules/es6.typed.array-buffer.js");

__webpack_require__(/*! ../modules/es6.typed.data-view */ "./node_modules/core-js/modules/es6.typed.data-view.js");

__webpack_require__(/*! ../modules/es6.typed.int8-array */ "./node_modules/core-js/modules/es6.typed.int8-array.js");

__webpack_require__(/*! ../modules/es6.typed.uint8-array */ "./node_modules/core-js/modules/es6.typed.uint8-array.js");

__webpack_require__(/*! ../modules/es6.typed.uint8-clamped-array */ "./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js");

__webpack_require__(/*! ../modules/es6.typed.int16-array */ "./node_modules/core-js/modules/es6.typed.int16-array.js");

__webpack_require__(/*! ../modules/es6.typed.uint16-array */ "./node_modules/core-js/modules/es6.typed.uint16-array.js");

__webpack_require__(/*! ../modules/es6.typed.int32-array */ "./node_modules/core-js/modules/es6.typed.int32-array.js");

__webpack_require__(/*! ../modules/es6.typed.uint32-array */ "./node_modules/core-js/modules/es6.typed.uint32-array.js");

__webpack_require__(/*! ../modules/es6.typed.float32-array */ "./node_modules/core-js/modules/es6.typed.float32-array.js");

__webpack_require__(/*! ../modules/es6.typed.float64-array */ "./node_modules/core-js/modules/es6.typed.float64-array.js");

__webpack_require__(/*! ../modules/es6.reflect.apply */ "./node_modules/core-js/modules/es6.reflect.apply.js");

__webpack_require__(/*! ../modules/es6.reflect.construct */ "./node_modules/core-js/modules/es6.reflect.construct.js");

__webpack_require__(/*! ../modules/es6.reflect.define-property */ "./node_modules/core-js/modules/es6.reflect.define-property.js");

__webpack_require__(/*! ../modules/es6.reflect.delete-property */ "./node_modules/core-js/modules/es6.reflect.delete-property.js");

__webpack_require__(/*! ../modules/es6.reflect.enumerate */ "./node_modules/core-js/modules/es6.reflect.enumerate.js");

__webpack_require__(/*! ../modules/es6.reflect.get */ "./node_modules/core-js/modules/es6.reflect.get.js");

__webpack_require__(/*! ../modules/es6.reflect.get-own-property-descriptor */ "./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js");

__webpack_require__(/*! ../modules/es6.reflect.get-prototype-of */ "./node_modules/core-js/modules/es6.reflect.get-prototype-of.js");

__webpack_require__(/*! ../modules/es6.reflect.has */ "./node_modules/core-js/modules/es6.reflect.has.js");

__webpack_require__(/*! ../modules/es6.reflect.is-extensible */ "./node_modules/core-js/modules/es6.reflect.is-extensible.js");

__webpack_require__(/*! ../modules/es6.reflect.own-keys */ "./node_modules/core-js/modules/es6.reflect.own-keys.js");

__webpack_require__(/*! ../modules/es6.reflect.prevent-extensions */ "./node_modules/core-js/modules/es6.reflect.prevent-extensions.js");

__webpack_require__(/*! ../modules/es6.reflect.set */ "./node_modules/core-js/modules/es6.reflect.set.js");

__webpack_require__(/*! ../modules/es6.reflect.set-prototype-of */ "./node_modules/core-js/modules/es6.reflect.set-prototype-of.js");

module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/core-js/modules/_core.js");

/***/ }),

/***/ "./node_modules/core-js/fn/array/flat-map.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/fn/array/flat-map.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.array.flat-map */ "./node_modules/core-js/modules/es7.array.flat-map.js");

module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").Array.flatMap;

/***/ }),

/***/ "./node_modules/core-js/fn/array/includes.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/fn/array/includes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.array.includes */ "./node_modules/core-js/modules/es7.array.includes.js");

module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").Array.includes;

/***/ }),

/***/ "./node_modules/core-js/fn/object/entries.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/fn/object/entries.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.object.entries */ "./node_modules/core-js/modules/es7.object.entries.js");

module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").Object.entries;

/***/ }),

/***/ "./node_modules/core-js/fn/object/get-own-property-descriptors.js":
/*!************************************************************************!*\
  !*** ./node_modules/core-js/fn/object/get-own-property-descriptors.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.object.get-own-property-descriptors */ "./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js");

module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").Object.getOwnPropertyDescriptors;

/***/ }),

/***/ "./node_modules/core-js/fn/object/values.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/fn/object/values.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.object.values */ "./node_modules/core-js/modules/es7.object.values.js");

module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").Object.values;

/***/ }),

/***/ "./node_modules/core-js/fn/promise/finally.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/fn/promise/finally.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ../../modules/es6.promise */ "./node_modules/core-js/modules/es6.promise.js");

__webpack_require__(/*! ../../modules/es7.promise.finally */ "./node_modules/core-js/modules/es7.promise.finally.js");

module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").Promise['finally'];

/***/ }),

/***/ "./node_modules/core-js/fn/string/pad-end.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/fn/string/pad-end.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.string.pad-end */ "./node_modules/core-js/modules/es7.string.pad-end.js");

module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").String.padEnd;

/***/ }),

/***/ "./node_modules/core-js/fn/string/pad-start.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/fn/string/pad-start.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.string.pad-start */ "./node_modules/core-js/modules/es7.string.pad-start.js");

module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").String.padStart;

/***/ }),

/***/ "./node_modules/core-js/fn/string/trim-end.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/fn/string/trim-end.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.string.trim-right */ "./node_modules/core-js/modules/es7.string.trim-right.js");

module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").String.trimRight;

/***/ }),

/***/ "./node_modules/core-js/fn/string/trim-start.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/fn/string/trim-start.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.string.trim-left */ "./node_modules/core-js/modules/es7.string.trim-left.js");

module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").String.trimLeft;

/***/ }),

/***/ "./node_modules/core-js/fn/symbol/async-iterator.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/fn/symbol/async-iterator.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.symbol.async-iterator */ "./node_modules/core-js/modules/es7.symbol.async-iterator.js");

module.exports = __webpack_require__(/*! ../../modules/_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js").f('asyncIterator');

/***/ }),

/***/ "./node_modules/core-js/library/fn/global.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/library/fn/global.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/es7.global */ "./node_modules/core-js/library/modules/es7.global.js");

module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/core-js/library/modules/_core.js").global;

/***/ }),

/***/ "./node_modules/core-js/library/modules/_a-function.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_a-function.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_an-object.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_an-object.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");

module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_core.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_core.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var core = module.exports = {
  version: '2.6.9'
};
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ }),

/***/ "./node_modules/core-js/library/modules/_ctx.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_ctx.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/library/modules/_a-function.js");

module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;

  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };

    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };

    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }

  return function ()
  /* ...args */
  {
    return fn.apply(that, arguments);
  };
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_descriptors.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_descriptors.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/library/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js/library/modules/_dom-create.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_dom-create.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js").document; // typeof document.createElement is 'object' in old IE


var is = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_export.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_export.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/library/modules/_core.js");

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/library/modules/_ctx.js");

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/library/modules/_hide.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/library/modules/_has.js");

var PROTOTYPE = 'prototype';

var $export = function $export(type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;

  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue; // export native or passed

    out = own ? target[key] : source[key]; // prevent global pollution for namespaces

    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global) // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? function (C) {
      var F = function F(a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0:
              return new C();

            case 1:
              return new C(a);

            case 2:
              return new C(a, b);
          }

          return new C(a, b, c);
        }

        return C.apply(this, arguments);
      };

      F[PROTOTYPE] = C[PROTOTYPE];
      return F; // make static versions for prototype methods
    }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out; // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
}; // type bitmap


$export.F = 1; // forced

$export.G = 2; // global

$export.S = 4; // static

$export.P = 8; // proto

$export.B = 16; // bind

$export.W = 32; // wrap

$export.U = 64; // safe

$export.R = 128; // real proto method for `library`

module.exports = $export;

/***/ }),

/***/ "./node_modules/core-js/library/modules/_fails.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_fails.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_global.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_global.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
: Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ }),

/***/ "./node_modules/core-js/library/modules/_has.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_has.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_hide.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_hide.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js");

var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/library/modules/_property-desc.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_ie8-dom-define.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_ie8-dom-define.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/library/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/library/modules/_dom-create.js")('div'), 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js/library/modules/_is-object.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_is-object.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function (it) {
  return _typeof(it) === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-dp.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-dp.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/library/modules/_an-object.js");

var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/library/modules/_ie8-dom-define.js");

var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/library/modules/_to-primitive.js");

var dP = Object.defineProperty;
exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) {
    /* empty */
  }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_property-desc.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_property-desc.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_to-primitive.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-primitive.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js"); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string


module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/es7.global.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.global.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");

$export($export.G, {
  global: __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/_a-function.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_a-function.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_a-number-value.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_a-number-value.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");

module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_add-to-unscopables.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_add-to-unscopables.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('unscopables');

var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(ArrayProto, UNSCOPABLES, {});

module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_advance-string-index.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_advance-string-index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true); // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex


module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_an-instance.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_an-instance.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
    throw TypeError(name + ': incorrect invocation!');
  }

  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_an-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_an-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-copy-within.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-copy-within.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)


var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

module.exports = [].copyWithin || function copyWithin(target
/* = 0 */
, start
/* = 0, end = @length */
) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;

  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }

  while (count-- > 0) {
    if (from in O) O[to] = O[from];else delete O[to];
    to += inc;
    from += inc;
  }

  return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-fill.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_array-fill.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)


var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

module.exports = function fill(value
/* , start = 0, end = @length */
) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

  while (endPos > index) {
    O[index++] = value;
  }

  return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-includes.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-includes.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");

module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value; // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare

    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++]; // eslint-disable-next-line no-self-compare

      if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      }
    }
    return !IS_INCLUDES && -1;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-methods.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-methods.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");

var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var asc = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");

module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;

    for (; length > index; index++) {
      if (NO_HOLES || index in self) {
        val = self[index];
        res = f(val, index, O);

        if (TYPE) {
          if (IS_MAP) result[index] = res; // map
          else if (res) switch (TYPE) {
              case 3:
                return true;
              // some

              case 5:
                return val;
              // find

              case 6:
                return index;
              // findIndex

              case 2:
                result.push(val);
              // filter
            } else if (IS_EVERY) return false; // every
        }
      }
    }

    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-reduce.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_array-reduce.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }

    index += i;

    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }

  for (; isRight ? index >= 0 : length > index; index += i) {
    if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
  }

  return memo;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-constructor.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-constructor.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");

var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (original) {
  var C;

  if (isArray(original)) {
    C = original.constructor; // cross-realm fallback

    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;

    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  }

  return C === undefined ? Array : C;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-create.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-create.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(/*! ./_array-species-constructor */ "./node_modules/core-js/modules/_array-species-constructor.js");

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_bind.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_bind.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/core-js/modules/_invoke.js");

var arraySlice = [].slice;
var factories = {};

var construct = function construct(F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) {
      n[i] = 'a[' + i + ']';
    } // eslint-disable-next-line no-new-func


    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  }

  return factories[len](F, args);
};

module.exports = Function.bind || function bind(that
/* , ...args */
) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);

  var bound = function bound()
  /* args... */
  {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };

  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_classof.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_classof.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");

var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag'); // ES3 wrong here


var ARG = cof(function () {
  return arguments;
}()) == 'Arguments'; // fallback for IE11 Script Access Denied error

var tryGet = function tryGet(it, key) {
  try {
    return it[key];
  } catch (e) {
    /* empty */
  }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
  : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
  : ARG ? cof(O) // ES3 arguments fallback
  : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_cof.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_cof.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_collection-strong.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-strong.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;

var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");

var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");

var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");

var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");

var $iterDefine = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js");

var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");

var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js");

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");

var fastKey = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").fastKey;

var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");

var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function getEntry(that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index]; // frozen object case

  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type

      that._i = create(null); // index

      that._f = undefined; // first entry

      that._l = undefined; // last entry

      that[SIZE] = 0; // size

      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }

        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function _delete(key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);

        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        }

        return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn
      /* , that = undefined */
      ) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;

        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this); // revert to the last existing entry

          while (entry && entry.r) {
            entry = entry.p;
          }
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function get() {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function def(that, key, value) {
    var entry = getEntry(that, key);
    var prev, index; // change existing entry

    if (entry) {
      entry.v = value; // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true),
        // <- index
        k: key,
        // <- key
        v: value,
        // <- value
        p: prev = that._l,
        // <- previous entry
        n: undefined,
        // <- next entry
        r: false // <- removed

      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++; // add to index

      if (index !== 'F') that._i[index] = entry;
    }

    return that;
  },
  getEntry: getEntry,
  setStrong: function setStrong(C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target

      this._k = kind; // kind

      this._l = undefined; // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l; // revert to the last existing entry

      while (entry && entry.r) {
        entry = entry.p;
      } // get next entry


      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      } // return step by kind


      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

    setSpecies(NAME);
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_collection-weak.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-weak.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");

var getWeak = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").getWeak;

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");

var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");

var createArrayMethod = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js");

var $has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");

var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0; // fallback for uncaught frozen keys

var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};

var UncaughtFrozenStore = function UncaughtFrozenStore() {
  this.a = [];
};

var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};

UncaughtFrozenStore.prototype = {
  get: function get(key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function has(key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function set(key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;else this.a.push([key, value]);
  },
  'delete': function _delete(key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};
module.exports = {
  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type

      that._i = id++; // collection id

      that._l = undefined; // leak store for uncaught frozen objects

      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function _delete(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function def(that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

/***/ }),

/***/ "./node_modules/core-js/modules/_collection.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_collection.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");

var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js");

var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");

var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var $iterDetect = __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js");

var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");

var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};

  var fixMethod = function fixMethod(KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY, KEY == 'delete' ? function (a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'has' ? function has(a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'get' ? function get(a) {
      return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'add' ? function add(a) {
      fn.call(this, a === 0 ? 0 : a);
      return this;
    } : function set(a, b) {
      fn.call(this, a === 0 ? 0 : a, b);
      return this;
    });
  };

  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C(); // early implementations not supports chaining

    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false

    var THROWS_ON_PRIMITIVES = fails(function () {
      instance.has(1);
    }); // most early implementations doesn't supports iterables, most modern - not close it correctly

    var ACCEPT_ITERABLES = $iterDetect(function (iter) {
      new C(iter);
    }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same

    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;

      while (index--) {
        $instance[ADDER](index, index);
      }

      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);
  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);
  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
  return C;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_core.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_core.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var core = module.exports = {
  version: '2.6.9'
};
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ }),

/***/ "./node_modules/core-js/modules/_create-property.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_create-property.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_ctx.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_ctx.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;

  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };

    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };

    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }

  return function ()
  /* ...args */
  {
    return fn.apply(that, arguments);
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_date-to-iso-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_date-to-iso-string.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function lz(num) {
  return num > 9 ? num : '0' + num;
}; // PhantomJS / old WebKit has a broken implementations


module.exports = fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
}) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

/***/ }),

/***/ "./node_modules/core-js/modules/_date-to-primitive.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_date-to-primitive.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_defined.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_defined.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_descriptors.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_descriptors.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js/modules/_dom-create.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_dom-create.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document; // typeof document.createElement is 'object' in old IE


var is = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

/***/ }),

/***/ "./node_modules/core-js/modules/_enum-bug-keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-bug-keys.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

/***/ }),

/***/ "./node_modules/core-js/modules/_enum-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-keys.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");

module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;

  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;

    while (symbols.length > i) {
      if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }
  }

  return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_export.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_export.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");

var PROTOTYPE = 'prototype';

var $export = function $export(type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;

  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

    out = (own ? target : source)[key]; // bind timers to global for call from export context

    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // extend global

    if (target) redefine(target, key, out, type & $export.U); // export

    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};

global.core = core; // type bitmap

$export.F = 1; // forced

$export.G = 2; // global

$export.S = 4; // static

$export.P = 8; // proto

$export.B = 16; // bind

$export.W = 32; // wrap

$export.U = 64; // safe

$export.R = 128; // real proto method for `library`

module.exports = $export;

/***/ }),

/***/ "./node_modules/core-js/modules/_fails-is-regexp.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_fails-is-regexp.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match');

module.exports = function (KEY) {
  var re = /./;

  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) {
      /* empty */
    }
  }

  return true;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_fails.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_fails.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_fix-re-wks.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_fix-re-wks.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./es6.regexp.exec */ "./node_modules/core-js/modules/es6.regexp.exec.js");

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");

var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");

var SPECIES = wks('species');
var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;

  re.exec = function () {
    var result = [];
    result.groups = {
      a: '7'
    };
    return result;
  };

  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;

  re.exec = function () {
    return originalExec.apply(this, arguments);
  };

  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
}();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};

    O[SYMBOL] = function () {
      return 7;
    };

    return ''[KEY](O) != 7;
  });
  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    re.exec = function () {
      execCalled = true;
      return null;
    };

    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};

      re.constructor[SPECIES] = function () {
        return re;
      };
    }

    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return {
            done: true,
            value: nativeRegExpMethod.call(regexp, str, arg2)
          };
        }

        return {
          done: true,
          value: nativeMethod.call(str, regexp, arg2)
        };
      }

      return {
        done: false
      };
    });
    var strfn = fns[0];
    var rxfn = fns[1];
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
    // 21.2.5.11 RegExp.prototype[@@split](string, limit)
    ? function (string, arg) {
      return rxfn.call(string, this, arg);
    } // 21.2.5.6 RegExp.prototype[@@match](string)
    // 21.2.5.9 RegExp.prototype[@@search](string)
    : function (string) {
      return rxfn.call(string, this);
    });
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_flags.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_flags.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 21.2.5.3 get RegExp.prototype.flags

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_flatten-into-array.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_flatten-into-array.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");

var IS_CONCAT_SPREADABLE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
      spreadable = false;

      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }

    sourceIndex++;
  }

  return targetIndex;
}

module.exports = flattenIntoArray;

/***/ }),

/***/ "./node_modules/core-js/modules/_for-of.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_for-of.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");

var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/modules/_iter-call.js");

var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");

var BREAK = {};
var RETURN = {};

var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () {
    return iterable;
  } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator

  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};

exports.BREAK = BREAK;
exports.RETURN = RETURN;

/***/ }),

/***/ "./node_modules/core-js/modules/_function-to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_function-to-string.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('native-function-to-string', Function.toString);

/***/ }),

/***/ "./node_modules/core-js/modules/_global.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
: Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ }),

/***/ "./node_modules/core-js/modules/_has.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_has.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_hide.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_hide.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_html.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_html.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;

module.exports = document && document.documentElement;

/***/ }),

/***/ "./node_modules/core-js/modules/_ie8-dom-define.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('div'), 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js/modules/_inherit-if-required.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_inherit-if-required.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var setPrototypeOf = __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set;

module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;

  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  }

  return that;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_invoke.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_invoke.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;

  switch (args.length) {
    case 0:
      return un ? fn() : fn.call(that);

    case 1:
      return un ? fn(args[0]) : fn.call(that, args[0]);

    case 2:
      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);

    case 3:
      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);

    case 4:
      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
  }

  return fn.apply(that, args);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iobject.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_iobject.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js"); // eslint-disable-next-line no-prototype-builtins


module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-array-iter.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array-iter.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');

var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-array.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");

module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-integer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var floor = Math.floor;

module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function (it) {
  return _typeof(it) === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-regexp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-regexp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");

var MATCH = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match');

module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-call.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-call.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-create.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-create.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");

var descriptor = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");

var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

__webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(IteratorPrototype, __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator'), function () {
  return this;
});

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, {
    next: descriptor(1, next)
  });
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-define.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-define.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");

var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");

var $iterCreate = __webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js");

var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");

var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');

var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function returnThis() {
  return this;
};

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);

  var getMethod = function getMethod(kind) {
    if (!BUGGY && kind in proto) return proto[kind];

    switch (kind) {
      case KEYS:
        return function keys() {
          return new Constructor(this, kind);
        };

      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }

    return function entries() {
      return new Constructor(this, kind);
    };
  };

  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype; // Fix native

  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  } // fix Array#{values, @@iterator}.name in V8 / FF


  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;

    $default = function values() {
      return $native.call(this);
    };
  } // Define iterator


  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  } // Plug for library


  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;

  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }

  return methods;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-detect.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-detect.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');

var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();

  riter['return'] = function () {
    SAFE_CLOSING = true;
  }; // eslint-disable-next-line no-throw-literal


  Array.from(riter, function () {
    throw 2;
  });
} catch (e) {
  /* empty */
}

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;

  try {
    var arr = [7];
    var iter = arr[ITERATOR]();

    iter.next = function () {
      return {
        done: safe = true
      };
    };

    arr[ITERATOR] = function () {
      return iter;
    };

    exec(arr);
  } catch (e) {
    /* empty */
  }

  return safe;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-step.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-step.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return {
    value: value,
    done: !!done
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iterators.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iterators.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};

/***/ }),

/***/ "./node_modules/core-js/modules/_library.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_library.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = false;

/***/ }),

/***/ "./node_modules/core-js/modules/_math-expm1.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-expm1.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = !$expm1 // Old FF bug
|| $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // Tor Browser bug
|| $expm1(-2e-17) != -2e-17 ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

/***/ }),

/***/ "./node_modules/core-js/modules/_math-fround.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_math-fround.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(/*! ./_math-sign */ "./node_modules/core-js/modules/_math-sign.js");

var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function roundTiesToEven(n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs); // eslint-disable-next-line no-self-compare

  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_math-log1p.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-log1p.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_math-sign.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-sign.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_meta.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_meta.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var META = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('meta');

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var setDesc = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;

var id = 0;

var isExtensible = Object.isExtensible || function () {
  return true;
};

var FREEZE = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return isExtensible(Object.preventExtensions({}));
});

var setMeta = function setMeta(it) {
  setDesc(it, META, {
    value: {
      i: 'O' + ++id,
      // object ID
      w: {} // weak collections IDs

    }
  });
};

var fastKey = function fastKey(it, create) {
  // return primitive with prefix
  if (!isObject(it)) return _typeof(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F'; // not necessary to add metadata

    if (!create) return 'E'; // add missing metadata

    setMeta(it); // return object ID
  }

  return it[META].i;
};

var getWeak = function getWeak(it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true; // not necessary to add metadata

    if (!create) return false; // add missing metadata

    setMeta(it); // return hash weak collections IDs
  }

  return it[META].w;
}; // add metadata on freeze-family methods calling


var onFreeze = function onFreeze(it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};

var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

/***/ }),

/***/ "./node_modules/core-js/modules/_microtask.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_microtask.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var macrotask = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js").set;

var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function flush() {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();

    while (head) {
      fn = head.fn;
      head = head.next;

      try {
        fn();
      } catch (e) {
        if (head) notify();else last = undefined;
        throw e;
      }
    }

    last = undefined;
    if (parent) parent.enter();
  }; // Node.js


  if (isNode) {
    notify = function notify() {
      process.nextTick(flush);
    }; // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, {
      characterData: true
    }); // eslint-disable-line no-new

    notify = function notify() {
      node.data = toggle = !toggle;
    }; // environments with maybe non-completely correct, but existent Promise

  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);

    notify = function notify() {
      promise.then(flush);
    }; // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout

  } else {
    notify = function notify() {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = {
      fn: fn,
      next: undefined
    };
    if (last) last.next = task;

    if (!head) {
      head = task;
      notify();
    }

    last = task;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_new-promise-capability.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/_new-promise-capability.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 25.4.1.5 NewPromiseCapability(C)

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-assign.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-assign.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 19.1.2.1 Object.assign(target, source, ...)

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");

var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");

var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)

module.exports = !$assign || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  var A = {};
  var B = {}; // eslint-disable-next-line no-undef

  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) {
    B[k] = k;
  });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) {
  // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;

  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;

    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  }

  return T;
} : $assign;

/***/ }),

/***/ "./node_modules/core-js/modules/_object-create.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-create.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var dPs = __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/modules/_object-dps.js");

var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");

var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

var Empty = function Empty() {
  /* empty */
};

var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

var _createDict = function createDict() {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('iframe');

  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';

  __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js").appendChild(iframe);

  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);

  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  _createDict = iframeDocument.F;

  while (i--) {
    delete _createDict[PROTOTYPE][enumBugKeys[i]];
  }

  return _createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;

  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

    result[IE_PROTO] = O;
  } else result = _createDict();

  return Properties === undefined ? result : dPs(result, Properties);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-dp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");

var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

var dP = Object.defineProperty;
exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) {
    /* empty */
  }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-dps.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dps.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;

  while (length > i) {
    dP.f(O, P = keys[i++], Properties[P]);
  }

  return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopd.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopd.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");

var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");

var gOPD = Object.getOwnPropertyDescriptor;
exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) {
    /* empty */
  }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn-ext.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn-ext.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;

var toString = {}.toString;
var windowNames = (typeof window === "undefined" ? "undefined" : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function getWindowNames(it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");

var hiddenKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gops.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gops.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gpo.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gpo.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];

  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  }

  return O instanceof Object ? ObjectProto : null;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys-internal.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys-internal.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var arrayIndexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);

var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;

  for (key in O) {
    if (key != IE_PROTO) has(O, key) && result.push(key);
  } // Don't enum bug & hidden keys


  while (names.length > i) {
    if (has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
  }

  return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");

var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-pie.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-pie.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ }),

/***/ "./node_modules/core-js/modules/_object-sap.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-sap.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () {
    fn(1);
  }), 'Object', exp);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-to-array.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-to-array.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");

var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var isEnum = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js").f;

module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;

    while (length > i) {
      key = keys[i++];

      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }

    return result;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_own-keys.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_own-keys.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js");

var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var Reflect = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect;

module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_parse-float.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_parse-float.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").parseFloat;

var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;

module.exports = 1 / $parseFloat(__webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js") + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

/***/ }),

/***/ "./node_modules/core-js/modules/_parse-int.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_parse-int.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").parseInt;

var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;

var ws = __webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js");

var hex = /^[-+]?0[xX]/;
module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
} : $parseInt;

/***/ }),

/***/ "./node_modules/core-js/modules/_perform.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_perform.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return {
      e: false,
      v: exec()
    };
  } catch (e) {
    return {
      e: true,
      v: e
    };
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_promise-resolve.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_promise-resolve.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var newPromiseCapability = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/modules/_new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_property-desc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_property-desc.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_redefine-all.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine-all.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

module.exports = function (target, src, safe) {
  for (var key in src) {
    redefine(target, key, src[key], safe);
  }

  return target;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_redefine.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var SRC = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('src');

var $toString = __webpack_require__(/*! ./_function-to-string */ "./node_modules/core-js/modules/_function-to-string.js");

var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

/***/ }),

/***/ "./node_modules/core-js/modules/_regexp-exec-abstract.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_regexp-exec-abstract.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");

var builtinExec = RegExp.prototype.exec; // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec

module.exports = function (R, S) {
  var exec = R.exec;

  if (typeof exec === 'function') {
    var result = exec.call(R, S);

    if (_typeof(result) !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }

    return result;
  }

  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }

  return builtinExec.call(R, S);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_regexp-exec.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_regexp-exec.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpFlags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");

var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.

var nativeReplace = String.prototype.replace;
var patchedExec = nativeExec;
var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
}(); // nonparticipating capturing group, copied from es5-shim's String#split patch.


var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }

    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];
    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }

    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

/***/ }),

/***/ "./node_modules/core-js/modules/_same-value.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_same-value.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-proto.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_set-proto.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var check = function check(O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};

module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
  function (test, buggy, set) {
    try {
      set = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js")(Function.call, __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f(Object.prototype, '__proto__').set, 2);
      set(test, []);
      buggy = !(test instanceof Array);
    } catch (e) {
      buggy = true;
    }

    return function setPrototypeOf(O, proto) {
      check(O, proto);
      if (buggy) O.__proto__ = proto;else set(O, proto);
      return O;
    };
  }({}, false) : undefined),
  check: check
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-species.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_set-species.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");

var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function get() {
      return this;
    }
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-to-string-tag.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-to-string-tag.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
    configurable: true,
    value: tag
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_shared-key.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_shared-key.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('keys');

var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");

module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_shared.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_shared.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js") ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});

/***/ }),

/***/ "./node_modules/core-js/modules/_species-constructor.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_species-constructor.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_strict-method.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_strict-method.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () {
      /* empty */
    }, 1) : method.call(null);
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-at.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-at.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js"); // true  -> String#at
// false -> String#codePointAt


module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-context.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_string-context.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");

var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-html.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_string-html.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

var quot = /"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)

var createHTML = function createHTML(string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};

module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-pad.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-pad.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var repeat = __webpack_require__(/*! ./_string-repeat */ "./node_modules/core-js/modules/_string-repeat.js");

var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-repeat.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_string-repeat.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");

  for (; n > 0; (n >>>= 1) && (str += str)) {
    if (n & 1) res += str;
  }

  return res;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-trim.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_string-trim.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var spaces = __webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js");

var space = '[' + spaces + ']';
var non = "\u200B\x85";
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function exporter(KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
}; // 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim


var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

/***/ }),

/***/ "./node_modules/core-js/modules/_string-ws.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-ws.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003" + "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";

/***/ }),

/***/ "./node_modules/core-js/modules/_task.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_task.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");

var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/core-js/modules/_invoke.js");

var html = __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js");

var cel = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js");

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;

var run = function run() {
  var id = +this; // eslint-disable-next-line no-prototype-builtins

  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var listener = function listener(event) {
  run.call(event.data);
}; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;

    while (arguments.length > i) {
      args.push(arguments[i++]);
    }

    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };

    defer(counter);
    return counter;
  };

  clearTask = function clearImmediate(id) {
    delete queue[id];
  }; // Node.js 0.8-


  if (__webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process') {
    defer = function defer(id) {
      process.nextTick(ctx(run, id, 1));
    }; // Sphere (JS game engine) Dispatch API

  } else if (Dispatch && Dispatch.now) {
    defer = function defer(id) {
      Dispatch.now(ctx(run, id, 1));
    }; // Browsers with MessageChannel, includes WebWorkers

  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function defer(id) {
      global.postMessage(id + '', '*');
    };

    global.addEventListener('message', listener, false); // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function defer(id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    }; // Rest old browsers

  } else {
    defer = function defer(id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}

module.exports = {
  set: setTask,
  clear: clearTask
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-absolute-index.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_to-absolute-index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

var max = Math.max;
var min = Math.min;

module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-index.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_to-index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-integer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;

module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-iobject.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-iobject.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");

var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (it) {
  return IObject(defined(it));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-length.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-length.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

var min = Math.min;

module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (it) {
  return Object(defined(it));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-primitive.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_to-primitive.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js"); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string


module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),

/***/ "./node_modules/core-js/modules/_typed-array.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_typed-array.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js")) {
  var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");

  var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

  var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

  var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

  var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");

  var $buffer = __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js");

  var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");

  var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");

  var propertyDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

  var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");

  var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");

  var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

  var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

  var toIndex = __webpack_require__(/*! ./_to-index */ "./node_modules/core-js/modules/_to-index.js");

  var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");

  var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

  var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

  var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");

  var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

  var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

  var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");

  var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");

  var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");

  var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;

  var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");

  var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");

  var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");

  var createArrayMethod = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js");

  var createArrayIncludes = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js");

  var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");

  var ArrayIterators = __webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");

  var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");

  var $iterDetect = __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js");

  var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js");

  var arrayFill = __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js");

  var arrayCopyWithin = __webpack_require__(/*! ./_array-copy-within */ "./node_modules/core-js/modules/_array-copy-within.js");

  var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

  var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");

  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';
  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });
  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });
  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function toOffset(it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function validate(it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function allocate(C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    }

    return new C(length);
  };

  var speciesFromList = function speciesFromList(O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function fromList(C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);

    while (length > index) {
      result[index] = list[index++];
    }

    return result;
  };

  var addGetter = function addGetter(it, key, internal) {
    dP(it, key, {
      get: function get() {
        return this._d[internal];
      }
    });
  };

  var $from = function from(source
  /* , mapfn, thisArg */
  ) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;

    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      }

      O = values;
    }

    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);

    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }

    return result;
  };

  var $of = function of()
  /* ...items */
  {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);

    while (length > index) {
      result[index] = arguments[index++];
    }

    return result;
  }; // iOS Safari 6.x fails here


  var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
    arrayToLocaleString.call(new Uint8Array(1));
  });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start
    /* , end */
    ) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn
    /* , thisArg */
    ) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value
    /* , start, end */
    ) {
      // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn
    /* , thisArg */
    ) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate
    /* , thisArg */
    ) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate
    /* , thisArg */
    ) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn
    /* , thisArg */
    ) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement
    /* , fromIndex */
    ) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement
    /* , fromIndex */
    ) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) {
      // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement
    /* , fromIndex */
    ) {
      // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn
    /* , thisArg */
    ) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn
    /* , initialValue */
    ) {
      // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn
    /* , initialValue */
    ) {
      // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;

      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      }

      return that;
    },
    some: function some(callbackfn
    /* , thisArg */
    ) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike
  /* , offset */
  ) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);

    while (index < len) {
      this[offset + index] = src[index++];
    }
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function isTAIndex(target, key) {
    return isObject(target) && target[TYPED_ARRAY] && _typeof(key) != 'symbol' && key in target && String(+key) == String(key);
  };

  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
  };

  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set') // TODO: add validation descriptor w/o calling accessors
    && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
      target[key] = desc.value;
      return target;
    }

    return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () {
    arrayToString.call({});
  })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function constructor() {
      /* noop */
    },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function get() {
      return this[TYPED_ARRAY];
    }
  }); // eslint-disable-next-line max-statements

  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];

    var getter = function getter(that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };

    var setter = function setter(that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };

    var addElement = function addElement(that, index) {
      dP(that, index, {
        get: function get() {
          return getter(this, index);
        },
        set: function set(value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };

    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;

        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;

          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }

          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }

        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });

        while (index < length) {
          addElement(that, index++);
        }
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new

      new TypedArray(null); // eslint-disable-line no-new

      new TypedArray(1.5); // eslint-disable-line no-new

      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass; // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645

        if (!isObject(data)) return new Base(toIndex(data));

        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
        }

        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }

    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function get() {
          return NAME;
        }
      });
    }

    O[NAME] = TypedArray;
    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });
    $export($export.S + $export.F * fails(function () {
      Base.of.call(TypedArray, 1);
    }), NAME, {
      from: $from,
      of: $of
    });
    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
    $export($export.P, NAME, proto);
    setSpecies(NAME);
    $export($export.P + $export.F * FORCED_SET, NAME, {
      set: $set
    });
    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, {
      slice: $slice
    });
    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {
      toLocaleString: $toLocaleString
    });
    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () {
  /* empty */
};

/***/ }),

/***/ "./node_modules/core-js/modules/_typed-buffer.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_typed-buffer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");

var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");

var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var toIndex = __webpack_require__(/*! ./_to-index */ "./node_modules/core-js/modules/_to-index.js");

var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;

var arrayFill = __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js");

var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");

var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError; // eslint-disable-next-line no-shadow-restricted-names

var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET; // IEEE754 conversions based on https://github.com/feross/ieee754

function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value); // eslint-disable-next-line no-self-compare

  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);

    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {
    ;
  }

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {
    ;
  }

  buffer[--i] |= s * 128;
  return buffer;
}

function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;

  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {
    ;
  }

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {
    ;
  }

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}

function packI8(it) {
  return [it & 0xff];
}

function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}

function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}

function packF64(it) {
  return packIEEE754(it, 52, 8);
}

function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, {
    get: function get() {
      return this[internal];
    }
  });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}

function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);

  for (var i = 0; i < bytes; i++) {
    store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
  }
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset
    /* , littleEndian */
    ) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset
    /* , littleEndian */
    ) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset
    /* , littleEndian */
    ) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset
    /* , littleEndian */
    ) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset
    /* , littleEndian */
    ) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset
    /* , littleEndian */
    ) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value
    /* , littleEndian */
    ) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new

    new $ArrayBuffer(1.5); // eslint-disable-line no-new

    new $ArrayBuffer(NaN); // eslint-disable-line no-new

    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };

    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];

    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }

    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  } // iOS Safari 7.x bug


  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}

setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

/***/ }),

/***/ "./node_modules/core-js/modules/_typed.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_typed.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");

var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");

var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;
var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

/***/ }),

/***/ "./node_modules/core-js/modules/_uid.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_uid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();

module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_user-agent.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_user-agent.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var navigator = global.navigator;
module.exports = navigator && navigator.userAgent || '';

/***/ }),

/***/ "./node_modules/core-js/modules/_validate-collection.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_validate-collection.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_wks-define.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-define.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");

var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");

var defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;

module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
    value: wksExt.f(name)
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_wks-ext.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-ext.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");

/***/ }),

/***/ "./node_modules/core-js/modules/_wks.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_wks.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('wks');

var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");

var _Symbol = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Symbol;

var USE_SYMBOL = typeof _Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),

/***/ "./node_modules/core-js/modules/core.get-iterator-method.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/core.get-iterator-method.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');

var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");

module.exports = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.copy-within.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.copy-within.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Array', {
  copyWithin: __webpack_require__(/*! ./_array-copy-within */ "./node_modules/core-js/modules/_array-copy-within.js")
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('copyWithin');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.every.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.every.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $every = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(4);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn
  /* , thisArg */
  ) {
    return $every(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.fill.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.fill.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Array', {
  fill: __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js")
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('fill');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.filter.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.filter.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $filter = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(2);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn
  /* , thisArg */
  ) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.find-index.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.find-index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $find = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(6);

var KEY = 'findIndex';
var forced = true; // Shouldn't skip holes

if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn
  /* , that = undefined */
  ) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")(KEY);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.find.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.find.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $find = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(5);

var KEY = 'find';
var forced = true; // Shouldn't skip holes

if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn
  /* , that = undefined */
  ) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")(KEY);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.for-each.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.for-each.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $forEach = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(0);

var STRICT = __webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn
  /* , thisArg */
  ) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.from.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.from.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/modules/_iter-call.js");

var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/modules/_create-property.js");

var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");

$export($export.S + $export.F * !__webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js")(function (iter) {
  Array.from(iter);
}), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike
  /* , mapfn = undefined, thisArg = undefined */
  ) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case

    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);

      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }

    result.length = index;
    return result;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.index-of.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.index-of.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $indexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);

var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement
  /* , fromIndex = 0 */
  ) {
    return NEGATIVE_ZERO // convert -0 to +0
    ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.is-array.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.is-array.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Array', {
  isArray: __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.iterator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var addToUnscopables = __webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js");

var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");

var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js"); // 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()


module.exports = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target

  this._i = 0; // next index

  this._k = kind; // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;

  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }

  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

Iterators.Arguments = Iterators.Array;
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.join.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.join.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 22.1.3.13 Array.prototype.join(separator)

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var arrayJoin = [].join; // fallback for not array-like strings

$export($export.P + $export.F * (__webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js") != Object || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.last-index-of.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.last-index-of.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement
  /* , fromIndex = @[*-1] */
  ) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;

    for (; index >= 0; index--) {
      if (index in O) if (O[index] === searchElement) return index || 0;
    }

    return -1;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.map.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.map.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $map = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(1);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn
  /* , thisArg */
  ) {
    return $map(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.of.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.of.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/modules/_create-property.js"); // WebKit Array.of isn't generic


$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  function F() {
    /* empty */
  }

  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of()
  /* ...args */
  {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);

    while (aLen > index) {
      createProperty(result, index, arguments[index++]);
    }

    result.length = aLen;
    return result;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.reduce-right.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.reduce-right.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $reduce = __webpack_require__(/*! ./_array-reduce */ "./node_modules/core-js/modules/_array-reduce.js");

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn
  /* , initialValue */
  ) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.reduce.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.reduce.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $reduce = __webpack_require__(/*! ./_array-reduce */ "./node_modules/core-js/modules/_array-reduce.js");

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn
  /* , initialValue */
  ) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.slice.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.slice.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var html = __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js");

var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");

var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var arraySlice = [].slice; // fallback for not array-like ES3 strings and DOM objects

$export($export.P + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;

    for (; i < size; i++) {
      cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
    }

    return cloned;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.some.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.some.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $some = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(3);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn
  /* , thisArg */
  ) {
    return $some(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.sort.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.sort.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var $sort = [].sort;
var test = [1, 2, 3];
$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null); // Old WebKit
}) || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.species.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.species.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")('Array');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.now.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.now.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Date', {
  now: function now() {
    return new Date().getTime();
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-iso-string.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-iso-string.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var toISOString = __webpack_require__(/*! ./_date-to-iso-string */ "./node_modules/core-js/modules/_date-to-iso-string.js"); // PhantomJS / old WebKit has a broken implementations


$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-json.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-json.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

$export($export.P + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
    toISOString: function toISOString() {
      return 1;
    }
  }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-primitive.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-primitive.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toPrimitive');

var proto = Date.prototype;
if (!(TO_PRIMITIVE in proto)) __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(proto, TO_PRIMITIVE, __webpack_require__(/*! ./_date-to-primitive */ "./node_modules/core-js/modules/_date-to-primitive.js"));

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-string.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-string.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;

if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this); // eslint-disable-next-line no-self-compare

    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.bind.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.bind.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Function', {
  bind: __webpack_require__(/*! ./_bind */ "./node_modules/core-js/modules/_bind.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.has-instance.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.has-instance.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");

var HAS_INSTANCE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('hasInstance');

var FunctionProto = Function.prototype; // 19.2.3.6 Function.prototype[@@hasInstance](V)

if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f(FunctionProto, HAS_INSTANCE, {
  value: function value(O) {
    if (typeof this != 'function' || !isObject(O)) return false;
    if (!isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

    while (O = getPrototypeOf(O)) {
      if (this.prototype === O) return true;
    }

    return false;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.name.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.name.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;

var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name'; // 19.2.4.2 name

NAME in FProto || __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && dP(FProto, NAME, {
  configurable: true,
  get: function get() {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.map.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/es6.map.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/modules/_collection-strong.js");

var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");

var MAP = 'Map'; // 23.1 Map Objects

module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(MAP, function (get) {
  return function Map() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.acosh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.acosh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var log1p = __webpack_require__(/*! ./_math-log1p */ "./node_modules/core-js/modules/_math-log1p.js");

var sqrt = Math.sqrt;
var $acosh = Math.acosh;
$export($export.S + $export.F * !($acosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
&& Math.floor($acosh(Number.MAX_VALUE)) == 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
&& $acosh(Infinity) == Infinity), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.asinh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.asinh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
} // Tor Browser bug: Math.asinh(0) -> -0


$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {
  asinh: asinh
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.atanh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.atanh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $atanh = Math.atanh; // Tor Browser bug: Math.atanh(-0) -> 0

$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.cbrt.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.cbrt.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var sign = __webpack_require__(/*! ./_math-sign */ "./node_modules/core-js/modules/_math-sign.js");

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.clz32.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.clz32.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.cosh.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.cosh.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var exp = Math.exp;
$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.expm1.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.expm1.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $expm1 = __webpack_require__(/*! ./_math-expm1 */ "./node_modules/core-js/modules/_math-expm1.js");

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {
  expm1: $expm1
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.fround.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.fround.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  fround: __webpack_require__(/*! ./_math-fround */ "./node_modules/core-js/modules/_math-fround.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.hypot.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.hypot.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var abs = Math.abs;
$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) {
    // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;

    while (i < aLen) {
      arg = abs(arguments[i++]);

      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }

    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.imul.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.imul.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $imul = Math.imul; // some WebKit versions fails with big numbers, some has wrong arity

$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log10.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.log10.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log1p.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.log1p.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  log1p: __webpack_require__(/*! ./_math-log1p */ "./node_modules/core-js/modules/_math-log1p.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log2.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.log2.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.sign.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.sign.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  sign: __webpack_require__(/*! ./_math-sign */ "./node_modules/core-js/modules/_math-sign.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.sinh.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.sinh.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var expm1 = __webpack_require__(/*! ./_math-expm1 */ "./node_modules/core-js/modules/_math-expm1.js");

var exp = Math.exp; // V8 near Chromium 38 has a problem with very small numbers

$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.tanh.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.tanh.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var expm1 = __webpack_require__(/*! ./_math-expm1 */ "./node_modules/core-js/modules/_math-expm1.js");

var exp = Math.exp;
$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.trunc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.trunc.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.constructor.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");

var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");

var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;

var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;

var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;

var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype; // Opera ~12 has broken Object#toString

var BROKEN_COF = cof(__webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js")(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype; // 7.1.3 ToNumber(argument)

var toNumber = function toNumber(argument) {
  var it = toPrimitive(argument, false);

  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;

    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66:
        case 98:
          radix = 2;
          maxCode = 49;
          break;
        // fast equal /^0b[01]+$/i

        case 79:
        case 111:
          radix = 8;
          maxCode = 55;
          break;
        // fast equal /^0o[0-7]+$/i

        default:
          return +it;
      }

      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i); // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols

        if (code < 48 || code > maxCode) return NaN;
      }

      return parseInt(digits, radix);
    }
  }

  return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number // check on 1..constructor(foo) case
    && (BROKEN_COF ? fails(function () {
      proto.valueOf.call(that);
    }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };

  for (var keys = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPN(Base) : ( // ES3:
  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES6 (in case, if modules with ES6 Number statics required before):
  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }

  $Number.prototype = proto;
  proto.constructor = $Number;

  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(global, NUMBER, $Number);
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.epsilon.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.epsilon.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  EPSILON: Math.pow(2, -52)
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-finite.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-finite.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var _isFinite = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-integer.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-integer.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  isInteger: __webpack_require__(/*! ./_is-integer */ "./node_modules/core-js/modules/_is-integer.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-nan.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-nan.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-safe-integer.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-safe-integer.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var isInteger = __webpack_require__(/*! ./_is-integer */ "./node_modules/core-js/modules/_is-integer.js");

var abs = Math.abs;
$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.max-safe-integer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.max-safe-integer.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  MAX_SAFE_INTEGER: 0x1fffffffffffff
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.min-safe-integer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.min-safe-integer.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  MIN_SAFE_INTEGER: -0x1fffffffffffff
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.parse-float.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.parse-float.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $parseFloat = __webpack_require__(/*! ./_parse-float */ "./node_modules/core-js/modules/_parse-float.js"); // 20.1.2.12 Number.parseFloat(string)


$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {
  parseFloat: $parseFloat
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.parse-int.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.parse-int.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $parseInt = __webpack_require__(/*! ./_parse-int */ "./node_modules/core-js/modules/_parse-int.js"); // 20.1.2.13 Number.parseInt(string, radix)


$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {
  parseInt: $parseInt
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.to-fixed.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.to-fixed.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

var aNumberValue = __webpack_require__(/*! ./_a-number-value */ "./node_modules/core-js/modules/_a-number-value.js");

var repeat = __webpack_require__(/*! ./_string-repeat */ "./node_modules/core-js/modules/_string-repeat.js");

var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function multiply(n, c) {
  var i = -1;
  var c2 = c;

  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};

var divide = function divide(n) {
  var i = 6;
  var c = 0;

  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = c % n * 1e7;
  }
};

var numToString = function numToString() {
  var i = 6;
  var s = '';

  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  }

  return s;
};

var pow = function pow(x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};

var log = function log(x) {
  var n = 0;
  var x2 = x;

  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }

  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  }

  return n;
};

$export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR); // eslint-disable-next-line no-self-compare

    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);

    if (x < 0) {
      s = '-';
      x = -x;
    }

    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;

      if (e > 0) {
        multiply(0, z);
        j = f;

        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }

        multiply(pow(10, j, 1), 0);
        j = e - 1;

        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }

        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }

    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    }

    return m;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.to-precision.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.to-precision.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var aNumberValue = __webpack_require__(/*! ./_a-number-value */ "./node_modules/core-js/modules/_a-number-value.js");

var $toPrecision = 1.0.toPrecision;
$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.assign.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.assign.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S + $export.F, 'Object', {
  assign: __webpack_require__(/*! ./_object-assign */ "./node_modules/core-js/modules/_object-assign.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.create.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.create.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js"); // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])


$export($export.S, 'Object', {
  create: __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.define-properties.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.define-properties.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js"); // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)


$export($export.S + $export.F * !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js"), 'Object', {
  defineProperties: __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/modules/_object-dps.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.define-property.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.define-property.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js"); // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)


$export($export.S + $export.F * !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js"), 'Object', {
  defineProperty: __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.freeze.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.freeze.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js":
/*!********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var $getOwnPropertyDescriptor = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-own-property-names.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.get-own-property-names.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('getOwnPropertyNames', function () {
  return __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/core-js/modules/_object-gopn-ext.js").f;
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-prototype-of.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.get-prototype-of.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var $getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-extensible.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is-extensible.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-frozen.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is-frozen.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-sealed.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is-sealed.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Object', {
  is: __webpack_require__(/*! ./_same-value */ "./node_modules/core-js/modules/_same-value.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.keys.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.prevent-extensions.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.prevent-extensions.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.seal.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.seal.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.set-prototype-of.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.set-prototype-of.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Object', {
  setPrototypeOf: __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 19.1.3.6 Object.prototype.toString()

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");

var test = {};
test[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag')] = 'z';

if (test + '' != '[object z]') {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.parse-float.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.parse-float.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $parseFloat = __webpack_require__(/*! ./_parse-float */ "./node_modules/core-js/modules/_parse-float.js"); // 18.2.4 parseFloat(string)


$export($export.G + $export.F * (parseFloat != $parseFloat), {
  parseFloat: $parseFloat
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.parse-int.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.parse-int.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $parseInt = __webpack_require__(/*! ./_parse-int */ "./node_modules/core-js/modules/_parse-int.js"); // 18.2.5 parseInt(string, radix)


$export($export.G + $export.F * (parseInt != $parseInt), {
  parseInt: $parseInt
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.promise.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.promise.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");

var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");

var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");

var task = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js").set;

var microtask = __webpack_require__(/*! ./_microtask */ "./node_modules/core-js/modules/_microtask.js")();

var newPromiseCapabilityModule = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/modules/_new-promise-capability.js");

var perform = __webpack_require__(/*! ./_perform */ "./node_modules/core-js/modules/_perform.js");

var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");

var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/core-js/modules/_promise-resolve.js");

var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';

var empty = function empty() {
  /* empty */
};

var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);

    var FakePromise = (promise.constructor = {})[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species')] = function (exec) {
      exec(empty, empty);
    }; // unhandled rejections tracking support, NodeJS Promise without it fails @@species test


    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // we can't detect it synchronously, so just check versions
    && v8.indexOf('6.6') !== 0 && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) {
    /* empty */
  }
}(); // helpers

var isThenable = function isThenable(it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};

var notify = function notify(promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;

    var run = function run(reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;

      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }

          if (handler === true) result = value;else {
            if (domain) domain.enter();
            result = handler(value); // may throw

            if (domain) {
              domain.exit();
              exited = true;
            }
          }

          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };

    while (chain.length > i) {
      run(chain[i++]);
    } // variable length - can't use forEach


    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};

var onUnhandled = function onUnhandled(promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;

    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({
            promise: promise,
            reason: value
          });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    }

    promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};

var isUnhandled = function isUnhandled(promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};

var onHandleUnhandled = function onHandleUnhandled(promise) {
  task.call(global, function () {
    var handler;

    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({
        promise: promise,
        reason: promise._v
      });
    }
  });
};

var $reject = function $reject(value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap

  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};

var $resolve = function $resolve(value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap

  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");

    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = {
          _w: promise,
          _d: false
        }; // wrap

        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({
      _w: promise,
      _d: false
    }, e); // wrap
  }
}; // constructor polyfill


if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);

    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  }; // eslint-disable-next-line no-unused-vars


  Internal = function Promise(executor) {
    this._c = []; // <- awaiting reactions

    this._a = undefined; // <- checked in isUnhandled reactions

    this._s = 0; // <- state

    this._d = false; // <- done

    this._v = undefined; // <- value

    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled

    this._n = false; // <- notify
  };

  Internal.prototype = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js")($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;

      this._c.push(reaction);

      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function _catch(onRejected) {
      return this.then(undefined, onRejected);
    }
  });

  OwnPromiseCapability = function OwnPromiseCapability() {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };

  newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
    return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {
  Promise: $Promise
});

__webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js")($Promise, PROMISE);

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")(PROMISE);

Wrapper = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js")[PROMISE]; // statics

$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js")(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.apply.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.apply.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var rApply = (__webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect || {}).apply;
var fApply = Function.apply; // MS Edge argumentsList argument is optional

$export($export.S + $export.F * !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  rApply(function () {
    /* empty */
  });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.construct.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.construct.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var bind = __webpack_require__(/*! ./_bind */ "./node_modules/core-js/modules/_bind.js");

var rConstruct = (__webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect || {}).construct; // MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it

var NEW_TARGET_BUG = fails(function () {
  function F() {
    /* empty */
  }

  return !(rConstruct(function () {
    /* empty */
  }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () {
    /* empty */
  });
});
$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args
  /* , newTarget */
  ) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);

    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0:
          return new Target();

        case 1:
          return new Target(args[0]);

        case 2:
          return new Target(args[0], args[1]);

        case 3:
          return new Target(args[0], args[1], args[2]);

        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      } // w/o altered newTarget, lot of arguments case


      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    } // with altered newTarget, not support built-in constructors


    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.define-property.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.define-property.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js"); // MS Edge has broken Reflect.defineProperty - throwing instead of returning false


$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, {
    value: 1
  }), 1, {
    value: 2
  });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);

    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.delete-property.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.delete-property.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.enumerate.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.enumerate.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 26.1.5 Reflect.enumerate(target)

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var Enumerate = function Enumerate(iterated) {
  this._t = anObject(iterated); // target

  this._i = 0; // next index

  var keys = this._k = []; // keys

  var key;

  for (key in iterated) {
    keys.push(key);
  }
};

__webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js")(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;

  do {
    if (that._i >= keys.length) return {
      value: undefined,
      done: true
    };
  } while (!((key = keys[that._i++]) in that._t));

  return {
    value: key,
    done: false
  };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get-prototype-of.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get-prototype-of.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var getProto = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");

var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

function get(target, propertyKey
/* , receiver */
) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {
  get: get
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.has.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.has.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.is-extensible.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.is-extensible.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var $isExtensible = Object.isExtensible;
$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.own-keys.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.own-keys.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Reflect', {
  ownKeys: __webpack_require__(/*! ./_own-keys */ "./node_modules/core-js/modules/_own-keys.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.prevent-extensions.js":
/*!************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.prevent-extensions.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var $preventExtensions = Object.preventExtensions;
$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);

    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.set-prototype-of.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.set-prototype-of.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var setProto = __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js");

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);

    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.set.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.set.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");

var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

function set(target, propertyKey, V
/* , receiver */
) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;

  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }

    ownDesc = createDesc(0);
  }

  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;

    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));

    return true;
  }

  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {
  set: set
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.constructor.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;

var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;

var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");

var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");

var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g; // "new" creates a new object, old webkit buggy here

var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && (!CORRECT_NEW || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  re2[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match')] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
  };

  var proxy = function proxy(key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function get() {
        return Base[key];
      },
      set: function set(it) {
        Base[key] = it;
      }
    });
  };

  for (var keys = gOPN(Base), i = 0; keys.length > i;) {
    proxy(keys[i++]);
  }

  proto.constructor = $RegExp;
  $RegExp.prototype = proto;

  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(global, 'RegExp', $RegExp);
}

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")('RegExp');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.exec.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.exec.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");

__webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js")({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.flags.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.flags.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && /./g.flags != 'g') __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.match.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.match.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");

var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js"); // @@match logic


__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [// `String.prototype.match` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.match
  function match(regexp) {
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, // `RegExp.prototype[@@match]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
  function (regexp) {
    var res = maybeCallNative($match, regexp, this);
    if (res.done) return res.value;
    var rx = anObject(regexp);
    var S = String(this);
    if (!rx.global) return regExpExec(rx, S);
    var fullUnicode = rx.unicode;
    rx.lastIndex = 0;
    var A = [];
    var n = 0;
    var result;

    while ((result = regExpExec(rx, S)) !== null) {
      var matchStr = String(result[0]);
      A[n] = matchStr;
      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      n++;
    }

    return n === 0 ? null : A;
  }];
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.replace.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.replace.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");

var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");

var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");

var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function maybeToString(it) {
  return it === undefined ? it : String(it);
}; // @@replace logic


__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [// `String.prototype.replace` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.replace
  function replace(searchValue, replaceValue) {
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
  }, // `RegExp.prototype[@@replace]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
  function (regexp, replaceValue) {
    var res = maybeCallNative($replace, regexp, this, replaceValue);
    if (res.done) return res.value;
    var rx = anObject(regexp);
    var S = String(this);
    var functionalReplace = typeof replaceValue === 'function';
    if (!functionalReplace) replaceValue = String(replaceValue);
    var global = rx.global;

    if (global) {
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
    }

    var results = [];

    while (true) {
      var result = regExpExec(rx, S);
      if (result === null) break;
      results.push(result);
      if (!global) break;
      var matchStr = String(result[0]);
      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
    }

    var accumulatedResult = '';
    var nextSourcePosition = 0;

    for (var i = 0; i < results.length; i++) {
      result = results[i];
      var matched = String(result[0]);
      var position = max(min(toInteger(result.index), S.length), 0);
      var captures = []; // NOTE: This is equivalent to
      //   captures = result.slice(1).map(maybeToString)
      // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
      // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
      // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

      for (var j = 1; j < result.length; j++) {
        captures.push(maybeToString(result[j]));
      }

      var namedCaptures = result.groups;

      if (functionalReplace) {
        var replacerArgs = [matched].concat(captures, position, S);
        if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
        var replacement = String(replaceValue.apply(undefined, replacerArgs));
      } else {
        replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
      }

      if (position >= nextSourcePosition) {
        accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
        nextSourcePosition = position + matched.length;
      }
    }

    return accumulatedResult + S.slice(nextSourcePosition);
  }]; // https://tc39.github.io/ecma262/#sec-getsubstitution

  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }

    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;

      switch (ch.charAt(0)) {
        case '$':
          return '$';

        case '&':
          return matched;

        case '`':
          return str.slice(0, position);

        case "'":
          return str.slice(tailPos);

        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;

        default:
          // \d\d?
          var n = +ch;
          if (n === 0) return match;

          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }

          capture = captures[n - 1];
      }

      return capture === undefined ? '' : capture;
    });
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.search.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.search.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var sameValue = __webpack_require__(/*! ./_same-value */ "./node_modules/core-js/modules/_same-value.js");

var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js"); // @@search logic


__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [// `String.prototype.search` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.search
  function search(regexp) {
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, // `RegExp.prototype[@@search]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
  function (regexp) {
    var res = maybeCallNative($search, regexp, this);
    if (res.done) return res.value;
    var rx = anObject(regexp);
    var S = String(this);
    var previousLastIndex = rx.lastIndex;
    if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
    var result = regExpExec(rx, S);
    if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
    return result === null ? -1 : result.index;
  }];
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.split.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.split.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");

var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var callRegExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");

var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError

var SUPPORTS_Y = !fails(function () {
  RegExp(MAX_UINT32, 'y');
}); // @@split logic

__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;

  if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function internalSplit(separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return []; // If `separator` is not a regex, use native split

      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0; // Make `global` and avoid `lastIndex` issues by working with a copy

      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;

      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];

        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }

        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }

      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));

      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    }; // Chakra, V8

  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function internalSplit(separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [// `String.prototype.split` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.split
  function split(separator, limit) {
    var O = defined(this);
    var splitter = separator == undefined ? undefined : separator[SPLIT];
    return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
  }, // `RegExp.prototype[@@split]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
  //
  // NOTE: This cannot be properly polyfilled in engines that don't support
  // the 'y' flag.
  function (regexp, limit) {
    var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
    if (res.done) return res.value;
    var rx = anObject(regexp);
    var S = String(this);
    var C = speciesConstructor(rx, RegExp);
    var unicodeMatching = rx.unicode;
    var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to
    // simulate the 'y' flag.

    var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
    var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
    if (lim === 0) return [];
    if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
    var p = 0;
    var q = 0;
    var A = [];

    while (q < S.length) {
      splitter.lastIndex = SUPPORTS_Y ? q : 0;
      var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
      var e;

      if (z === null || (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
        q = advanceStringIndex(S, q, unicodeMatching);
      } else {
        A.push(S.slice(p, q));
        if (A.length === lim) return A;

        for (var i = 1; i <= z.length - 1; i++) {
          A.push(z[i]);
          if (A.length === lim) return A;
        }

        q = p = e;
      }
    }

    A.push(S.slice(p));
    return A;
  }];
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./es6.regexp.flags */ "./node_modules/core-js/modules/es6.regexp.flags.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");

var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function define(fn) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(RegExp.prototype, TO_STRING, fn, true);
}; // 21.2.5.14 RegExp.prototype.toString()


if (__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return $toString.call({
    source: 'a',
    flags: 'b'
  }) != '/a/b';
})) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  }); // FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.set.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/es6.set.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/modules/_collection-strong.js");

var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");

var SET = 'Set'; // 23.2 Set Objects

module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(SET, function (get) {
  return function Set() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.anchor.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.anchor.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.2 String.prototype.anchor(name)

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.big.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.big.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.3 String.prototype.big()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.blink.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.blink.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.4 String.prototype.blink()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.bold.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.bold.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.5 String.prototype.bold()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.code-point-at.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.code-point-at.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(false);

$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.ends-with.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.ends-with.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");

var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];
$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString
  /* , endPosition = @length */
  ) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fixed.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.fixed.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.6 String.prototype.fixed()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fontcolor.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.fontcolor.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.7 String.prototype.fontcolor(color)

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fontsize.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.fontsize.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.8 String.prototype.fontsize(size)

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.from-code-point.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.from-code-point.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");

var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) {
    // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;

    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
    }

    return res.join('');
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.includes.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.includes.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");

var INCLUDES = 'includes';
$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(INCLUDES), 'String', {
  includes: function includes(searchString
  /* , position = 0 */
  ) {
    return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.italics.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.italics.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.9 String.prototype.italics()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.iterator.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.iterator.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true); // 21.1.3.27 String.prototype[@@iterator]()


__webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(String, 'String', function (iterated) {
  this._t = String(iterated); // target

  this._i = 0; // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return {
    value: undefined,
    done: true
  };
  point = $at(O, index);
  this._i += point.length;
  return {
    value: point,
    done: false
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.link.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.link.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.10 String.prototype.link(url)

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.raw.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.raw.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;

    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    }

    return res.join('');
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.repeat.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.repeat.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(/*! ./_string-repeat */ "./node_modules/core-js/modules/_string-repeat.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.small.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.small.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.11 String.prototype.small()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.starts-with.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.starts-with.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");

var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];
$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString
  /* , position = 0 */
  ) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.strike.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.strike.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.12 String.prototype.strike()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.sub.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.sub.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.13 String.prototype.sub()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.sup.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.sup.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // B.2.3.14 String.prototype.sup()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.trim.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.trim.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 21.1.3.25 String.prototype.trim()

__webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js")('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.symbol.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.symbol.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // ECMAScript 6 symbols shim

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

var META = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").KEY;

var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js");

var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");

var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");

var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");

var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");

var wksDefine = __webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js");

var enumKeys = __webpack_require__(/*! ./_enum-keys */ "./node_modules/core-js/modules/_enum-keys.js");

var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

var _create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");

var gOPNExt = __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/core-js/modules/_object-gopn-ext.js");

var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");

var $GOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");

var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;

var _stringify = $JSON && $JSON.stringify;

var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function get() {
      return dP(this, 'a', {
        value: 7
      }).a;
    }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function wrap(tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);

  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && _typeof($Symbol.iterator) == 'symbol' ? function (it) {
  return _typeof(it) == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);

  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, {
        enumerable: createDesc(0, false)
      });
    }

    return setSymbolDesc(it, key, D);
  }

  return dP(it, key, D);
};

var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;

  while (l > i) {
    $defineProperty(it, key = keys[i++], P[key]);
  }

  return it;
};

var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};

var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};

var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;

  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  }

  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;

  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  }

  return result;
}; // 19.4.1.1 Symbol([description])


if (!USE_NATIVE) {
  $Symbol = function _Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);

    var $set = function $set(value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };

    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
      configurable: true,
      set: $set
    });
    return wrap(tag);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });
  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js").f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js")) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {
  Symbol: $Symbol
});

for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
  wks(es6Symbols[j++]);
}

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
  wksDefine(wellKnownSymbols[k++]);
}

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function _for(key) {
    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

    for (var key in SymbolRegistry) {
      if (SymbolRegistry[key] === sym) return key;
    }
  },
  useSetter: function useSetter() {
    setter = true;
  },
  useSimple: function useSimple() {
    setter = false;
  }
});
$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
}); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443

var FAILS_ON_PRIMITIVES = $fails(function () {
  $GOPS.f(1);
});
$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
}); // 24.3.2 JSON.stringify(value [, replacer [, space]])

$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols

  return _stringify([S]) != '[null]' || _stringify({
    a: S
  }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;

    while (arguments.length > i) {
      args.push(arguments[i++]);
    }

    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

    if (!isArray(replacer)) replacer = function replacer(key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
}); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]

setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]

setToStringTag(global.JSON, 'JSON', true);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.array-buffer.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.array-buffer.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");

var buffer = __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js");

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var ArrayBuffer = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").ArrayBuffer;

var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");

var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';
$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {
  ArrayBuffer: $ArrayBuffer
});
$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});
$export($export.P + $export.U + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix

    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;

    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    }

    return result;
  }
});

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")(ARRAY_BUFFER);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.data-view.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.data-view.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.G + $export.W + $export.F * !__webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js").ABV, {
  DataView: __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js").DataView
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.float32-array.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.float32-array.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.float64-array.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.float64-array.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int16-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.int16-array.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int32-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.int32-array.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int8-array.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.int8-array.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint16-array.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint16-array.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint32-array.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint32-array.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint8-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint8-array.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.weak-map.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.weak-map.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var each = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(0);

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js");

var assign = __webpack_require__(/*! ./_object-assign */ "./node_modules/core-js/modules/_object-assign.js");

var weak = __webpack_require__(/*! ./_collection-weak */ "./node_modules/core-js/modules/_collection-weak.js");

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");

var NATIVE_WEAK_MAP = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");

var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function wrapper(get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
}; // 23.3 WeakMap Objects

var $WeakMap = module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(WEAK_MAP, wrapper, methods, weak, true, true); // IE11 WeakMap frozen keys fix


if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();

        var result = this._f[key](a, b);

        return key == 'set' ? this : result; // store all the rest on native weakmap
      }

      return method.call(this, a, b);
    });
  });
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.weak-set.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.weak-set.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var weak = __webpack_require__(/*! ./_collection-weak */ "./node_modules/core-js/modules/_collection-weak.js");

var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");

var WEAK_SET = 'WeakSet'; // 23.4 WeakSet Objects

__webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(WEAK_SET, function (get) {
  return function WeakSet() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.flat-map.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.array.flat-map.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var flattenIntoArray = __webpack_require__(/*! ./_flatten-into-array */ "./node_modules/core-js/modules/_flatten-into-array.js");

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");

var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

var arraySpeciesCreate = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn
  /* , thisArg */
  ) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('flatMap');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.includes.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.array.includes.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/tc39/Array.prototype.includes

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $includes = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(true);

$export($export.P, 'Array', {
  includes: function includes(el
  /* , fromIndex = 0 */
  ) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('includes');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.entries.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.entries.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $entries = __webpack_require__(/*! ./_object-to-array */ "./node_modules/core-js/modules/_object-to-array.js")(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var ownKeys = __webpack_require__(/*! ./_own-keys */ "./node_modules/core-js/modules/_own-keys.js");

var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");

var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/modules/_create-property.js");

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;

    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }

    return result;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.values.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.values.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $values = __webpack_require__(/*! ./_object-to-array */ "./node_modules/core-js/modules/_object-to-array.js")(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.promise.finally.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.promise.finally.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");

var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/core-js/modules/_promise-resolve.js");

$export($export.P + $export.R, 'Promise', {
  'finally': function _finally(onFinally) {
    var C = speciesConstructor(this, core.Promise || global.Promise);
    var isFunction = typeof onFinally == 'function';
    return this.then(isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () {
        return x;
      });
    } : onFinally, isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () {
        throw e;
      });
    } : onFinally);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.pad-end.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.pad-end.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/tc39/proposal-string-pad-start-end

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $pad = __webpack_require__(/*! ./_string-pad */ "./node_modules/core-js/modules/_string-pad.js");

var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js"); // https://github.com/zloirock/core-js/issues/280


var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength
  /* , fillString = ' ' */
  ) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.pad-start.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.pad-start.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/tc39/proposal-string-pad-start-end

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $pad = __webpack_require__(/*! ./_string-pad */ "./node_modules/core-js/modules/_string-pad.js");

var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js"); // https://github.com/zloirock/core-js/issues/280


var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength
  /* , fillString = ' ' */
  ) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.trim-left.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.trim-left.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

__webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js")('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.trim-right.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.trim-right.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

__webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js")('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.symbol.async-iterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.symbol.async-iterator.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js")('asyncIterator');

/***/ }),

/***/ "./node_modules/core-js/modules/web.dom.iterable.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom.iterable.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");

var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");

var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");

var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");

var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;
var DOMIterables = {
  CSSRuleList: true,
  // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true,
  // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true,
  // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;

  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) {
      if (!proto[key]) redefine(proto, key, $iterators[key], true);
    }
  }
}

/***/ }),

/***/ "./node_modules/core-js/modules/web.immediate.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/web.immediate.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var $task = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js");

$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

/***/ }),

/***/ "./node_modules/core-js/modules/web.timers.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/web.timers.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");

var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check

var wrap = function wrap(set) {
  return function (fn, time
  /* , ...args */
  ) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};

$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

/***/ }),

/***/ "./node_modules/core-js/web/index.js":
/*!*******************************************!*\
  !*** ./node_modules/core-js/web/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/web.timers */ "./node_modules/core-js/modules/web.timers.js");

__webpack_require__(/*! ../modules/web.immediate */ "./node_modules/core-js/modules/web.immediate.js");

__webpack_require__(/*! ../modules/web.dom.iterable */ "./node_modules/core-js/modules/web.dom.iterable.js");

module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/core-js/modules/_core.js");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/engine.io-client/lib/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./socket */ "./node_modules/engine.io-client/lib/socket.js");
/**
 * Exports parser
 *
 * @api public
 *
 */

module.exports.parser = __webpack_require__(/*! engine.io-parser */ "./node_modules/engine.io-parser/lib/browser.js");

/***/ }),

/***/ "./node_modules/engine.io-client/lib/socket.js":
/*!*****************************************************!*\
  !*** ./node_modules/engine.io-client/lib/socket.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Module dependencies.
 */
var transports = __webpack_require__(/*! ./transports/index */ "./node_modules/engine.io-client/lib/transports/index.js");

var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/component-emitter/index.js");

var debug = __webpack_require__(/*! debug */ "./node_modules/engine.io-client/node_modules/debug/src/browser.js")('engine.io-client:socket');

var index = __webpack_require__(/*! indexof */ "./node_modules/indexof/index.js");

var parser = __webpack_require__(/*! engine.io-parser */ "./node_modules/engine.io-parser/lib/browser.js");

var parseuri = __webpack_require__(/*! parseuri */ "./node_modules/parseuri/index.js");

var parseqs = __webpack_require__(/*! parseqs */ "./node_modules/parseqs/index.js");
/**
 * Module exports.
 */


module.exports = Socket;
/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket(uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);
  opts = opts || {};

  if (uri && 'object' === _typeof(uri)) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure : typeof location !== 'undefined' && 'https:' === location.protocol;

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname || (typeof location !== 'undefined' ? location.hostname : 'localhost');
  this.port = opts.port || (typeof location !== 'undefined' && location.port ? location.port : this.secure ? 443 : 80);
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.transportOptions = opts.transportOptions || {};
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;
  if (true === this.perMessageDeflate) this.perMessageDeflate = {};

  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  } // SSL options for Node.js client


  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode; // detect ReactNative environment

  this.isReactNative = typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative'; // other options for Node.js or ReactNative client

  if (typeof self === 'undefined' || this.isReactNative) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  } // set on handshake


  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null; // set on heartbeat

  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;
  this.open();
}

Socket.priorWebsocketSuccess = false;
/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);
/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = __webpack_require__(/*! ./transport */ "./node_modules/engine.io-client/lib/transport.js");
Socket.transports = __webpack_require__(/*! ./transports/index */ "./node_modules/engine.io-client/lib/transports/index.js");
Socket.parser = __webpack_require__(/*! engine.io-parser */ "./node_modules/engine.io-parser/lib/browser.js");
/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query); // append engine.io protocol identifier

  query.EIO = parser.protocol; // transport name

  query.transport = name; // per-transport options

  var options = this.transportOptions[name] || {}; // session id if we already have one

  if (this.id) query.sid = this.id;
  var transport = new transports[name]({
    query: query,
    socket: this,
    agent: options.agent || this.agent,
    hostname: options.hostname || this.hostname,
    port: options.port || this.port,
    secure: options.secure || this.secure,
    path: options.path || this.path,
    forceJSONP: options.forceJSONP || this.forceJSONP,
    jsonp: options.jsonp || this.jsonp,
    forceBase64: options.forceBase64 || this.forceBase64,
    enablesXDR: options.enablesXDR || this.enablesXDR,
    timestampRequests: options.timestampRequests || this.timestampRequests,
    timestampParam: options.timestampParam || this.timestampParam,
    policyPort: options.policyPort || this.policyPort,
    pfx: options.pfx || this.pfx,
    key: options.key || this.key,
    passphrase: options.passphrase || this.passphrase,
    cert: options.cert || this.cert,
    ca: options.ca || this.ca,
    ciphers: options.ciphers || this.ciphers,
    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
    extraHeaders: options.extraHeaders || this.extraHeaders,
    forceNode: options.forceNode || this.forceNode,
    localAddress: options.localAddress || this.localAddress,
    requestTimeout: options.requestTimeout || this.requestTimeout,
    protocols: options.protocols || void 0,
    isReactNative: this.isReactNative
  });
  return transport;
};

function clone(obj) {
  var o = {};

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }

  return o;
}
/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */


Socket.prototype.open = function () {
  var transport;

  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }

  this.readyState = 'opening'; // Retry with the next transport if the transport is disabled (jsonp: false)

  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};
/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */


Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  } // set up transport


  this.transport = transport; // set up transport listeners

  transport.on('drain', function () {
    self.onDrain();
  }).on('packet', function (packet) {
    self.onPacket(packet);
  }).on('error', function (e) {
    self.onError(e);
  }).on('close', function () {
    self.onClose('transport close');
  });
};
/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */


Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, {
    probe: 1
  });
  var failed = false;
  var self = this;
  Socket.priorWebsocketSuccess = false;

  function onTransportOpen() {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }

    if (failed) return;
    debug('probe transport "%s" opened', name);
    transport.send([{
      type: 'ping',
      data: 'probe'
    }]);
    transport.once('packet', function (msg) {
      if (failed) return;

      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;
        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');
          cleanup();
          self.setTransport(transport);
          transport.send([{
            type: 'upgrade'
          }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport() {
    if (failed) return; // Any callback called by transport should be ignored since now

    failed = true;
    cleanup();
    transport.close();
    transport = null;
  } // Handle any error that happens while probing


  function onerror(err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;
    freezeTransport();
    debug('probe transport "%s" failed because of error: %s', name, err);
    self.emit('upgradeError', error);
  }

  function onTransportClose() {
    onerror('transport closed');
  } // When the socket is closed while we're probing


  function onclose() {
    onerror('socket closed');
  } // When the socket is upgraded while we're probing


  function onupgrade(to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  } // Remove all listeners on the transport and on self


  function cleanup() {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);
  this.once('close', onclose);
  this.once('upgrading', onupgrade);
  transport.open();
};
/**
 * Called when connection is deemed open.
 *
 * @api public
 */


Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush(); // we check for `readyState` in case an `open`
  // listener already closed the socket

  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');

    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};
/**
 * Handles a packet.
 *
 * @api private
 */


Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
    this.emit('packet', packet); // Socket is live - any packet counts

    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(JSON.parse(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};
/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */


Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen(); // In case open handler closes socket

  if ('closed' === this.readyState) return;
  this.setPing(); // Prolong liveness of socket on heartbeat

  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};
/**
 * Resets ping timeout.
 *
 * @api private
 */


Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || self.pingInterval + self.pingTimeout);
};
/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */


Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};
/**
* Sends a ping packet.
*
* @api private
*/


Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};
/**
 * Called on `drain` event
 *
 * @api private
 */


Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`

  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};
/**
 * Flush write buffers.
 *
 * @api private
 */


Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`

    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};
/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */


Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};
/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */


Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;
  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};
/**
 * Closes the connection.
 *
 * @api private
 */


Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';
    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close() {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose() {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade() {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};
/**
 * Called upon transport error
 *
 * @api private
 */


Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};
/**
 * Called upon transport close.
 *
 * @api private
 */


Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this; // clear timers

    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport

    this.transport.removeAllListeners('close'); // ensure transport won't stay open

    this.transport.close(); // ignore further transport communication

    this.transport.removeAllListeners(); // set ready state

    this.readyState = 'closed'; // clear session id

    this.id = null; // emit close event

    this.emit('close', reason, desc); // clean buffers after, so users can still
    // grab the buffers on `close` event

    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};
/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */


Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];

  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }

  return filteredUpgrades;
};

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transport.js":
/*!********************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transport.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */
var parser = __webpack_require__(/*! engine.io-parser */ "./node_modules/engine.io-parser/lib/browser.js");

var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/component-emitter/index.js");
/**
 * Module exports.
 */


module.exports = Transport;
/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport(opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR; // SSL options for Node.js client

  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode; // results of ReactNative environment detection

  this.isReactNative = opts.isReactNative; // other options for Node.js client

  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}
/**
 * Mix in `Emitter`.
 */


Emitter(Transport.prototype);
/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};
/**
 * Opens the transport.
 *
 * @api public
 */


Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};
/**
 * Closes the transport.
 *
 * @api private
 */


Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};
/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */


Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};
/**
 * Called upon open
 *
 * @api private
 */


Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};
/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */


Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};
/**
 * Called with a decoded packet.
 */


Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};
/**
 * Called upon close.
 *
 * @api private
 */


Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies
 */
var XMLHttpRequest = __webpack_require__(/*! xmlhttprequest-ssl */ "./node_modules/engine.io-client/lib/xmlhttprequest.js");

var XHR = __webpack_require__(/*! ./polling-xhr */ "./node_modules/engine.io-client/lib/transports/polling-xhr.js");

var JSONP = __webpack_require__(/*! ./polling-jsonp */ "./node_modules/engine.io-client/lib/transports/polling-jsonp.js");

var websocket = __webpack_require__(/*! ./websocket */ "./node_modules/engine.io-client/lib/transports/websocket.js");
/**
 * Export transports.
 */


exports.polling = polling;
exports.websocket = websocket;
/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling(opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port; // some user agents have empty `location.port`

    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/polling-jsonp.js":
/*!***********************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/polling-jsonp.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module requirements.
 */
var Polling = __webpack_require__(/*! ./polling */ "./node_modules/engine.io-client/lib/transports/polling.js");

var inherit = __webpack_require__(/*! component-inherit */ "./node_modules/component-inherit/index.js");
/**
 * Module exports.
 */


module.exports = JSONPPolling;
/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;
/**
 * Global JSONP callbacks.
 */

var callbacks;
/**
 * Noop.
 */

function empty() {}
/**
 * Until https://github.com/tc39/proposal-global is shipped.
 */


function glob() {
  return typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};
}
/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */


function JSONPPolling(opts) {
  Polling.call(this, opts);
  this.query = this.query || {}; // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution

  if (!callbacks) {
    // we need to consider multiple engines in the same page
    var global = glob();
    callbacks = global.___eio = global.___eio || [];
  } // callback identifier


  this.index = callbacks.length; // add callback to jsonp global

  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  }); // append to query string

  this.query.j = this.index; // prevent spurious errors from being emitted when the window is unloaded

  if (typeof addEventListener === 'function') {
    addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}
/**
 * Inherits from Polling.
 */


inherit(JSONPPolling, Polling);
/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;
/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};
/**
 * Starts a poll cycle.
 *
 * @api private
 */


JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();

  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];

  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }

  this.script = script;
  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};
/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */


JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;
    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);
    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete() {
    initIframe();
    fn();
  }

  function initIframe() {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;
    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe(); // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side

  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/polling-xhr.js":
/*!*********************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/polling-xhr.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* global attachEvent */

/**
 * Module requirements.
 */
var XMLHttpRequest = __webpack_require__(/*! xmlhttprequest-ssl */ "./node_modules/engine.io-client/lib/xmlhttprequest.js");

var Polling = __webpack_require__(/*! ./polling */ "./node_modules/engine.io-client/lib/transports/polling.js");

var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/component-emitter/index.js");

var inherit = __webpack_require__(/*! component-inherit */ "./node_modules/component-inherit/index.js");

var debug = __webpack_require__(/*! debug */ "./node_modules/engine.io-client/node_modules/debug/src/browser.js")('engine.io-client:polling-xhr');
/**
 * Module exports.
 */


module.exports = XHR;
module.exports.Request = Request;
/**
 * Empty function
 */

function empty() {}
/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */


function XHR(opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;
  this.extraHeaders = opts.extraHeaders;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port; // some user agents have empty `location.port`

    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = typeof location !== 'undefined' && opts.hostname !== location.hostname || port !== opts.port;
    this.xs = opts.secure !== isSSL;
  }
}
/**
 * Inherits from Polling.
 */


inherit(XHR, Polling);
/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;
/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR; // SSL options for Node.js client

  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout; // other options for Node.js client

  opts.extraHeaders = this.extraHeaders;
  return new Request(opts);
};
/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */


XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({
    method: 'POST',
    data: data,
    isBinary: isBinary
  });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};
/**
 * Starts a poll cycle.
 *
 * @api private
 */


XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};
/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */


function Request(opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.requestTimeout = opts.requestTimeout; // SSL options for Node.js client

  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized; // other options for Node.js client

  this.extraHeaders = opts.extraHeaders;
  this.create();
}
/**
 * Mix in `Emitter`.
 */


Emitter(Request.prototype);
/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = {
    agent: this.agent,
    xdomain: this.xd,
    xscheme: this.xs,
    enablesXDR: this.enablesXDR
  }; // SSL options for Node.js client

  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);

    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);

        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {} // ie6 check


    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };

      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 2) {
          try {
            var contentType = xhr.getResponseHeader('Content-Type');

            if (self.supportsBinary && contentType === 'application/octet-stream') {
              xhr.responseType = 'arraybuffer';
            }
          } catch (e) {}
        }

        if (4 !== xhr.readyState) return;

        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (typeof document !== 'undefined') {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};
/**
 * Called upon successful response.
 *
 * @api private
 */


Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};
/**
 * Called if we have data.
 *
 * @api private
 */


Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};
/**
 * Called upon error.
 *
 * @api private
 */


Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};
/**
 * Cleans up house.
 *
 * @api private
 */


Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  } // xmlhttprequest


  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (typeof document !== 'undefined') {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};
/**
 * Called upon load.
 *
 * @api private
 */


Request.prototype.onLoad = function () {
  var data;

  try {
    var contentType;

    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}

    if (contentType === 'application/octet-stream') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      data = this.xhr.responseText;
    }
  } catch (e) {
    this.onError(e);
  }

  if (null != data) {
    this.onData(data);
  }
};
/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */


Request.prototype.hasXDR = function () {
  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
};
/**
 * Aborts the request.
 *
 * @api public
 */


Request.prototype.abort = function () {
  this.cleanup();
};
/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */


Request.requestsCount = 0;
Request.requests = {};

if (typeof document !== 'undefined') {
  if (typeof attachEvent === 'function') {
    attachEvent('onunload', unloadHandler);
  } else if (typeof addEventListener === 'function') {
    var terminationEvent = 'onpagehide' in self ? 'pagehide' : 'unload';
    addEventListener(terminationEvent, unloadHandler, false);
  }
}

function unloadHandler() {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/polling.js":
/*!*****************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/polling.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */
var Transport = __webpack_require__(/*! ../transport */ "./node_modules/engine.io-client/lib/transport.js");

var parseqs = __webpack_require__(/*! parseqs */ "./node_modules/parseqs/index.js");

var parser = __webpack_require__(/*! engine.io-parser */ "./node_modules/engine.io-parser/lib/browser.js");

var inherit = __webpack_require__(/*! component-inherit */ "./node_modules/component-inherit/index.js");

var yeast = __webpack_require__(/*! yeast */ "./node_modules/yeast/index.js");

var debug = __webpack_require__(/*! debug */ "./node_modules/engine.io-client/node_modules/debug/src/browser.js")('engine.io-client:polling');
/**
 * Module exports.
 */


module.exports = Polling;
/**
 * Is XHR2 supported?
 */

var hasXHR2 = function () {
  var XMLHttpRequest = __webpack_require__(/*! xmlhttprequest-ssl */ "./node_modules/engine.io-client/lib/xmlhttprequest.js");

  var xhr = new XMLHttpRequest({
    xdomain: false
  });
  return null != xhr.responseType;
}();
/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */


function Polling(opts) {
  var forceBase64 = opts && opts.forceBase64;

  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }

  Transport.call(this, opts);
}
/**
 * Inherits from Transport.
 */


inherit(Polling, Transport);
/**
 * Transport name.
 */

Polling.prototype.name = 'polling';
/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};
/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */


Polling.prototype.pause = function (onPause) {
  var self = this;
  this.readyState = 'pausing';

  function pause() {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};
/**
 * Starts polling cycle.
 *
 * @api public
 */


Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};
/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */


Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);

  var callback = function callback(packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    } // if its a close packet, we close the ongoing requests


    if ('close' === packet.type) {
      self.onClose();
      return false;
    } // otherwise bypass onData and handle the message


    self.onPacket(packet);
  }; // decode payload


  parser.decodePayload(data, this.socket.binaryType, callback); // if an event did not trigger closing

  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};
/**
 * For polling, send a close packet.
 *
 * @api private
 */


Polling.prototype.doClose = function () {
  var self = this;

  function close() {
    debug('writing close packet');
    self.write([{
      type: 'close'
    }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};
/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */


Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  var callbackfn = function callbackfn() {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};
/**
 * Generates uri for connection.
 *
 * @api private
 */


Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = ''; // cache busting is forced

  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query); // avoid port if default for schema

  if (this.port && ('https' === schema && Number(this.port) !== 443 || 'http' === schema && Number(this.port) !== 80)) {
    port = ':' + this.port;
  } // prepend ? to query


  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/websocket.js":
/*!*******************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/websocket.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Module dependencies.
 */
var Transport = __webpack_require__(/*! ../transport */ "./node_modules/engine.io-client/lib/transport.js");

var parser = __webpack_require__(/*! engine.io-parser */ "./node_modules/engine.io-parser/lib/browser.js");

var parseqs = __webpack_require__(/*! parseqs */ "./node_modules/parseqs/index.js");

var inherit = __webpack_require__(/*! component-inherit */ "./node_modules/component-inherit/index.js");

var yeast = __webpack_require__(/*! yeast */ "./node_modules/yeast/index.js");

var debug = __webpack_require__(/*! debug */ "./node_modules/engine.io-client/node_modules/debug/src/browser.js")('engine.io-client:websocket');

var BrowserWebSocket, NodeWebSocket;

if (typeof WebSocket !== 'undefined') {
  BrowserWebSocket = WebSocket;
} else if (typeof self !== 'undefined') {
  BrowserWebSocket = self.WebSocket || self.MozWebSocket;
} else {
  try {
    NodeWebSocket = __webpack_require__(/*! ws */ 1);
  } catch (e) {}
}
/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */


var WebSocketImpl = BrowserWebSocket || NodeWebSocket;
/**
 * Module exports.
 */

module.exports = WS;
/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS(opts) {
  var forceBase64 = opts && opts.forceBase64;

  if (forceBase64) {
    this.supportsBinary = false;
  }

  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  this.protocols = opts.protocols;

  if (!this.usingBrowserWebSocket) {
    WebSocketImpl = NodeWebSocket;
  }

  Transport.call(this, opts);
}
/**
 * Inherits from Transport.
 */


inherit(WS, Transport);
/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';
/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;
/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = this.protocols;
  var opts = {
    agent: this.agent,
    perMessageDeflate: this.perMessageDeflate
  }; // SSL options for Node.js client

  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }

  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws = this.usingBrowserWebSocket && !this.isReactNative ? protocols ? new WebSocketImpl(uri, protocols) : new WebSocketImpl(uri) : new WebSocketImpl(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};
/**
 * Adds event listeners to the socket
 *
 * @api private
 */


WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };

  this.ws.onclose = function () {
    self.onClose();
  };

  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };

  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};
/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */


WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false; // encodePacket efficient as it uses WS framing
  // no need for encodePayload

  var total = packets.length;

  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};

          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;

            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        } // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error


        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done() {
    self.emit('flush'); // fake drain
    // defer to next tick to allow Socket to clear writeBuffer

    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};
/**
 * Called upon close
 *
 * @api private
 */


WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};
/**
 * Closes socket.
 *
 * @api private
 */


WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};
/**
 * Generates uri for connection.
 *
 * @api private
 */


WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = ''; // avoid port if default for schema

  if (this.port && ('wss' === schema && Number(this.port) !== 443 || 'ws' === schema && Number(this.port) !== 80)) {
    port = ':' + this.port;
  } // append timestamp to URI


  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  } // communicate binary support capabilities


  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query); // prepend ? to query

  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};
/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */


WS.prototype.check = function () {
  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/engine.io-client/lib/xmlhttprequest.js":
/*!*************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/xmlhttprequest.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// browser shim for xmlhttprequest module
var hasCORS = __webpack_require__(/*! has-cors */ "./node_modules/has-cors/index.js");

module.exports = function (opts) {
  var xdomain = opts.xdomain; // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx

  var xscheme = opts.xscheme; // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217

  var enablesXDR = opts.enablesXDR; // XMLHttpRequest can be disabled on IE

  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) {} // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example


  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) {}

  if (!xdomain) {
    try {
      return new self[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) {}
  }
};

/***/ }),

/***/ "./node_modules/engine.io-client/node_modules/debug/src/browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/engine.io-client/node_modules/debug/src/browser.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */
exports = module.exports = __webpack_require__(/*! ./debug */ "./node_modules/engine.io-client/node_modules/debug/src/debug.js");
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */


exports.formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  var useColors = this.useColors;
  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
  if (!useColors) return;
  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if ('%%' === match) return;
    index++;

    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === (typeof console === "undefined" ? "undefined" : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch (e) {}
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.debug;
  } catch (e) {} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */


exports.enable(load());
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/engine.io-client/node_modules/debug/src/debug.js":
/*!***********************************************************************!*\
  !*** ./node_modules/engine.io-client/node_modules/debug/src/debug.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */
exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(/*! ms */ "./node_modules/ms/index.js");
/**
 * Active `debug` instances.
 */

exports.instances = [];
/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];
/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};
/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0,
      i;

  for (i in namespace) {
    hash = (hash << 5) - hash + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}
/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */


function createDebug(namespace) {
  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;
    var self = debug; // set `diff` timestamp

    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr; // turn the `arguments` into a proper Array

    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    } // apply any `formatters` transformations


    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];

      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val); // now we need to remove `args[index]` since it's inlined in the `format`

        args.splice(index, 1);
        index--;
      }

      return match;
    }); // apply env-specific formatting (colors, etc.)

    exports.formatArgs.call(self, args);
    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy; // env-specific initialization logic for debug instances

  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);
  return debug;
}

function destroy() {
  var index = exports.instances.indexOf(this);

  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}
/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */


function enable(namespaces) {
  exports.save(namespaces);
  exports.names = [];
  exports.skips = [];
  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings

    namespaces = split[i].replace(/\*/g, '.*?');

    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}
/**
 * Disable debug output.
 *
 * @api public
 */


function disable() {
  exports.enable('');
}
/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */


function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }

  var i, len;

  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }

  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }

  return false;
}
/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */


function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

/***/ }),

/***/ "./node_modules/engine.io-parser/lib/browser.js":
/*!******************************************************!*\
  !*** ./node_modules/engine.io-parser/lib/browser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */
var keys = __webpack_require__(/*! ./keys */ "./node_modules/engine.io-parser/lib/keys.js");

var hasBinary = __webpack_require__(/*! has-binary2 */ "./node_modules/has-binary2/index.js");

var sliceBuffer = __webpack_require__(/*! arraybuffer.slice */ "./node_modules/arraybuffer.slice/index.js");

var after = __webpack_require__(/*! after */ "./node_modules/after/index.js");

var utf8 = __webpack_require__(/*! ./utf8 */ "./node_modules/engine.io-parser/lib/utf8.js");

var base64encoder;

if (typeof ArrayBuffer !== 'undefined') {
  base64encoder = __webpack_require__(/*! base64-arraybuffer */ "./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js");
}
/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */


var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);
/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */

var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);
/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */

var dontSendBlobs = isAndroid || isPhantomJS;
/**
 * Current protocol version.
 */

exports.protocol = 3;
/**
 * Packet types.
 */

var packets = exports.packets = {
  open: 0 // non-ws
  ,
  close: 1 // non-ws
  ,
  ping: 2,
  pong: 3,
  message: 4,
  upgrade: 5,
  noop: 6
};
var packetslist = keys(packets);
/**
 * Premade error packet.
 */

var err = {
  type: 'error',
  data: 'parser error'
};
/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = __webpack_require__(/*! blob */ "./node_modules/blob/index.js");
/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */


exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if (typeof utf8encode === 'function') {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;

  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  } // might be an object with { base64: true, data: dataAsBase64String }


  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  } // Sending data as a utf-8 string


  var encoded = packets[packet.type]; // data fragment is optional

  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data), {
      strict: false
    }) : String(packet.data);
  }

  return callback('' + encoded);
};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}
/**
 * Encode packet helpers for binary types
 */


function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);
  resultBuffer[0] = packets[packet.type];

  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i + 1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();

  fr.onload = function () {
    exports.encodePacket({
      type: packet.type,
      data: fr.result
    }, supportsBinary, true, callback);
  };

  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);
  return callback(blob);
}
/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */


exports.encodeBase64Packet = function (packet, callback) {
  var message = 'b' + exports.packets[packet.type];

  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {
    var fr = new FileReader();

    fr.onload = function () {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };

    return fr.readAsDataURL(packet.data);
  }

  var b64data;

  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);

    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }

    b64data = String.fromCharCode.apply(null, basic);
  }

  message += btoa(b64data);
  return callback(message);
};
/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */


exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  } // String data


  if (typeof data === 'string') {
    if (data.charAt(0) === 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);

      if (data === false) {
        return err;
      }
    }

    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return {
        type: packetslist[type],
        data: data.substring(1)
      };
    } else {
      return {
        type: packetslist[type]
      };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);

  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }

  return {
    type: packetslist[type],
    data: rest
  };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data, {
      strict: false
    });
  } catch (e) {
    return false;
  }

  return data;
}
/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */


exports.decodeBase64Packet = function (msg, binaryType) {
  var type = packetslist[msg.charAt(0)];

  if (!base64encoder) {
    return {
      type: type,
      data: {
        base64: true,
        data: msg.substr(1)
      }
    };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return {
    type: type,
    data: data
  };
};
/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */


exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function (message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function (err, results) {
    return callback(results.join(''));
  });
};
/**
 * Async array map using after
 */


function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function eachWithIndex(i, el, cb) {
    each(el, function (error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}
/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */


exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data !== 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;

  if (data === '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = '',
      n,
      msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (chr !== ':') {
      length += chr;
      continue;
    }

    if (length === '' || length != (n = Number(length))) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    msg = data.substr(i + 1, n);

    if (length != msg.length) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    if (msg.length) {
      packet = exports.decodePacket(msg, binaryType, false);

      if (err.type === packet.type && err.data === packet.data) {
        // parser error in individual packet - ignoring payload
        return callback(err, 0, 1);
      }

      var ret = callback(packet, i + n, l);
      if (false === ret) return;
    } // advance cursor


    i += n;
    length = '';
  }

  if (length !== '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }
};
/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */


exports.encodePayloadAsArrayBuffer = function (packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function (data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function (err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function (acc, p) {
      var len;

      if (typeof p === 'string') {
        len = p.length;
      } else {
        len = p.byteLength;
      }

      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);
    var resultArray = new Uint8Array(totalLength);
    var bufferIndex = 0;
    encodedPackets.forEach(function (p) {
      var isString = typeof p === 'string';
      var ab = p;

      if (isString) {
        var view = new Uint8Array(p.length);

        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }

        ab = view.buffer;
      }

      if (isString) {
        // not true binary
        resultArray[bufferIndex++] = 0;
      } else {
        // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();

      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }

      resultArray[bufferIndex++] = 255;
      var view = new Uint8Array(ab);

      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });
    return callback(resultArray.buffer);
  });
};
/**
 * Encode as Blob
 */


exports.encodePayloadAsBlob = function (packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function (encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;

      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);

        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }

        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;
      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);

      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }

      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function (err, results) {
    return callback(new Blob(results));
  });
};
/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */


exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1;; i++) {
      if (tailArray[i] === 255) break; // 310 = char length of Number.MAX_VALUE

      if (msgLength.length > 310) {
        return callback(err, 0, 1);
      }

      msgLength += tailArray[i];
    }

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);
    var msg = sliceBuffer(bufferTail, 0, msgLength);

    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';

        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function (buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

/***/ }),

/***/ "./node_modules/engine.io-parser/lib/keys.js":
/*!***************************************************!*\
  !*** ./node_modules/engine.io-parser/lib/keys.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */
module.exports = Object.keys || function keys(obj) {
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }

  return arr;
};

/***/ }),

/***/ "./node_modules/engine.io-parser/lib/utf8.js":
/*!***************************************************!*\
  !*** ./node_modules/engine.io-parser/lib/utf8.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! https://mths.be/utf8js v2.1.2 by @mathias */
var stringFromCharCode = String.fromCharCode; // Taken from https://mths.be/punycode

function ucs2decode(string) {
  var output = [];
  var counter = 0;
  var length = string.length;
  var value;
  var extra;

  while (counter < length) {
    value = string.charCodeAt(counter++);

    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // high surrogate, and there is a next character
      extra = string.charCodeAt(counter++);

      if ((extra & 0xFC00) == 0xDC00) {
        // low surrogate
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // unmatched surrogate; only append this code unit, in case the next
        // code unit is the high surrogate of a surrogate pair
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }

  return output;
} // Taken from https://mths.be/punycode


function ucs2encode(array) {
  var length = array.length;
  var index = -1;
  var value;
  var output = '';

  while (++index < length) {
    value = array[index];

    if (value > 0xFFFF) {
      value -= 0x10000;
      output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
      value = 0xDC00 | value & 0x3FF;
    }

    output += stringFromCharCode(value);
  }

  return output;
}

function checkScalarValue(codePoint, strict) {
  if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
    if (strict) {
      throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');
    }

    return false;
  }

  return true;
}
/*--------------------------------------------------------------------------*/


function createByte(codePoint, shift) {
  return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
}

function encodeCodePoint(codePoint, strict) {
  if ((codePoint & 0xFFFFFF80) == 0) {
    // 1-byte sequence
    return stringFromCharCode(codePoint);
  }

  var symbol = '';

  if ((codePoint & 0xFFFFF800) == 0) {
    // 2-byte sequence
    symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
  } else if ((codePoint & 0xFFFF0000) == 0) {
    // 3-byte sequence
    if (!checkScalarValue(codePoint, strict)) {
      codePoint = 0xFFFD;
    }

    symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
    symbol += createByte(codePoint, 6);
  } else if ((codePoint & 0xFFE00000) == 0) {
    // 4-byte sequence
    symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
    symbol += createByte(codePoint, 12);
    symbol += createByte(codePoint, 6);
  }

  symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
  return symbol;
}

function utf8encode(string, opts) {
  opts = opts || {};
  var strict = false !== opts.strict;
  var codePoints = ucs2decode(string);
  var length = codePoints.length;
  var index = -1;
  var codePoint;
  var byteString = '';

  while (++index < length) {
    codePoint = codePoints[index];
    byteString += encodeCodePoint(codePoint, strict);
  }

  return byteString;
}
/*--------------------------------------------------------------------------*/


function readContinuationByte() {
  if (byteIndex >= byteCount) {
    throw Error('Invalid byte index');
  }

  var continuationByte = byteArray[byteIndex] & 0xFF;
  byteIndex++;

  if ((continuationByte & 0xC0) == 0x80) {
    return continuationByte & 0x3F;
  } // If we end up here, it’s not a continuation byte


  throw Error('Invalid continuation byte');
}

function decodeSymbol(strict) {
  var byte1;
  var byte2;
  var byte3;
  var byte4;
  var codePoint;

  if (byteIndex > byteCount) {
    throw Error('Invalid byte index');
  }

  if (byteIndex == byteCount) {
    return false;
  } // Read first byte


  byte1 = byteArray[byteIndex] & 0xFF;
  byteIndex++; // 1-byte sequence (no continuation bytes)

  if ((byte1 & 0x80) == 0) {
    return byte1;
  } // 2-byte sequence


  if ((byte1 & 0xE0) == 0xC0) {
    byte2 = readContinuationByte();
    codePoint = (byte1 & 0x1F) << 6 | byte2;

    if (codePoint >= 0x80) {
      return codePoint;
    } else {
      throw Error('Invalid continuation byte');
    }
  } // 3-byte sequence (may include unpaired surrogates)


  if ((byte1 & 0xF0) == 0xE0) {
    byte2 = readContinuationByte();
    byte3 = readContinuationByte();
    codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;

    if (codePoint >= 0x0800) {
      return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
    } else {
      throw Error('Invalid continuation byte');
    }
  } // 4-byte sequence


  if ((byte1 & 0xF8) == 0xF0) {
    byte2 = readContinuationByte();
    byte3 = readContinuationByte();
    byte4 = readContinuationByte();
    codePoint = (byte1 & 0x07) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;

    if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
      return codePoint;
    }
  }

  throw Error('Invalid UTF-8 detected');
}

var byteArray;
var byteCount;
var byteIndex;

function utf8decode(byteString, opts) {
  opts = opts || {};
  var strict = false !== opts.strict;
  byteArray = ucs2decode(byteString);
  byteCount = byteArray.length;
  byteIndex = 0;
  var codePoints = [];
  var tmp;

  while ((tmp = decodeSymbol(strict)) !== false) {
    codePoints.push(tmp);
  }

  return ucs2encode(codePoints);
}

module.exports = {
  version: '2.1.2',
  encode: utf8encode,
  decode: utf8decode
};

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars.runtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars.runtime.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true; // istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    'default': obj
  };
} // istanbul ignore next


function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }

    newObj['default'] = obj;
    return newObj;
  }
}

var _handlebarsBase = __webpack_require__(/*! ./handlebars/base */ "./node_modules/handlebars/dist/cjs/handlebars/base.js");

var base = _interopRequireWildcard(_handlebarsBase); // Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)


var _handlebarsSafeString = __webpack_require__(/*! ./handlebars/safe-string */ "./node_modules/handlebars/dist/cjs/handlebars/safe-string.js");

var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

var _handlebarsException = __webpack_require__(/*! ./handlebars/exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

var _handlebarsUtils = __webpack_require__(/*! ./handlebars/utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var Utils = _interopRequireWildcard(_handlebarsUtils);

var _handlebarsRuntime = __webpack_require__(/*! ./handlebars/runtime */ "./node_modules/handlebars/dist/cjs/handlebars/runtime.js");

var runtime = _interopRequireWildcard(_handlebarsRuntime);

var _handlebarsNoConflict = __webpack_require__(/*! ./handlebars/no-conflict */ "./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js");

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict); // For compatibility and usage outside of module systems, make the Handlebars object a namespace


function create() {
  var hb = new base.HandlebarsEnvironment();
  Utils.extend(hb, base);
  hb.SafeString = _handlebarsSafeString2['default'];
  hb.Exception = _handlebarsException2['default'];
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;
  hb.VM = runtime;

  hb.template = function (spec) {
    return runtime.template(spec, hb);
  };

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst['default'] = inst;
exports['default'] = inst;
module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/base.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.HandlebarsEnvironment = HandlebarsEnvironment; // istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    'default': obj
  };
}

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ./exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

var _helpers = __webpack_require__(/*! ./helpers */ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js");

var _decorators = __webpack_require__(/*! ./decorators */ "./node_modules/handlebars/dist/cjs/handlebars/decorators.js");

var _logger = __webpack_require__(/*! ./logger */ "./node_modules/handlebars/dist/cjs/handlebars/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var VERSION = '4.1.2';
exports.VERSION = VERSION;
var COMPILER_REVISION = 7;
exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2',
  // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1',
  7: '>= 4.0.0'
};
exports.REVISION_CHANGES = REVISION_CHANGES;
var objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials, decorators) {
  this.helpers = helpers || {};
  this.partials = partials || {};
  this.decorators = decorators || {};

  _helpers.registerDefaultHelpers(this);

  _decorators.registerDefaultDecorators(this);
}

HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,
  logger: _logger2['default'],
  log: _logger2['default'].log,
  registerHelper: function registerHelper(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple helpers');
      }

      _utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function unregisterHelper(name) {
    delete this.helpers[name];
  },
  registerPartial: function registerPartial(name, partial) {
    if (_utils.toString.call(name) === objectType) {
      _utils.extend(this.partials, name);
    } else {
      if (typeof partial === 'undefined') {
        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
      }

      this.partials[name] = partial;
    }
  },
  unregisterPartial: function unregisterPartial(name) {
    delete this.partials[name];
  },
  registerDecorator: function registerDecorator(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple decorators');
      }

      _utils.extend(this.decorators, name);
    } else {
      this.decorators[name] = fn;
    }
  },
  unregisterDecorator: function unregisterDecorator(name) {
    delete this.decorators[name];
  }
};
var log = _logger2['default'].log;
exports.log = log;
exports.createFrame = _utils.createFrame;
exports.logger = _logger2['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/decorators.js":
/*!*******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/decorators.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.registerDefaultDecorators = registerDefaultDecorators; // istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    'default': obj
  };
}

var _decoratorsInline = __webpack_require__(/*! ./decorators/inline */ "./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js");

var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

function registerDefaultDecorators(instance) {
  _decoratorsInline2['default'](instance);
}

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js":
/*!**************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerDecorator('inline', function (fn, props, container, options) {
    var ret = fn;

    if (!props.partials) {
      props.partials = {};

      ret = function ret(context, options) {
        // Create a new partials stack frame prior to exec.
        var original = container.partials;
        container.partials = _utils.extend({}, original, props.partials);
        var ret = fn(context, options);
        container.partials = original;
        return ret;
      };
    }

    props.partials[options.args[0]] = options.fn;
    return ret;
  });
};

module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/exception.js":
/*!******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/exception.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line = undefined,
      column = undefined;

  if (loc) {
    line = loc.start.line;
    column = loc.start.column;
    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message); // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.

  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }
  /* istanbul ignore else */


  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, Exception);
  }

  try {
    if (loc) {
      this.lineNumber = line; // Work around issue under safari where we can't directly set the column value

      /* istanbul ignore next */

      if (Object.defineProperty) {
        Object.defineProperty(this, 'column', {
          value: column,
          enumerable: true
        });
      } else {
        this.column = column;
      }
    }
  } catch (nop) {
    /* Ignore if the browser is very particular */
  }
}

Exception.prototype = new Error();
exports['default'] = Exception;
module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.registerDefaultHelpers = registerDefaultHelpers; // istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    'default': obj
  };
}

var _helpersBlockHelperMissing = __webpack_require__(/*! ./helpers/block-helper-missing */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js");

var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

var _helpersEach = __webpack_require__(/*! ./helpers/each */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js");

var _helpersEach2 = _interopRequireDefault(_helpersEach);

var _helpersHelperMissing = __webpack_require__(/*! ./helpers/helper-missing */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js");

var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

var _helpersIf = __webpack_require__(/*! ./helpers/if */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js");

var _helpersIf2 = _interopRequireDefault(_helpersIf);

var _helpersLog = __webpack_require__(/*! ./helpers/log */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js");

var _helpersLog2 = _interopRequireDefault(_helpersLog);

var _helpersLookup = __webpack_require__(/*! ./helpers/lookup */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js");

var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

var _helpersWith = __webpack_require__(/*! ./helpers/with */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js");

var _helpersWith2 = _interopRequireDefault(_helpersWith);

function registerDefaultHelpers(instance) {
  _helpersBlockHelperMissing2['default'](instance);

  _helpersEach2['default'](instance);

  _helpersHelperMissing2['default'](instance);

  _helpersIf2['default'](instance);

  _helpersLog2['default'](instance);

  _helpersLookup2['default'](instance);

  _helpersWith2['default'](instance);
}

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerHelper('blockHelperMissing', function (context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if (context === true) {
      return fn(this);
    } else if (context === false || context == null) {
      return inverse(this);
    } else if (_utils.isArray(context)) {
      if (context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = _utils.createFrame(options.data);

        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
        options = {
          data: data
        };
      }

      return fn(context, options);
    }
  });
};

module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.__esModule = true; // istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    'default': obj
  };
}

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('each', function (context, options) {
    if (!options) {
      throw new _exception2['default']('Must pass iterator to #each');
    }

    var fn = options.fn,
        inverse = options.inverse,
        i = 0,
        ret = '',
        data = undefined,
        contextPath = undefined;

    if (options.data && options.ids) {
      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    if (options.data) {
      data = _utils.createFrame(options.data);
    }

    function execIteration(field, index, last) {
      if (data) {
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;

        if (contextPath) {
          data.contextPath = contextPath + field;
        }
      }

      ret = ret + fn(context[field], {
        data: data,
        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
      });
    }

    if (context && _typeof(context) === 'object') {
      if (_utils.isArray(context)) {
        for (var j = context.length; i < j; i++) {
          if (i in context) {
            execIteration(i, i, i === context.length - 1);
          }
        }
      } else {
        var priorKey = undefined;

        for (var key in context) {
          if (context.hasOwnProperty(key)) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array.
            if (priorKey !== undefined) {
              execIteration(priorKey, i - 1);
            }

            priorKey = key;
            i++;
          }
        }

        if (priorKey !== undefined) {
          execIteration(priorKey, i - 1, true);
        }
      }
    }

    if (i === 0) {
      ret = inverse(this);
    }

    return ret;
  });
};

module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true; // istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    'default': obj
  };
}

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('helperMissing', function ()
  /* [args, ]options */
  {
    if (arguments.length === 1) {
      // A missing field in a {{foo}} construct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
    }
  });
};

module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js":
/*!*******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerHelper('if', function (conditional, options) {
    if (_utils.isFunction(conditional)) {
      conditional = conditional.call(this);
    } // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.


    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });
  instance.registerHelper('unless', function (conditional, options) {
    return instance.helpers['if'].call(this, conditional, {
      fn: options.inverse,
      inverse: options.fn,
      hash: options.hash
    });
  });
};

module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('log', function ()
  /* message, options */
  {
    var args = [undefined],
        options = arguments[arguments.length - 1];

    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i]);
    }

    var level = 1;

    if (options.hash.level != null) {
      level = options.hash.level;
    } else if (options.data && options.data.level != null) {
      level = options.data.level;
    }

    args[0] = level;
    instance.log.apply(instance, args);
  });
};

module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js":
/*!***********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('lookup', function (obj, field) {
    if (!obj) {
      return obj;
    }

    if (field === 'constructor' && !obj.propertyIsEnumerable(field)) {
      return undefined;
    }

    return obj[field];
  });
};

module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerHelper('with', function (context, options) {
    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    var fn = options.fn;

    if (!_utils.isEmpty(context)) {
      var data = options.data;

      if (options.data && options.ids) {
        data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
      }

      return fn(context, {
        data: data,
        blockParams: _utils.blockParams([context], [data && data.contextPath])
      });
    } else {
      return options.inverse(this);
    }
  });
};

module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/logger.js":
/*!***************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/logger.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var logger = {
  methodMap: ['debug', 'info', 'warn', 'error'],
  level: 'info',
  // Maps a given level value to the `methodMap` indexes above.
  lookupLevel: function lookupLevel(level) {
    if (typeof level === 'string') {
      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());

      if (levelMap >= 0) {
        level = levelMap;
      } else {
        level = parseInt(level, 10);
      }
    }

    return level;
  },
  // Can be overridden in the host environment
  log: function log(level) {
    level = logger.lookupLevel(level);

    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
      var method = logger.methodMap[level];

      if (!console[method]) {
        // eslint-disable-line no-console
        method = 'log';
      }

      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        message[_key - 1] = arguments[_key];
      }

      console[method].apply(console, message); // eslint-disable-line no-console
    }
  }
};
exports['default'] = logger;
module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* global window */


exports.__esModule = true;

exports['default'] = function (Handlebars) {
  /* istanbul ignore next */
  var root = typeof global !== 'undefined' ? global : window,
      $Handlebars = root.Handlebars;
  /* istanbul ignore next */

  Handlebars.noConflict = function () {
    if (root.Handlebars === Handlebars) {
      root.Handlebars = $Handlebars;
    }

    return Handlebars;
  };
};

module.exports = exports['default'];
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/runtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/runtime.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.__esModule = true;
exports.checkRevision = checkRevision;
exports.template = template;
exports.wrapProgram = wrapProgram;
exports.resolvePartial = resolvePartial;
exports.invokePartial = invokePartial;
exports.noop = noop; // istanbul ignore next

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    'default': obj
  };
} // istanbul ignore next


function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }

    newObj['default'] = obj;
    return newObj;
  }
}

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var Utils = _interopRequireWildcard(_utils);

var _exception = __webpack_require__(/*! ./exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

var _base = __webpack_require__(/*! ./base */ "./node_modules/handlebars/dist/cjs/handlebars/base.js");

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = _base.COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
    }
  }
}

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new _exception2['default']('No environment passed to template');
  }

  if (!templateSpec || !templateSpec.main) {
    throw new _exception2['default']('Unknown template object: ' + _typeof(templateSpec));
  }

  templateSpec.main.decorator = templateSpec.main_d; // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.

  env.VM.checkRevision(templateSpec.compiler);

  function invokePartialWrapper(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);

      if (options.ids) {
        options.ids[0] = true;
      }
    }

    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var result = env.VM.invokePartial.call(this, partial, context, options);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, options);
    }

    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');

        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }

        result = lines.join('\n');
      }

      return result;
    } else {
      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
    }
  } // Just add water


  var container = {
    strict: function strict(obj, name) {
      if (!(name in obj)) {
        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
      }

      return obj[name];
    },
    lookup: function lookup(depths, name) {
      var len = depths.length;

      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function lambda(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },
    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,
    fn: function fn(i) {
      var ret = templateSpec[i];
      ret.decorator = templateSpec[i + '_d'];
      return ret;
    },
    programs: [],
    program: function program(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);

      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
      }

      return programWrapper;
    },
    data: function data(value, depth) {
      while (value && depth--) {
        value = value._parent;
      }

      return value;
    },
    merge: function merge(param, common) {
      var obj = param || common;

      if (param && common && param !== common) {
        obj = Utils.extend({}, common, param);
      }

      return obj;
    },
    // An empty object to use as replacement for null-contexts
    nullContext: Object.seal({}),
    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  function ret(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var data = options.data;

    ret._setup(options);

    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }

    var depths = undefined,
        blockParams = templateSpec.useBlockParams ? [] : undefined;

    if (templateSpec.useDepths) {
      if (options.depths) {
        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
      } else {
        depths = [context];
      }
    }

    function main(context
    /*, options*/
    ) {
      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
    }

    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
    return main(context, options);
  }

  ret.isTop = true;

  ret._setup = function (options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }

      if (templateSpec.usePartial || templateSpec.useDecorators) {
        container.decorators = container.merge(options.decorators, env.decorators);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
      container.decorators = options.decorators;
    }
  };

  ret._child = function (i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new _exception2['default']('must pass block params');
    }

    if (templateSpec.useDepths && !depths) {
      throw new _exception2['default']('must pass parent depths');
    }

    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
  };

  return ret;
}

function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  function prog(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var currentDepths = depths;

    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
      currentDepths = [context].concat(depths);
    }

    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
  }

  prog = executeDecorators(fn, prog, container, depths, data, blockParams);
  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

function resolvePartial(partial, context, options) {
  if (!partial) {
    if (options.name === '@partial-block') {
      partial = options.data['partial-block'];
    } else {
      partial = options.partials[options.name];
    }
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }

  return partial;
}

function invokePartial(partial, context, options) {
  // Use the current closure context to save the partial-block if this partial
  var currentPartialBlock = options.data && options.data['partial-block'];
  options.partial = true;

  if (options.ids) {
    options.data.contextPath = options.ids[0] || options.data.contextPath;
  }

  var partialBlock = undefined;

  if (options.fn && options.fn !== noop) {
    (function () {
      options.data = _base.createFrame(options.data); // Wrapper function to get access to currentPartialBlock from the closure

      var fn = options.fn;

      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1]; // Restore the partial-block from the closure for the execution of the block
        // i.e. the part inside the block of the partial call.

        options.data = _base.createFrame(options.data);
        options.data['partial-block'] = currentPartialBlock;
        return fn(context, options);
      };

      if (fn.partials) {
        options.partials = Utils.extend({}, options.partials, fn.partials);
      }
    })();
  }

  if (partial === undefined && partialBlock) {
    partial = partialBlock;
  }

  if (partial === undefined) {
    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
  } else if (partial instanceof Function) {
    return partial(context, options);
  }
}

function noop() {
  return '';
}

function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? _base.createFrame(data) : {};
    data.root = context;
  }

  return data;
}

function executeDecorators(fn, prog, container, depths, data, blockParams) {
  if (fn.decorator) {
    var props = {};
    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
    Utils.extend(prog, props);
  }

  return prog;
}

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/safe-string.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/safe-string.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Build out our basic SafeString type


exports.__esModule = true;

function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
  return '' + this.string;
};

exports['default'] = SafeString;
module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/utils.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.__esModule = true;
exports.extend = extend;
exports.indexOf = indexOf;
exports.escapeExpression = escapeExpression;
exports.isEmpty = isEmpty;
exports.createFrame = createFrame;
exports.blockParams = blockParams;
exports.appendContextPath = appendContextPath;
var escape = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;',
  '=': '&#x3D;'
};
var badChars = /[&<>"'`=]/g,
    possible = /[&<>"'`=]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj
/* , ...source */
) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

var toString = Object.prototype.toString;
exports.toString = toString; // Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt

/* eslint-disable func-style */

var isFunction = function isFunction(value) {
  return typeof value === 'function';
}; // fallback for older versions of Chrome and Safari

/* istanbul ignore next */


if (isFunction(/x/)) {
  exports.isFunction = isFunction = function isFunction(value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}

exports.isFunction = isFunction;
/* eslint-enable func-style */

/* istanbul ignore next */

var isArray = Array.isArray || function (value) {
  return value && _typeof(value) === 'object' ? toString.call(value) === '[object Array]' : false;
};

exports.isArray = isArray; // Older IE versions do not directly support indexOf so we must implement our own, sadly.

function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }

  return -1;
}

function escapeExpression(string) {
  if (typeof string !== 'string') {
    // don't escape SafeStrings, since they're already safe
    if (string && string.toHTML) {
      return string.toHTML();
    } else if (string == null) {
      return '';
    } else if (!string) {
      return string + '';
    } // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.


    string = '' + string;
  }

  if (!possible.test(string)) {
    return string;
  }

  return string.replace(badChars, escapeChar);
}

function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

function createFrame(object) {
  var frame = extend({}, object);
  frame._parent = object;
  return frame;
}

function blockParams(params, ids) {
  params.path = ids;
  return params;
}

function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}

/***/ }),

/***/ "./node_modules/handlebars/runtime.js":
/*!********************************************!*\
  !*** ./node_modules/handlebars/runtime.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
module.exports = __webpack_require__(/*! ./dist/cjs/handlebars.runtime */ "./node_modules/handlebars/dist/cjs/handlebars.runtime.js")['default'];

/***/ }),

/***/ "./node_modules/has-binary2/index.js":
/*!*******************************************!*\
  !*** ./node_modules/has-binary2/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* global Blob File */

/*
 * Module requirements.
 */
var isArray = __webpack_require__(/*! isarray */ "./node_modules/has-binary2/node_modules/isarray/index.js");

var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' || typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
var withNativeFile = typeof File === 'function' || typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';
/**
 * Module exports.
 */

module.exports = hasBinary;
/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(obj) {
  if (!obj || _typeof(obj) !== 'object') {
    return false;
  }

  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }

    return false;
  }

  if (typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj) || typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
    return true;
  } // see: https://github.com/Automattic/has-binary/pull/4


  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }

  return false;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/has-binary2/node_modules/isarray/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/has-binary2/node_modules/isarray/index.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),

/***/ "./node_modules/has-cors/index.js":
/*!****************************************!*\
  !*** ./node_modules/has-cors/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */
try {
  module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),

/***/ "./node_modules/indexof/index.js":
/*!***************************************!*\
  !*** ./node_modules/indexof/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var indexOf = [].indexOf;

module.exports = function (arr, obj) {
  if (indexOf) return arr.indexOf(obj);

  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }

  return -1;
};

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
(function (global, factory) {
  "use strict";

  if (( false ? undefined : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info.
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error("jQuery requires a window with a document");
      }

      return factory(w);
    };
  } else {
    factory(global);
  } // Pass this if window is not defined yet

})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  "use strict";

  var arr = [];
  var document = window.document;
  var getProto = Object.getPrototypeOf;
  var _slice = arr.slice;
  var concat = arr.concat;
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var fnToString = hasOwn.toString;
  var ObjectFunctionString = fnToString.call(Object);
  var support = {};

  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    return typeof obj === "function" && typeof obj.nodeType !== "number";
  };

  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };

  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true
  };

  function DOMEval(code, node, doc) {
    doc = doc || document;
    var i,
        val,
        script = doc.createElement("script");
    script.text = code;

    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || node.getAttribute && node.getAttribute(i);

        if (val) {
          script.setAttribute(i, val);
        }
      }
    }

    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  function toType(obj) {
    if (obj == null) {
      return obj + "";
    } // Support: Android <=2.3 only (functionish RegExp)


    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module


  var version = "3.4.1",
      // Define a local copy of jQuery
  jQuery = function jQuery(selector, context) {
    // The jQuery object is actually just the init constructor 'enhanced'
    // Need init if jQuery is called (just allow error to be thrown if not included)
    return new jQuery.fn.init(selector, context);
  },
      // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: jQuery,
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function toArray() {
      return _slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function get(num) {
      // Return all the elements in a clean array
      if (num == null) {
        return _slice.call(this);
      } // Return just the one element from the set


      return num < 0 ? this[num + this.length] : this[num];
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function pushStack(elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)

      ret.prevObject = this; // Return the newly-formed element set

      return ret;
    },
    // Execute a callback for every element in the matched set.
    each: function each(callback) {
      return jQuery.each(this, callback);
    },
    map: function map(callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function slice() {
      return this.pushStack(_slice.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    eq: function eq(i) {
      var len = this.length,
          j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor();
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false; // Handle a deep copy situation

    if (typeof target === "boolean") {
      deep = target; // Skip the boolean and the target

      target = arguments[i] || {};
      i++;
    } // Handle case when target is a string or something (possible in deep copy)


    if (_typeof(target) !== "object" && !isFunction(target)) {
      target = {};
    } // Extend jQuery itself if only one argument is passed


    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name]; // Prevent Object.prototype pollution
          // Prevent never-ending loop

          if (name === "__proto__" || target === copy) {
            continue;
          } // Recurse if we're merging plain objects or arrays


          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
            src = target[name]; // Ensure proper type for the source value

            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }

            copyIsArray = false; // Never move original objects, clone them

            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    } // Return the modified object


    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function error(msg) {
      throw new Error(msg);
    },
    noop: function noop() {},
    isPlainObject: function isPlainObject(obj) {
      var proto, Ctor; // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects

      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }

      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

      if (!proto) {
        return true;
      } // Objects with prototype are plain iff they were constructed by a global Object function


      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    },
    isEmptyObject: function isEmptyObject(obj) {
      var name;

      for (name in obj) {
        return false;
      }

      return true;
    },
    // Evaluates a script in a global context
    globalEval: function globalEval(code, options) {
      DOMEval(code, {
        nonce: options && options.nonce
      });
    },
    each: function each(obj, callback) {
      var length,
          i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;

        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },
    // Support: Android <=4.0 only
    trim: function trim(text) {
      return text == null ? "" : (text + "").replace(rtrim, "");
    },
    // results is for internal usage only
    makeArray: function makeArray(arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },
    inArray: function inArray(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function merge(first, second) {
      var len = +second.length,
          j = 0,
          i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;
      return first;
    },
    grep: function grep(elems, callback, invert) {
      var callbackInverse,
          matches = [],
          i = 0,
          length = elems.length,
          callbackExpect = !invert; // Go through the array, only saving the items
      // that pass the validator function

      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);

        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },
    // arg is for internal usage only
    map: function map(elems, callback, arg) {
      var length,
          value,
          i = 0,
          ret = []; // Go through the array, translating each of the items to their new values

      if (isArrayLike(elems)) {
        length = elems.length;

        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        } // Go through every key on the object,

      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      } // Flatten any nested arrays


      return concat.apply([], ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });

  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  } // Populate the class2type map


  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });

  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
        type = toType(obj);

    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }

    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }

  var Sizzle =
  /*!
   * Sizzle CSS Selector Engine v2.3.4
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://js.foundation/
   *
   * Date: 2019-04-08
   */
  function (window) {
    var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
        // Local document vars
    setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
        // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        nonnativeSelectorCache = createCache(),
        sortOrder = function sortOrder(a, b) {
      if (a === b) {
        hasDuplicate = true;
      }

      return 0;
    },
        // Instance methods
    hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        push_native = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
    // https://jsperf.com/thor-indexof-vs-for/5
    indexOf = function indexOf(list, elem) {
      var i = 0,
          len = list.length;

      for (; i < len; i++) {
        if (list[i] === elem) {
          return i;
        }
      }

      return -1;
    },
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        // Regular expressions
    // http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
        // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
    identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
    "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
        pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
    // 1. quoted (capture 3; capture 4 or capture 5)
    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
    "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
    ".*" + ")\\)|)",
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp(whitespace + "+", "g"),
        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
        rdescend = new RegExp(whitespace + "|>"),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp("^" + identifier + "$"),
        matchExpr = {
      "ID": new RegExp("^#(" + identifier + ")"),
      "CLASS": new RegExp("^\\.(" + identifier + ")"),
      "TAG": new RegExp("^(" + identifier + "|[*])"),
      "ATTR": new RegExp("^" + attributes),
      "PSEUDO": new RegExp("^" + pseudos),
      "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
      "bool": new RegExp("^(?:" + booleans + ")$", "i"),
      // For use in libraries implementing .is()
      // We use this for POS matching in `select`
      "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
    },
        rhtml = /HTML$/i,
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        // CSS escapes
    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
        funescape = function funescape(_, escaped, escapedWhitespace) {
      var high = "0x" + escaped - 0x10000; // NaN means non-codepoint
      // Support: Firefox<24
      // Workaround erroneous numeric interpretation of +"0x"

      return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
      String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)
      String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
    },
        // CSS string/identifier serialization
    // https://drafts.csswg.org/cssom/#common-serializing-idioms
    rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        fcssescape = function fcssescape(ch, asCodePoint) {
      if (asCodePoint) {
        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
        if (ch === "\0") {
          return "\uFFFD";
        } // Control characters and (dependent upon position) numbers get escaped as code points


        return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
      } // Other potentially-special ASCII characters get backslash-escaped


      return "\\" + ch;
    },
        // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function unloadHandler() {
      setDocument();
    },
        inDisabledFieldset = addCombinator(function (elem) {
      return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
    }, {
      dir: "parentNode",
      next: "legend"
    }); // Optimize for push.apply( _, NodeList )


    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
      // Detect silently failing push.apply

      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: arr.length ? // Leverage slice if possible
        function (target, els) {
          push_native.apply(target, slice.call(els));
        } : // Support: IE<9
        // Otherwise append directly
        function (target, els) {
          var j = target.length,
              i = 0; // Can't trust NodeList.length

          while (target[j++] = els[i++]) {}

          target.length = j - 1;
        }
      };
    }

    function Sizzle(selector, context, results, seed) {
      var m,
          i,
          elem,
          nid,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
      nodeType = context ? context.nodeType : 9;
      results = results || []; // Return early from calls with invalid selector or context

      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return results;
      } // Try to shortcut find operations (as opposed to filters) in HTML documents


      if (!seed) {
        if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
          setDocument(context);
        }

        context = context || document;

        if (documentIsHTML) {
          // If the selector is sufficiently simple, try using a "get*By*" DOM method
          // (excepting DocumentFragment context, where the methods don't exist)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
            // ID selector
            if (m = match[1]) {
              // Document context
              if (nodeType === 9) {
                if (elem = context.getElementById(m)) {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                } else {
                  return results;
                } // Element context

              } else {
                // Support: IE, Opera, Webkit
                // TODO: identify versions
                // getElementById can match elements by name instead of ID
                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } // Type selector

            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results; // Class selector
            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          } // Take advantage of querySelectorAll


          if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only
          // Exclude object elements
          nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
            newSelector = selector;
            newContext = context; // qSA considers elements outside a scoping root when evaluating child or
            // descendant combinators, which is not what we want.
            // In such cases, we work around the behavior by prefixing every selector in the
            // list with an ID selector referencing the scope context.
            // Thanks to Andrew Dupont for this technique.

            if (nodeType === 1 && rdescend.test(selector)) {
              // Capture the context ID, setting it first if necessary
              if (nid = context.getAttribute("id")) {
                nid = nid.replace(rcssescape, fcssescape);
              } else {
                context.setAttribute("id", nid = expando);
              } // Prefix every selector in the list


              groups = tokenize(selector);
              i = groups.length;

              while (i--) {
                groups[i] = "#" + nid + " " + toSelector(groups[i]);
              }

              newSelector = groups.join(","); // Expand context for sibling selectors

              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
            }

            try {
              push.apply(results, newContext.querySelectorAll(newSelector));
              return results;
            } catch (qsaError) {
              nonnativeSelectorCache(selector, true);
            } finally {
              if (nid === expando) {
                context.removeAttribute("id");
              }
            }
          }
        }
      } // All others


      return select(selector.replace(rtrim, "$1"), context, results, seed);
    }
    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */


    function createCache() {
      var keys = [];

      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if (keys.push(key + " ") > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }

        return cache[key + " "] = value;
      }

      return cache;
    }
    /**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */


    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }
    /**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */


    function assert(fn) {
      var el = document.createElement("fieldset");

      try {
        return !!fn(el);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        } // release memory in IE


        el = null;
      }
    }
    /**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */


    function addHandle(attrs, handler) {
      var arr = attrs.split("|"),
          i = arr.length;

      while (i--) {
        Expr.attrHandle[arr[i]] = handler;
      }
    }
    /**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */


    function siblingCheck(a, b) {
      var cur = b && a,
          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes

      if (diff) {
        return diff;
      } // Check if b follows a


      if (cur) {
        while (cur = cur.nextSibling) {
          if (cur === b) {
            return -1;
          }
        }
      }

      return a ? 1 : -1;
    }
    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */


    function createInputPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */


    function createButtonPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */


    function createDisabledPseudo(disabled) {
      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
      return function (elem) {
        // Only certain elements can match :enabled or :disabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
        if ("form" in elem) {
          // Check for inherited disabledness on relevant non-disabled elements:
          // * listed form-associated elements in a disabled fieldset
          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
          // * option elements in a disabled optgroup
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
          // All such elements have a "form" property.
          if (elem.parentNode && elem.disabled === false) {
            // Option elements defer to a parent optgroup if present
            if ("label" in elem) {
              if ("label" in elem.parentNode) {
                return elem.parentNode.disabled === disabled;
              } else {
                return elem.disabled === disabled;
              }
            } // Support: IE 6 - 11
            // Use the isDisabled shortcut property to check for disabled fieldset ancestors


            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually

            /* jshint -W018 */
            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
          }

          return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.
          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
          // even exist on them, let alone have a boolean value.
        } else if ("label" in elem) {
          return elem.disabled === disabled;
        } // Remaining elements are neither :enabled nor :disabled


        return false;
      };
    }
    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */


    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length; // Match elements found at the specified indexes

          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }
    /**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */


    function testContext(context) {
      return context && typeof context.getElementsByTagName !== "undefined" && context;
    } // Expose support vars for convenience


    support = Sizzle.support = {};
    /**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */

    isXML = Sizzle.isXML = function (elem) {
      var namespace = elem.namespaceURI,
          docElem = (elem.ownerDocument || elem).documentElement; // Support: IE <=8
      // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
      // https://bugs.jquery.com/ticket/4833

      return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
    };
    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */


    setDocument = Sizzle.setDocument = function (node) {
      var hasCompare,
          subWindow,
          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected

      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      } // Update global variables


      document = doc;
      docElem = document.documentElement;
      documentIsHTML = !isXML(document); // Support: IE 9-11, Edge
      // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

      if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
        // Support: IE 11, Edge
        if (subWindow.addEventListener) {
          subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
        } else if (subWindow.attachEvent) {
          subWindow.attachEvent("onunload", unloadHandler);
        }
      }
      /* Attributes
      ---------------------------------------------------------------------- */
      // Support: IE<8
      // Verify that getAttribute really returns attributes and not properties
      // (excepting IE8 booleans)


      support.attributes = assert(function (el) {
        el.className = "i";
        return !el.getAttribute("className");
      });
      /* getElement(s)By*
      ---------------------------------------------------------------------- */
      // Check if getElementsByTagName("*") returns only elements

      support.getElementsByTagName = assert(function (el) {
        el.appendChild(document.createComment(""));
        return !el.getElementsByTagName("*").length;
      }); // Support: IE<9

      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programmatically-set names,
      // so use a roundabout getElementsByName test

      support.getById = assert(function (el) {
        docElem.appendChild(el).id = expando;
        return !document.getElementsByName || !document.getElementsByName(expando).length;
      }); // ID filter and find

      if (support.getById) {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute("id") === attrId;
          };
        };

        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var elem = context.getElementById(id);
            return elem ? [elem] : [];
          }
        };
      } else {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
            return node && node.value === attrId;
          };
        }; // Support: IE 6 - 7 only
        // getElementById is not reliable as a find shortcut


        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var node,
                i,
                elems,
                elem = context.getElementById(id);

            if (elem) {
              // Verify the id attribute
              node = elem.getAttributeNode("id");

              if (node && node.value === id) {
                return [elem];
              } // Fall back on getElementsByName


              elems = context.getElementsByName(id);
              i = 0;

              while (elem = elems[i++]) {
                node = elem.getAttributeNode("id");

                if (node && node.value === id) {
                  return [elem];
                }
              }
            }

            return [];
          }
        };
      } // Tag


      Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
        } else if (support.qsa) {
          return context.querySelectorAll(tag);
        }
      } : function (tag, context) {
        var elem,
            tmp = [],
            i = 0,
            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
        results = context.getElementsByTagName(tag); // Filter out possible comments

        if (tag === "*") {
          while (elem = results[i++]) {
            if (elem.nodeType === 1) {
              tmp.push(elem);
            }
          }

          return tmp;
        }

        return results;
      }; // Class

      Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };
      /* QSA/matchesSelector
      ---------------------------------------------------------------------- */
      // QSA and matchesSelector support
      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
      // We allow this because of a bug in IE8/9 that throws an error
      // whenever `document.activeElement` is accessed on an iframe
      // So, we allow :focus to pass through QSA all the time to avoid the IE error
      // See https://bugs.jquery.com/ticket/13378

      rbuggyQSA = [];

      if (support.qsa = rnative.test(document.querySelectorAll)) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function (el) {
          // Select is set to empty string on purpose
          // This is to test IE's treatment of not explicitly
          // setting a boolean content attribute,
          // since its presence should be enough
          // https://bugs.jquery.com/ticket/12359
          docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
          // Nothing should be selected when empty strings follow ^= or $= or *=
          // The test attribute must be unknown in Opera but "safe" for WinRT
          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

          if (el.querySelectorAll("[msallowcapture^='']").length) {
            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
          } // Support: IE8
          // Boolean attributes and "value" are not treated correctly


          if (!el.querySelectorAll("[selected]").length) {
            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


          if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
            rbuggyQSA.push("~=");
          } // Webkit/Opera - :checked should return selected option elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          // IE8 throws error here and will not see later tests


          if (!el.querySelectorAll(":checked").length) {
            rbuggyQSA.push(":checked");
          } // Support: Safari 8+, iOS 8+
          // https://bugs.webkit.org/show_bug.cgi?id=136851
          // In-page `selector#id sibling-combinator selector` fails


          if (!el.querySelectorAll("a#" + expando + "+*").length) {
            rbuggyQSA.push(".#.+[+~]");
          }
        });
        assert(function (el) {
          el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>"; // Support: Windows 8 Native Apps
          // The type and name attributes are restricted during .innerHTML assignment

          var input = document.createElement("input");
          input.setAttribute("type", "hidden");
          el.appendChild(input).setAttribute("name", "D"); // Support: IE8
          // Enforce case-sensitivity of name attribute

          if (el.querySelectorAll("[name=d]").length) {
            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
          // IE8 throws error here and will not see later tests


          if (el.querySelectorAll(":enabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Support: IE9-11+
          // IE's :disabled selector does not pick up the children of disabled fieldsets


          docElem.appendChild(el).disabled = true;

          if (el.querySelectorAll(":disabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Opera 10-11 does not throw on post-comma invalid pseudos


          el.querySelectorAll("*,:x");
          rbuggyQSA.push(",.*:");
        });
      }

      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
        assert(function (el) {
          // Check to see if it's possible to do matchesSelector
          // on a disconnected node (IE 9)
          support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception
          // Gecko does not error, returns false instead

          matches.call(el, "[s!='']:x");
          rbuggyMatches.push("!=", pseudos);
        });
      }

      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
      /* Contains
      ---------------------------------------------------------------------- */

      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
      // Purposefully self-exclusive
      // As in, an element does not contain itself

      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
        var adown = a.nodeType === 9 ? a.documentElement : a,
            bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      } : function (a, b) {
        if (b) {
          while (b = b.parentNode) {
            if (b === a) {
              return true;
            }
          }
        }

        return false;
      };
      /* Sorting
      ---------------------------------------------------------------------- */
      // Document order sorting

      sortOrder = hasCompare ? function (a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        } // Sort on method existence if only one input has compareDocumentPosition


        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

        if (compare) {
          return compare;
        } // Calculate position if both inputs belong to the same document


        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
        1; // Disconnected nodes

        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
          // Choose the first element that is related to our preferred document
          if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
            return -1;
          }

          if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
            return 1;
          } // Maintain original order


          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
        }

        return compare & 4 ? -1 : 1;
      } : function (a, b) {
        // Exit early if the nodes are identical
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        var cur,
            i = 0,
            aup = a.parentNode,
            bup = b.parentNode,
            ap = [a],
            bp = [b]; // Parentless nodes are either documents or disconnected

        if (!aup || !bup) {
          return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
        } else if (aup === bup) {
          return siblingCheck(a, b);
        } // Otherwise we need full lists of their ancestors for comparison


        cur = a;

        while (cur = cur.parentNode) {
          ap.unshift(cur);
        }

        cur = b;

        while (cur = cur.parentNode) {
          bp.unshift(cur);
        } // Walk down the tree looking for a discrepancy


        while (ap[i] === bp[i]) {
          i++;
        }

        return i ? // Do a sibling check if the nodes have a common ancestor
        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
        ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
      };
      return document;
    };

    Sizzle.matches = function (expr, elements) {
      return Sizzle(expr, null, null, elements);
    };

    Sizzle.matchesSelector = function (elem, expr) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }

      if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {
          nonnativeSelectorCache(expr, true);
        }
      }

      return Sizzle(expr, document, null, [elem]).length > 0;
    };

    Sizzle.contains = function (context, elem) {
      // Set document vars if needed
      if ((context.ownerDocument || context) !== document) {
        setDocument(context);
      }

      return contains(context, elem);
    };

    Sizzle.attr = function (elem, name) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }

      var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    };

    Sizzle.escape = function (sel) {
      return (sel + "").replace(rcssescape, fcssescape);
    };

    Sizzle.error = function (msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };
    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */


    Sizzle.uniqueSort = function (results) {
      var elem,
          duplicates = [],
          j = 0,
          i = 0; // Unless we *know* we can detect duplicates, assume their presence

      hasDuplicate = !support.detectDuplicates;
      sortInput = !support.sortStable && results.slice(0);
      results.sort(sortOrder);

      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }

        while (j--) {
          results.splice(duplicates[j], 1);
        }
      } // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225


      sortInput = null;
      return results;
    };
    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */


    getText = Sizzle.getText = function (elem) {
      var node,
          ret = "",
          i = 0,
          nodeType = elem.nodeType;

      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += getText(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (jQuery #11153)
        if (typeof elem.textContent === "string") {
          return elem.textContent;
        } else {
          // Traverse its children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            ret += getText(elem);
          }
        }
      } else if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      } // Do not include comment or processing instruction nodes


      return ret;
    };

    Expr = Sizzle.selectors = {
      // Can be adjusted by the user
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: true
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: true
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        "ATTR": function ATTR(match) {
          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

          if (match[2] === "~=") {
            match[3] = " " + match[3] + " ";
          }

          return match.slice(0, 4);
        },
        "CHILD": function CHILD(match) {
          /* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */
          match[1] = match[1].toLowerCase();

          if (match[1].slice(0, 3) === "nth") {
            // nth-* requires argument
            if (!match[3]) {
              Sizzle.error(match[0]);
            } // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1


            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
            match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
          } else if (match[3]) {
            Sizzle.error(match[0]);
          }

          return match;
        },
        "PSEUDO": function PSEUDO(match) {
          var excess,
              unquoted = !match[6] && match[2];

          if (matchExpr["CHILD"].test(match[0])) {
            return null;
          } // Accept quoted arguments as-is


          if (match[3]) {
            match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          } // Return only captures needed by the pseudo filter method (type and argument)


          return match.slice(0, 3);
        }
      },
      filter: {
        "TAG": function TAG(nodeNameSelector) {
          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === "*" ? function () {
            return true;
          } : function (elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },
        "CLASS": function CLASS(className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
          });
        },
        "ATTR": function ATTR(name, operator, check) {
          return function (elem) {
            var result = Sizzle.attr(elem, name);

            if (result == null) {
              return operator === "!=";
            }

            if (!operator) {
              return true;
            }

            result += "";
            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
          };
        },
        "CHILD": function CHILD(type, what, argument, first, last) {
          var simple = type.slice(0, 3) !== "nth",
              forward = type.slice(-4) !== "last",
              ofType = what === "of-type";
          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, context, xml) {
            var cache,
                uniqueCache,
                outerCache,
                node,
                nodeIndex,
                start,
                dir = simple !== forward ? "nextSibling" : "previousSibling",
                parent = elem.parentNode,
                name = ofType && elem.nodeName.toLowerCase(),
                useCache = !xml && !ofType,
                diff = false;

            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;

                  while (node = node[dir]) {
                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                      return false;
                    }
                  } // Reverse direction for :only-* (if we haven't yet done so)


                  start = dir = type === "only" && !start && "nextSibling";
                }

                return true;
              }

              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                // ...in a gzip-friendly way
                node = parent;
                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)

                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                cache = uniqueCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];

                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
                diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    uniqueCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                // Use previously-cached element index if available
                if (useCache) {
                  // ...in a gzip-friendly way
                  node = elem;
                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)

                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                  cache = uniqueCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex;
                } // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)


                if (diff === false) {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)

                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                        uniqueCache[type] = [dirruns, diff];
                      }

                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
              } // Incorporate the offset, then check against cycle size


              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        "PSEUDO": function PSEUDO(pseudo, argument) {
          // pseudo-class names are case-insensitive
          // http://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as Sizzle does

          if (fn[expando]) {
            return fn(argument);
          } // But maintain support for old signatures


          if (fn.length > 1) {
            args = [pseudo, pseudo, "", argument];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx,
                  matched = fn(seed, argument),
                  i = matched.length;

              while (i--) {
                idx = indexOf(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }

          return fn;
        }
      },
      pseudos: {
        // Potentially complex pseudos
        "not": markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, "$1"));
          return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
            var elem,
                unmatched = matcher(seed, null, xml, []),
                i = seed.length; // Match elements unmatched by `matcher`

            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results); // Don't keep the element (issue #299)

            input[0] = null;
            return !results.pop();
          };
        }),
        "has": markFunction(function (selector) {
          return function (elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),
        "contains": markFunction(function (text) {
          text = text.replace(runescape, funescape);
          return function (elem) {
            return (elem.textContent || getText(elem)).indexOf(text) > -1;
          };
        }),
        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        "lang": markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || "")) {
            Sizzle.error("unsupported lang: " + lang);
          }

          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;

            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);

            return false;
          };
        }),
        // Miscellaneous
        "target": function target(elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        "root": function root(elem) {
          return elem === docElem;
        },
        "focus": function focus(elem) {
          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        // Boolean properties
        "enabled": createDisabledPseudo(false),
        "disabled": createDisabledPseudo(true),
        "checked": function checked(elem) {
          // In CSS3, :checked should return both checked and selected elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          var nodeName = elem.nodeName.toLowerCase();
          return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
        },
        "selected": function selected(elem) {
          // Accessing this property makes selected-by-default
          // options in Safari work properly
          if (elem.parentNode) {
            elem.parentNode.selectedIndex;
          }

          return elem.selected === true;
        },
        // Contents
        "empty": function empty(elem) {
          // http://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }

          return true;
        },
        "parent": function parent(elem) {
          return !Expr.pseudos["empty"](elem);
        },
        // Element/input types
        "header": function header(elem) {
          return rheader.test(elem.nodeName);
        },
        "input": function input(elem) {
          return rinputs.test(elem.nodeName);
        },
        "button": function button(elem) {
          var name = elem.nodeName.toLowerCase();
          return name === "input" && elem.type === "button" || name === "button";
        },
        "text": function text(elem) {
          var attr;
          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
        },
        // Position-in-collection
        "first": createPositionalPseudo(function () {
          return [0];
        }),
        "last": createPositionalPseudo(function (matchIndexes, length) {
          return [length - 1];
        }),
        "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        "even": createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "odd": createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument > length ? length : argument;

          for (; --i >= 0;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;

          for (; ++i < length;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        })
      }
    };
    Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

    for (i in {
      radio: true,
      checkbox: true,
      file: true,
      password: true,
      image: true
    }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }

    for (i in {
      submit: true,
      reset: true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    } // Easy API for creating new setFilters


    function setFilters() {}

    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();

    tokenize = Sizzle.tokenize = function (selector, parseOnly) {
      var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + " "];

      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }

      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;

      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }

          groups.push(tokens = []);
        }

        matched = false; // Combinators

        if (match = rcombinators.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrim, " ")
          });
          soFar = soFar.slice(matched.length);
        } // Filters


        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }

        if (!matched) {
          break;
        }
      } // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens


      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
      tokenCache(selector, groups).slice(0);
    };

    function toSelector(tokens) {
      var i = 0,
          len = tokens.length,
          selector = "";

      for (; i < len; i++) {
        selector += tokens[i].value;
      }

      return selector;
    }

    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir,
          skip = combinator.next,
          key = skip || dir,
          checkNonElements = base && key === "parentNode",
          doneName = done++;
      return combinator.first ? // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }

        return false;
      } : // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache,
            uniqueCache,
            outerCache,
            newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
              // Defend against cloned attroperties (jQuery gh-1709)

              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

              if (skip && skip === elem.nodeName.toLowerCase()) {
                elem = elem[dir] || elem;
              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking

                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }

        return false;
      };
    }

    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;

        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }

        return true;
      } : matchers[0];
    }

    function multipleContexts(selector, contexts, results) {
      var i = 0,
          len = contexts.length;

      for (; i < len; i++) {
        Sizzle(selector, contexts[i], results);
      }

      return results;
    }

    function condense(unmatched, map, filter, context, xml) {
      var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);

            if (mapped) {
              map.push(i);
            }
          }
        }
      }

      return newUnmatched;
    }

    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }

      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }

      return markFunction(function (seed, results, context, xml) {
        var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,
            // Get initial elements from seed or context
        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
        [] : // ...otherwise use results directly
        results : matcherIn; // Find primary matches

        if (matcher) {
          matcher(matcherIn, matcherOut, context, xml);
        } // Apply postFilter


        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

          i = temp.length;

          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }

        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;

              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }

              postFinder(null, matcherOut = [], temp, xml);
            } // Move matched elements from seed to results to keep them synchronized


            i = matcherOut.length;

            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          } // Add elements to results, through postFinder if defined

        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }

    function matcherFromTokens(tokens) {
      var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[" "],
          i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
      matchContext = addCombinator(function (elem) {
        return elem === checkContext;
      }, implicitRelative, true),
          matchAnyContext = addCombinator(function (elem) {
        return indexOf(checkContext, elem) > -1;
      }, implicitRelative, true),
          matchers = [function (elem, context, xml) {
        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

        checkContext = null;
        return ret;
      }];

      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;

            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }

            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({
              value: tokens[i - 2].type === " " ? "*" : ""
            })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }

          matchers.push(matcher);
        }
      }

      return elementMatcher(matchers);
    }

    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function superMatcher(seed, context, xml, results, outermost) {
        var elem,
            j,
            matcher,
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            setMatched = [],
            contextBackup = outermostContext,
            // We must always have either seed elements or outermost context
        elems = seed || byElement && Expr.find["TAG"]("*", outermost),
            // Use integer dirruns iff this is the outermost matcher
        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
            len = elems.length;

        if (outermost) {
          outermostContext = context === document || context || outermost;
        } // Add elements passing elementMatchers directly to results
        // Support: IE<9, Safari
        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


        for (; i !== len && (elem = elems[i]) != null; i++) {
          if (byElement && elem) {
            j = 0;

            if (!context && elem.ownerDocument !== document) {
              setDocument(elem);
              xml = !documentIsHTML;
            }

            while (matcher = elementMatchers[j++]) {
              if (matcher(elem, context || document, xml)) {
                results.push(elem);
                break;
              }
            }

            if (outermost) {
              dirruns = dirrunsUnique;
            }
          } // Track unmatched elements for set filters


          if (bySet) {
            // They will have gone through all possible matchers
            if (elem = !matcher && elem) {
              matchedCount--;
            } // Lengthen the array for every element, matched or not


            if (seed) {
              unmatched.push(elem);
            }
          }
        } // `i` is now the count of elements visited above, and adding it to `matchedCount`
        // makes the latter nonnegative.


        matchedCount += i; // Apply set filters to unmatched elements
        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
        // no element matchers and no seed.
        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
        // numerically zero.

        if (bySet && i !== matchedCount) {
          j = 0;

          while (matcher = setMatchers[j++]) {
            matcher(unmatched, setMatched, context, xml);
          }

          if (seed) {
            // Reintegrate element matches to eliminate the need for sorting
            if (matchedCount > 0) {
              while (i--) {
                if (!(unmatched[i] || setMatched[i])) {
                  setMatched[i] = pop.call(results);
                }
              }
            } // Discard index placeholder values to get only actual matches


            setMatched = condense(setMatched);
          } // Add matches to results


          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
            Sizzle.uniqueSort(results);
          }
        } // Override manipulation of globals by nested matchers


        if (outermost) {
          dirruns = dirrunsUnique;
          outermostContext = contextBackup;
        }

        return unmatched;
      };

      return bySet ? markFunction(superMatcher) : superMatcher;
    }

    compile = Sizzle.compile = function (selector, match
    /* Internal Use Only */
    ) {
      var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + " "];

      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!match) {
          match = tokenize(selector);
        }

        i = match.length;

        while (i--) {
          cached = matcherFromTokens(match[i]);

          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        } // Cache the compiled function


        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

        cached.selector = selector;
      }

      return cached;
    };
    /**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */


    select = Sizzle.select = function (selector, context, results, seed) {
      var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === "function" && selector,
          match = !seed && tokenize(selector = compiled.selector || selector);
      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
      // (the latter of which guarantees us context)

      if (match.length === 1) {
        // Reduce context if the leading compound selector is an ID
        tokens = match[0] = match[0].slice(0);

        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

          if (!context) {
            return results; // Precompiled matchers will still verify ancestry, so step up a level
          } else if (compiled) {
            context = context.parentNode;
          }

          selector = selector.slice(tokens.shift().value.length);
        } // Fetch a seed set for right-to-left matching


        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

        while (i--) {
          token = tokens[i]; // Abort if we hit a combinator

          if (Expr.relative[type = token.type]) {
            break;
          }

          if (find = Expr.find[type]) {
            // Search, expanding context for leading sibling combinators
            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
              // If seed is empty or no tokens remain, we can return early
              tokens.splice(i, 1);
              selector = seed.length && toSelector(tokens);

              if (!selector) {
                push.apply(results, seed);
                return results;
              }

              break;
            }
          }
        }
      } // Compile and execute a filtering function if one is not provided
      // Provide `match` to avoid retokenization if we modified the selector above


      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    }; // One-time assignments
    // Sort stability


    support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
    // Always assume duplicates if they aren't passed to the comparison function

    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*

    support.sortDetached = assert(function (el) {
      // Should return 1, but returns 4 (following)
      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
    }); // Support: IE<8
    // Prevent attribute/property "interpolation"
    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

    if (!assert(function (el) {
      el.innerHTML = "<a href='#'></a>";
      return el.firstChild.getAttribute("href") === "#";
    })) {
      addHandle("type|href|height|width", function (elem, name, isXML) {
        if (!isXML) {
          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
        }
      });
    } // Support: IE<9
    // Use defaultValue in place of getAttribute("value")


    if (!support.attributes || !assert(function (el) {
      el.innerHTML = "<input/>";
      el.firstChild.setAttribute("value", "");
      return el.firstChild.getAttribute("value") === "";
    })) {
      addHandle("value", function (elem, name, isXML) {
        if (!isXML && elem.nodeName.toLowerCase() === "input") {
          return elem.defaultValue;
        }
      });
    } // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies


    if (!assert(function (el) {
      return el.getAttribute("disabled") == null;
    })) {
      addHandle(booleans, function (elem, name, isXML) {
        var val;

        if (!isXML) {
          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        }
      });
    }

    return Sizzle;
  }(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors; // Deprecated

  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;

  var dir = function dir(elem, _dir, until) {
    var matched = [],
        truncate = until !== undefined;

    while ((elem = elem[_dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }

        matched.push(elem);
      }
    }

    return matched;
  };

  var _siblings = function siblings(n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;

  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }

  ;
  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i; // Implement the identical functionality for filter and not

  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    } // Single element


    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    } // Arraylike of elements (jQuery, arguments, Array)


    if (typeof qualifier !== "string") {
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    } // Filtered directly for both simple and complex selectors


    return jQuery.filter(qualifier, elements, not);
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ":not(" + expr + ")";
    }

    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }

    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };

  jQuery.fn.extend({
    find: function find(selector) {
      var i,
          ret,
          len = this.length,
          self = this;

      if (typeof selector !== "string") {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }

      ret = this.pushStack([]);

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function filter(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function not(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function is(selector) {
      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  }); // Initialize a jQuery object
  // A central reference to the root jQuery(document)

  var rootjQuery,
      // A simple way to check for HTML strings
  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
  // Strict HTML recognition (#11290: must start with <)
  // Shortcut simple #id case for speed
  rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
      init = jQuery.fn.init = function (selector, context, root) {
    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

    if (!selector) {
      return this;
    } // Method init() accepts an alternate rootjQuery
    // so migrate can support jQuery.sub (gh-2101)


    root = root || rootjQuery; // Handle HTML strings

    if (typeof selector === "string") {
      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
        // Assume that strings that start and end with <> are HTML and skip the regex check
        match = [null, selector, null];
      } else {
        match = rquickExpr.exec(selector);
      } // Match html or make sure no context is specified for #id


      if (match && (match[1] || !context)) {
        // HANDLE: $(html) -> $(array)
        if (match[1]) {
          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat
          // Intentionally let the error be thrown if parseHTML is not present

          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)

          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
            for (match in context) {
              // Properties of context are called as methods if possible
              if (isFunction(this[match])) {
                this[match](context[match]); // ...and otherwise set as attributes
              } else {
                this.attr(match, context[match]);
              }
            }
          }

          return this; // HANDLE: $(#id)
        } else {
          elem = document.getElementById(match[2]);

          if (elem) {
            // Inject the element directly into the jQuery object
            this[0] = elem;
            this.length = 1;
          }

          return this;
        } // HANDLE: $(expr, $(...))

      } else if (!context || context.jquery) {
        return (context || root).find(selector); // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
      } else {
        return this.constructor(context).find(selector);
      } // HANDLE: $(DOMElement)

    } else if (selector.nodeType) {
      this[0] = selector;
      this.length = 1;
      return this; // HANDLE: $(function)
      // Shortcut for document ready
    } else if (isFunction(selector)) {
      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
      selector(jQuery);
    }

    return jQuery.makeArray(selector, this);
  }; // Give the init function the jQuery prototype for later instantiation


  init.prototype = jQuery.fn; // Initialize central reference

  rootjQuery = jQuery(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
      // Methods guaranteed to produce a unique set when starting from a unique set
  guaranteedUnique = {
    children: true,
    contents: true,
    next: true,
    prev: true
  };
  jQuery.fn.extend({
    has: function has(target) {
      var targets = jQuery(target, this),
          l = targets.length;
      return this.filter(function () {
        var i = 0;

        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function closest(selectors, context) {
      var cur,
          i = 0,
          l = this.length,
          matched = [],
          targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context

      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
              matched.push(cur);
              break;
            }
          }
        }
      }

      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
    },
    // Determine the position of an element within the set
    index: function index(elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      } // Index in selector


      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      } // Locate the position of the desired element


      return indexOf.call(this, // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function add(selector, context) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function addBack(selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}

    return cur;
  }

  jQuery.each({
    parent: function parent(elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function parents(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function parentsUntil(elem, i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function next(elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function prev(elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function nextAll(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function prevAll(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function nextUntil(elem, i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function prevUntil(elem, i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function siblings(elem) {
      return _siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function children(elem) {
      return _siblings(elem.firstChild);
    },
    contents: function contents(elem) {
      if (typeof elem.contentDocument !== "undefined") {
        return elem.contentDocument;
      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
      // Treat the template element as a regular one in browsers that
      // don't support it.


      if (nodeName(elem, "template")) {
        elem = elem.content || elem;
      }

      return jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);

      if (name.slice(-5) !== "Until") {
        selector = until;
      }

      if (selector && typeof selector === "string") {
        matched = jQuery.filter(selector, matched);
      }

      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.uniqueSort(matched);
        } // Reverse order for parents* and prev-derivatives


        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }

      return this.pushStack(matched);
    };
  });
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g; // Convert String-formatted options into Object-formatted ones

  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */


  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
    firing,
        // Last fire value for non-forgettable lists
    memory,
        // Flag to know if list was already fired
    _fired,
        // Flag to prevent firing
    _locked,
        // Actual callback list
    list = [],
        // Queue of execution data for repeatable lists
    queue = [],
        // Index of currently firing callback (modified by add/remove as needed)
    firingIndex = -1,
        // Fire callbacks
    fire = function fire() {
      // Enforce single-firing
      _locked = _locked || options.once; // Execute callbacks for all pending executions,
      // respecting firingIndex overrides and runtime changes

      _fired = firing = true;

      for (; queue.length; firingIndex = -1) {
        memory = queue.shift();

        while (++firingIndex < list.length) {
          // Run callback and check for early termination
          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
            // Jump to end and forget the data so .add doesn't re-fire
            firingIndex = list.length;
            memory = false;
          }
        }
      } // Forget the data if we're done with it


      if (!options.memory) {
        memory = false;
      }

      firing = false; // Clean up if we're done firing for good

      if (_locked) {
        // Keep an empty list if we have data for future add calls
        if (memory) {
          list = []; // Otherwise, this object is spent
        } else {
          list = "";
        }
      }
    },
        // Actual Callbacks object
    self = {
      // Add a callback or a collection of callbacks to the list
      add: function add() {
        if (list) {
          // If we have memory from a past run, we should fire after adding
          if (memory && !firing) {
            firingIndex = list.length - 1;
            queue.push(memory);
          }

          (function add(args) {
            jQuery.each(args, function (_, arg) {
              if (isFunction(arg)) {
                if (!options.unique || !self.has(arg)) {
                  list.push(arg);
                }
              } else if (arg && arg.length && toType(arg) !== "string") {
                // Inspect recursively
                add(arg);
              }
            });
          })(arguments);

          if (memory && !firing) {
            fire();
          }
        }

        return this;
      },
      // Remove a callback from the list
      remove: function remove() {
        jQuery.each(arguments, function (_, arg) {
          var index;

          while ((index = jQuery.inArray(arg, list, index)) > -1) {
            list.splice(index, 1); // Handle firing indexes

            if (index <= firingIndex) {
              firingIndex--;
            }
          }
        });
        return this;
      },
      // Check if a given callback is in the list.
      // If no argument is given, return whether or not list has callbacks attached.
      has: function has(fn) {
        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
      },
      // Remove all callbacks from the list
      empty: function empty() {
        if (list) {
          list = [];
        }

        return this;
      },
      // Disable .fire and .add
      // Abort any current/pending executions
      // Clear all callbacks and values
      disable: function disable() {
        _locked = queue = [];
        list = memory = "";
        return this;
      },
      disabled: function disabled() {
        return !list;
      },
      // Disable .fire
      // Also disable .add unless we have memory (since it would have no effect)
      // Abort any pending executions
      lock: function lock() {
        _locked = queue = [];

        if (!memory && !firing) {
          list = memory = "";
        }

        return this;
      },
      locked: function locked() {
        return !!_locked;
      },
      // Call all callbacks with the given context and arguments
      fireWith: function fireWith(context, args) {
        if (!_locked) {
          args = args || [];
          args = [context, args.slice ? args.slice() : args];
          queue.push(args);

          if (!firing) {
            fire();
          }
        }

        return this;
      },
      // Call all the callbacks with the given arguments
      fire: function fire() {
        self.fireWith(this, arguments);
        return this;
      },
      // To know if the callbacks have already been called at least once
      fired: function fired() {
        return !!_fired;
      }
    };

    return self;
  };

  function Identity(v) {
    return v;
  }

  function Thrower(ex) {
    throw ex;
  }

  function adoptValue(value, resolve, reject, noValue) {
    var method;

    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction(method = value.promise)) {
        method.call(value).done(resolve).fail(reject); // Other thenables
      } else if (value && isFunction(method = value.then)) {
        method.call(value, resolve, reject); // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      } // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.

    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }

  jQuery.extend({
    Deferred: function Deferred(func) {
      var tuples = [// action, add listener, callbacks,
      // ... .then handlers, argument index, [final state]
      ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
          _state = "pending",
          _promise = {
        state: function state() {
          return _state;
        },
        always: function always() {
          deferred.done(arguments).fail(arguments);
          return this;
        },
        "catch": function _catch(fn) {
          return _promise.then(null, fn);
        },
        // Keep pipe for back-compat
        pipe: function pipe()
        /* fnDone, fnFail, fnProgress */
        {
          var fns = arguments;
          return jQuery.Deferred(function (newDefer) {
            jQuery.each(tuples, function (i, tuple) {
              // Map tuples (progress, done, fail) to arguments (done, fail, progress)
              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })
              // deferred.done(function() { bind to newDefer or newDefer.resolve })
              // deferred.fail(function() { bind to newDefer or newDefer.reject })

              deferred[tuple[1]](function () {
                var returned = fn && fn.apply(this, arguments);

                if (returned && isFunction(returned.promise)) {
                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                } else {
                  newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                }
              });
            });
            fns = null;
          }).promise();
        },
        then: function then(onFulfilled, onRejected, onProgress) {
          var maxDepth = 0;

          function resolve(depth, deferred, handler, special) {
            return function () {
              var that = this,
                  args = arguments,
                  mightThrow = function mightThrow() {
                var returned, then; // Support: Promises/A+ section 2.3.3.3.3
                // https://promisesaplus.com/#point-59
                // Ignore double-resolution attempts

                if (depth < maxDepth) {
                  return;
                }

                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1
                // https://promisesaplus.com/#point-48

                if (returned === deferred.promise()) {
                  throw new TypeError("Thenable self-resolution");
                } // Support: Promises/A+ sections 2.3.3.1, 3.5
                // https://promisesaplus.com/#point-54
                // https://promisesaplus.com/#point-75
                // Retrieve `then` only once


                then = returned && ( // Support: Promises/A+ section 2.3.4
                // https://promisesaplus.com/#point-64
                // Only check objects and functions for thenability
                _typeof(returned) === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable

                if (isFunction(then)) {
                  // Special processors (notify) just wait for resolution
                  if (special) {
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress
                  } else {
                    // ...and disregard older resolution values
                    maxDepth++;
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                  } // Handle all other returned values

                } else {
                  // Only substitute handlers pass on context
                  // and multiple values (non-spec behavior)
                  if (handler !== Identity) {
                    that = undefined;
                    args = [returned];
                  } // Process the value(s)
                  // Default process is resolve


                  (special || deferred.resolveWith)(that, args);
                }
              },
                  // Only normal processors (resolve) catch and reject exceptions
              process = special ? mightThrow : function () {
                try {
                  mightThrow();
                } catch (e) {
                  if (jQuery.Deferred.exceptionHook) {
                    jQuery.Deferred.exceptionHook(e, process.stackTrace);
                  } // Support: Promises/A+ section 2.3.3.3.4.1
                  // https://promisesaplus.com/#point-61
                  // Ignore post-resolution exceptions


                  if (depth + 1 >= maxDepth) {
                    // Only substitute handlers pass on context
                    // and multiple values (non-spec behavior)
                    if (handler !== Thrower) {
                      that = undefined;
                      args = [e];
                    }

                    deferred.rejectWith(that, args);
                  }
                }
              }; // Support: Promises/A+ section 2.3.3.3.1
              // https://promisesaplus.com/#point-57
              // Re-resolve promises immediately to dodge false rejection from
              // subsequent errors


              if (depth) {
                process();
              } else {
                // Call an optional hook to record the stack, in case of exception
                // since it's otherwise lost when execution goes async
                if (jQuery.Deferred.getStackHook) {
                  process.stackTrace = jQuery.Deferred.getStackHook();
                }

                window.setTimeout(process);
              }
            };
          }

          return jQuery.Deferred(function (newDefer) {
            // progress_handlers.add( ... )
            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )

            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )

            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
          }).promise();
        },
        // Get a promise for this deferred
        // If obj is provided, the promise aspect is added to the object
        promise: function promise(obj) {
          return obj != null ? jQuery.extend(obj, _promise) : _promise;
        }
      },
          deferred = {}; // Add list-specific methods

      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
            stateString = tuple[5]; // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add

        _promise[tuple[1]] = list.add; // Handle state

        if (stateString) {
          list.add(function () {
            // state = "resolved" (i.e., fulfilled)
            // state = "rejected"
            _state = stateString;
          }, // rejected_callbacks.disable
          // fulfilled_callbacks.disable
          tuples[3 - i][2].disable, // rejected_handlers.disable
          // fulfilled_handlers.disable
          tuples[3 - i][3].disable, // progress_callbacks.lock
          tuples[0][2].lock, // progress_handlers.lock
          tuples[0][3].lock);
        } // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire


        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }

        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
          return this;
        }; // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith


        deferred[tuple[0] + "With"] = list.fireWith;
      }); // Make the deferred a promise

      _promise.promise(deferred); // Call given func if any


      if (func) {
        func.call(deferred, deferred);
      } // All done!


      return deferred;
    },
    // Deferred helper
    when: function when(singleValue) {
      var // count of uncompleted subordinates
      remaining = arguments.length,
          // count of unprocessed arguments
      i = remaining,
          // subordinate fulfillment data
      resolveContexts = Array(i),
          resolveValues = _slice.call(arguments),
          // the master Deferred
      master = jQuery.Deferred(),
          // subordinate callback factory
      updateFunc = function updateFunc(i) {
        return function (value) {
          resolveContexts[i] = this;
          resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;

          if (! --remaining) {
            master.resolveWith(resolveContexts, resolveValues);
          }
        };
      }; // Single- and empty arguments are adopted like Promise.resolve


      if (remaining <= 1) {
        adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)

        if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
          return master.then();
        }
      } // Multiple arguments are aggregated like Promise.all array elements


      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), master.reject);
      }

      return master.promise();
    }
  }); // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.

  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  jQuery.Deferred.exceptionHook = function (error, stack) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
    }
  };

  jQuery.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  }; // The deferred used on DOM ready


  var readyList = jQuery.Deferred();

  jQuery.fn.ready = function (fn) {
    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup
    // happens at the time of error handling instead of callback
    // registration.
    ["catch"](function (error) {
      jQuery.readyException(error);
    });
    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,
    // Handle when the DOM is ready
    ready: function ready(wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      } // Remember that the DOM is ready


      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      } // If there are functions bound, to execute


      readyList.resolveWith(document, [jQuery]);
    }
  });
  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method

  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  } // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon


  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

    window.addEventListener("load", completed);
  } // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function


  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
        len = elems.length,
        bulk = key == null; // Sets many values

    if (toType(key) === "object") {
      chainable = true;

      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      } // Sets one value

    } else if (value !== undefined) {
      chainable = true;

      if (!isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null; // ...except when executing function values
        } else {
          bulk = fn;

          fn = function fn(elem, key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }

    if (chainable) {
      return elems;
    } // Gets


    if (bulk) {
      return fn.call(elems);
    }

    return len ? fn(elems[0], key) : emptyGet;
  }; // Matches dashed string for camelizing


  var rmsPrefix = /^-ms-/,
      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()

  function fcamelCase(all, letter) {
    return letter.toUpperCase();
  } // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (#9572)


  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }

  var acceptData = function acceptData(owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;
  Data.prototype = {
    cache: function cache(owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando]; // If not, create one

      if (!value) {
        value = {}; // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.

        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }

      return value;
    },
    set: function set(owner, data, value) {
      var prop,
          cache = this.cache(owner); // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)

      if (typeof data === "string") {
        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }

      return cache;
    },
    get: function get(owner, key) {
      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
      owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function access(owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === "string" && value === undefined) {
        return this.get(owner, key);
      } // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //


      this.set(owner, key, value); // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]

      return value !== undefined ? value : key;
    },
    remove: function remove(owner, key) {
      var i,
          cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key); // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace

          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }

        i = key.length;

        while (i--) {
          delete cache[key[i]];
        }
      } // Remove the expando if there's no more data


      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function hasData(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();
  var dataUser = new Data(); //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      rmultiDash = /[A-Z]/g;

  function getData(data) {
    if (data === "true") {
      return true;
    }

    if (data === "false") {
      return false;
    }

    if (data === "null") {
      return null;
    } // Only convert to a number if it doesn't change the string


    if (data === +data + "") {
      return +data;
    }

    if (rbrace.test(data)) {
      return JSON.parse(data);
    }

    return data;
  }

  function dataAttr(elem, key, data) {
    var name; // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute

    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {} // Make sure we set the data so it isn't changed later


        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }

    return data;
  }

  jQuery.extend({
    hasData: function hasData(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },
    data: function data(elem, name, _data) {
      return dataUser.access(elem, name, _data);
    },
    removeData: function removeData(elem, name) {
      dataUser.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function _data(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },
    _removeData: function _removeData(elem, name) {
      dataPriv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function data(key, value) {
      var i,
          name,
          data,
          elem = this[0],
          attrs = elem && elem.attributes; // Gets all values

      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;

            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;

                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }

            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }

        return data;
      } // Sets multiple values


      if (_typeof(key) === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(this, function (value) {
        var data; // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.

        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // The key will always be camelCased in Data
          data = dataUser.get(elem, key);

          if (data !== undefined) {
            return data;
          } // Attempt to "discover" the data in
          // HTML5 custom data-* attrs


          data = dataAttr(elem, key);

          if (data !== undefined) {
            return data;
          } // We tried really hard, but the data doesn't exist.


          return;
        } // Set the data...


        this.each(function () {
          // We always store the camelCased key
          dataUser.set(this, key, value);
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function removeData(key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function queue(elem, type, data) {
      var queue;

      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }

        return queue || [];
      }
    },
    dequeue: function dequeue(elem, type) {
      type = type || "fx";

      var queue = jQuery.queue(elem, type),
          startLength = queue.length,
          fn = queue.shift(),
          hooks = jQuery._queueHooks(elem, type),
          next = function next() {
        jQuery.dequeue(elem, type);
      }; // If the fx queue is dequeued, always remove the progress sentinel


      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        } // Clear up the last queue stop function


        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function _queueHooks(elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: jQuery.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function queue(type, data) {
      var setter = 2;

      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue

        jQuery._queueHooks(this, type);

        if (type === "fx" && queue[0] !== "inprogress") {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function dequeue(type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function clearQueue(type) {
      return this.queue(type || "fx", []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function promise(type, obj) {
      var tmp,
          count = 1,
          defer = jQuery.Deferred(),
          elements = this,
          i = this.length,
          resolve = function resolve() {
        if (! --count) {
          defer.resolveWith(elements, [elements]);
        }
      };

      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }

      type = type || "fx";

      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");

        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }

      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
  var cssExpand = ["Top", "Right", "Bottom", "Left"];
  var documentElement = document.documentElement;

  var isAttached = function isAttached(elem) {
    return jQuery.contains(elem.ownerDocument, elem);
  },
      composed = {
    composed: true
  }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  // Check attachment across shadow DOM boundaries when possible (gh-3504)
  // Support: iOS 10.0-10.2 only
  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  // leading to errors. We need to check for `getRootNode`.


  if (documentElement.getRootNode) {
    isAttached = function isAttached(elem) {
      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
    };
  }

  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem; // Inline style trumps all

    return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
    // Support: Firefox <=43 - 45
    // Disconnected elements can have computed display: none, so first confirm that elem is
    // in the document.
    isAttached(elem) && jQuery.css(elem, "display") === "none";
  };

  var swap = function swap(elem, options, callback, args) {
    var ret,
        name,
        old = {}; // Remember the old values, and insert the new ones

    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.apply(elem, args || []); // Revert the old values

    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
        scale,
        maxIterations = 20,
        currentValue = tween ? function () {
      return tween.cur();
    } : function () {
      return jQuery.css(elem, prop, "");
    },
        initial = currentValue(),
        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
        // Starting value computation is required for potential unit mismatches
    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2; // Trust units reported by jQuery.css

      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point

      initialInUnit = +initial || 1;

      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);

        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
          maxIterations = 0;
        }

        initialInUnit = initialInUnit / scale;
      }

      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on

      valueParts = valueParts || [];
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }

    return adjusted;
  }

  var defaultDisplayMap = {};

  function getDefaultDisplay(elem) {
    var temp,
        doc = elem.ownerDocument,
        nodeName = elem.nodeName,
        display = defaultDisplayMap[nodeName];

    if (display) {
      return display;
    }

    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, "display");
    temp.parentNode.removeChild(temp);

    if (display === "none") {
      display = "block";
    }

    defaultDisplayMap[nodeName] = display;
    return display;
  }

  function showHide(elements, show) {
    var display,
        elem,
        values = [],
        index = 0,
        length = elements.length; // Determine new display value for elements that need to change

    for (; index < length; index++) {
      elem = elements[index];

      if (!elem.style) {
        continue;
      }

      display = elem.style.display;

      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;

          if (!values[index]) {
            elem.style.display = "";
          }
        }

        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none"; // Remember what we're overwriting

          dataPriv.set(elem, "display", display);
        }
      }
    } // Set the display of the elements in a second loop to avoid constant reflow


    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    show: function show() {
      return showHide(this, true);
    },
    hide: function hide() {
      return showHide(this);
    },
    toggle: function toggle(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;
  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i; // We have to close these tags to support XHTML (#13200)

  var wrapMap = {
    // Support: IE <=9 only
    option: [1, "<select multiple='multiple'>", "</select>"],
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  }; // Support: IE <=9 only

  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
    var ret;

    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }

    if (tag === undefined || tag && nodeName(context, tag)) {
      return jQuery.merge([context], ret);
    }

    return ret;
  } // Mark scripts as having already been evaluated


  function setGlobalEval(elems, refElements) {
    var i = 0,
        l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
        tmp,
        tag,
        wrap,
        attached,
        j,
        fragment = context.createDocumentFragment(),
        nodes = [],
        i = 0,
        l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation

          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

          j = wrap[0];

          while (j--) {
            tmp = tmp.lastChild;
          } // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit


          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container

          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)

          tmp.textContent = "";
        }
      }
    } // Remove wrapper from fragment


    fragment.textContent = "";
    i = 0;

    while (elem = nodes[i++]) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }

        continue;
      }

      attached = isAttached(elem); // Append to fragment

      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history

      if (attached) {
        setGlobalEval(tmp);
      } // Capture executables


      if (scripts) {
        j = 0;

        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  (function () {
    var fragment = document.createDocumentFragment(),
        div = fragment.appendChild(document.createElement("div")),
        input = document.createElement("input"); // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)

    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input); // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments

    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned

    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
  })();

  var rkeyEvent = /^key/,
      rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  } // Support: IE <=9 - 11+
  // focus() and blur() are asynchronous, except when they are no-op.
  // So expect focus to be synchronous when the element is already active,
  // and blur to be synchronous when the element is not already active.
  // (focus and blur are always synchronous in other supported browsers,
  // this just defines when we can count on it).


  function expectSync(elem, type) {
    return elem === safeActiveElement() === (type === "focus");
  } // Support: IE <=9 only
  // Accessing document.activeElement can throw unexpectedly
  // https://bugs.jquery.com/ticket/13393


  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function _on(elem, types, selector, data, fn, one) {
    var origFn, type; // Types can be a map of types/handlers

    if (_typeof(types) === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }

      for (type in types) {
        _on(elem, type, selector, data, types[type], one);
      }

      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }

    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;

      fn = function fn(event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      }; // Use same guid so caller can remove using origFn


      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }

    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }
  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */


  jQuery.event = {
    global: {},
    add: function add(elem, types, handler, data, selector) {
      var handleObjIn,
          eventHandle,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.get(elem); // Don't attach events to noData or text/comment nodes (but allow plain objects)

      if (!elemData) {
        return;
      } // Caller can pass in an object of custom data in lieu of the handler


      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      } // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)


      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      } // Make sure that the handler has a unique ID, used to find/remove it later


      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      } // Init the element's event structure and main handler, if this is the first


      if (!(events = elemData.events)) {
        events = elemData.events = {};
      }

      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      } // Handle multiple events separated by a space


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

        if (!type) {
          continue;
        } // If event changes its type, use the special event handlers for the changed type


        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn); // Init the event handler queue if we're the first

        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false

          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        } // Add to the element's handler list, delegates in front


        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        } // Keep track of which events have ever been used, for event optimization


        jQuery.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function remove(elem, types, handler, selector, mappedTypes) {
      var j,
          origCount,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      } // Once for each type.namespace in types; type may be omitted


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }

          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

        origCount = j = handlers.length;

        while (j--) {
          handleObj = handlers[j];

          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }

            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        } // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)


        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      } // Remove data and the expando if it's no longer used


      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },
    dispatch: function dispatch(nativeEvent) {
      // Make a writable jQuery.Event from the native event object
      var event = jQuery.event.fix(nativeEvent);
      var i,
          j,
          ret,
          matched,
          handleObj,
          handlerQueue,
          args = new Array(arguments.length),
          handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event

      args[0] = event;

      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      } // Determine handlers


      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

      i = 0;

      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;

        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      } // Call the postDispatch hook for the mapped type


      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },
    handlers: function handlers(event, _handlers) {
      var i,
          handleObj,
          sel,
          matchedHandlers,
          matchedSelectors,
          handlerQueue = [],
          delegateCount = _handlers.delegateCount,
          cur = event.target; // Find delegate handlers

      if (delegateCount && // Support: IE <=9
      // Black-hole SVG <use> instance trees (trac-13180)
      cur.nodeType && // Support: Firefox <=42
      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
      // Support: IE 11 only
      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
      !(event.type === "click" && event.button >= 1)) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (#13208)
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
            matchedHandlers = [];
            matchedSelectors = {};

            for (i = 0; i < delegateCount; i++) {
              handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)

              sel = handleObj.selector + " ";

              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
              }

              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }

            if (matchedHandlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matchedHandlers
              });
            }
          }
        }
      } // Add the remaining (directly-bound) handlers


      cur = this;

      if (delegateCount < _handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: _handlers.slice(delegateCount)
        });
      }

      return handlerQueue;
    },
    addProp: function addProp(name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,
        get: isFunction(hook) ? function () {
          if (this.originalEvent) {
            return hook(this.originalEvent);
          }
        } : function () {
          if (this.originalEvent) {
            return this.originalEvent[name];
          }
        },
        set: function set(value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    },
    fix: function fix(originalEvent) {
      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function setup(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data; // Claim the first handler

          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, "click", returnTrue);
          } // Return false to allow normal processing in the caller


          return false;
        },
        trigger: function trigger(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data; // Force setup before triggering a click

          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            leverageNative(el, "click");
          } // Return non-false to allow normal event-path propagation


          return true;
        },
        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function _default(event) {
          var target = event.target;
          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  }; // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.

  function leverageNative(el, type, expectSync) {
    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
    if (!expectSync) {
      if (dataPriv.get(el, type) === undefined) {
        jQuery.event.add(el, type, returnTrue);
      }

      return;
    } // Register the controller as a special universal handler for all event namespaces


    dataPriv.set(el, type, false);
    jQuery.event.add(el, type, {
      namespace: false,
      handler: function handler(event) {
        var notAsync,
            result,
            saved = dataPriv.get(this, type);

        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          // Saved data should be false in such cases, but might be a leftover capture object
          // from an async native handler (gh-4350)
          if (!saved.length) {
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = _slice.call(arguments);
            dataPriv.set(this, type, saved); // Trigger the native event and capture its result
            // Support: IE <=9 - 11+
            // focus() and blur() are asynchronous

            notAsync = expectSync(this, type);
            this[type]();
            result = dataPriv.get(this, type);

            if (saved !== result || notAsync) {
              dataPriv.set(this, type, false);
            } else {
              result = {};
            }

            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault();
              return result.value;
            } // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering the
            // native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.

          } else if ((jQuery.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          } // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments

        } else if (saved.length) {
          // ...and capture the result
          dataPriv.set(this, type, {
            value: jQuery.event.trigger( // Support: IE <=9 - 11+
            // Extend with the prototype to reset the above stopImmediatePropagation()
            jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
          }); // Abort handling of the native event

          event.stopImmediatePropagation();
        }
      }
    });
  }

  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    } // Event object


    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type; // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.

      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
      src.returnValue === false ? returnTrue : returnFalse; // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (#504, #13143)

      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget; // Event type
    } else {
      this.type = src;
    } // Put explicitly provided properties onto the event object


    if (props) {
      jQuery.extend(this, props);
    } // Create a timestamp if incoming event doesn't have one


    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed

    this[jQuery.expando] = true;
  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function preventDefault() {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    }
  }; // Includes all common event props including KeyEvent and MouseEvent specific props

  jQuery.each({
    altKey: true,
    bubbles: true,
    cancelable: true,
    changedTouches: true,
    ctrlKey: true,
    detail: true,
    eventPhase: true,
    metaKey: true,
    pageX: true,
    pageY: true,
    shiftKey: true,
    view: true,
    "char": true,
    code: true,
    charCode: true,
    key: true,
    keyCode: true,
    button: true,
    buttons: true,
    clientX: true,
    clientY: true,
    offsetX: true,
    offsetY: true,
    pointerId: true,
    pointerType: true,
    screenX: true,
    screenY: true,
    targetTouches: true,
    toElement: true,
    touches: true,
    which: function which(event) {
      var button = event.button; // Add which for key events

      if (event.which == null && rkeyEvent.test(event.type)) {
        return event.charCode != null ? event.charCode : event.keyCode;
      } // Add which for click: 1 === left; 2 === middle; 3 === right


      if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
        if (button & 1) {
          return 1;
        }

        if (button & 2) {
          return 3;
        }

        if (button & 4) {
          return 2;
        }

        return 0;
      }

      return event.which;
    }
  }, jQuery.event.addProp);
  jQuery.each({
    focus: "focusin",
    blur: "focusout"
  }, function (type, delegateType) {
    jQuery.event.special[type] = {
      // Utilize native event if possible so blur/focus sequence is correct
      setup: function setup() {
        // Claim the first handler
        // dataPriv.set( this, "focus", ... )
        // dataPriv.set( this, "blur", ... )
        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller

        return false;
      },
      trigger: function trigger() {
        // Force setup before trigger
        leverageNative(this, type); // Return non-false to allow normal event-path propagation

        return true;
      },
      delegateType: delegateType
    };
  }); // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).

  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function handle(event) {
        var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window

        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }

        return ret;
      }
    };
  });
  jQuery.fn.extend({
    on: function on(types, selector, data, fn) {
      return _on(this, types, selector, data, fn);
    },
    one: function one(types, selector, data, fn) {
      return _on(this, types, selector, data, fn, 1);
    },
    off: function off(types, selector, fn) {
      var handleObj, type;

      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }

      if (_typeof(types) === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }

        return this;
      }

      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }

      if (fn === false) {
        fn = returnFalse;
      }

      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    }
  });
  var
  /* eslint-disable max-len */
  // See https://github.com/eslint/eslint/issues/3229
  rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

  /* eslint-enable */
  // Support: IE <=10 - 11, Edge 12 - 13 only
  // In IE/Edge using regex groups here causes severe slowdowns.
  // See https://connect.microsoft.com/IE/feedback/details/1736512/
  rnoInnerhtml = /<script|<style|<link/i,
      // checked="checked" or checked
  rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
      rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g; // Prefer a tbody over its parent table for containing new rows

  function manipulationTarget(elem, content) {
    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
      return jQuery(elem).children("tbody")[0] || elem;
    }

    return elem;
  } // Replace/restore the type attribute of script elements for safe DOM manipulation


  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }

  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    } // 1. Copy private data: events, handlers, etc.


    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.access(src);
      pdataCur = dataPriv.set(dest, pdataOld);
      events = pdataOld.events;

      if (events) {
        delete pdataCur.handle;
        pdataCur.events = {};

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    } // 2. Copy user data


    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);
      dataUser.set(dest, udataCur);
    }
  } // Fix IE bugs, see support tests


  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.

    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = concat.apply([], args);
    var fragment,
        first,
        scripts,
        hasScripts,
        node,
        doc,
        i = 0,
        l = collection.length,
        iNoClone = l - 1,
        value = args[0],
        valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit

    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);

        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }

        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      } // Require either new content or an interest in ignored elements to invoke the callback


      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length; // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).

        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion

          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];

            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl && !node.noModule) {
                  jQuery._evalUrl(node.src, {
                    nonce: node.nonce || node.getAttribute("nonce")
                  });
                }
              } else {
                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function _remove(elem, selector, keepData) {
    var node,
        nodes = selector ? jQuery.filter(selector, elem) : elem,
        i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, "script"));
        }

        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function htmlPrefilter(html) {
      return html.replace(rxhtmlTag, "<$1></$2>");
    },
    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
      var i,
          l,
          srcElements,
          destElements,
          clone = elem.cloneNode(true),
          inPage = isAttached(elem); // Fix IE cloning issues

      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      } // Copy the events from the original to the clone


      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      } // Preserve script evaluation history


      destElements = getAll(clone, "script");

      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      } // Return the cloned set


      return clone;
    },
    cleanData: function cleanData(elems) {
      var data,
          elem,
          type,
          special = jQuery.event.special,
          i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            } // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove


            elem[dataPriv.expando] = undefined;
          }

          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });
  jQuery.fn.extend({
    detach: function detach(selector) {
      return _remove(this, selector, true);
    },
    remove: function remove(selector) {
      return _remove(this, selector);
    },
    text: function text(value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function append() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function prepend() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function before() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function after() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty: function empty() {
      var elem,
          i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes

          elem.textContent = "";
        }
      }

      return this;
    },
    clone: function clone(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function html(value) {
      return access(this, function (value) {
        var elem = this[0] || {},
            i = 0,
            l = this.length;

        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        } // See if we can take a shortcut and just use innerHTML


        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = jQuery.htmlPrefilter(value);

          try {
            for (; i < l; i++) {
              elem = this[i] || {}; // Remove element nodes and prevent memory leaks

              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }

            elem = 0; // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }

        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function replaceWith() {
      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;

        if (jQuery.inArray(this, ignored) < 0) {
          jQuery.cleanData(getAll(this));

          if (parent) {
            parent.replaceChild(elem, this);
          }
        } // Force callback invocation

      }, ignored);
    }
  });
  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only
        // .get() because push.apply(_, arraylike) throws on ancient WebKit

        push.apply(ret, elems.get());
      }

      return this.pushStack(ret);
    };
  });
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

  var getStyles = function getStyles(elem) {
    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var rboxStyle = new RegExp(cssExpand.join("|"), "i");

  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }

      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);
      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't

      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements

      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)

      div.style.position = "absolute";
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
      documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed

      div = null;
    }

    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }

    var pixelPositionVal,
        boxSizingReliableVal,
        scrollboxSizeVal,
        pixelBoxStylesVal,
        reliableMarginLeftVal,
        container = document.createElement("div"),
        div = document.createElement("div"); // Finish early in limited (non-browser) environments

    if (!div.style) {
      return;
    } // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (#8908)


    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
    jQuery.extend(support, {
      boxSizingReliable: function boxSizingReliable() {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function pixelBoxStyles() {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function pixelPosition() {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function reliableMarginLeft() {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function scrollboxSize() {
        computeStyleTests();
        return scrollboxSizeVal;
      }
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
        minWidth,
        maxWidth,
        ret,
        // Support: Firefox 51+
    // Retrieving style before computed somehow
    // fixes an issue with getting wrong values
    // on detached elements
    style = elem.style;
    computed = computed || getStyles(elem); // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, #12537)
    //   .css('--customProperty) (#3144)

    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];

      if (ret === "" && !isAttached(elem)) {
        ret = jQuery.style(elem, name);
      } // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values


      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth; // Put in the new values to get a computed value out

        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width; // Revert the changed values

        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined ? // Support: IE <=9 - 11 only
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function get() {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        } // Hook needed; redefine it so that the support test is not executed again.


        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }

  var cssPrefixes = ["Webkit", "Moz", "ms"],
      emptyStyle = document.createElement("div").style,
      vendorProps = {}; // Return a vendor-prefixed property or undefined

  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
        i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;

      if (name in emptyStyle) {
        return name;
      }
    }
  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property


  function finalPropName(name) {
    var _final = jQuery.cssProps[name] || vendorProps[name];

    if (_final) {
      return _final;
    }

    if (name in emptyStyle) {
      return name;
    }

    return vendorProps[name] = vendorPropName(name) || name;
  }

  var // Swappable if display is none or starts with table
  // except "table", "table-cell", or "table-caption"
  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
  rdisplayswap = /^(none|table(?!-c[ea]).+)/,
      rcustomProp = /^--/,
      cssShow = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  },
      cssNormalTransform = {
    letterSpacing: "0",
    fontWeight: "400"
  };

  function setPositiveNumber(elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }

  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
    var i = dimension === "width" ? 1 : 0,
        extra = 0,
        delta = 0; // Adjustment may not be necessary

    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }

    for (; i < 4; i += 2) {
      // Both box models exclude margin
      if (box === "margin") {
        delta += jQuery.css(elem, box + cssExpand[i], true, styles);
      } // If we get here with a content-box, we're seeking "padding" or "border" or "margin"


      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border

        if (box !== "padding") {
          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise
        } else {
          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        } // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"

      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        } // For "content" or "padding", subtract border


        if (box !== "margin") {
          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    } // Account for positive content-box scroll gutter when requested by providing computedVal


    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
      // Use an explicit zero to avoid NaN (gh-3964)
      )) || 0;
    }

    return delta;
  }

  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
    // Fake content-box until we know it's needed to know the true value.
    boxSizingNeeded = !support.boxSizingReliable() || extra,
        isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
        valueIsBorderBox = isBorderBox,
        val = curCSS(elem, dimension, styles),
        offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.

    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }

      val = "auto";
    } // Fall back to offsetWidth/offsetHeight when value is "auto"
    // This happens for inline elements with no explicit setting (gh-3571)
    // Support: Android <=4.1 - 4.3 only
    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
    // Support: IE 9-11 only
    // Also use offsetWidth/offsetHeight for when box sizing is unreliable
    // We use getClientRects() to check for hidden/disconnected.
    // In those cases, the computed value can be trusted to be border-box


    if ((!support.boxSizingReliable() && isBorderBox || val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && elem.getClientRects().length) {
      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.

      valueIsBorderBox = offsetProp in elem;

      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    } // Normalize "" and auto


    val = parseFloat(val) || 0; // Adjust for the element's box model

    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
    val) + "px";
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function get(elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      "animationIterationCount": true,
      "columnCount": true,
      "fillOpacity": true,
      "flexGrow": true,
      "flexShrink": true,
      "fontWeight": true,
      "gridArea": true,
      "gridColumn": true,
      "gridColumnEnd": true,
      "gridColumnStart": true,
      "gridRow": true,
      "gridRowEnd": true,
      "gridRowStart": true,
      "lineHeight": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},
    // Get and set the style property on a DOM Node
    style: function style(elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      } // Make sure that we're working with the right name


      var ret,
          type,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name),
          style = elem.style; // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Gets hook for the prefixed version, then unprefixed version


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value

      if (value !== undefined) {
        type = _typeof(value); // Convert "+=" or "-=" to relative numbers (#7345)

        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret); // Fixes bug #9237

          type = "number";
        } // Make sure that null and NaN values aren't set (#7116)


        if (value == null || value !== value) {
          return;
        } // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.


        if (type === "number" && !isCustomProp) {
          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
        } // background-* props affect original clone's values


        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        } // If a hook was provided, use that value, otherwise just set the specified value


        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        } // Otherwise just get the value from the style object


        return style[name];
      }
    },
    css: function css(elem, name, extra, styles) {
      var val,
          num,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Try prefixed name followed by the unprefixed name


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      } // Otherwise, if a way to get the computed value exists, use that


      if (val === undefined) {
        val = curCSS(elem, name, styles);
      } // Convert "normal" to computed value


      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      } // Make numeric if forced or a qualifier was provided and val looks numeric


      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    }
  });
  jQuery.each(["height", "width"], function (i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function get(elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+
          // Table columns in Safari have non-zero offsetWidth & zero
          // getBoundingClientRect().width unless display is changed.
          // Support: IE <=11 only
          // Running getBoundingClientRect on a disconnected node
          // in IE throws an error.
          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, dimension, extra);
          }) : getWidthOrHeight(elem, dimension, extra);
        }
      },
      set: function set(elem, value, extra) {
        var matches,
            styles = getStyles(elem),
            // Only read styles.position if the test has a chance to fail
        // to avoid forcing a reflow.
        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",
            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
        boxSizingNeeded = scrollboxSizeBuggy || extra,
            isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)

        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
        } // Convert to pixels if value adjustment is needed


        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }

        return setPositiveNumber(elem, value, subtract);
      }
    };
  });
  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
        marginLeft: 0
      }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  }); // These hooks are used by animate to expand properties

  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function expand(value) {
        var i = 0,
            expanded = {},
            // Assumes a single number if not a string
        parts = typeof value === "string" ? value.split(" ") : [value];

        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }

        return expanded;
      }
    };

    if (prefix !== "margin") {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function css(name, value) {
      return access(this, function (elem, name, value) {
        var styles,
            len,
            map = {},
            i = 0;

        if (Array.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;

          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }

          return map;
        }

        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    }
  });

  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }

  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function init(elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    },
    cur: function cur() {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function run(percent) {
      var eased,
          hooks = Tween.propHooks[this.prop];

      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }

      this.now = (this.end - this.start) * eased + this.start;

      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }

      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }

      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function get(tween) {
        var result; // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.

        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
          return tween.elem[tween.prop];
        } // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.


        result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.

        return !result || result === "auto" ? 0 : result;
      },
      set: function set(tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  }; // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes

  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function set(tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  jQuery.easing = {
    linear: function linear(p) {
      return p;
    },
    swing: function swing(p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing"
  };
  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point

  jQuery.fx.step = {};
  var fxNow,
      inProgress,
      rfxtypes = /^(?:toggle|show|hide)$/,
      rrun = /queueHooks$/;

  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, jQuery.fx.interval);
      }

      jQuery.fx.tick();
    }
  } // Animations created synchronously will run synchronously


  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = Date.now();
  } // Generate parameters to create a standard animation


  function genFx(type, includeWidth) {
    var which,
        i = 0,
        attrs = {
      height: type
    }; // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right

    includeWidth = includeWidth ? 1 : 0;

    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }

    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween(value, prop, animation) {
    var tween,
        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
        index = 0,
        length = collection.length;

    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter(elem, props, opts) {
    var prop,
        value,
        toggle,
        hooks,
        oldfire,
        propTween,
        restoreDisplay,
        display,
        isBox = "width" in props || "height" in props,
        anim = this,
        orig = {},
        style = elem.style,
        hidden = elem.nodeType && isHiddenWithinTree(elem),
        dataShow = dataPriv.get(elem, "fxshow"); // Queue-skipping animations hijack the fx hooks

    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, "fx");

      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;

        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }

      hooks.unqueued++;
      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;

          if (!jQuery.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    } // Detect show/hide animations


    for (prop in props) {
      value = props[prop];

      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";

        if (value === (hidden ? "hide" : "show")) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true; // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }

        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
      }
    } // Bail out if this is a no-op like .hide().hide()


    propTween = !jQuery.isEmptyObject(props);

    if (!propTween && jQuery.isEmptyObject(orig)) {
      return;
    } // Restrict "overflow" and "display" styles during box animations


    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade

      restoreDisplay = dataShow && dataShow.display;

      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, "display");
      }

      display = jQuery.css(elem, "display");

      if (display === "none") {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = jQuery.css(elem, "display");
          showHide([elem]);
        }
      } // Animate inline elements as inline-block


      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
        if (jQuery.css(elem, "float") === "none") {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function () {
              style.display = restoreDisplay;
            });

            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === "none" ? "" : display;
            }
          }

          style.display = "inline-block";
        }
      }
    }

    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    } // Implement show/hide animations


    propTween = false;

    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ("hidden" in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, "fxshow", {
            display: restoreDisplay
          });
        } // Store hidden/visible for toggle so `.stop().toggle()` "reverses"


        if (toggle) {
          dataShow.hidden = !hidden;
        } // Show elements before animating them


        if (hidden) {
          showHide([elem], true);
        }
        /* eslint-disable no-loop-func */


        anim.done(function () {
          /* eslint-enable no-loop-func */
          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }

          dataPriv.remove(elem, "fxshow");

          for (prop in orig) {
            jQuery.style(elem, prop, orig[prop]);
          }
        });
      } // Per-property setup


      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;

        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }

  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass

    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];

      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }

      if (index !== name) {
        props[name] = value;
        delete props[index];
      }

      hooks = jQuery.cssHooks[name];

      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name]; // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"

        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }

  function Animation(elem, properties, options) {
    var result,
        stopped,
        index = 0,
        length = Animation.prefilters.length,
        deferred = jQuery.Deferred().always(function () {
      // Don't match elem in the :animated selector
      delete tick.elem;
    }),
        tick = function tick() {
      if (stopped) {
        return false;
      }

      var currentTime = fxNow || createFxNow(),
          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // Support: Android 2.3 only
      // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
      temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

      for (; index < length; index++) {
        animation.tweens[index].run(percent);
      }

      deferred.notifyWith(elem, [animation, percent, remaining]); // If there's more to do, yield

      if (percent < 1 && length) {
        return remaining;
      } // If this was an empty animation, synthesize a final progress notification


      if (!length) {
        deferred.notifyWith(elem, [animation, 1, 0]);
      } // Resolve the animation and report its conclusion


      deferred.resolveWith(elem, [animation]);
      return false;
    },
        animation = deferred.promise({
      elem: elem,
      props: jQuery.extend({}, properties),
      opts: jQuery.extend(true, {
        specialEasing: {},
        easing: jQuery.easing._default
      }, options),
      originalProperties: properties,
      originalOptions: options,
      startTime: fxNow || createFxNow(),
      duration: options.duration,
      tweens: [],
      createTween: function createTween(prop, end) {
        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
        animation.tweens.push(tween);
        return tween;
      },
      stop: function stop(gotoEnd) {
        var index = 0,
            // If we are going to the end, we want to run all the tweens
        // otherwise we skip this part
        length = gotoEnd ? animation.tweens.length : 0;

        if (stopped) {
          return this;
        }

        stopped = true;

        for (; index < length; index++) {
          animation.tweens[index].run(1);
        } // Resolve when we played the last frame; otherwise, reject


        if (gotoEnd) {
          deferred.notifyWith(elem, [animation, 1, 0]);
          deferred.resolveWith(elem, [animation, gotoEnd]);
        } else {
          deferred.rejectWith(elem, [animation, gotoEnd]);
        }

        return this;
      }
    }),
        props = animation.props;

    propFilter(props, animation.opts.specialEasing);

    for (; index < length; index++) {
      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);

      if (result) {
        if (isFunction(result.stop)) {
          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
        }

        return result;
      }
    }

    jQuery.map(props, createTween, animation);

    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    } // Attach callbacks from options


    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    return animation;
  }

  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      "*": [function (prop, value) {
        var tween = this.createTween(prop, value);
        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
        return tween;
      }]
    },
    tweener: function tweener(props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnothtmlwhite);
      }

      var prop,
          index = 0,
          length = props.length;

      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },
    prefilters: [defaultPrefilter],
    prefilter: function prefilter(callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });

  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && _typeof(speed) === "object" ? jQuery.extend({}, speed) : {
      complete: fn || !fn && easing || isFunction(speed) && speed,
      duration: speed,
      easing: fn && easing || easing && !isFunction(easing) && easing
    }; // Go to the end state if fx are off

    if (jQuery.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== "number") {
        if (opt.duration in jQuery.fx.speeds) {
          opt.duration = jQuery.fx.speeds[opt.duration];
        } else {
          opt.duration = jQuery.fx.speeds._default;
        }
      }
    } // Normalize opt.queue - true/undefined/null -> "fx"


    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    } // Queueing


    opt.old = opt.complete;

    opt.complete = function () {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }

      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function fadeTo(speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return this.filter(isHiddenWithinTree).css("opacity", 0).show() // Animate to the value specified
      .end().animate({
        opacity: to
      }, speed, easing, callback);
    },
    animate: function animate(prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
          optall = jQuery.speed(speed, easing, callback),
          doAnimation = function doAnimation() {
        // Operate on a copy of prop so per-property easing won't be lost
        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately

        if (empty || dataPriv.get(this, "finish")) {
          anim.stop(true);
        }
      };

      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function stop(type, clearQueue, gotoEnd) {
      var stopQueue = function stopQueue(hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };

      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }

      if (clearQueue && type !== false) {
        this.queue(type || "fx", []);
      }

      return this.each(function () {
        var dequeue = true,
            index = type != null && type + "queueHooks",
            timers = jQuery.timers,
            data = dataPriv.get(this);

        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }

        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        } // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.


        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function finish(type) {
      if (type !== false) {
        type = type || "fx";
      }

      return this.each(function () {
        var index,
            data = dataPriv.get(this),
            queue = data[type + "queue"],
            hooks = data[type + "queueHooks"],
            timers = jQuery.timers,
            length = queue ? queue.length : 0; // Enable finishing flag on private data

        data.finish = true; // Empty the queue first

        jQuery.queue(this, type, []);

        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        } // Look for any active animations, and finish them


        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        } // Look for any animations in the old queue and finish them


        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        } // Turn off finishing flag


        delete data.finish;
      });
    }
  });
  jQuery.each(["toggle", "show", "hide"], function (i, name) {
    var cssFn = jQuery.fn[name];

    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  }); // Generate shortcuts for custom animations

  jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: {
      opacity: "show"
    },
    fadeOut: {
      opacity: "hide"
    },
    fadeToggle: {
      opacity: "toggle"
    }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  jQuery.timers = [];

  jQuery.fx.tick = function () {
    var timer,
        i = 0,
        timers = jQuery.timers;
    fxNow = Date.now();

    for (; i < timers.length; i++) {
      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)

      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }

    if (!timers.length) {
      jQuery.fx.stop();
    }

    fxNow = undefined;
  };

  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    jQuery.fx.start();
  };

  jQuery.fx.interval = 13;

  jQuery.fx.start = function () {
    if (inProgress) {
      return;
    }

    inProgress = true;
    schedule();
  };

  jQuery.fx.stop = function () {
    inProgress = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  }; // Based off of the plugin by Clint Helfers, with permission.
  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);

      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  (function () {
    var input = document.createElement("input"),
        select = document.createElement("select"),
        opt = select.appendChild(document.createElement("option"));
    input.type = "checkbox"; // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"

    support.checkOn = input.value !== ""; // Support: IE <=11 only
    // Must access selectedIndex to make default options select

    support.optSelected = opt.selected; // Support: IE <=11 only
    // An input loses its value after becoming a radio

    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();

  var boolHook,
      attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function attr(name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function removeAttr(name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function attr(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      } // Fallback to prop when attributes are not supported


      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      } // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined


      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        elem.setAttribute(name, value + "");
        return value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

      return ret == null ? undefined : ret;
    },
    attrHooks: {
      type: {
        set: function set(elem, value) {
          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);

            if (val) {
              elem.value = val;
            }

            return value;
          }
        }
      }
    },
    removeAttr: function removeAttr(elem, value) {
      var name,
          i = 0,
          // Attribute names can contain non-HTML whitespace characters
      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
      attrNames = value && value.match(rnothtmlwhite);

      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          elem.removeAttribute(name);
        }
      }
    }
  }); // Hooks for boolean attributes

  boolHook = {
    set: function set(elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }

      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret,
          handle,
          lowercaseName = name.toLowerCase();

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }

      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i,
      rclickable = /^(?:a|area)$/i;
  jQuery.fn.extend({
    prop: function prop(name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function removeProp(name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    prop: function prop(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        return elem[name] = value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },
    propHooks: {
      tabIndex: {
        get: function get(elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          // Use proper attribute retrieval(#12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");

          if (tabindex) {
            return parseInt(tabindex, 10);
          }

          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
            return 0;
          }

          return -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  }); // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop

  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function get(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }

        return null;
      },
      set: function set(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }

  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  }); // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }

  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }

  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }

    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }

    return [];
  }

  jQuery.fn.extend({
    addClass: function addClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem);
          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              if (cur.indexOf(" " + clazz + " ") < 0) {
                cur += clazz + " ";
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    removeClass: function removeClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr("class", "");
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)

          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              // Remove *all* instances
              while (cur.indexOf(" " + clazz + " ") > -1) {
                cur = cur.replace(" " + clazz + " ", " ");
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    toggleClass: function toggleClass(value, stateVal) {
      var type = _typeof(value),
          isValidValue = type === "string" || Array.isArray(value);

      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      if (isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }

      return this.each(function () {
        var className, i, self, classNames;

        if (isValidValue) {
          // Toggle individual class names
          i = 0;
          self = jQuery(this);
          classNames = classesToArray(value);

          while (className = classNames[i++]) {
            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          } // Toggle whole class name

        } else if (value === undefined || type === "boolean") {
          className = getClass(this);

          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          } // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.


          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },
    hasClass: function hasClass(selector) {
      var className,
          elem,
          i = 0;
      className = " " + selector + " ";

      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
          return true;
        }
      }

      return false;
    }
  });
  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function val(value) {
      var hooks,
          ret,
          valueIsFunction,
          elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }

          ret = elem.value; // Handle most common string cases

          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          } // Handle cases where value is null/undef or number


          return ret == null ? "" : ret;
        }

        return;
      }

      valueIsFunction = isFunction(value);
      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        } // Treat null/undefined as ""; convert numbers to string


        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }

        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function get(elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null ? val : // Support: IE <=10 - 11 only
          // option.text throws exceptions (#14686, #14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          stripAndCollapse(jQuery.text(elem));
        }
      },
      select: {
        get: function get(elem) {
          var value,
              option,
              i,
              options = elem.options,
              index = elem.selectedIndex,
              one = elem.type === "select-one",
              values = one ? null : [],
              max = one ? index + 1 : options.length;

          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          } // Loop through all the selected options


          for (; i < max; i++) {
            option = options[i]; // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (#2551)

            if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
              // Get the specific value for the option
              value = jQuery(option).val(); // We don't need an array for one selects

              if (one) {
                return value;
              } // Multi-Selects return an array


              values.push(value);
            }
          }

          return values;
        },
        set: function set(elem, value) {
          var optionSet,
              option,
              options = elem.options,
              values = jQuery.makeArray(value),
              i = options.length;

          while (i--) {
            option = options[i];
            /* eslint-disable no-cond-assign */

            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }
            /* eslint-enable no-cond-assign */

          } // Force browsers to behave consistently when non-matching value is set


          if (!optionSet) {
            elem.selectedIndex = -1;
          }

          return values;
        }
      }
    }
  }); // Radios and checkboxes getter/setter

  jQuery.each(["radio", "checkbox"], function () {
    jQuery.valHooks[this] = {
      set: function set(elem, value) {
        if (Array.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
        }
      }
    };

    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  }); // Return jQuery for attributes-only inclusion

  support.focusin = "onfocusin" in window;

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
      stopPropagationCallback = function stopPropagationCallback(e) {
    e.stopPropagation();
  };

  jQuery.extend(jQuery.event, {
    trigger: function trigger(event, data, elem, onlyHandlers) {
      var i,
          cur,
          tmp,
          bubbleType,
          ontype,
          handle,
          special,
          lastElement,
          eventPath = [elem || document],
          type = hasOwn.call(event, "type") ? event.type : event,
          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = lastElement = tmp = elem = elem || document; // Don't do events on text and comment nodes

      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      } // focus/blur morphs to focusin/out; ensure we're not firing them right now


      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }

      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

      event.result = undefined;

      if (!event.target) {
        event.target = elem;
      } // Clone any incoming data and prepend the event, creating the handler arg list


      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

      special = jQuery.event.special[type] || {};

      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      } // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)


      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;

        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }

        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        } // Only add window if we got to document (e.g., not plain obj or detached DOM)


        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      } // Fire handlers on the event path


      i = 0;

      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

        handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");

        if (handle) {
          handle.apply(cur, data);
        } // Native handler


        handle = ontype && cur[ontype];

        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);

          if (event.result === false) {
            event.preventDefault();
          }
        }
      }

      event.type = type; // If nobody prevented the default action, do it now

      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            } // Prevent re-triggering of the same event, since we already bubbled it above


            jQuery.event.triggered = type;

            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }

            elem[type]();

            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }

            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function simulate(type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true
      });
      jQuery.event.trigger(e, null, elem);
    }
  });
  jQuery.fn.extend({
    trigger: function trigger(type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function triggerHandler(type, data) {
      var elem = this[0];

      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  }); // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

  if (!support.focusin) {
    jQuery.each({
      focus: "focusin",
      blur: "focusout"
    }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function handler(event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function setup() {
          var doc = this.ownerDocument || this,
              attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }

          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function teardown() {
          var doc = this.ownerDocument || this,
              attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        }
      };
    });
  }

  var location = window.location;
  var nonce = Date.now();
  var rquery = /\?/; // Cross-browser xml parsing

  jQuery.parseXML = function (data) {
    var xml;

    if (!data || typeof data !== "string") {
      return null;
    } // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.


    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {
      xml = undefined;
    }

    if (!xml || xml.getElementsByTagName("parsererror").length) {
      jQuery.error("Invalid XML: " + data);
    }

    return xml;
  };

  var rbracket = /\[\]$/,
      rCRLF = /\r?\n/g,
      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
      rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  } // Serialize an array of form elements or a set of
  // key/values into a query string


  jQuery.param = function (a, traditional) {
    var prefix,
        s = [],
        add = function add(key, valueOrFunction) {
      // If value is a function, invoke it and use its return value
      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
    };

    if (a == null) {
      return "";
    } // If an array was passed in, assume that it is an array of form elements.


    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    } // Return the resulting serialization


    return s.join("&");
  };

  jQuery.fn.extend({
    serialize: function serialize() {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works

        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (i, elem) {
        var val = jQuery(this).val();

        if (val == null) {
          return null;
        }

        if (Array.isArray(val)) {
          return jQuery.map(val, function (val) {
            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          });
        }

        return {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  var r20 = /%20/g,
      rhash = /#.*$/,
      rantiCache = /([?&])_=[^&]*/,
      rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
      // #7653, #8125, #8152: local protocol detection
  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      rnoContent = /^(?:GET|HEAD)$/,
      rprotocol = /^\/\//,

  /* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */
  prefilters = {},

  /* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */
  transports = {},
      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
  allTypes = "*/".concat("*"),
      // Anchor tag for parsing the document origin
  originAnchor = document.createElement("a");
  originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }

      var dataType,
          i = 0,
          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  } // Base inspection function for prefilters and transports


  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {},
        seekingTransport = structure === transports;

    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);

        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }

    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  } // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887


  function ajaxExtend(target, src) {
    var key,
        deep,
        flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }

    if (deep) {
      jQuery.extend(true, target, deep);
    }

    return target;
  }
  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */


  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
        type,
        finalDataType,
        firstDataType,
        contents = s.contents,
        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process

    while (dataTypes[0] === "*") {
      dataTypes.shift();

      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    } // Check if we're dealing with a known content-type


    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    } // Check to see if we have a response for the expected dataType


    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }

        if (!firstDataType) {
          firstDataType = type;
        }
      } // Or just use first one


      finalDataType = finalDataType || firstDataType;
    } // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response


    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }

      return responses[finalDataType];
    }
  }
  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */


  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
        current,
        conv,
        tmp,
        prev,
        converters = {},
        // Work with a copy of dataTypes in case we need to modify it for conversion
    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys

    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }

    current = dataTypes.shift(); // Convert to each sequential dataType

    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      } // Apply the dataFilter if provided


      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }

      prev = current;
      current = dataTypes.shift();

      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === "*") {
          current = prev; // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair

          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(" ");

              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];

                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }

                  break;
                }
              }
            }
          } // Apply converter (if not an equivalence)


          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s["throws"]) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }

    return {
      state: "success",
      data: response
    };
  }

  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,
    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",

      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */
      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        "* text": String,
        // Text to html (true = no transformation)
        "text html": true,
        // Evaluate text as a json expression
        "text json": JSON.parse,
        // Parse text as xml
        "text xml": jQuery.parseXML
      },
      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },
    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function ajaxSetup(target, settings) {
      return settings ? // Building a settings object
      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
      ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    // Main method
    ajax: function ajax(url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (_typeof(url) === "object") {
        options = url;
        url = undefined;
      } // Force options to be an object


      options = options || {};

      var transport,
          // URL without anti-cache param
      cacheURL,
          // Response headers
      responseHeadersString,
          responseHeaders,
          // timeout handle
      timeoutTimer,
          // Url cleanup var
      urlAnchor,
          // Request state (becomes false upon send and true upon completion)
      completed,
          // To know if global events are to be dispatched
      fireGlobals,
          // Loop variable
      i,
          // uncached part of the url
      uncached,
          // Create the final options object
      s = jQuery.ajaxSetup({}, options),
          // Callbacks context
      callbackContext = s.context || s,
          // Context for global events is callbackContext if it is a DOM node or jQuery collection
      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
          // Deferreds
      deferred = jQuery.Deferred(),
          completeDeferred = jQuery.Callbacks("once memory"),
          // Status-dependent callbacks
      _statusCode = s.statusCode || {},
          // Headers (they are sent all at once)
      requestHeaders = {},
          requestHeadersNames = {},
          // Default abort message
      strAbort = "canceled",
          // Fake xhr
      jqXHR = {
        readyState: 0,
        // Builds headers hashtable if needed
        getResponseHeader: function getResponseHeader(key) {
          var match;

          if (completed) {
            if (!responseHeaders) {
              responseHeaders = {};

              while (match = rheaders.exec(responseHeadersString)) {
                responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
              }
            }

            match = responseHeaders[key.toLowerCase() + " "];
          }

          return match == null ? null : match.join(", ");
        },
        // Raw string
        getAllResponseHeaders: function getAllResponseHeaders() {
          return completed ? responseHeadersString : null;
        },
        // Caches the header
        setRequestHeader: function setRequestHeader(name, value) {
          if (completed == null) {
            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
            requestHeaders[name] = value;
          }

          return this;
        },
        // Overrides response content-type header
        overrideMimeType: function overrideMimeType(type) {
          if (completed == null) {
            s.mimeType = type;
          }

          return this;
        },
        // Status-dependent callbacks
        statusCode: function statusCode(map) {
          var code;

          if (map) {
            if (completed) {
              // Execute the appropriate callbacks
              jqXHR.always(map[jqXHR.status]);
            } else {
              // Lazy-add the new callbacks in a way that preserves old ones
              for (code in map) {
                _statusCode[code] = [_statusCode[code], map[code]];
              }
            }
          }

          return this;
        },
        // Cancel the request
        abort: function abort(statusText) {
          var finalText = statusText || strAbort;

          if (transport) {
            transport.abort(finalText);
          }

          done(0, finalText);
          return this;
        }
      }; // Attach deferreds


      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available

      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket #12004

      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list

      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""]; // A cross-domain request is in order when the origin doesn't match the current origin.

      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a"); // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/

        try {
          urlAnchor.href = s.url; // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative

          urlAnchor.href = urlAnchor.href;
          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      } // Convert data if not already a string


      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
      } // Apply prefilters


      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there

      if (completed) {
        return jqXHR;
      } // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)


      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests

      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
      } // Uppercase the type


      s.type = s.type.toUpperCase(); // Determine if request has content

      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation

      cacheURL = s.url.replace(rhash, ""); // More options handling for requests with no content

      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url

        if (s.data && (s.processData || typeof s.data === "string")) {
          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it's not used in an eventual retry

          delete s.data;
        } // Add or update anti-cache param if needed


        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, "$1");
          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
        } // Put hash and anti-cache on the URL that will be requested (gh-1732)


        s.url = cacheURL + uncached; // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
        s.data = s.data.replace(r20, "+");
      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.


      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
        }

        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      } // Set the correct header, if data is being sent


      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      } // Set the Accepts header for the server, depending on the dataType


      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option

      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      } // Allow custom headers/mimetypes and early abort


      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
        // Abort if not done already and return
        return jqXHR.abort();
      } // Aborting is no longer a cancellation


      strAbort = "abort"; // Install callbacks on deferreds

      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error); // Get transport

      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort

      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1; // Send global event

        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        } // If request was aborted inside ajaxSend, stop there


        if (completed) {
          return jqXHR;
        } // Timeout


        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }

        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          } // Propagate others as results


          done(-1, e);
        }
      } // Callback for when everything is done


      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
            success,
            error,
            response,
            modified,
            statusText = nativeStatusText; // Ignore repeat invocations

        if (completed) {
          return;
        }

        completed = true; // Clear timeout if it exists

        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        } // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)


        transport = undefined; // Cache response headers

        responseHeadersString = headers || ""; // Set readyState

        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful

        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data

        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        } // Convert no matter what (that way responseXXX fields are always set)


        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining

        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");

            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }

            modified = jqXHR.getResponseHeader("etag");

            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          } // if no content


          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent"; // if not modified
          } else if (status === 304) {
            statusText = "notmodified"; // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;

          if (status || !statusText) {
            statusText = "error";

            if (status < 0) {
              status = 0;
            }
          }
        } // Set data for the fake xhr object


        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error

        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        } // Status-dependent callbacks


        jqXHR.statusCode(_statusCode);
        _statusCode = undefined;

        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
        } // Complete


        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter

          if (! --jQuery.active) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }

      return jqXHR;
    },
    getJSON: function getJSON(url, data, callback) {
      return jQuery.get(url, data, callback, "json");
    },
    getScript: function getScript(url, callback) {
      return jQuery.get(url, undefined, callback, "script");
    }
  });
  jQuery.each(["get", "post"], function (i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      } // The url can be an options object (which then must have .url)


      return jQuery.ajax(jQuery.extend({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      }, jQuery.isPlainObject(url) && url));
    };
  });

  jQuery._evalUrl = function (url, options) {
    return jQuery.ajax({
      url: url,
      // Make this explicit, since user can override this through ajaxSetup (#11264)
      type: "GET",
      dataType: "script",
      cache: true,
      async: false,
      global: false,
      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        "text script": function textScript() {}
      },
      dataFilter: function dataFilter(response) {
        jQuery.globalEval(response, options);
      }
    });
  };

  jQuery.fn.extend({
    wrapAll: function wrapAll(html) {
      var wrap;

      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        } // The elements to wrap the target around


        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap.map(function () {
          var elem = this;

          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }

          return elem;
        }).append(this);
      }

      return this;
    },
    wrapInner: function wrapInner(html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
            contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function wrap(html) {
      var htmlIsFunction = isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function unwrap(selector) {
      this.parent(selector).not("body").each(function () {
        jQuery(this).replaceWith(this.childNodes);
      });
      return this;
    }
  });

  jQuery.expr.pseudos.hidden = function (elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };

  jQuery.expr.pseudos.visible = function (elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  };

  jQuery.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };

  var xhrSuccessStatus = {
    // File protocol always yields status code 0, assume 200
    0: 200,
    // Support: IE <=9 only
    // #1450: sometimes IE returns 1223 when it should be 204
    1223: 204
  },
      xhrSupported = jQuery.ajaxSettings.xhr();
  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var _callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest


    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function send(headers, complete) {
          var i,
              xhr = options.xhr();
          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided

          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          } // Override mime type if needed


          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          } // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.


          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          } // Set headers


          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          } // Callback


          _callback = function callback(type) {
            return function () {
              if (_callback) {
                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete( // File: protocol always yields status 0; see #8605, #14207
                    xhr.status, xhr.statusText);
                  }
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                  // IE9 has no XHR2 but throws on binary (trac-11426)
                  // For XHR2 non-text, let the caller handle it (gh-2498)
                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                    binary: xhr.response
                  } : {
                    text: xhr.responseText
                  }, xhr.getAllResponseHeaders());
                }
              }
            };
          }; // Listen to events


          xhr.onload = _callback();
          errorCallback = xhr.onerror = xhr.ontimeout = _callback("error"); // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts

          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (_callback) {
                    errorCallback();
                  }
                });
              }
            };
          } // Create the abort callback


          _callback = _callback("abort");

          try {
            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            // #14683: Only rethrow if this hasn't been notified as an error yet
            if (_callback) {
              throw e;
            }
          }
        },
        abort: function abort() {
          if (_callback) {
            _callback();
          }
        }
      };
    }
  }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

  jQuery.ajaxPrefilter(function (s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  }); // Install script dataType

  jQuery.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function textScript(text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  }); // Handle cache's special case and crossDomain

  jQuery.ajaxPrefilter("script", function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }

    if (s.crossDomain) {
      s.type = "GET";
    }
  }); // Bind script tag hack transport

  jQuery.ajaxTransport("script", function (s) {
    // This transport only deals with cross domain or forced-by-attrs requests
    if (s.crossDomain || s.scriptAttrs) {
      var script, _callback2;

      return {
        send: function send(_, complete) {
          script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({
            charset: s.scriptCharset,
            src: s.url
          }).on("load error", _callback2 = function callback(evt) {
            script.remove();
            _callback2 = null;

            if (evt) {
              complete(evt.type === "error" ? 404 : 200, evt.type);
            }
          }); // Use native DOM manipulation to avoid our domManip AJAX trickery

          document.head.appendChild(script[0]);
        },
        abort: function abort() {
          if (_callback2) {
            _callback2();
          }
        }
      };
    }
  });
  var oldCallbacks = [],
      rjsonp = /(=)\?(?=&|$)|\?\?/; // Default jsonp settings

  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function jsonpCallback() {
      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
      this[callback] = true;
      return callback;
    }
  }); // Detect, normalize options and install callbacks for jsonp requests

  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
    var callbackName,
        overwritten,
        responseContainer,
        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set

    if (jsonProp || s.dataTypes[0] === "jsonp") {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data

      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      } // Use data converter to retrieve json after script execution


      s.converters["script json"] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + " was not called");
        }

        return responseContainer[0];
      }; // Force json dataType


      s.dataTypes[0] = "json"; // Install callback

      overwritten = window[callbackName];

      window[callbackName] = function () {
        responseContainer = arguments;
      }; // Clean-up function (fires after converters)


      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        } // Save back as free


        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use

          oldCallbacks.push(callbackName);
        } // Call if it was a function and we have a response


        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }

        responseContainer = overwritten = undefined;
      }); // Delegate to script

      return "script";
    }
  }); // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337

  support.createHTMLDocument = function () {
    var body = document.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  }(); // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string


  jQuery.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }

    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }

    var base, parsed, scripts;

    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument(""); // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)

        base = context.createElement("base");
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }

    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && []; // Single tag

    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };
  /**
   * Load a url into a page
   */


  jQuery.fn.load = function (url, params, callback) {
    var selector,
        type,
        response,
        self = this,
        off = url.indexOf(" ");

    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    } // If it's a function


    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined; // Otherwise, build a param string
    } else if (params && _typeof(params) === "object") {
      type = "POST";
    } // If we have elements to modify, make the request


    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        // If "type" variable is undefined, then "GET" method will be used.
        // Make value of this field explicit since
        // user can override it through ajaxSetup method
        type: type || "GET",
        dataType: "html",
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
        // Exclude scripts to avoid IE 'Permission Denied' errors
        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
        responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
      }).always(callback && function (jqXHR, status) {
        self.each(function () {
          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
        });
      });
    }

    return this;
  }; // Attach a bunch of functions for handling common AJAX events


  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });

  jQuery.expr.pseudos.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };

  jQuery.offset = {
    setOffset: function setOffset(elem, options, i) {
      var curPosition,
          curLeft,
          curCSSTop,
          curTop,
          curOffset,
          curCSSLeft,
          calculatePosition,
          position = jQuery.css(elem, "position"),
          curElem = jQuery(elem),
          props = {}; // Set position first, in-case top/left are set even on static elem

      if (position === "static") {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed

      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }

      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function offset(options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }

      var rect,
          win,
          elem = this[0];

      if (!elem) {
        return;
      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error


      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function position() {
      if (!this[0]) {
        return;
      }

      var offsetParent,
          offset,
          doc,
          elem = this[0],
          parentOffset = {
        top: 0,
        left: 0
      }; // position:fixed elements are offset from the viewport, which itself always has zero offset

      if (jQuery.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified

        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;

        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.parentNode;
        }

        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
        }
      } // Subtract parent offsets and element margins


      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
      };
    },
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function offsetParent() {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    }
  }); // Create scrollLeft and scrollTop methods

  jQuery.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (method, prop) {
    var top = "pageYOffset" === prop;

    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        // Coalesce documents and windows
        var win;

        if (isWindow(elem)) {
          win = elem;
        } else if (elem.nodeType === 9) {
          win = elem.defaultView;
        }

        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }

        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here

  jQuery.each(["top", "left"], function (i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset

        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
      }
    });
  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

  jQuery.each({
    Height: "height",
    Width: "width"
  }, function (name, type) {
    jQuery.each({
      padding: "inner" + name,
      content: type,
      "": "outer" + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return access(this, function (elem, type, value) {
          var doc;

          if (isWindow(elem)) {
            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
          } // Get document width or height


          if (elem.nodeType === 9) {
            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest

            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }

          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css(elem, type, extra) : // Set width or height on the element
          jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable);
      };
    });
  });
  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });
  jQuery.fn.extend({
    hover: function hover(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });
  jQuery.fn.extend({
    bind: function bind(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function unbind(types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function delegate(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function undelegate(selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    }
  }); // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon

  jQuery.proxy = function (fn, context) {
    var tmp, args, proxy;

    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    } // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.


    if (!isFunction(fn)) {
      return undefined;
    } // Simulated bind


    args = _slice.call(arguments, 2);

    proxy = function proxy() {
      return fn.apply(context || this, args.concat(_slice.call(arguments)));
    }; // Set the guid of unique handler to the same of original handler, so it can be removed


    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    return proxy;
  };

  jQuery.holdReady = function (hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };

  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;
  jQuery.now = Date.now;

  jQuery.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    !isNaN(obj - parseFloat(obj));
  }; // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.
  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon


  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return jQuery;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }

  var // Map over jQuery in case of overwrite
  _jQuery = window.jQuery,
      // Map over the $ in case of overwrite
  _$ = window.$;

  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  }; // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)


  if (!noGlobal) {
    window.jQuery = window.$ = jQuery;
  }

  return jQuery;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};

  var type = _typeof(val);

  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options["long"] ? fmtLong(val) : fmtShort(val);
  }

  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */


function parse(str) {
  str = String(str);

  if (str.length > 100) {
    return;
  }

  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);

  if (!match) {
    return;
  }

  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();

  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;

    case 'days':
    case 'day':
    case 'd':
      return n * d;

    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;

    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;

    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;

    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;

    default:
      return undefined;
  }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }

  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }

  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }

  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }

  return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtLong(ms) {
  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
}
/**
 * Pluralization helper.
 */


function plural(ms, n, name) {
  if (ms < n) {
    return;
  }

  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }

  return Math.ceil(ms / n) + ' ' + name + 's';
}

/***/ }),

/***/ "./node_modules/parseqs/index.js":
/*!***************************************!*\
  !*** ./node_modules/parseqs/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */
exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};
/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */


exports.decode = function (qs) {
  var qry = {};
  var pairs = qs.split('&');

  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }

  return qry;
};

/***/ }),

/***/ "./node_modules/parseuri/index.js":
/*!****************************************!*\
  !*** ./node_modules/parseuri/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */
var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];

module.exports = function parseuri(str) {
  var src = str,
      b = str.indexOf('['),
      e = str.indexOf(']');

  if (b != -1 && e != -1) {
    str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
  }

  var m = re.exec(str || ''),
      uri = {},
      i = 14;

  while (i--) {
    uri[parts[i]] = m[i] || '';
  }

  if (b != -1 && e != -1) {
    uri.source = src;
    uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
    uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
    uri.ipv6uri = true;
  }

  return uri;
};

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/socket.io-client/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/socket.io-client/lib/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Module dependencies.
 */
var url = __webpack_require__(/*! ./url */ "./node_modules/socket.io-client/lib/url.js");

var parser = __webpack_require__(/*! socket.io-parser */ "./node_modules/socket.io-parser/index.js");

var Manager = __webpack_require__(/*! ./manager */ "./node_modules/socket.io-client/lib/manager.js");

var debug = __webpack_require__(/*! debug */ "./node_modules/socket.io-client/node_modules/debug/src/browser.js")('socket.io-client');
/**
 * Module exports.
 */


module.exports = exports = lookup;
/**
 * Managers cache.
 */

var cache = exports.managers = {};
/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup(uri, opts) {
  if (_typeof(uri) === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};
  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;
  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }

    io = cache[id];
  }

  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }

  return io.socket(parsed.path, opts);
}
/**
 * Protocol version.
 *
 * @api public
 */


exports.protocol = parser.protocol;
/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;
/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = __webpack_require__(/*! ./manager */ "./node_modules/socket.io-client/lib/manager.js");
exports.Socket = __webpack_require__(/*! ./socket */ "./node_modules/socket.io-client/lib/socket.js");

/***/ }),

/***/ "./node_modules/socket.io-client/lib/manager.js":
/*!******************************************************!*\
  !*** ./node_modules/socket.io-client/lib/manager.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Module dependencies.
 */
var eio = __webpack_require__(/*! engine.io-client */ "./node_modules/engine.io-client/lib/index.js");

var Socket = __webpack_require__(/*! ./socket */ "./node_modules/socket.io-client/lib/socket.js");

var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/component-emitter/index.js");

var parser = __webpack_require__(/*! socket.io-parser */ "./node_modules/socket.io-parser/index.js");

var on = __webpack_require__(/*! ./on */ "./node_modules/socket.io-client/lib/on.js");

var bind = __webpack_require__(/*! component-bind */ "./node_modules/component-bind/index.js");

var debug = __webpack_require__(/*! debug */ "./node_modules/socket.io-client/node_modules/debug/src/browser.js")('socket.io-client:manager');

var indexOf = __webpack_require__(/*! indexof */ "./node_modules/indexof/index.js");

var Backoff = __webpack_require__(/*! backo2 */ "./node_modules/backo2/index.js");
/**
 * IE6+ hasOwnProperty
 */


var has = Object.prototype.hasOwnProperty;
/**
 * Module exports
 */

module.exports = Manager;
/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager(uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);

  if (uri && 'object' === _typeof(uri)) {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};
  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];

  var _parser = opts.parser || parser;

  this.encoder = new _parser.Encoder();
  this.decoder = new _parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}
/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */


Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);

  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};
/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */


Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.generateId(nsp);
    }
  }
};
/**
 * generate `socket.id` for the given `nsp`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */


Manager.prototype.generateId = function (nsp) {
  return (nsp === '/' ? '' : nsp + '#') + this.engine.id;
};
/**
 * Mix in `Emitter`.
 */


Emitter(Manager.prototype);
/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};
/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */


Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};
/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */


Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};
/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */


Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};
/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */


Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};
/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */


Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};
/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */


Manager.prototype.open = Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;
  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false; // emit `open`

  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  }); // emit `connect_error`

  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);

    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  }); // emit `connect_timeout`

  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout); // set timer

    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);
    this.subs.push({
      destroy: function destroy() {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);
  return this;
};
/**
 * Called upon transport open.
 *
 * @api private
 */


Manager.prototype.onopen = function () {
  debug('open'); // clear old subs

  this.cleanup(); // mark as open

  this.readyState = 'open';
  this.emit('open'); // add new subs

  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};
/**
 * Called upon a ping.
 *
 * @api private
 */


Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};
/**
 * Called upon a packet.
 *
 * @api private
 */


Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};
/**
 * Called with data.
 *
 * @api private
 */


Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};
/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */


Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};
/**
 * Called upon socket error.
 *
 * @api private
 */


Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};
/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */


Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];

  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.generateId(nsp);
    });

    if (this.autoConnect) {
      // manually call here since connecting event is fired before listening
      onConnecting();
    }
  }

  function onConnecting() {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};
/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */


Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;
  this.close();
};
/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */


Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }

      self.encoding = false;
      self.processPacketQueue();
    });
  } else {
    // add packet to the queue
    self.packetBuffer.push(packet);
  }
};
/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */


Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};
/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */


Manager.prototype.cleanup = function () {
  debug('cleanup');
  var subsLength = this.subs.length;

  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;
  this.decoder.destroy();
};
/**
 * Close the current socket.
 *
 * @api private
 */


Manager.prototype.close = Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;

  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }

  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};
/**
 * Called upon engine close.
 *
 * @api private
 */


Manager.prototype.onclose = function (reason) {
  debug('onclose');
  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};
/**
 * Attempt a reconnection.
 *
 * @api private
 */


Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;
  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);
    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;
      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts); // check again for the case socket closed in above events

      if (self.skipReconnect) return;
      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);
    this.subs.push({
      destroy: function destroy() {
        clearTimeout(timer);
      }
    });
  }
};
/**
 * Called upon successful reconnect.
 *
 * @api private
 */


Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};

/***/ }),

/***/ "./node_modules/socket.io-client/lib/on.js":
/*!*************************************************!*\
  !*** ./node_modules/socket.io-client/lib/on.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Module exports.
 */
module.exports = on;
/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on(obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function destroy() {
      obj.removeListener(ev, fn);
    }
  };
}

/***/ }),

/***/ "./node_modules/socket.io-client/lib/socket.js":
/*!*****************************************************!*\
  !*** ./node_modules/socket.io-client/lib/socket.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Module dependencies.
 */
var parser = __webpack_require__(/*! socket.io-parser */ "./node_modules/socket.io-parser/index.js");

var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/component-emitter/index.js");

var toArray = __webpack_require__(/*! to-array */ "./node_modules/to-array/index.js");

var on = __webpack_require__(/*! ./on */ "./node_modules/socket.io-client/lib/on.js");

var bind = __webpack_require__(/*! component-bind */ "./node_modules/component-bind/index.js");

var debug = __webpack_require__(/*! debug */ "./node_modules/socket.io-client/node_modules/debug/src/browser.js")('socket.io-client:socket');

var parseqs = __webpack_require__(/*! parseqs */ "./node_modules/parseqs/index.js");

var hasBin = __webpack_require__(/*! has-binary2 */ "./node_modules/has-binary2/index.js");
/**
 * Module exports.
 */


module.exports = exports = Socket;
/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};
/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;
/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket(io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat

  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  this.flags = {};

  if (opts && opts.query) {
    this.query = opts.query;
  }

  if (this.io.autoConnect) this.open();
}
/**
 * Mix in `Emitter`.
 */


Emitter(Socket.prototype);
/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;
  var io = this.io;
  this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];
};
/**
 * "Opens" the socket.
 *
 * @api public
 */


Socket.prototype.open = Socket.prototype.connect = function () {
  if (this.connected) return this;
  this.subEvents();
  this.io.open(); // ensure open

  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};
/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */


Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};
/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */


Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var packet = {
    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
    data: args
  };
  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress; // event ack callback

  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  this.flags = {};
  return this;
};
/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */


Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};
/**
 * Called upon engine `open`.
 *
 * @api private
 */


Socket.prototype.onopen = function () {
  debug('transport is open - connecting'); // write connect packet if necessary

  if ('/' !== this.nsp) {
    if (this.query) {
      var query = _typeof(this.query) === 'object' ? parseqs.encode(this.query) : this.query;
      debug('sending connect packet with query %s', query);
      this.packet({
        type: parser.CONNECT,
        query: query
      });
    } else {
      this.packet({
        type: parser.CONNECT
      });
    }
  }
};
/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */


Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};
/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */


Socket.prototype.onpacket = function (packet) {
  var sameNamespace = packet.nsp === this.nsp;
  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';
  if (!sameNamespace && !rootNamespaceError) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};
/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */


Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};
/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */


Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);
    self.packet({
      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
      id: id,
      data: args
    });
  };
};
/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */


Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];

  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};
/**
 * Called upon server connect.
 *
 * @api private
 */


Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};
/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */


Socket.prototype.emitBuffered = function () {
  var i;

  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }

  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }

  this.sendBuffer = [];
};
/**
 * Called upon server disconnect.
 *
 * @api private
 */


Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};
/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */


Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }

    this.subs = null;
  }

  this.io.destroy(this);
};
/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */


Socket.prototype.close = Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({
      type: parser.DISCONNECT
    });
  } // remove socket from pool


  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }

  return this;
};
/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */


Socket.prototype.compress = function (compress) {
  this.flags.compress = compress;
  return this;
};
/**
 * Sets the binary flag
 *
 * @param {Boolean} whether the emitted data contains binary
 * @return {Socket} self
 * @api public
 */


Socket.prototype.binary = function (binary) {
  this.flags.binary = binary;
  return this;
};

/***/ }),

/***/ "./node_modules/socket.io-client/lib/url.js":
/*!**************************************************!*\
  !*** ./node_modules/socket.io-client/lib/url.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */
var parseuri = __webpack_require__(/*! parseuri */ "./node_modules/parseuri/index.js");

var debug = __webpack_require__(/*! debug */ "./node_modules/socket.io-client/node_modules/debug/src/browser.js")('socket.io-client:url');
/**
 * Module exports.
 */


module.exports = url;
/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url(uri, loc) {
  var obj = uri; // default to window.location

  loc = loc || typeof location !== 'undefined' && location;
  if (null == uri) uri = loc.protocol + '//' + loc.host; // relative path support

  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);

      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    } // parse


    debug('parse %s', uri);
    obj = parseuri(uri);
  } // make sure we treat `localhost:80` and `localhost` equally


  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';
  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host; // define unique id

  obj.id = obj.protocol + '://' + host + ':' + obj.port; // define href

  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : ':' + obj.port);
  return obj;
}

/***/ }),

/***/ "./node_modules/socket.io-client/node_modules/debug/src/browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/debug/src/browser.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */
exports = module.exports = __webpack_require__(/*! ./debug */ "./node_modules/socket.io-client/node_modules/debug/src/debug.js");
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */


exports.formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  var useColors = this.useColors;
  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
  if (!useColors) return;
  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if ('%%' === match) return;
    index++;

    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === (typeof console === "undefined" ? "undefined" : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch (e) {}
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.debug;
  } catch (e) {} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */


exports.enable(load());
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/socket.io-client/node_modules/debug/src/debug.js":
/*!***********************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/debug/src/debug.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */
exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(/*! ms */ "./node_modules/ms/index.js");
/**
 * Active `debug` instances.
 */

exports.instances = [];
/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];
/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};
/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0,
      i;

  for (i in namespace) {
    hash = (hash << 5) - hash + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}
/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */


function createDebug(namespace) {
  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;
    var self = debug; // set `diff` timestamp

    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr; // turn the `arguments` into a proper Array

    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    } // apply any `formatters` transformations


    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];

      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val); // now we need to remove `args[index]` since it's inlined in the `format`

        args.splice(index, 1);
        index--;
      }

      return match;
    }); // apply env-specific formatting (colors, etc.)

    exports.formatArgs.call(self, args);
    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy; // env-specific initialization logic for debug instances

  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);
  return debug;
}

function destroy() {
  var index = exports.instances.indexOf(this);

  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}
/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */


function enable(namespaces) {
  exports.save(namespaces);
  exports.names = [];
  exports.skips = [];
  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings

    namespaces = split[i].replace(/\*/g, '.*?');

    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}
/**
 * Disable debug output.
 *
 * @api public
 */


function disable() {
  exports.enable('');
}
/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */


function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }

  var i, len;

  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }

  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }

  return false;
}
/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */


function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

/***/ }),

/***/ "./node_modules/socket.io-parser/binary.js":
/*!*************************************************!*\
  !*** ./node_modules/socket.io-parser/binary.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*global Blob,File*/

/**
 * Module requirements
 */
var isArray = __webpack_require__(/*! isarray */ "./node_modules/socket.io-parser/node_modules/isarray/index.js");

var isBuf = __webpack_require__(/*! ./is-buffer */ "./node_modules/socket.io-parser/is-buffer.js");

var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' || typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
var withNativeFile = typeof File === 'function' || typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';
/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function (packet) {
  var buffers = [];
  var packetData = packet.data;
  var pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length; // number of binary 'attachments'

  return {
    packet: pack,
    buffers: buffers
  };
};

function _deconstructPacket(data, buffers) {
  if (!data) return data;

  if (isBuf(data)) {
    var placeholder = {
      _placeholder: true,
      num: buffers.length
    };
    buffers.push(data);
    return placeholder;
  } else if (isArray(data)) {
    var newData = new Array(data.length);

    for (var i = 0; i < data.length; i++) {
      newData[i] = _deconstructPacket(data[i], buffers);
    }

    return newData;
  } else if (_typeof(data) === 'object' && !(data instanceof Date)) {
    var newData = {};

    for (var key in data) {
      newData[key] = _deconstructPacket(data[key], buffers);
    }

    return newData;
  }

  return data;
}
/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */


exports.reconstructPacket = function (packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  packet.attachments = undefined; // no longer useful

  return packet;
};

function _reconstructPacket(data, buffers) {
  if (!data) return data;

  if (data && data._placeholder) {
    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
  } else if (isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _reconstructPacket(data[i], buffers);
    }
  } else if (_typeof(data) === 'object') {
    for (var key in data) {
      data[key] = _reconstructPacket(data[key], buffers);
    }
  }

  return data;
}
/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */


exports.removeBlobs = function (data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj; // convert any blob

    if (withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
      pendingBlobs++; // async filereader

      var fileReader = new FileReader();

      fileReader.onload = function () {
        // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        } else {
          bloblessData = this.result;
        } // if nothing pending its callback time


        if (! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) {
      // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (_typeof(obj) === 'object' && !isBuf(obj)) {
      // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;

  _removeBlobs(bloblessData);

  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

/***/ }),

/***/ "./node_modules/socket.io-parser/index.js":
/*!************************************************!*\
  !*** ./node_modules/socket.io-parser/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */
var debug = __webpack_require__(/*! debug */ "./node_modules/socket.io-parser/node_modules/debug/src/browser.js")('socket.io-parser');

var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/component-emitter/index.js");

var binary = __webpack_require__(/*! ./binary */ "./node_modules/socket.io-parser/binary.js");

var isArray = __webpack_require__(/*! isarray */ "./node_modules/socket.io-parser/node_modules/isarray/index.js");

var isBuf = __webpack_require__(/*! ./is-buffer */ "./node_modules/socket.io-parser/is-buffer.js");
/**
 * Protocol version.
 *
 * @api public
 */


exports.protocol = 4;
/**
 * Packet types.
 *
 * @api public
 */

exports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'ACK', 'ERROR', 'BINARY_EVENT', 'BINARY_ACK'];
/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;
/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;
/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;
/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;
/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;
/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;
/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;
/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;
/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;
/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

var ERROR_PACKET = exports.ERROR + '"encode error"';
/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function (obj, callback) {
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  } else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};
/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */


function encodeAsString(obj) {
  // first is type
  var str = '' + obj.type; // attachments if we have them

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  } // if we have a namespace other than `/`
  // we append it followed by a comma `,`


  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  } // immediately followed by the id


  if (null != obj.id) {
    str += obj.id;
  } // json data


  if (null != obj.data) {
    var payload = tryStringify(obj.data);

    if (payload !== false) {
      str += payload;
    } else {
      return ERROR_PACKET;
    }
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

function tryStringify(str) {
  try {
    return JSON.stringify(str);
  } catch (e) {
    return false;
  }
}
/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */


function encodeAsBinary(obj, callback) {
  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;
    buffers.unshift(pack); // add packet info to beginning of data list

    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}
/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */


function Decoder() {
  this.reconstructor = null;
}
/**
 * Mix in `Emitter` with Decoder.
 */


Emitter(Decoder.prototype);
/**
 * Decodes an encoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function (obj) {
  var packet;

  if (typeof obj === 'string') {
    packet = decodeString(obj);

    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) {
      // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow

      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else {
      // non-binary full packet
      this.emit('decoded', packet);
    }
  } else if (isBuf(obj) || obj.base64) {
    // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);

      if (packet) {
        // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  } else {
    throw new Error('Unknown type: ' + obj);
  }
};
/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */


function decodeString(str) {
  var i = 0; // look up type

  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) {
    return error('unknown packet type ' + p.type);
  } // look up attachments if type binary


  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var buf = '';

    while (str.charAt(++i) !== '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }

    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }

    p.attachments = Number(buf);
  } // look up namespace (if any)


  if ('/' === str.charAt(i + 1)) {
    p.nsp = '';

    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      p.nsp += c;
      if (i === str.length) break;
    }
  } else {
    p.nsp = '/';
  } // look up id


  var next = str.charAt(i + 1);

  if ('' !== next && Number(next) == next) {
    p.id = '';

    while (++i) {
      var c = str.charAt(i);

      if (null == c || Number(c) != c) {
        --i;
        break;
      }

      p.id += str.charAt(i);
      if (i === str.length) break;
    }

    p.id = Number(p.id);
  } // look up json data


  if (str.charAt(++i)) {
    var payload = tryParse(str.substr(i));
    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));

    if (isPayloadValid) {
      p.data = payload;
    } else {
      return error('invalid payload');
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(str) {
  try {
    return JSON.parse(str);
  } catch (e) {
    return false;
  }
}
/**
 * Deallocates a parser's resources
 *
 * @api public
 */


Decoder.prototype.destroy = function () {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};
/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */


function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}
/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */


BinaryReconstructor.prototype.takeBinaryData = function (binData) {
  this.buffers.push(binData);

  if (this.buffers.length === this.reconPack.attachments) {
    // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }

  return null;
};
/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */


BinaryReconstructor.prototype.finishedReconstruction = function () {
  this.reconPack = null;
  this.buffers = [];
};

function error(msg) {
  return {
    type: exports.ERROR,
    data: 'parser error: ' + msg
  };
}

/***/ }),

/***/ "./node_modules/socket.io-parser/is-buffer.js":
/*!****************************************************!*\
  !*** ./node_modules/socket.io-parser/is-buffer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = isBuf;
var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

var isView = function isView(obj) {
  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
};
/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */


function isBuf(obj) {
  return withNativeBuffer && Buffer.isBuffer(obj) || withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj));
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/socket.io-parser/node_modules/debug/src/browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/socket.io-parser/node_modules/debug/src/browser.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */
exports = module.exports = __webpack_require__(/*! ./debug */ "./node_modules/socket.io-parser/node_modules/debug/src/debug.js");
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */


exports.formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  var useColors = this.useColors;
  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
  if (!useColors) return;
  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if ('%%' === match) return;
    index++;

    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === (typeof console === "undefined" ? "undefined" : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch (e) {}
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.debug;
  } catch (e) {} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */


exports.enable(load());
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/socket.io-parser/node_modules/debug/src/debug.js":
/*!***********************************************************************!*\
  !*** ./node_modules/socket.io-parser/node_modules/debug/src/debug.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */
exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(/*! ms */ "./node_modules/ms/index.js");
/**
 * Active `debug` instances.
 */

exports.instances = [];
/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];
/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};
/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0,
      i;

  for (i in namespace) {
    hash = (hash << 5) - hash + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}
/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */


function createDebug(namespace) {
  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;
    var self = debug; // set `diff` timestamp

    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr; // turn the `arguments` into a proper Array

    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    } // apply any `formatters` transformations


    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];

      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val); // now we need to remove `args[index]` since it's inlined in the `format`

        args.splice(index, 1);
        index--;
      }

      return match;
    }); // apply env-specific formatting (colors, etc.)

    exports.formatArgs.call(self, args);
    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy; // env-specific initialization logic for debug instances

  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);
  return debug;
}

function destroy() {
  var index = exports.instances.indexOf(this);

  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}
/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */


function enable(namespaces) {
  exports.save(namespaces);
  exports.names = [];
  exports.skips = [];
  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings

    namespaces = split[i].replace(/\*/g, '.*?');

    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}
/**
 * Disable debug output.
 *
 * @api public
 */


function disable() {
  exports.enable('');
}
/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */


function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }

  var i, len;

  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }

  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }

  return false;
}
/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */


function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

/***/ }),

/***/ "./node_modules/socket.io-parser/node_modules/isarray/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/socket.io-parser/node_modules/isarray/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),

/***/ "./node_modules/to-array/index.js":
/*!****************************************!*\
  !*** ./node_modules/to-array/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = toArray;

function toArray(list, index) {
  var array = [];
  index = index || 0;

  for (var i = index || 0; i < list.length; i++) {
    array[i - index] = list[i];
  }

  return array;
}

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./node_modules/yeast/index.js":
/*!*************************************!*\
  !*** ./node_modules/yeast/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),
    length = 64,
    map = {},
    seed = 0,
    i = 0,
    prev;
/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */

function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}
/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */


function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}
/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */


function yeast() {
  var now = encode(+new Date());
  if (now !== prev) return seed = 0, prev = now;
  return now + '.' + encode(seed++);
} //
// Map each character to its index.
//


for (; i < length; i++) {
  map[alphabet[i]] = i;
} //
// Expose the `yeast`, `encode` and `decode` functions.
//


yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;

/***/ }),

/***/ "./public/css/main.scss":
/*!******************************!*\
  !*** ./public/css/main.scss ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./public/js/cell.js":
/*!***************************!*\
  !*** ./public/js/cell.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Cell; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Cell =
/*#__PURE__*/
function () {
  function Cell(tile, piece) {
    _classCallCheck(this, Cell);

    this._tile = tile;
    this.piece = piece;
    this.x = -1;
    this.y = -1;
  }

  _createClass(Cell, [{
    key: "render",
    value: function render() {
      var template = __webpack_require__(/*! ../templates/cell.hbs */ "./public/templates/cell.hbs");

      var params = {
        cell: this,
        tileClass: this.tile.classes,
        piece: this.piece
      };
      return template(params);
    }
  }, {
    key: "tile",
    get: function get() {
      return this._tile;
    }
  }]);

  return Cell;
}();



/***/ }),

/***/ "./public/js/client.js":
/*!*****************************!*\
  !*** ./public/js/client.js ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(io, $) {/* harmony import */ var _utils_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/cookie */ "./public/js/utils/cookie.js");
/* harmony import */ var _gamemaster__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gamemaster */ "./public/js/gamemaster.js");
/* harmony import */ var _utils_timeSince__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/timeSince */ "./public/js/utils/timeSince.js");
/* harmony import */ var _game_types_rulesets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./game_types/rulesets */ "./public/js/game_types/rulesets.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }






var Client =
/*#__PURE__*/
function () {
  function Client(username) {
    _classCallCheck(this, Client);

    this.login(username);
    this.setupCreateGame();
    this.socket = io();
    this.socket.emit('login', this.username);
    this.socket.on('setup game', function (game) {
      this.gamemaster = new _gamemaster__WEBPACK_IMPORTED_MODULE_1__["default"](this.socket, this, game);
      $('body').addClass('ingame');
    }.bind(this));
    this.socket.on('list games', function (data) {
      this.listGames(data);
    }.bind(this));
    this.socket.on('reload', function () {
      location.reload();
    }.bind(this));
  }

  _createClass(Client, [{
    key: "login",
    value: function login(username) {
      this.username = username;
      var info = $('#user .info');
      $('.username', info).text(username);
      $('.logout', info).click(function () {
        Object(_utils_cookie__WEBPACK_IMPORTED_MODULE_0__["eraseCookie"])('username');
        location.reload();
      }.bind(this));
      $('body').addClass('logged-in');
    }
  }, {
    key: "listGames",
    value: function listGames(data) {
      $('#mygames, #lobbys, #spectategames').empty(); // lobbys

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = data.lobbys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var lobby = _step.value;

          var template = __webpack_require__(/*! ../templates/lobby.hbs */ "./public/templates/lobby.hbs");

          var html = template({
            id: lobby.id,
            name: lobby.name,
            ruleset: _game_types_rulesets__WEBPACK_IMPORTED_MODULE_3__["RULE_SETS"][lobby.ruleset].name,
            player: lobby.player,
            created: Object(_utils_timeSince__WEBPACK_IMPORTED_MODULE_2__["default"])(new Date(lobby.created)),
            joinable: lobby.player !== this.username
          });
          $('#lobbys').prepend(html);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      $(document).on('click', '.lobby .join', function (e) {
        var id = $(e.target).parents('.lobby').data('id');
        this.socket.emit('join game', id);
      }.bind(this)); // games

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = data.games[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var game = _step2.value;

          var _template = __webpack_require__(/*! ../templates/gamepreview.hbs */ "./public/templates/gamepreview.hbs");

          var _html = _template({
            id: game.id,
            name: game.name,
            ruleset: _game_types_rulesets__WEBPACK_IMPORTED_MODULE_3__["RULE_SETS"][game.rules.id].name,
            player1: game.player1.name,
            player2: game.player2.name,
            created: Object(_utils_timeSince__WEBPACK_IMPORTED_MODULE_2__["default"])(new Date(game.created))
          });

          if (game.player1.name === this.username || game.player2.name === this.username) {
            $('#mygames').prepend(_html);
          } else {
            $('#spectategames').prepend(_html);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      $(document).on('click', '#games .game', function (e) {
        var id = $(e.target).closest('.game').data('id');
        this.socket.emit('open game', id);
      }.bind(this));
    }
  }, {
    key: "setupCreateGame",
    value: function setupCreateGame() {
      $('#gamename').attr('placeholder', this.defaultGameName()); // fill chess variants

      for (var _i = 0, _Object$keys = Object.keys(_game_types_rulesets__WEBPACK_IMPORTED_MODULE_3__["RULE_SETS"]); _i < _Object$keys.length; _i++) {
        var id = _Object$keys[_i];
        var ruleset = _game_types_rulesets__WEBPACK_IMPORTED_MODULE_3__["RULE_SETS"][id];

        var template = __webpack_require__(/*! ../templates/ruleset-select.hbs */ "./public/templates/ruleset-select.hbs");

        var html = template({
          id: ruleset.id,
          name: ruleset.name
        });
        $('#ruleset').append(html);
      }

      $('#ruleset input:first').prop('checked', true);
      $('#create-game').on('click', function () {
        $('#creator').slideToggle();
      });
      $('#creator').on('submit', this.createGame.bind(this));
    }
  }, {
    key: "defaultGameName",
    value: function defaultGameName() {
      return this.username + "'s Game";
    }
  }, {
    key: "createGame",
    value: function createGame(event) {
      event.preventDefault();
      var name = $('#gamename').val();
      if (name.length === 0) name = this.defaultGameName();
      this.socket.emit('create lobby', {
        player: this.username,
        name: name,
        ruleset: $('input[name=ruleset]:checked').val()
      });
      $('#creator').slideToggle();
    }
  }]);

  return Client;
}();

var username = Object(_utils_cookie__WEBPACK_IMPORTED_MODULE_0__["readCookie"])('username');

if (username !== null) {
  new Client(username);
}

$(document).on('submit', '#login', function (event) {
  event.preventDefault();
  var username = $('#login input.username').val();

  if (username !== '') {
    Object(_utils_cookie__WEBPACK_IMPORTED_MODULE_0__["createCookie"])('username', username, 7);
    new Client(username);
  }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! socket.io-client */ "./node_modules/socket.io-client/lib/index.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./public/js/game.js":
/*!***************************!*\
  !*** ./public/js/game.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Game; });
/* harmony import */ var _cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cell */ "./public/js/cell.js");
/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tile */ "./public/js/tile.js");
/* harmony import */ var _utils_guid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/guid */ "./public/js/utils/guid.js");
/* harmony import */ var _game_types_pieceregistry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./game_types/pieceregistry */ "./public/js/game_types/pieceregistry.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }






var Game =
/*#__PURE__*/
function () {
  function Game(rules, name, player1, player2, isServer) {
    _classCallCheck(this, Game);

    this.id = Object(_utils_guid__WEBPACK_IMPORTED_MODULE_2__["default"])();
    this.name = name;
    this.rules = rules;
    this.created = new Date(); // stores all moves of the game

    this.gameLog = []; // stores moves of players until every player has submitted

    this.currentMoveCache = [];
    this.player1 = player1;
    this.player1.number = 1;
    this.player2 = player2;
    this.player2.number = 2;
    this.playerCount = 2;
    this.board = this.generateCheckedBoard(rules.boardWidth, rules.boardHeight);
    this.height = rules.boardHeight;
    this.width = rules.boardWidth; // save coords on cell for easier lookup [y][x]

    for (var y = 0; y < this.board.length; y++) {
      for (var x = 0; x < this.board[y].length; x++) {
        var cell = this.board[y][x];
        cell.x = x;
        cell.y = y;
      }
    } // only do the moves on the server and then push them onto the client


    if (isServer) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = rules.setupMoves()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var logEntry = _step.value;
          this.execute(logEntry);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  } // generates a logEntry for a move
  // this logEntry can then be executed by all players


  _createClass(Game, [{
    key: "checkMove",
    // checks if a move is valid
    value: function checkMove(logEntry) {
      // check if the player already made his move
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.currentMoveCache[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var move = _step2.value;
          if (move.playerNumber === logEntry.playerNumber) throw 'OutOfSyncError: Player already made his move';
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      var sourceCell = this.getCell(logEntry.source);
      var targetCell = this.getCell(logEntry.target);
      if (!sourceCell.piece) throw 'NoPieceToMove';
      if (sourceCell.piece["class"] !== logEntry.movedPieceClass) throw 'OutOfSyncError: wrong source piece class';
      if (logEntry.capturedPieceClass && logEntry.capturedPieceClass !== targetCell.piece["class"]) throw 'OutOfSyncError: wrong captured piece class';
    }
  }, {
    key: "execute",
    value: function execute(logEntry) {
      if (logEntry.action === 'move') {
        this.checkMove(logEntry);
        this.currentMoveCache.push(logEntry); // wait for other players

        if (this.currentMoveCache.length < this.playerCount) {
          return {
            action: 'notification',
            type: 'PlayerMadeMove',
            playerNumber: logEntry.playerNumber
          };
        } // build sym move


        var symLogEntry = {
          action: 'sym move',
          moves: this.currentMoveCache
        }; // check and mark colliding piece

        for (var i = 0; i < symLogEntry.moves.length; i++) {
          for (var j = 0; j < symLogEntry.moves.length; j++) {
            if (i !== j && symLogEntry.moves[i].target.x === symLogEntry.moves[j].target.x && symLogEntry.moves[i].target.y === symLogEntry.moves[j].target.y) {
              // a collision!
              symLogEntry.moves[i].destroyed = true;
              break;
            }
          }
        }

        this.currentMoveCache = [];
        this.execute(symLogEntry);
        console.log(symLogEntry);
        var gameEnd = this.checkWinCondition();

        if (gameEnd) {
          this.gameLog.push(gameEnd);
          return [symLogEntry, gameEnd];
        }

        return symLogEntry;
      }

      if (logEntry.action === 'sym move') {
        var pieces = []; // pick up pieces

        for (var _i = 0; _i < logEntry.moves.length; _i++) {
          var sourceCell = this.getCell(logEntry.moves[_i].source);
          pieces[_i] = sourceCell.piece;
          delete sourceCell.piece;
        } // put piece down


        for (var _j = 0; _j < logEntry.moves.length; _j++) {
          // do not put piece down if it was destroyed
          if (logEntry.moves[_j].destroyed) continue;
          var targetCell = this.getCell(logEntry.moves[_j].target);
          targetCell.piece = pieces[_j];
          targetCell.piece.hasMoved = true;
        } // do special moves


        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = logEntry.moves[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var move = _step3.value;

            if (move.special === 'en-passant') {
              var _targetCell = this.getCell(move.target.x, move.source.y);

              delete _targetCell.piece;
            }

            if (move.special === 'promote') {
              var targetCellFU = this.getCell(move.target.x, move.target.y);
              var pieceClass = _game_types_pieceregistry__WEBPACK_IMPORTED_MODULE_3__["PIECE_REGISTRY"][move.promotionPieceName];
              var piece = new pieceClass(targetCellFU.piece.owner);
              targetCellFU.piece = piece;
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        this.gameLog.push(logEntry);
      }

      if (logEntry.action === 'place piece') {
        var _pieceClass = _game_types_pieceregistry__WEBPACK_IMPORTED_MODULE_3__["PIECE_REGISTRY"][logEntry.pieceName];
        var player = this.getPlayer(logEntry.playerNumber);

        var _piece = new _pieceClass(player);

        var cell = this.getCell(logEntry);
        cell.piece = _piece;
        this.gameLog.push(logEntry);
      }
    }
  }, {
    key: "getPossibleMoves",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function getPossibleMoves(cell) {
      return regeneratorRuntime.wrap(function getPossibleMoves$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(cell.piece.getPossibleMoves(this, cell.x, cell.y), "t0", 1);

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, getPossibleMoves, this);
    })
  }, {
    key: "checkWinCondition",
    value: function checkWinCondition() {
      var playersStillAlive = new Set([this.player1, this.player2]);

      for (var i = 0; i < this.rules.loseConditions.length; i++) {
        var losers = this.rules.loseConditions[i].checkCondition(this);
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = losers.values()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var loser = _step4.value;
            playersStillAlive["delete"](loser);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }

      switch (playersStillAlive.size) {
        case 0:
          return {
            action: 'gameEnd',
            winner: 0 // number 0: draw

          };

        case 1:
          return {
            action: 'gameEnd',
            winner: _toConsumableArray(playersStillAlive)[0].number
          };
      }
    } // called with x, y or {x: int, y: int}, undefined

  }, {
    key: "getCell",
    value: function getCell(x, y) {
      // pass only the x param to be handled as object: {x: 1, y: 1}
      if (y === undefined) {
        y = x.y;
        x = x.x;
      }

      if (y < 0 || y >= this.board.length) throw "OutsideOfBoard";
      var row = this.board[y];
      if (x < 0 || x >= row.length) throw "OutsideOfBoard";
      return row[x];
    }
  }, {
    key: "getPlayer",
    value: function getPlayer(playerNumber) {
      if (playerNumber === 1) return this.player1;
      if (playerNumber === 2) return this.player2;
      throw "InvalidPlayerNumber";
    }
  }, {
    key: "generateCheckedBoard",
    value: function generateCheckedBoard(width, height) {
      var board = [];

      for (var y = 0; y < height; y++) {
        board[y] = [];

        for (var x = 0; x < width; x++) {
          board[y][x] = new _cell__WEBPACK_IMPORTED_MODULE_0__["default"]((x + y) % 2 === 0 ? new _tile__WEBPACK_IMPORTED_MODULE_1__["BlackTile"]() : new _tile__WEBPACK_IMPORTED_MODULE_1__["WhiteTile"]());
        }
      }

      return board;
    }
  }], [{
    key: "prepareMove",
    value: function prepareMove(sourceCell, targetCell) {
      if (!sourceCell.piece) throw 'NoPieceToMove';
      var logEntry = {
        action: 'move',
        playerNumber: sourceCell.piece.owner.number,
        movedPieceClass: sourceCell.piece["class"],
        source: {
          x: sourceCell.x,
          y: sourceCell.y
        },
        target: {
          x: targetCell.x,
          y: targetCell.y
        },
        destroyed: false // this is set when two pieces collide

      };
      if (targetCell.piece) logEntry.capturedPieceClass = targetCell.piece["class"];
      return logEntry;
    }
  }, {
    key: "preparePlacePiece",
    value: function preparePlacePiece(x, y, playerNumber, pieceName) {
      var logEntry = {
        action: 'place piece',
        pieceName: pieceName,
        playerNumber: playerNumber,
        x: x,
        y: y
      };
      return logEntry;
    }
  }]);

  return Game;
}();



/***/ }),

/***/ "./public/js/game_types/lose_conditions/kingdead.js":
/*!**********************************************************!*\
  !*** ./public/js/game_types/lose_conditions/kingdead.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return KingDead; });
/* harmony import */ var _losecondition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./losecondition */ "./public/js/game_types/lose_conditions/losecondition.js");
/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../piece */ "./public/js/piece.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }




var KingDead =
/*#__PURE__*/
function (_LoseCondition) {
  _inherits(KingDead, _LoseCondition);

  function KingDead() {
    _classCallCheck(this, KingDead);

    return _possibleConstructorReturn(this, _getPrototypeOf(KingDead).apply(this, arguments));
  }

  _createClass(KingDead, [{
    key: "checkCondition",
    value: function checkCondition(game) {
      var players = new Set([game.player1, game.player2]);

      for (var y = 0; y < game.board.length; y++) {
        for (var x = 0; x < game.board[y].length; x++) {
          if (game.board[y][x].piece instanceof _piece__WEBPACK_IMPORTED_MODULE_1__["King"]) players["delete"](game.board[y][x].piece.owner);
        }
      }

      return players;
    }
  }]);

  return KingDead;
}(_losecondition__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "./public/js/game_types/lose_conditions/losecondition.js":
/*!***************************************************************!*\
  !*** ./public/js/game_types/lose_conditions/losecondition.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LoseCondition; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LoseCondition =
/*#__PURE__*/
function () {
  function LoseCondition() {
    _classCallCheck(this, LoseCondition);
  }

  _createClass(LoseCondition, [{
    key: "checkCondition",
    // checks if a player lost according to the condition
    // return an array with all losing players
    value: function checkCondition(game) {
      throw 'NotImplementedError';
    }
  }]);

  return LoseCondition;
}();



/***/ }),

/***/ "./public/js/game_types/pieceregistry.js":
/*!***********************************************!*\
  !*** ./public/js/game_types/pieceregistry.js ***!
  \***********************************************/
/*! exports provided: PIECE_REGISTRY, register */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PIECE_REGISTRY", function() { return PIECE_REGISTRY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "register", function() { return register; });
/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../piece */ "./public/js/piece.js");

var PIECE_REGISTRY = {};
function register(piece) {
  PIECE_REGISTRY[piece.name] = piece;
}
register(_piece__WEBPACK_IMPORTED_MODULE_0__["God"]);
register(_piece__WEBPACK_IMPORTED_MODULE_0__["Pawn"]);
register(_piece__WEBPACK_IMPORTED_MODULE_0__["Rook"]);
register(_piece__WEBPACK_IMPORTED_MODULE_0__["Knight"]);
register(_piece__WEBPACK_IMPORTED_MODULE_0__["Bishop"]);
register(_piece__WEBPACK_IMPORTED_MODULE_0__["Queen"]);
register(_piece__WEBPACK_IMPORTED_MODULE_0__["King"]);

/***/ }),

/***/ "./public/js/game_types/rulesets.js":
/*!******************************************!*\
  !*** ./public/js/game_types/rulesets.js ***!
  \******************************************/
/*! exports provided: RULE_SETS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RULE_SETS", function() { return RULE_SETS; });
/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../game */ "./public/js/game.js");
/* harmony import */ var _lose_conditions_kingdead__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lose_conditions/kingdead */ "./public/js/game_types/lose_conditions/kingdead.js");


var RULE_SETS = {
  'chess': {
    id: 'chess',
    name: "Chess",
    loseConditions: [new _lose_conditions_kingdead__WEBPACK_IMPORTED_MODULE_1__["default"]()],
    boardWidth: 8,
    boardHeight: 8,
    setupMoves:
    /*#__PURE__*/
    regeneratorRuntime.mark(function setupMoves() {
      var x;
      return regeneratorRuntime.wrap(function setupMoves$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              x = 0;

            case 1:
              if (!(x < 8)) {
                _context.next = 9;
                break;
              }

              _context.next = 4;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(x, 1, 2, "Pawn");

            case 4:
              _context.next = 6;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(x, 6, 1, "Pawn");

            case 6:
              x++;
              _context.next = 1;
              break;

            case 9:
              _context.next = 11;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(0, 0, 2, "Rook");

            case 11:
              _context.next = 13;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(7, 0, 2, "Rook");

            case 13:
              _context.next = 15;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(0, 7, 1, "Rook");

            case 15:
              _context.next = 17;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(7, 7, 1, "Rook");

            case 17:
              _context.next = 19;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(1, 0, 2, "Knight");

            case 19:
              _context.next = 21;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(6, 0, 2, "Knight");

            case 21:
              _context.next = 23;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(1, 7, 1, "Knight");

            case 23:
              _context.next = 25;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(6, 7, 1, "Knight");

            case 25:
              _context.next = 27;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(2, 0, 2, "Bishop");

            case 27:
              _context.next = 29;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(5, 0, 2, "Bishop");

            case 29:
              _context.next = 31;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(2, 7, 1, "Bishop");

            case 31:
              _context.next = 33;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(5, 7, 1, "Bishop");

            case 33:
              _context.next = 35;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(4, 0, 2, "Queen");

            case 35:
              _context.next = 37;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(4, 7, 1, "Queen");

            case 37:
              _context.next = 39;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(3, 0, 2, "King");

            case 39:
              _context.next = 41;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(3, 7, 1, "King");

            case 41:
            case "end":
              return _context.stop();
          }
        }
      }, setupMoves);
    })
  },
  'chess-attack': {
    id: 'chess-attack',
    name: 'Chess Attack',
    loseConditions: [new _lose_conditions_kingdead__WEBPACK_IMPORTED_MODULE_1__["default"]()],
    boardWidth: 5,
    boardHeight: 6,
    setupMoves:
    /*#__PURE__*/
    regeneratorRuntime.mark(function setupMoves() {
      var x;
      return regeneratorRuntime.wrap(function setupMoves$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              x = 0;

            case 1:
              if (!(x < 5)) {
                _context2.next = 9;
                break;
              }

              _context2.next = 4;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(x, 1, 2, "Pawn");

            case 4:
              _context2.next = 6;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(x, 4, 1, "Pawn");

            case 6:
              x++;
              _context2.next = 1;
              break;

            case 9:
              _context2.next = 11;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(0, 0, 2, "Rook");

            case 11:
              _context2.next = 13;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(0, 5, 1, "Rook");

            case 13:
              _context2.next = 15;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(1, 0, 2, "Knight");

            case 15:
              _context2.next = 17;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(1, 5, 1, "Knight");

            case 17:
              _context2.next = 19;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(2, 0, 2, "Bishop");

            case 19:
              _context2.next = 21;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(2, 5, 1, "Bishop");

            case 21:
              _context2.next = 23;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(3, 0, 2, "Queen");

            case 23:
              _context2.next = 25;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(3, 5, 1, "Queen");

            case 25:
              _context2.next = 27;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(4, 0, 2, "King");

            case 27:
              _context2.next = 29;
              return _game__WEBPACK_IMPORTED_MODULE_0__["default"].preparePlacePiece(4, 5, 1, "King");

            case 29:
            case "end":
              return _context2.stop();
          }
        }
      }, setupMoves);
    })
  }
};

/***/ }),

/***/ "./public/js/gamemaster.js":
/*!*********************************!*\
  !*** ./public/js/gamemaster.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GameMaster; });
/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ "./public/js/player.js");
/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game */ "./public/js/game.js");
/* harmony import */ var _game_types_rulesets__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./game_types/rulesets */ "./public/js/game_types/rulesets.js");
/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./piece */ "./public/js/piece.js");
/* harmony import */ var _game_types_pieceregistry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./game_types/pieceregistry */ "./public/js/game_types/pieceregistry.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_5__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }






 // client side

var GameMaster =
/*#__PURE__*/
function () {
  function GameMaster(socket, client, game) {
    _classCallCheck(this, GameMaster);

    // setup game based on 'setup game' data from server
    var player1 = new _player__WEBPACK_IMPORTED_MODULE_0__["default"](game.player1.name);
    var player2 = new _player__WEBPACK_IMPORTED_MODULE_0__["default"](game.player2.name);
    this.localPlayer = null;
    if (player1.name === client.username) this.localPlayer = player1;
    if (player2.name === client.username) this.localPlayer = player2;
    this.game = new _game__WEBPACK_IMPORTED_MODULE_1__["default"](_game_types_rulesets__WEBPACK_IMPORTED_MODULE_2__["RULE_SETS"][game.rules.id], game.name, player1, player2);
    this.render();
    this.html.css('width', this.game.width * 64 + "px");
    jquery__WEBPACK_IMPORTED_MODULE_5___default()('#board-wrapper').append(this.html);
    jquery__WEBPACK_IMPORTED_MODULE_5___default()(this.html).on('dragstart', '[draggable]', function (event) {
      var cell = this.getCell(jquery__WEBPACK_IMPORTED_MODULE_5___default()(event.target).closest('.cell'));
      event.originalEvent.dataTransfer.setData('text/json', JSON.stringify({
        x: cell.x,
        y: cell.y
      }));
      this.selectPiece(cell); //TODO: handle only click
      //this.handleClick(this.getCell($(event.target)));
    }.bind(this));
    jquery__WEBPACK_IMPORTED_MODULE_5___default()(this.html).on('dragend', '[draggable]', function (event) {
      console.log('end');
      this.deselectPiece();
    }.bind(this)); // enable drop on possible move target

    jquery__WEBPACK_IMPORTED_MODULE_5___default()(this.html).on('dragover', '.cell', function (event) {
      if (jquery__WEBPACK_IMPORTED_MODULE_5___default()(event.target).hasClass('possibleMove')) event.preventDefault();
    });
    jquery__WEBPACK_IMPORTED_MODULE_5___default()(this.html).on('drop', '.possibleMove', function (event) {
      var targetCell = this.getCell(jquery__WEBPACK_IMPORTED_MODULE_5___default()(event.target));
      this.handleClick(targetCell);
    }.bind(this));
    jquery__WEBPACK_IMPORTED_MODULE_5___default()(this.html).on('click', '[draggable], .possibleMove', function (event) {
      var cell = this.getCell(jquery__WEBPACK_IMPORTED_MODULE_5___default()(event.target).closest('.cell'));
      this.handleClick(cell);
    }.bind(this));
    jquery__WEBPACK_IMPORTED_MODULE_5___default()(document).on('click', '#pawn-promotion > img', function (event) {
      var target = jquery__WEBPACK_IMPORTED_MODULE_5___default()(event.target);
      var logEntry = this.promotionCache;
      logEntry.promotionPieceName = target.data('name');
      this.hideNotification();
      this.socket.emit('game action', logEntry);
    }.bind(this));
    this.socket = socket;
    this.socket.on('game action', function (data) {
      console.log(data);

      switch (data.action) {
        case 'action':
        case 'sym move':
        case 'place piece':
        case 'gameEnd':
          this.hideNotification();
          this.game.execute(data);
          this.executeAction(data);
          break;

        case 'notification':
          switch (data.type) {
            case 'PlayerMadeMove':
              if (data.playerNumber === this.localPlayer.number) this.showNotification('Please wait...', 'Waiting for other player to make his move.');
              break;

            default:
              this.showError('UnknownNotificationType: ' + data.type);
          }

          break;

        default:
          this.showError('UnknownGameAction: ' + data.action);
      }
    }.bind(this));
    this.socket.on('error message', function (data) {
      this.showError(data);
    }.bind(this));
  }

  _createClass(GameMaster, [{
    key: "handleClick",
    value: function handleClick(cell) {
      // execute move
      var targetJQCell = this.getjqCell(cell);

      if (targetJQCell.hasClass('possibleMove')) {
        var sourceJqCell = jquery__WEBPACK_IMPORTED_MODULE_5___default()('td.selected', this.html);
        var sourceCell = this.getCell(sourceJqCell);
        var logEntry = _game__WEBPACK_IMPORTED_MODULE_1__["default"].prepareMove(sourceCell, cell);

        if (targetJQCell.hasClass('en-passant')) {
          logEntry.special = 'en-passant'; // should always be a pawn

          logEntry.passantClass = this.game.getCell(cell.x, sourceCell.y).piece["class"];
        }

        if (targetJQCell.hasClass('promote')) {
          logEntry.special = 'promote';
          this.promotionCache = logEntry;
          this.showPromotionPrompt();
          this.deselectPiece();
          return;
        }

        this.deselectPiece();
        this.socket.emit('game action', logEntry);
        return;
      } // show possible moves


      if (cell.piece && (cell.piece.owner === this.localPlayer || this.admin)) {
        if (targetJQCell.hasClass('selected')) {
          // a click on a selected piece deselects it
          this.deselectPiece();
        } else {
          // selected his own piece
          this.selectPiece(cell);
        }
      }
    } // make change on the visual board

  }, {
    key: "executeAction",
    value: function executeAction(logEntry) {
      if (logEntry.action === 'place piece') {
        var cell = this.game.getCell(logEntry);
        this.redrawCell(cell);
      } //TODO handle other with redraw


      if (logEntry.action === 'sym move') {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = logEntry.moves[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var move = _step.value;
            var sourceCell = this.game.getCell(move.source);
            this.redrawCell(sourceCell);
            var targetCell = this.game.getCell(move.target);
            this.redrawCell(targetCell);

            if (move.special && move.special === 'en-passant') {
              var destroyCell = this.game.getCell(move.target.x, move.source.y);
              this.redrawCell(destroyCell);
            }
          } // do special moves
          // for (let smove of logEntry.moves) {
          //     if (smove.special === 'en-passant') {
          //         this.getjqCell({x: smove.target.x, y: smove.source.y}).removeClass(smove.passantClass);
          //     }
          //     if (smove.special === 'promote') {
          //         let targetJqCellFU = this.getjqCell(smove.target);
          //         let player = this.game.getPlayer(smove.playerNumber);
          //         targetJqCellFU.removeClass(new Pawn(player).class);
          //         let pieceClass = PIECE_REGISTRY[smove.promotionPieceName];
          //         targetJqCellFU.addClass(new pieceClass(player).class);
          //     }
          // }

        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      if (logEntry.action === 'gameEnd') {
        if (logEntry.winner === 0) {
          this.showNotification('Draw', 'The game ended in a draw.');
        } else if (logEntry.winner === this.localPlayer.number) {
          jquery__WEBPACK_IMPORTED_MODULE_5___default()('.message', this.html).addClass('win');
          this.showNotification('Winner', 'You won this game.');
        } else {
          jquery__WEBPACK_IMPORTED_MODULE_5___default()('.message', this.html).addClass('lose');
          this.showNotification('2nd Place', 'You lost this game');
        }
      }
    } // cell: class Cell

  }, {
    key: "redrawCell",
    value: function redrawCell(cell) {
      var jqCell = this.getjqCell(cell);
      jquery__WEBPACK_IMPORTED_MODULE_5___default()(cell.render()).insertAfter(jqCell);
      jqCell.remove();
    }
  }, {
    key: "getCell",
    value: function getCell(jqcell) {
      var x = jqcell.data('x');
      var y = jqcell.data('y');
      return this.game.board[y][x];
    }
  }, {
    key: "getjqCell",
    value: function getjqCell(cell) {
      return jquery__WEBPACK_IMPORTED_MODULE_5___default()('td[data-x="' + cell.x + '"][data-y="' + cell.y + '"]', this.html);
    }
  }, {
    key: "selectPiece",
    value: function selectPiece(cell) {
      jquery__WEBPACK_IMPORTED_MODULE_5___default()('.selected', this.html).removeClass('selected');
      this.getjqCell(cell).addClass('selected');
      jquery__WEBPACK_IMPORTED_MODULE_5___default()('.possibleMove', this.html).removeClass('possibleMove');
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.game.getPossibleMoves(cell)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var move = _step2.value;
          var jqcell = this.getjqCell(move);
          jqcell.addClass('possibleMove');
          if (move.special) jqcell.addClass(move.special);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: "deselectPiece",
    value: function deselectPiece() {
      jquery__WEBPACK_IMPORTED_MODULE_5___default()('.selected', this.html).removeClass('selected');
      jquery__WEBPACK_IMPORTED_MODULE_5___default()('.possibleMove', this.html).removeClass('possibleMove').removeClass('en-passant').removeClass('promote');
    }
  }, {
    key: "showNotification",
    value: function showNotification(title, content) {
      jquery__WEBPACK_IMPORTED_MODULE_5___default()('.message .title', this.html).text(title);
      jquery__WEBPACK_IMPORTED_MODULE_5___default()('.message .content', this.html).html(content);
      jquery__WEBPACK_IMPORTED_MODULE_5___default()('.overlay', this.html).show();
    }
  }, {
    key: "showError",
    value: function showError(message) {
      jquery__WEBPACK_IMPORTED_MODULE_5___default()('.message', this.html).addClass('error');
      this.showNotification('Error: ' + message, 'Try to <a href=".">reload</a>. ' + 'If that doesn\'t work yell at the dev: <a href="mailto:shylux@gmail.com">shylux@gmail.com</a>');
    }
  }, {
    key: "hideNotification",
    value: function hideNotification() {
      jquery__WEBPACK_IMPORTED_MODULE_5___default()('.overlay', this.html).hide();
    }
  }, {
    key: "showPromotionPrompt",
    value: function showPromotionPrompt() {
      var template = __webpack_require__(/*! ../templates/promote.hbs */ "./public/templates/promote.hbs");

      var html = template({
        pieces: [new _piece__WEBPACK_IMPORTED_MODULE_3__["Queen"](this.localPlayer), new _piece__WEBPACK_IMPORTED_MODULE_3__["Rook"](this.localPlayer), new _piece__WEBPACK_IMPORTED_MODULE_3__["Bishop"](this.localPlayer), new _piece__WEBPACK_IMPORTED_MODULE_3__["Knight"](this.localPlayer)]
      });
      this.showNotification('Promote your pawn!', html);
    }
  }, {
    key: "render",
    value: function render() {
      var template = __webpack_require__(/*! ../templates/board.hbs */ "./public/templates/board.hbs");

      var html = template({
        game: this.game,
        player: this.localPlayer
      });
      this.html = jquery__WEBPACK_IMPORTED_MODULE_5___default()(html);
    }
  }]);

  return GameMaster;
}();



/***/ }),

/***/ "./public/js/helpers/rendercell.js":
/*!*****************************************!*\
  !*** ./public/js/helpers/rendercell.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (cell) {
  return cell.render();
};

/***/ }),

/***/ "./public/js/helpers/spinforplayer.js":
/*!********************************************!*\
  !*** ./public/js/helpers/spinforplayer.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (game, player, array, block) {
  var reversed = game.player2 === player;
  var accum = '';

  for (var i = 0; i < array.length; ++i) {
    var ri = reversed ? array.length - (i + 1) : i;
    accum += block.fn(array[ri]);
  }

  return accum;
};

/***/ }),

/***/ "./public/js/piece.js":
/*!****************************!*\
  !*** ./public/js/piece.js ***!
  \****************************/
/*! exports provided: Pawn, God, Rook, Knight, Bishop, Queen, King */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pawn", function() { return Pawn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "God", function() { return God; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rook", function() { return Rook; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Knight", function() { return Knight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bishop", function() { return Bishop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Queen", function() { return Queen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "King", function() { return King; });
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var STRAIGHT_DIRECTIONS = [{
  x: 1,
  y: 0
}, {
  x: -1,
  y: 0
}, {
  x: 0,
  y: 1
}, {
  x: 0,
  y: -1
}];
var DIAGONAL_DIRECTIONS = [{
  x: 1,
  y: 1
}, {
  x: -1,
  y: -1
}, {
  x: -1,
  y: 1
}, {
  x: 1,
  y: -1
}];
var ALL_DIRECTIONS = [{
  x: 1,
  y: 0
}, {
  x: -1,
  y: 0
}, {
  x: 0,
  y: 1
}, {
  x: 0,
  y: -1
}, {
  x: 1,
  y: 1
}, {
  x: -1,
  y: -1
}, {
  x: -1,
  y: 1
}, {
  x: 1,
  y: -1
}];
var MOVING_BEHAVIORS = {
  // default: stops at first piece with option to kill an enemy piece
  HITTING: 0,
  // stopping is like hitting but without the option to kill (pawn)
  STOPPING: 1
};

var Piece =
/*#__PURE__*/
function () {
  function Piece(owner, name) {
    _classCallCheck(this, Piece);

    this.owner = owner;
    this._name = name;
    this.hasMoved = false;
  }

  _createClass(Piece, [{
    key: "getPossibleMoves",
    value: function getPossibleMoves(game, x, y) {
      throw "NotImplemented";
    }
  }, {
    key: "getMovesInDirection",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function getMovesInDirection(game, x, y, direction) {
      var maxDistance,
          behaviour,
          pos,
          distance,
          cell,
          _args = arguments;
      return regeneratorRuntime.wrap(function getMovesInDirection$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              maxDistance = _args.length > 4 && _args[4] !== undefined ? _args[4] : 9999;
              behaviour = _args.length > 5 && _args[5] !== undefined ? _args[5] : MOVING_BEHAVIORS.HITTING;
              pos = {
                x: x,
                y: y
              };
              distance = 0;

            case 4:
              if (false) {}

              distance++;

              if (!(distance > maxDistance)) {
                _context.next = 8;
                break;
              }

              return _context.abrupt("break", 30);

            case 8:
              pos.x += direction.x;
              pos.y += direction.y;
              _context.prev = 10;
              cell = game.getCell(pos.x, pos.y);

              if (cell.tile.passable) {
                _context.next = 14;
                break;
              }

              return _context.abrupt("break", 30);

            case 14:
              if (!cell.piece) {
                _context.next = 19;
                break;
              }

              if (!(behaviour !== MOVING_BEHAVIORS.STOPPING && cell.piece.owner !== this.owner)) {
                _context.next = 18;
                break;
              }

              _context.next = 18;
              return {
                x: pos.x,
                y: pos.y
              };

            case 18:
              return _context.abrupt("break", 30);

            case 19:
              _context.next = 21;
              return {
                x: pos.x,
                y: pos.y
              };

            case 21:
              _context.next = 28;
              break;

            case 23:
              _context.prev = 23;
              _context.t0 = _context["catch"](10);

              if (!(_context.t0 !== "OutsideOfBoard")) {
                _context.next = 27;
                break;
              }

              throw _context.t0;

            case 27:
              return _context.abrupt("break", 30);

            case 28:
              _context.next = 4;
              break;

            case 30:
            case "end":
              return _context.stop();
          }
        }
      }, getMovesInDirection, this, [[10, 23]]);
    })
  }, {
    key: "getPassableCell",
    value: function getPassableCell(game, x, y) {
      var cell = game.getCell(x, y);
      if (!cell.tile.passable) throw "CellNotPassable";
      return cell;
    }
  }, {
    key: "getOwnerDirection",
    value: function getOwnerDirection(playerNumber) {
      if (!playerNumber) playerNumber = this.owner.number;

      switch (playerNumber) {
        case 1:
          return {
            x: 0,
            y: -1
          };

        case 2:
          return {
            x: 0,
            y: 1
          };

        default:
          throw 'UnknownOwnerDirection';
      }
    }
  }, {
    key: "name",
    get: function get() {
      return this._name;
    }
  }, {
    key: "class",
    get: function get() {
      throw "NotImplemented";
    }
  }, {
    key: "img",
    get: function get() {
      throw "NotImplemented";
    }
  }]);

  return Piece;
}();

var BlackWhiteChessPiece =
/*#__PURE__*/
function (_Piece) {
  _inherits(BlackWhiteChessPiece, _Piece);

  function BlackWhiteChessPiece(owner, name, filename) {
    var _this;

    _classCallCheck(this, BlackWhiteChessPiece);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlackWhiteChessPiece).call(this, owner, name));
    _this.filename = filename;
    return _this;
  }

  _createClass(BlackWhiteChessPiece, [{
    key: "ownerColor",
    get: function get() {
      if (this.owner.number === 1) return "white";
      if (this.owner.number === 2) return "black";
      throw "InvalidOnwerNumber";
    }
  }, {
    key: "class",
    get: function get() {
      return this.ownerColor;
    }
  }, {
    key: "img",
    get: function get() {
      return "/images/pieces/chess_svg/" + this.name.toLowerCase() + "_" + this.ownerColor + ".svg";
    }
  }]);

  return BlackWhiteChessPiece;
}(Piece);

var Pawn =
/*#__PURE__*/
function (_BlackWhiteChessPiece) {
  _inherits(Pawn, _BlackWhiteChessPiece);

  function Pawn(owner) {
    _classCallCheck(this, Pawn);

    return _possibleConstructorReturn(this, _getPrototypeOf(Pawn).call(this, owner, "Pawn"));
  }

  _createClass(Pawn, [{
    key: "getPossibleMoves",
    // this marks the promotion moves
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function getPossibleMoves(game, x, y) {
      var possibleMoves, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, move;

      return regeneratorRuntime.wrap(function getPossibleMoves$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              possibleMoves = _toConsumableArray(this.getPossibleMovesWithoutPromotion(game, x, y));
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context2.prev = 4;

              for (_iterator = possibleMoves[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                move = _step.value;

                try {
                  game.getCell(move.x, move.y + this.getOwnerDirection().y);
                } catch (err) {
                  // mark as promotion if next step would be outside the board
                  if (err === "OutsideOfBoard") {
                    move.special = 'promote';
                  }
                }
              }

              _context2.next = 12;
              break;

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](4);
              _didIteratorError = true;
              _iteratorError = _context2.t0;

            case 12:
              _context2.prev = 12;
              _context2.prev = 13;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 15:
              _context2.prev = 15;

              if (!_didIteratorError) {
                _context2.next = 18;
                break;
              }

              throw _iteratorError;

            case 18:
              return _context2.finish(15);

            case 19:
              return _context2.finish(12);

            case 20:
              return _context2.delegateYield(possibleMoves, "t1", 21);

            case 21:
            case "end":
              return _context2.stop();
          }
        }
      }, getPossibleMoves, this, [[4, 8, 12, 20], [13,, 15, 19]]);
    })
  }, {
    key: "getPossibleMovesWithoutPromotion",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function getPossibleMovesWithoutPromotion(game, x, y) {
      var distance, hittingMoves, _i, _hittingMoves, hittingMove, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, move, cell, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, logEntry;

      return regeneratorRuntime.wrap(function getPossibleMovesWithoutPromotion$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              // a pawn can move two spaces if it hasn't moved yet
              distance = this.hasMoved ? 1 : 2; // move in front

              return _context3.delegateYield(this.getMovesInDirection(game, x, y, this.getOwnerDirection(), distance, MOVING_BEHAVIORS.STOPPING), "t0", 2);

            case 2:
              // diagonal moves - only available if the move can kill an opposing piece
              hittingMoves = [{
                x: 1,
                y: this.getOwnerDirection().y
              }, {
                x: -1,
                y: this.getOwnerDirection().y
              }];
              _i = 0, _hittingMoves = hittingMoves;

            case 4:
              if (!(_i < _hittingMoves.length)) {
                _context3.next = 71;
                break;
              }

              hittingMove = _hittingMoves[_i];
              // move one field diagonal and check
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context3.prev = 9;
              _iterator2 = this.getMovesInDirection(game, x, y, hittingMove, 1)[Symbol.iterator]();

            case 11:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context3.next = 54;
                break;
              }

              move = _step2.value;

              if (!game.getCell(move).piece) {
                _context3.next = 16;
                break;
              }

              _context3.next = 16;
              return move;

            case 16:
              _context3.prev = 16;
              cell = this.getPassableCell(game, x + hittingMove.x, y);

              if (!(cell.piece && cell.piece.name === "Pawn" && cell.piece.owner !== this.owner)) {
                _context3.next = 47;
                break;
              }

              // check game history
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context3.prev = 22;
              _iterator3 = this.lastTurnActions(game)[Symbol.iterator]();

            case 24:
              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                _context3.next = 33;
                break;
              }

              logEntry = _step3.value;

              if (!(logEntry.target.x === x + hittingMove.x && logEntry.target.y === y && logEntry.source.x === x + hittingMove.x && logEntry.source.y === y + -2 * this.getOwnerDirection(cell.piece.owner.number).y)) {
                _context3.next = 30;
                break;
              }

              move.special = 'en-passant';
              _context3.next = 30;
              return move;

            case 30:
              _iteratorNormalCompletion3 = true;
              _context3.next = 24;
              break;

            case 33:
              _context3.next = 39;
              break;

            case 35:
              _context3.prev = 35;
              _context3.t1 = _context3["catch"](22);
              _didIteratorError3 = true;
              _iteratorError3 = _context3.t1;

            case 39:
              _context3.prev = 39;
              _context3.prev = 40;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 42:
              _context3.prev = 42;

              if (!_didIteratorError3) {
                _context3.next = 45;
                break;
              }

              throw _iteratorError3;

            case 45:
              return _context3.finish(42);

            case 46:
              return _context3.finish(39);

            case 47:
              _context3.next = 51;
              break;

            case 49:
              _context3.prev = 49;
              _context3.t2 = _context3["catch"](16);

            case 51:
              _iteratorNormalCompletion2 = true;
              _context3.next = 11;
              break;

            case 54:
              _context3.next = 60;
              break;

            case 56:
              _context3.prev = 56;
              _context3.t3 = _context3["catch"](9);
              _didIteratorError2 = true;
              _iteratorError2 = _context3.t3;

            case 60:
              _context3.prev = 60;
              _context3.prev = 61;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 63:
              _context3.prev = 63;

              if (!_didIteratorError2) {
                _context3.next = 66;
                break;
              }

              throw _iteratorError2;

            case 66:
              return _context3.finish(63);

            case 67:
              return _context3.finish(60);

            case 68:
              _i++;
              _context3.next = 4;
              break;

            case 71:
            case "end":
              return _context3.stop();
          }
        }
      }, getPossibleMovesWithoutPromotion, this, [[9, 56, 60, 68], [16, 49], [22, 35, 39, 47], [40,, 42, 46], [61,, 63, 67]]);
    })
  }, {
    key: "lastTurnActions",
    value: function lastTurnActions(game) {
      var logEntry = game.gameLog[game.gameLog.length - 1];
      if (logEntry.action === "sym move") return logEntry.moves;
      if (logEntry.action === "move") return [logEntry];
    }
  }, {
    key: "class",
    get: function get() {
      return 'piece-pawn-' + _get(_getPrototypeOf(Pawn.prototype), "class", this);
    }
  }]);

  return Pawn;
}(BlackWhiteChessPiece);
var God =
/*#__PURE__*/
function (_BlackWhiteChessPiece2) {
  _inherits(God, _BlackWhiteChessPiece2);

  function God(owner) {
    _classCallCheck(this, God);

    return _possibleConstructorReturn(this, _getPrototypeOf(God).call(this, owner, "God"));
  }

  _createClass(God, [{
    key: "getPossibleMoves",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function getPossibleMoves(game, x, y) {
      var _y, _x;

      return regeneratorRuntime.wrap(function getPossibleMoves$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _y = 0;

            case 1:
              if (!(_y < game.board.length)) {
                _context4.next = 12;
                break;
              }

              _x = 0;

            case 3:
              if (!(_x < game.board[_y].length)) {
                _context4.next = 9;
                break;
              }

              _context4.next = 6;
              return {
                x: _x,
                y: _y
              };

            case 6:
              _x++;
              _context4.next = 3;
              break;

            case 9:
              _y++;
              _context4.next = 1;
              break;

            case 12:
            case "end":
              return _context4.stop();
          }
        }
      }, getPossibleMoves);
    })
  }, {
    key: "class",
    get: function get() {
      return 'piece-god-' + _get(_getPrototypeOf(God.prototype), "class", this);
    }
  }]);

  return God;
}(BlackWhiteChessPiece);
var Rook =
/*#__PURE__*/
function (_BlackWhiteChessPiece3) {
  _inherits(Rook, _BlackWhiteChessPiece3);

  function Rook(owner) {
    _classCallCheck(this, Rook);

    return _possibleConstructorReturn(this, _getPrototypeOf(Rook).call(this, owner, "Rook"));
  }

  _createClass(Rook, [{
    key: "getPossibleMoves",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function getPossibleMoves(game, x, y) {
      var d;
      return regeneratorRuntime.wrap(function getPossibleMoves$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              d = 0;

            case 1:
              if (!(d < STRAIGHT_DIRECTIONS.length)) {
                _context5.next = 6;
                break;
              }

              return _context5.delegateYield(this.getMovesInDirection(game, x, y, STRAIGHT_DIRECTIONS[d]), "t0", 3);

            case 3:
              d++;
              _context5.next = 1;
              break;

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, getPossibleMoves, this);
    })
  }, {
    key: "class",
    get: function get() {
      return 'piece-rook-' + _get(_getPrototypeOf(Rook.prototype), "class", this);
    }
  }]);

  return Rook;
}(BlackWhiteChessPiece);
var Knight =
/*#__PURE__*/
function (_BlackWhiteChessPiece4) {
  _inherits(Knight, _BlackWhiteChessPiece4);

  function Knight(owner) {
    _classCallCheck(this, Knight);

    return _possibleConstructorReturn(this, _getPrototypeOf(Knight).call(this, owner, "Knight"));
  }

  _createClass(Knight, [{
    key: "getPossibleMoves",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function getPossibleMoves(game, x, y) {
      var relativeMoves, d;
      return regeneratorRuntime.wrap(function getPossibleMoves$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              relativeMoves = [{
                x: 2,
                y: 1
              }, {
                x: 2,
                y: -1
              }, {
                x: -2,
                y: 1
              }, {
                x: -2,
                y: -1
              }, {
                x: 1,
                y: 2
              }, {
                x: -1,
                y: 2
              }, {
                x: 1,
                y: -2
              }, {
                x: -1,
                y: -2
              }];
              d = 0;

            case 2:
              if (!(d < relativeMoves.length)) {
                _context6.next = 7;
                break;
              }

              return _context6.delegateYield(this.getMovesInDirection(game, x, y, relativeMoves[d], 1), "t0", 4);

            case 4:
              d++;
              _context6.next = 2;
              break;

            case 7:
            case "end":
              return _context6.stop();
          }
        }
      }, getPossibleMoves, this);
    })
  }, {
    key: "class",
    get: function get() {
      return 'piece-knight-' + _get(_getPrototypeOf(Knight.prototype), "class", this);
    }
  }]);

  return Knight;
}(BlackWhiteChessPiece);
var Bishop =
/*#__PURE__*/
function (_BlackWhiteChessPiece5) {
  _inherits(Bishop, _BlackWhiteChessPiece5);

  function Bishop(owner) {
    _classCallCheck(this, Bishop);

    return _possibleConstructorReturn(this, _getPrototypeOf(Bishop).call(this, owner, "Bishop"));
  }

  _createClass(Bishop, [{
    key: "getPossibleMoves",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function getPossibleMoves(game, x, y) {
      var d;
      return regeneratorRuntime.wrap(function getPossibleMoves$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              d = 0;

            case 1:
              if (!(d < DIAGONAL_DIRECTIONS.length)) {
                _context7.next = 6;
                break;
              }

              return _context7.delegateYield(this.getMovesInDirection(game, x, y, DIAGONAL_DIRECTIONS[d]), "t0", 3);

            case 3:
              d++;
              _context7.next = 1;
              break;

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, getPossibleMoves, this);
    })
  }, {
    key: "class",
    get: function get() {
      return 'piece-bishop-' + _get(_getPrototypeOf(Bishop.prototype), "class", this);
    }
  }]);

  return Bishop;
}(BlackWhiteChessPiece);
var Queen =
/*#__PURE__*/
function (_BlackWhiteChessPiece6) {
  _inherits(Queen, _BlackWhiteChessPiece6);

  function Queen(owner) {
    _classCallCheck(this, Queen);

    return _possibleConstructorReturn(this, _getPrototypeOf(Queen).call(this, owner, "Queen"));
  }

  _createClass(Queen, [{
    key: "getPossibleMoves",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function getPossibleMoves(game, x, y) {
      var d;
      return regeneratorRuntime.wrap(function getPossibleMoves$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              d = 0;

            case 1:
              if (!(d < ALL_DIRECTIONS.length)) {
                _context8.next = 6;
                break;
              }

              return _context8.delegateYield(this.getMovesInDirection(game, x, y, ALL_DIRECTIONS[d]), "t0", 3);

            case 3:
              d++;
              _context8.next = 1;
              break;

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, getPossibleMoves, this);
    })
  }, {
    key: "class",
    get: function get() {
      return 'piece-queen-' + _get(_getPrototypeOf(Queen.prototype), "class", this);
    }
  }]);

  return Queen;
}(BlackWhiteChessPiece);
var King =
/*#__PURE__*/
function (_BlackWhiteChessPiece7) {
  _inherits(King, _BlackWhiteChessPiece7);

  function King(owner) {
    _classCallCheck(this, King);

    return _possibleConstructorReturn(this, _getPrototypeOf(King).call(this, owner, "King"));
  }

  _createClass(King, [{
    key: "getPossibleMoves",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function getPossibleMoves(game, x, y) {
      var d;
      return regeneratorRuntime.wrap(function getPossibleMoves$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              d = 0;

            case 1:
              if (!(d < ALL_DIRECTIONS.length)) {
                _context9.next = 6;
                break;
              }

              return _context9.delegateYield(this.getMovesInDirection(game, x, y, ALL_DIRECTIONS[d], 1), "t0", 3);

            case 3:
              d++;
              _context9.next = 1;
              break;

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, getPossibleMoves, this);
    })
  }, {
    key: "class",
    get: function get() {
      return 'piece-king-' + _get(_getPrototypeOf(King.prototype), "class", this);
    }
  }]);

  return King;
}(BlackWhiteChessPiece);

/***/ }),

/***/ "./public/js/player.js":
/*!*****************************!*\
  !*** ./public/js/player.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Player; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Player = function Player(name) {
  _classCallCheck(this, Player);

  this.name = name;
  this.number = -1;
};



/***/ }),

/***/ "./public/js/tile.js":
/*!***************************!*\
  !*** ./public/js/tile.js ***!
  \***************************/
/*! exports provided: default, BlackTile, WhiteTile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Tile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlackTile", function() { return BlackTile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WhiteTile", function() { return WhiteTile; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Tile =
/*#__PURE__*/
function () {
  function Tile() {
    _classCallCheck(this, Tile);

    this.passable = true;
  }

  _createClass(Tile, [{
    key: "classes",
    get: function get() {
      throw "NotImplemented";
    }
  }]);

  return Tile;
}();


var BlackTile =
/*#__PURE__*/
function (_Tile) {
  _inherits(BlackTile, _Tile);

  function BlackTile() {
    _classCallCheck(this, BlackTile);

    return _possibleConstructorReturn(this, _getPrototypeOf(BlackTile).apply(this, arguments));
  }

  _createClass(BlackTile, [{
    key: "classes",
    get: function get() {
      return ["tile-black"];
    }
  }]);

  return BlackTile;
}(Tile);
var WhiteTile =
/*#__PURE__*/
function (_Tile2) {
  _inherits(WhiteTile, _Tile2);

  function WhiteTile() {
    _classCallCheck(this, WhiteTile);

    return _possibleConstructorReturn(this, _getPrototypeOf(WhiteTile).apply(this, arguments));
  }

  _createClass(WhiteTile, [{
    key: "classes",
    get: function get() {
      return ["tile-white"];
    }
  }]);

  return WhiteTile;
}(Tile);

/***/ }),

/***/ "./public/js/utils/cookie.js":
/*!***********************************!*\
  !*** ./public/js/utils/cookie.js ***!
  \***********************************/
/*! exports provided: createCookie, readCookie, eraseCookie */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCookie", function() { return createCookie; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readCookie", function() { return readCookie; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eraseCookie", function() { return eraseCookie; });
// Create cookie
function createCookie(name, value, days) {
  var expires;

  if (days) {
    var date = new Date();
    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
    expires = "; expires=" + date.toGMTString();
  } else {
    expires = "";
  }

  document.cookie = name + "=" + value + expires + "; path=/";
} // Read cookie

function readCookie(name) {
  var nameEQ = name + "=";
  var ca = document.cookie.split(';');

  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];

    while (c.charAt(0) === ' ') {
      c = c.substring(1, c.length);
    }

    if (c.indexOf(nameEQ) === 0) {
      return c.substring(nameEQ.length, c.length);
    }
  }

  return null;
} // Erase cookie

function eraseCookie(name) {
  createCookie(name, "", -1);
}

/***/ }),

/***/ "./public/js/utils/guid.js":
/*!*********************************!*\
  !*** ./public/js/utils/guid.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return guid; });
// from https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
function guid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }

  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
}

/***/ }),

/***/ "./public/js/utils/timeSince.js":
/*!**************************************!*\
  !*** ./public/js/utils/timeSince.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return timeSince; });
// from https://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site
function timeSince(date) {
  var seconds = Math.floor((new Date() - date) / 1000);
  var interval = Math.floor(seconds / 31536000);

  if (interval > 1) {
    return interval + " years";
  }

  interval = Math.floor(seconds / 2592000);

  if (interval > 1) {
    return interval + " months";
  }

  interval = Math.floor(seconds / 86400);

  if (interval > 1) {
    return interval + " days";
  }

  interval = Math.floor(seconds / 3600);

  if (interval > 1) {
    return interval + " hours";
  }

  interval = Math.floor(seconds / 60);

  if (interval > 1) {
    return interval + " minutes";
  }

  return Math.floor(seconds) + " seconds";
}

/***/ }),

/***/ "./public/templates/board.hbs":
/*!************************************!*\
  !*** ./public/templates/board.hbs ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1;

  return "        <tr>\n"
    + ((stack1 = __default(__webpack_require__(/*! ../js/helpers/spinforplayer.js */ "./public/js/helpers/spinforplayer.js")).call(depth0 != null ? depth0 : (container.nullContext || {}),(depths[1] != null ? depths[1].game : depths[1]),(depths[1] != null ? depths[1].player : depths[1]),depth0,{"name":"spinforplayer","hash":{},"fn":container.program(2, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "        </tr>\n";
},"2":function(container,depth0,helpers,partials,data) {
    var stack1;

  return "                "
    + ((stack1 = __default(__webpack_require__(/*! ../js/helpers/rendercell.js */ "./public/js/helpers/rendercell.js")).call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{"name":"rendercell","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "\n";
},"3":function(container,depth0,helpers,partials,data) {
    return "";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1;

  return "<div class=\"board\">\n    <table>\n"
    + ((stack1 = __default(__webpack_require__(/*! ../js/helpers/spinforplayer.js */ "./public/js/helpers/spinforplayer.js")).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? depth0.game : depth0),(depth0 != null ? depth0.player : depth0),((stack1 = (depth0 != null ? depth0.game : depth0)) != null ? stack1.board : stack1),{"name":"spinforplayer","hash":{},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "    </table>\n    <div class=\"overlay\">\n        <div class=\"message\">\n            <p class=\"title\">So and so message</p>\n            <p class=\"content\">Please reload the app</p>\n        </div>\n    </div>\n</div>";
},"useData":true,"useDepths":true});

/***/ }),

/***/ "./public/templates/cell.hbs":
/*!***********************************!*\
  !*** ./public/templates/cell.hbs ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression;

  return "        <img draggable=\"true\" class=\"piece "
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.piece : depth0)) != null ? stack1["class"] : stack1), depth0))
    + "\" src=\""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.piece : depth0)) != null ? stack1.img : stack1), depth0))
    + "\" alt=\""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.piece : depth0)) != null ? stack1.name : stack1), depth0))
    + "\" />\n";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.escapeExpression, alias3=container.lambda;

  return "<td class=\"cell "
    + alias2(((helper = (helper = helpers.tileClass || (depth0 != null ? depth0.tileClass : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"tileClass","hash":{},"data":data}) : helper)))
    + "\" data-x=\""
    + alias2(alias3(((stack1 = (depth0 != null ? depth0.cell : depth0)) != null ? stack1.x : stack1), depth0))
    + "\" data-y=\""
    + alias2(alias3(((stack1 = (depth0 != null ? depth0.cell : depth0)) != null ? stack1.y : stack1), depth0))
    + "\">\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.piece : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</td>";
},"useData":true});

/***/ }),

/***/ "./public/templates/gamepreview.hbs":
/*!******************************************!*\
  !*** ./public/templates/gamepreview.hbs ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

  return "<div class=\"game\" data-id=\""
    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
    + "\">\n    <div class=\"name\">"
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
    + "</div>\n    <div class=\"ruleset\">"
    + alias4(((helper = (helper = helpers.ruleset || (depth0 != null ? depth0.ruleset : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"ruleset","hash":{},"data":data}) : helper)))
    + "</div>\n    <div class=\"players\">"
    + alias4(((helper = (helper = helpers.player1 || (depth0 != null ? depth0.player1 : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"player1","hash":{},"data":data}) : helper)))
    + " vs. "
    + alias4(((helper = (helper = helpers.player2 || (depth0 != null ? depth0.player2 : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"player2","hash":{},"data":data}) : helper)))
    + "</div>\n    <div class=\"created\">"
    + alias4(((helper = (helper = helpers.created || (depth0 != null ? depth0.created : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"created","hash":{},"data":data}) : helper)))
    + " ago</div>\n</div>";
},"useData":true});

/***/ }),

/***/ "./public/templates/lobby.hbs":
/*!************************************!*\
  !*** ./public/templates/lobby.hbs ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    return "        <input type=\"submit\" class=\"join\" value=\"Join\">\n";
},"3":function(container,depth0,helpers,partials,data) {
    return "        <input type=\"submit\" value=\"Waiting...\" disabled>\n";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

  return "<div class=\"lobby\" data-id=\""
    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
    + "\">\n    <div class=\"name\">"
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
    + "</div>\n    <div class=\"ruleset\">"
    + alias4(((helper = (helper = helpers.ruleset || (depth0 != null ? depth0.ruleset : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"ruleset","hash":{},"data":data}) : helper)))
    + "</div>\n    <div class=\"players\">Players: "
    + alias4(((helper = (helper = helpers.player || (depth0 != null ? depth0.player : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"player","hash":{},"data":data}) : helper)))
    + "</div>\n    <div class=\"created\">"
    + alias4(((helper = (helper = helpers.created || (depth0 != null ? depth0.created : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"created","hash":{},"data":data}) : helper)))
    + " ago</div>\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.joinable : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + ((stack1 = helpers.unless.call(alias1,(depth0 != null ? depth0.joinable : depth0),{"name":"unless","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</div>";
},"useData":true});

/***/ }),

/***/ "./public/templates/promote.hbs":
/*!**************************************!*\
  !*** ./public/templates/promote.hbs ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression;

  return "    <img class=\""
    + alias2(alias1((depth0 != null ? depth0["class"] : depth0), depth0))
    + "\" data-name=\""
    + alias2(alias1((depth0 != null ? depth0.name : depth0), depth0))
    + "\" src=\""
    + alias2(alias1((depth0 != null ? depth0.img : depth0), depth0))
    + "\"></img>\n";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1;

  return "<div id=\"pawn-promotion\">\n"
    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? depth0.pieces : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</div>";
},"useData":true});

/***/ }),

/***/ "./public/templates/ruleset-select.hbs":
/*!*********************************************!*\
  !*** ./public/templates/ruleset-select.hbs ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

  return "<input id=\"ruleset-"
    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
    + "\" type=\"radio\" name=\"ruleset\" value=\""
    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
    + "\">\n<label for=\"ruleset-"
    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
    + "\">"
    + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
    + "</label>";
},"useData":true});

/***/ }),

/***/ 0:
/*!**************************************************************************!*\
  !*** multi @babel/polyfill ./public/js/client.js ./public/css/main.scss ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! @babel/polyfill */"./node_modules/@babel/polyfill/lib/index.js");
__webpack_require__(/*! ./public/js/client.js */"./public/js/client.js");
module.exports = __webpack_require__(/*! ./public/css/main.scss */"./public/css/main.scss");


/***/ }),

/***/ 1:
/*!********************!*\
  !*** ws (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9saWIvbm9Db25mbGljdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FmdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheWJ1ZmZlci5zbGljZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFja28yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtYXJyYXlidWZmZXIvbGliL2Jhc2U2NC1hcnJheWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ibG9iL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1iaW5kL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWluaGVyaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZXM2L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL2FycmF5L2luY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcHJvbWlzZS9maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy9wYWQtZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy9wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3RyaW0tZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy90cmltLXN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N5bWJvbC9hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy93ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLWpzb25wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi94bWxodHRwcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvdXRmOC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vbGliL2hhbmRsZWJhcnMucnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy9pbmxpbmUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2V4Y2VwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9lYWNoLmpzIiwid2VicGFjazovLy8uLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2hlbHBlci1taXNzaW5nLmpzIiwid2VicGFjazovLy8uLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2lmLmpzIiwid2VicGFjazovLy8uLi8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2xvZy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvaGVscGVycy9sb29rdXAuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvbG9nZ2VyLmpzIiwid2VicGFjazovLy8uLi8uLi8uLi9saWIvaGFuZGxlYmFycy9uby1jb25mbGljdC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbGliL2hhbmRsZWJhcnMvc2FmZS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtYmluYXJ5Mi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWNvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luZGV4b2YvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNldXJpL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9tYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi91cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvYmluYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2lzLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG8tYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvY3NzL21haW4uc2NzcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvY2VsbC5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvY2xpZW50LmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qcy9nYW1lLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qcy9nYW1lX3R5cGVzL2xvc2VfY29uZGl0aW9ucy9raW5nZGVhZC5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvZ2FtZV90eXBlcy9sb3NlX2NvbmRpdGlvbnMvbG9zZWNvbmRpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvZ2FtZV90eXBlcy9waWVjZXJlZ2lzdHJ5LmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qcy9nYW1lX3R5cGVzL3J1bGVzZXRzLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qcy9nYW1lbWFzdGVyLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qcy9oZWxwZXJzL3JlbmRlcmNlbGwuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2pzL2hlbHBlcnMvc3BpbmZvcnBsYXllci5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvcGllY2UuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2pzL3BsYXllci5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvdGlsZS5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvdXRpbHMvY29va2llLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qcy91dGlscy9ndWlkLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9qcy91dGlscy90aW1lU2luY2UuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL3RlbXBsYXRlcy9ib2FyZC5oYnMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL3RlbXBsYXRlcy9jZWxsLmhicyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvdGVtcGxhdGVzL2dhbWVwcmV2aWV3LmhicyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvdGVtcGxhdGVzL2xvYmJ5LmhicyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvdGVtcGxhdGVzL3Byb21vdGUuaGJzIiwid2VicGFjazovLy8uL3B1YmxpYy90ZW1wbGF0ZXMvcnVsZXNldC1zZWxlY3QuaGJzIiwid2VicGFjazovLy93cyAoaWdub3JlZCkiXSwibmFtZXMiOlsicmVxdWlyZSIsIl9nbG9iYWwiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsIl9iYWJlbFBvbHlmaWxsIiwiY29uc29sZSIsIndhcm4iLCJydW50aW1lIiwiZXhwb3J0cyIsIk9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJ1bmRlZmluZWQiLCIkU3ltYm9sIiwiU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwiZm4iLCJhcmciLCJ0eXBlIiwiY2FsbCIsImVyciIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsIkNvbnRpbnVlU2VudGluZWwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImNvbnN0cnVjdG9yIiwiZGlzcGxheU5hbWUiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwibWV0aG9kIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJfX2F3YWl0IiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWNvcmQiLCJyZXN1bHQiLCJ2YWx1ZSIsIlByb21pc2UiLCJ0aGVuIiwidW53cmFwcGVkIiwiZXJyb3IiLCJwcmV2aW91c1Byb21pc2UiLCJlbnF1ZXVlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJhc3luYyIsIml0ZXIiLCJuZXh0IiwiZG9uZSIsInN0YXRlIiwiRXJyb3IiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInRvU3RyaW5nIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJrZXlzIiwib2JqZWN0Iiwia2V5IiwicmV2ZXJzZSIsImxlbmd0aCIsInBvcCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImkiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RFbnRyeSIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwibW9kdWxlIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJGdW5jdGlvbiIsImFmdGVyIiwiY291bnQiLCJjYWxsYmFjayIsImVycl9jYiIsImJhaWwiLCJub29wIiwicHJveHkiLCJhcnJheWJ1ZmZlciIsInN0YXJ0IiwiZW5kIiwiYnl0ZXMiLCJieXRlTGVuZ3RoIiwiQXJyYXlCdWZmZXIiLCJhYnYiLCJVaW50OEFycmF5IiwiaWkiLCJidWZmZXIiLCJCYWNrb2ZmIiwib3B0cyIsIm1zIiwibWluIiwibWF4IiwiZmFjdG9yIiwiaml0dGVyIiwiYXR0ZW1wdHMiLCJkdXJhdGlvbiIsIk1hdGgiLCJwb3ciLCJyYW5kIiwicmFuZG9tIiwiZGV2aWF0aW9uIiwiZmxvb3IiLCJzZXRNaW4iLCJzZXRNYXgiLCJzZXRKaXR0ZXIiLCJjaGFycyIsImxvb2t1cCIsImNoYXJDb2RlQXQiLCJlbmNvZGUiLCJsZW4iLCJiYXNlNjQiLCJzdWJzdHJpbmciLCJkZWNvZGUiLCJidWZmZXJMZW5ndGgiLCJwIiwiZW5jb2RlZDEiLCJlbmNvZGVkMiIsImVuY29kZWQzIiwiZW5jb2RlZDQiLCJ0b0J5dGVBcnJheSIsImZyb21CeXRlQXJyYXkiLCJyZXZMb29rdXAiLCJBcnIiLCJBcnJheSIsImNvZGUiLCJnZXRMZW5zIiwiYjY0IiwidmFsaWRMZW4iLCJpbmRleE9mIiwicGxhY2VIb2xkZXJzTGVuIiwibGVucyIsIl9ieXRlTGVuZ3RoIiwidG1wIiwiYXJyIiwiY3VyQnl0ZSIsInRyaXBsZXRUb0Jhc2U2NCIsIm51bSIsImVuY29kZUNodW5rIiwidWludDgiLCJvdXRwdXQiLCJqb2luIiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibWF4Q2h1bmtMZW5ndGgiLCJsZW4yIiwiQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsImJsb2JTdXBwb3J0ZWQiLCJhIiwiQmxvYiIsInNpemUiLCJlIiwiYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3IiwiYiIsImJsb2JCdWlsZGVyU3VwcG9ydGVkIiwiYXBwZW5kIiwiZ2V0QmxvYiIsIm1hcEFycmF5QnVmZmVyVmlld3MiLCJhcnkiLCJtYXAiLCJjaHVuayIsImJ1ZiIsImNvcHkiLCJzZXQiLCJieXRlT2Zmc2V0IiwiQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJiYiIsInBhcnQiLCJCbG9iQ29uc3RydWN0b3IiLCJpZWVlNzU0IiwiaXNBcnJheSIsIkJ1ZmZlciIsIlNsb3dCdWZmZXIiLCJJTlNQRUNUX01BWF9CWVRFUyIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJnbG9iYWwiLCJ0eXBlZEFycmF5U3VwcG9ydCIsImtNYXhMZW5ndGgiLCJmb28iLCJzdWJhcnJheSIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiZnJvbSIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJmcm9tQXJyYXlCdWZmZXIiLCJmcm9tU3RyaW5nIiwiZnJvbU9iamVjdCIsInNwZWNpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImFzc2VydFNpemUiLCJhbGxvYyIsImZpbGwiLCJlbmNvZGluZyIsImNoZWNrZWQiLCJhbGxvY1Vuc2FmZVNsb3ciLCJzdHJpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJmcm9tQXJyYXlMaWtlIiwiYXJyYXkiLCJpc0J1ZmZlciIsImlzbmFuIiwiZGF0YSIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJ4IiwieSIsIlN0cmluZyIsInRvTG93ZXJDYXNlIiwiY29uY2F0IiwibGlzdCIsInBvcyIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJuIiwibSIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImFyZ3VtZW50cyIsImFwcGx5IiwiZXF1YWxzIiwiaW5zcGVjdCIsInN0ciIsIm1hdGNoIiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwidmFsIiwiZGlyIiwiYXJyYXlJbmRleE9mIiwibGFzdEluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaiIsImluY2x1ZGVzIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInV0ZjE2bGVUb0J5dGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJfYXJyIiwicmVzIiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiY29kZVBvaW50cyIsImZyb21DaGFyQ29kZSIsInJldCIsIm91dCIsInRvSGV4IiwibmV3QnVmIiwic2xpY2VMZW4iLCJjaGVja09mZnNldCIsImV4dCIsInJlYWRVSW50TEUiLCJub0Fzc2VydCIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsImNoZWNrSW50Iiwid3JpdGVVSW50TEUiLCJtYXhCeXRlcyIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJvYmplY3RXcml0ZVVJbnQzMiIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJJTlZBTElEX0JBU0U2NF9SRSIsImJhc2U2NGNsZWFuIiwic3RyaW5ndHJpbSIsInJlcGxhY2UiLCJ0cmltIiwidW5pdHMiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJieXRlQXJyYXkiLCJjIiwiaGkiLCJsbyIsInNyYyIsImRzdCIsImFyZ3MiLCJFbWl0dGVyIiwibWl4aW4iLCJvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIl9jYWxsYmFja3MiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FsbGJhY2tzIiwiY2IiLCJzcGxpY2UiLCJlbWl0IiwibGlzdGVuZXJzIiwiaGFzTGlzdGVuZXJzIiwiZmxhdE1hcCIsImVudHJpZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwicGFkRW5kIiwicGFkU3RhcnQiLCJ0cmltUmlnaHQiLCJ0cmltTGVmdCIsImYiLCJpdCIsImlzT2JqZWN0IiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCJhRnVuY3Rpb24iLCJnZXQiLCJkb2N1bWVudCIsImlzIiwiY3JlYXRlRWxlbWVudCIsImN0eCIsImhpZGUiLCJoYXMiLCJQUk9UT1RZUEUiLCIkZXhwb3J0Iiwic291cmNlIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJQIiwiSVNfQklORCIsIkIiLCJJU19XUkFQIiwiVyIsImV4cFByb3RvIiwib3duIiwiQyIsInZpcnR1YWwiLCJSIiwiVSIsImV4ZWMiLCJ3aW5kb3ciLCJfX2ciLCJkUCIsImNyZWF0ZURlc2MiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJPIiwiQXR0cmlidXRlcyIsImJpdG1hcCIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsInZhbHVlT2YiLCJjb2YiLCJtc2ciLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG8iLCJhdCIsImluZGV4IiwidW5pY29kZSIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJ0b09iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsInRvTGVuZ3RoIiwiY29weVdpdGhpbiIsInRvIiwiaW5jIiwiYUxlbiIsImVuZFBvcyIsInRvSU9iamVjdCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsIklPYmplY3QiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsImNhbGxiYWNrZm4iLCJtZW1vIiwiaXNSaWdodCIsIlNQRUNJRVMiLCJvcmlnaW5hbCIsInNwZWNpZXNDb25zdHJ1Y3RvciIsImFycmF5U2xpY2UiLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJiaW5kIiwicGFydEFyZ3MiLCJib3VuZCIsIlRBRyIsIkFSRyIsInRyeUdldCIsIlQiLCJjYWxsZWUiLCJyZWRlZmluZUFsbCIsImFuSW5zdGFuY2UiLCJmb3JPZiIsIiRpdGVyRGVmaW5lIiwic3RlcCIsInNldFNwZWNpZXMiLCJERVNDUklQVE9SUyIsImZhc3RLZXkiLCJ2YWxpZGF0ZSIsIlNJWkUiLCJnZXRFbnRyeSIsIl9pIiwiX2YiLCJrIiwiZ2V0Q29uc3RydWN0b3IiLCJ3cmFwcGVyIiwiTkFNRSIsIkFEREVSIiwiX3QiLCJfbCIsImNsZWFyIiwiciIsInYiLCJkZWYiLCJzZXRTdHJvbmciLCJpdGVyYXRlZCIsImtpbmQiLCJfayIsImdldFdlYWsiLCJjcmVhdGVBcnJheU1ldGhvZCIsIiRoYXMiLCJhcnJheUZpbmQiLCJhcnJheUZpbmRJbmRleCIsImlkIiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJzdG9yZSIsInVmc3RvcmUiLCJyZWRlZmluZSIsIm1ldGEiLCJmYWlscyIsIiRpdGVyRGV0ZWN0Iiwic2V0VG9TdHJpbmdUYWciLCJpbmhlcml0SWZSZXF1aXJlZCIsIm1ldGhvZHMiLCJjb21tb24iLCJJU19XRUFLIiwiQmFzZSIsInByb3RvIiwiZml4TWV0aG9kIiwiS0VZIiwiYWRkIiwiTkVFRCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiJGRlZmluZVByb3BlcnR5IiwiZ2V0VGltZSIsIkRhdGUiLCIkdG9JU09TdHJpbmciLCJ0b0lTT1N0cmluZyIsImx6IiwiTmFOIiwiZCIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicyIsImFicyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJOVU1CRVIiLCJoaW50Iiwic3BsaXQiLCJnZXRLZXlzIiwiZ09QUyIsInBJRSIsImdldFN5bWJvbHMiLCJzeW1ib2xzIiwiaXNFbnVtIiwiZXhwIiwiTUFUQ0giLCJyZSIsImRlZmluZWQiLCJ3a3MiLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJncm91cHMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibWF5YmVDYWxsTmF0aXZlIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwiUmVnRXhwIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInN0aWNreSIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZmxhdHRlbkludG9BcnJheSIsInNvdXJjZUxlbiIsImRlcHRoIiwibWFwcGVyIiwidGhpc0FyZyIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsImVsZW1lbnQiLCJzcHJlYWRhYmxlIiwiaXNBcnJheUl0ZXIiLCJnZXRJdGVyRm4iLCJCUkVBSyIsIlJFVFVSTiIsIklURVJBVE9SIiwiaXRlckZuIiwiZG9jdW1lbnRFbGVtZW50IiwidW4iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkl0ZXJhdG9ycyIsImlzSW50ZWdlciIsImlzUmVnRXhwIiwiZGVzY3JpcHRvciIsIkxJQlJBUlkiLCIkaXRlckNyZWF0ZSIsIkJVR0dZIiwiRkZfSVRFUkFUT1IiLCJLRVlTIiwiVkFMVUVTIiwicmV0dXJuVGhpcyIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJnZXRNZXRob2QiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwic2tpcENsb3NpbmciLCJzYWZlIiwiJGV4cG0xIiwiZXhwbTEiLCJzaWduIiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJyb3VuZFRpZXNUb0V2ZW4iLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJsb2cxcCIsImxvZyIsIk1FVEEiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm9uRnJlZXplIiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInByb2Nlc3MiLCJpc05vZGUiLCJoZWFkIiwibGFzdCIsIm5vdGlmeSIsImZsdXNoIiwicGFyZW50IiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwibmV4dFRpY2siLCJuYXZpZ2F0b3IiLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJwcm9taXNlIiwidGFzayIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCIkYXNzaWduIiwiYXNzaWduIiwiQSIsIksiLCJkUHMiLCJlbnVtQnVnS2V5cyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lIiwibHQiLCJndCIsImlmcmFtZURvY3VtZW50Iiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJjb250ZW50V2luZG93Iiwib3BlbiIsImNsb3NlIiwiUHJvcGVydGllcyIsImRlZmluZVByb3BlcnRpZXMiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ09QTiIsIndpbmRvd05hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiJGtleXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiT2JqZWN0UHJvdG8iLCJuYW1lcyIsImlzRW50cmllcyIsIlJlZmxlY3QiLCJvd25LZXlzIiwiJHBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwiJHRyaW0iLCIkcGFyc2VJbnQiLCJ3cyIsImhleCIsInJhZGl4IiwidGVzdCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJTUkMiLCIkdG9TdHJpbmciLCJUT19TVFJJTkciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwiaXNGdW5jdGlvbiIsImNsYXNzb2YiLCJidWlsdGluRXhlYyIsInJlZ2V4cEZsYWdzIiwibmF0aXZlRXhlYyIsIm5hdGl2ZVJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIkxBU1RfSU5ERVgiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJyZTEiLCJyZTIiLCJOUENHX0lOQ0xVREVEIiwiUEFUQ0giLCJsYXN0SW5kZXgiLCJyZUNvcHkiLCJjaGVjayIsImJ1Z2d5IiwidGFnIiwic3RhdCIsInNoYXJlZCIsInVpZCIsIlNIQVJFRCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJEIiwidG9JbnRlZ2VyIiwibCIsInNlYXJjaFN0cmluZyIsInF1b3QiLCJjcmVhdGVIVE1MIiwiYXR0cmlidXRlIiwicDEiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiY2VpbCIsInNwYWNlcyIsInNwYWNlIiwibm9uIiwibHRyaW0iLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsImh0bWwiLCJjZWwiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwiT05SRUFEWVNUQVRFQ0hBTkdFIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsInJ1biIsImxpc3RlbmVyIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsIm51bWJlciIsIiR0eXBlZCIsIiRidWZmZXIiLCJwcm9wZXJ0eURlc2MiLCJ0b0luZGV4IiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsIkFycmF5SXRlcmF0b3JzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJBUlJBWV9CVUZGRVIiLCJTSEFSRURfQlVGRkVSIiwiQllURVNfUEVSX0VMRU1FTlQiLCIkQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5SW5jbHVkZXMiLCJhcnJheVZhbHVlcyIsImFycmF5S2V5cyIsImFycmF5RW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCJXUk9OR19MRU5HVEgiLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJGT1JDRURfU0VUIiwidG9PZmZzZXQiLCJCWVRFUyIsInNwZWNpZXNGcm9tTGlzdCIsImZyb21MaXN0IiwiYWRkR2V0dGVyIiwiaW50ZXJuYWwiLCJfZCIsIiRmcm9tIiwibWFwZm4iLCJtYXBwaW5nIiwiJG9mIiwib2YiLCJUT19MT0NBTEVfQlVHIiwiJHRvTG9jYWxlU3RyaW5nIiwiZXZlcnkiLCJmaWx0ZXIiLCJmaW5kIiwicHJlZGljYXRlIiwiZmluZEluZGV4Iiwic2VhcmNoRWxlbWVudCIsInNlcGFyYXRvciIsIm1pZGRsZSIsInNvbWUiLCJjb21wYXJlZm4iLCJiZWdpbiIsIiRiZWdpbiIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIlRBQyIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJnZXR0ZXIiLCJvIiwic2V0dGVyIiwicm91bmQiLCJhZGRFbGVtZW50IiwiJG9mZnNldCIsIiRsZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIkRBVEFfVklFVyIsIldST05HX0lOREVYIiwiQmFzZUJ1ZmZlciIsIkxOMiIsIkJVRkZFUiIsIkJZVEVfTEVOR1RIIiwiQllURV9PRkZTRVQiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJ1bnBhY2tJMzIiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwibnVtSW5kZXgiLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJnZXRJbnQ4IiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQ4Iiwic2V0VWludDgiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJBcnJheUJ1ZmZlclByb3RvIiwiJHNldEludDgiLCJUeXBlZCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJweCIsInVzZXJBZ2VudCIsIndrc0V4dCIsIlVTRV9TWU1CT0wiLCIkZXhwb3J0cyIsImdldEl0ZXJhdG9yTWV0aG9kIiwiJGV2ZXJ5IiwiJGZpbHRlciIsIiRmaW5kIiwiZm9yY2VkIiwiJGZvckVhY2giLCJTVFJJQ1QiLCJjcmVhdGVQcm9wZXJ0eSIsIiRpbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsImFkZFRvVW5zY29wYWJsZXMiLCJBcmd1bWVudHMiLCIkcmVkdWNlIiwidXBUbyIsImNsb25lZCIsIiRzb21lIiwiJHNvcnQiLCJwdiIsIlRPX1BSSU1JVElWRSIsIkRhdGVQcm90byIsIklOVkFMSURfREFURSIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCJGUHJvdG8iLCJuYW1lUkUiLCJzdHJvbmciLCJNQVAiLCJNYXAiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJzdW0iLCJsYXJnIiwiZGl2IiwiJGltdWwiLCJpbXVsIiwiVUlOVDE2IiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwiRSIsInRhbmgiLCJ0cnVuYyIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiYXJndW1lbnQiLCJmaXJzdCIsInRoaXJkIiwibWF4Q29kZSIsImRpZ2l0cyIsIl9pc0Zpbml0ZSIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsImFOdW1iZXJWYWx1ZSIsIiR0b0ZpeGVkIiwidG9GaXhlZCIsIkVSUk9SIiwiWkVSTyIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsInQiLCJhY2MiLCJ4MiIsImZyYWN0aW9uRGlnaXRzIiwieiIsIiRmYWlscyIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiJGZyZWV6ZSIsImZyZWV6ZSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0UHJvdG90eXBlT2YiLCIkaXNFeHRlbnNpYmxlIiwiJGlzRnJvemVuIiwiaXNGcm96ZW4iLCIkaXNTZWFsZWQiLCJpc1NlYWxlZCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRzZWFsIiwic2VhbCIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInByb21pc2VSZXNvbHZlIiwiUFJPTUlTRSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImVtcHR5IiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJVU0VfTkFUSVZFIiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsImhhbmRsZXIiLCJmYWlsIiwiZXhpdGVkIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhcGFiaWxpdHkiLCJhbGwiLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJMIiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInByb3BlcnR5S2V5IiwiYXR0cmlidXRlcyIsImRlbGV0ZVByb3BlcnR5IiwiRW51bWVyYXRlIiwiZW51bWVyYXRlIiwicmVjZWl2ZXIiLCJzZXRQcm90byIsIlYiLCJvd25EZXNjIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwiJGZsYWdzIiwiJFJlZ0V4cCIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCJmbGFncyIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCIkbWF0Y2giLCJyeCIsImZ1bGxVbmljb2RlIiwibWF0Y2hTdHIiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwibWF5YmVUb1N0cmluZyIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJyZXN1bHRzIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJtYXRjaGVkIiwicG9zaXRpb24iLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlckFyZ3MiLCJyZXBsYWNlbWVudCIsImdldFN1YnN0aXR1dGlvbiIsInRhaWxQb3MiLCJjaCIsImNhcHR1cmUiLCJzYW1lVmFsdWUiLCJTRUFSQ0giLCIkc2VhcmNoIiwic2VhcmNoIiwicHJldmlvdXNMYXN0SW5kZXgiLCJjYWxsUmVnRXhwRXhlYyIsIiRtaW4iLCIkcHVzaCIsIiRTUExJVCIsIkxFTkdUSCIsIk1BWF9VSU5UMzIiLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCIkc3BsaXQiLCJpbnRlcm5hbFNwbGl0IiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5IiwibGFzdExlbmd0aCIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibGltIiwicSIsImRlZmluZSIsIlNFVCIsIlNldCIsImFuY2hvciIsImJpZyIsImJsaW5rIiwiYm9sZCIsIiRhdCIsImNvZGVQb2ludEF0IiwiRU5EU19XSVRIIiwiJGVuZHNXaXRoIiwiZW5kc1dpdGgiLCJlbmRQb3NpdGlvbiIsImZpeGVkIiwiZm9udGNvbG9yIiwiY29sb3IiLCJmb250c2l6ZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsIklOQ0xVREVTIiwiaXRhbGljcyIsInBvaW50IiwibGluayIsInVybCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwic21hbGwiLCJTVEFSVFNfV0lUSCIsIiRzdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsInN0cmlrZSIsInN1cCIsIndrc0RlZmluZSIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkR09QUyIsIiRKU09OIiwiSlNPTiIsIl9zdHJpbmdpZnkiLCJzdHJpbmdpZnkiLCJISURERU4iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiRkFJTFNfT05fUFJJTUlUSVZFUyIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwiJGlzVmlldyIsImZpbiIsInZpZXdTIiwidmlld1QiLCJpbml0IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiSW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJJbnQ4QXJyYXkiLCJVaW50MzJBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiZWFjaCIsIndlYWsiLCJOQVRJVkVfV0VBS19NQVAiLCJJU19JRTExIiwiQWN0aXZlWE9iamVjdCIsIldFQUtfTUFQIiwiSW50ZXJuYWxNYXAiLCJXZWFrTWFwIiwiJFdlYWtNYXAiLCJXRUFLX1NFVCIsIldlYWtTZXQiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCIkaW5jbHVkZXMiLCJnZXREZXNjIiwiJHZhbHVlcyIsIm9uRmluYWxseSIsIiRwYWQiLCJXRUJLSVRfQlVHIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIiR0YXNrIiwiTVNJRSIsInRpbWUiLCJib3VuZEFyZ3MiLCJzZXRJbnRlcnZhbCIsInBhcnNlciIsInRyYW5zcG9ydHMiLCJkZWJ1ZyIsInBhcnNldXJpIiwicGFyc2VxcyIsIlNvY2tldCIsInVyaSIsImhvc3RuYW1lIiwiaG9zdCIsInNlY3VyZSIsInByb3RvY29sIiwicXVlcnkiLCJsb2NhdGlvbiIsImFnZW50IiwidXBncmFkZSIsInBhdGgiLCJmb3JjZUpTT05QIiwianNvbnAiLCJmb3JjZUJhc2U2NCIsImVuYWJsZXNYRFIiLCJ0aW1lc3RhbXBQYXJhbSIsInRpbWVzdGFtcFJlcXVlc3RzIiwidHJhbnNwb3J0T3B0aW9ucyIsInJlYWR5U3RhdGUiLCJ3cml0ZUJ1ZmZlciIsInByZXZCdWZmZXJMZW4iLCJwb2xpY3lQb3J0IiwicmVtZW1iZXJVcGdyYWRlIiwiYmluYXJ5VHlwZSIsIm9ubHlCaW5hcnlVcGdyYWRlcyIsInBlck1lc3NhZ2VEZWZsYXRlIiwidGhyZXNob2xkIiwicGZ4IiwicGFzc3BocmFzZSIsImNlcnQiLCJjYSIsImNpcGhlcnMiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJmb3JjZU5vZGUiLCJpc1JlYWN0TmF0aXZlIiwicHJvZHVjdCIsImV4dHJhSGVhZGVycyIsImxvY2FsQWRkcmVzcyIsInVwZ3JhZGVzIiwicGluZ0ludGVydmFsIiwicGluZ1RpbWVvdXQiLCJwaW5nSW50ZXJ2YWxUaW1lciIsInBpbmdUaW1lb3V0VGltZXIiLCJwcmlvcldlYnNvY2tldFN1Y2Nlc3MiLCJUcmFuc3BvcnQiLCJjcmVhdGVUcmFuc3BvcnQiLCJjbG9uZSIsIkVJTyIsInRyYW5zcG9ydCIsInNpZCIsInNvY2tldCIsInJlcXVlc3RUaW1lb3V0IiwicHJvdG9jb2xzIiwic2hpZnQiLCJzZXRUcmFuc3BvcnQiLCJvbkRyYWluIiwicGFja2V0Iiwib25QYWNrZXQiLCJvbkVycm9yIiwib25DbG9zZSIsInByb2JlIiwiZmFpbGVkIiwib25UcmFuc3BvcnRPcGVuIiwidXBncmFkZUxvc2VzQmluYXJ5Iiwic3VwcG9ydHNCaW5hcnkiLCJzZW5kIiwidXBncmFkaW5nIiwicGF1c2UiLCJjbGVhbnVwIiwiZnJlZXplVHJhbnNwb3J0Iiwib25lcnJvciIsIm9uVHJhbnNwb3J0Q2xvc2UiLCJvbmNsb3NlIiwib251cGdyYWRlIiwib25PcGVuIiwib25IYW5kc2hha2UiLCJwYXJzZSIsInNldFBpbmciLCJmaWx0ZXJVcGdyYWRlcyIsIm9uSGVhcnRiZWF0IiwidGltZW91dCIsImNsZWFyVGltZW91dCIsInBpbmciLCJzZW5kUGFja2V0IiwiY29tcHJlc3MiLCJ3YWl0Rm9yVXBncmFkZSIsImNsZWFudXBBbmRDbG9zZSIsImZpbHRlcmVkVXBncmFkZXMiLCJkZXNjcmlwdGlvbiIsImRvT3BlbiIsImRvQ2xvc2UiLCJwYWNrZXRzIiwib25EYXRhIiwiZGVjb2RlUGFja2V0IiwiWE1MSHR0cFJlcXVlc3QiLCJYSFIiLCJKU09OUCIsIndlYnNvY2tldCIsInBvbGxpbmciLCJ4aHIiLCJ4ZCIsInhzIiwiaXNTU0wiLCJ4ZG9tYWluIiwieHNjaGVtZSIsIlBvbGxpbmciLCJpbmhlcml0IiwiSlNPTlBQb2xsaW5nIiwick5ld2xpbmUiLCJyRXNjYXBlZE5ld2xpbmUiLCJnbG9iIiwiX19fZWlvIiwic2NyaXB0IiwicGFyZW50Tm9kZSIsImZvcm0iLCJkb1BvbGwiLCJpbnNlcnRBdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5zZXJ0QmVmb3JlIiwiYm9keSIsImlzVUFnZWNrbyIsImRvV3JpdGUiLCJhcmVhIiwiaWZyYW1lSWQiLCJjbGFzc05hbWUiLCJ0b3AiLCJzZXRBdHRyaWJ1dGUiLCJhY3Rpb24iLCJpbml0SWZyYW1lIiwic3VibWl0IiwiYXR0YWNoRXZlbnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJvbmxvYWQiLCJSZXF1ZXN0IiwicmVxdWVzdCIsImlzQmluYXJ5IiwicmVxIiwic2VuZFhociIsInBvbGxYaHIiLCJzZXREaXNhYmxlSGVhZGVyQ2hlY2siLCJzZXRSZXF1ZXN0SGVhZGVyIiwid2l0aENyZWRlbnRpYWxzIiwiaGFzWERSIiwib25Mb2FkIiwicmVzcG9uc2VUZXh0IiwiY29udGVudFR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsInJlc3BvbnNlVHlwZSIsInN0YXR1cyIsInJlcXVlc3RzQ291bnQiLCJyZXF1ZXN0cyIsIm9uU3VjY2VzcyIsImZyb21FcnJvciIsImFib3J0IiwicmVzcG9uc2UiLCJYRG9tYWluUmVxdWVzdCIsInVubG9hZEhhbmRsZXIiLCJ0ZXJtaW5hdGlvbkV2ZW50IiwieWVhc3QiLCJoYXNYSFIyIiwicG9sbCIsIm9uUGF1c2UiLCJ0b3RhbCIsImRlY29kZVBheWxvYWQiLCJlbmNvZGVQYXlsb2FkIiwic2NoZW1hIiwiaXB2NiIsIkJyb3dzZXJXZWJTb2NrZXQiLCJOb2RlV2ViU29ja2V0IiwiV2ViU29ja2V0IiwiTW96V2ViU29ja2V0IiwiV2ViU29ja2V0SW1wbCIsIldTIiwidXNpbmdCcm93c2VyV2ViU29ja2V0IiwiaGVhZGVycyIsInN1cHBvcnRzIiwiYmluYXJ5IiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJvbm9wZW4iLCJldiIsImVuY29kZVBhY2tldCIsImhhc0NPUlMiLCJmb3JtYXRBcmdzIiwic2F2ZSIsImxvYWQiLCJ1c2VDb2xvcnMiLCJzdG9yYWdlIiwiY2hyb21lIiwibG9jYWwiLCJsb2NhbHN0b3JhZ2UiLCJjb2xvcnMiLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsInRhYmxlIiwiJDEiLCJmb3JtYXR0ZXJzIiwibWVzc2FnZSIsIm5hbWVzcGFjZSIsImh1bWFuaXplIiwiZGlmZiIsImxhc3RDIiwibmFtZXNwYWNlcyIsInJlbW92ZUl0ZW0iLCJlbnYiLCJERUJVRyIsImVuYWJsZSIsImxvY2FsU3RvcmFnZSIsImNyZWF0ZURlYnVnIiwiY29lcmNlIiwiZGlzYWJsZSIsImVuYWJsZWQiLCJpbnN0YW5jZXMiLCJza2lwcyIsInNlbGVjdENvbG9yIiwiaGFzaCIsInByZXZUaW1lIiwiY3VyciIsInVuc2hpZnQiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJsb2dGbiIsImRlc3Ryb3kiLCJzdGFjayIsImhhc0JpbmFyeSIsInNsaWNlQnVmZmVyIiwidXRmOCIsImJhc2U2NGVuY29kZXIiLCJpc0FuZHJvaWQiLCJpc1BoYW50b21KUyIsImRvbnRTZW5kQmxvYnMiLCJwb25nIiwicGFja2V0c2xpc3QiLCJ1dGY4ZW5jb2RlIiwiZW5jb2RlQXJyYXlCdWZmZXIiLCJlbmNvZGVCbG9iIiwiZW5jb2RlQmFzZTY0T2JqZWN0IiwiZW5jb2RlZCIsInN0cmljdCIsImVuY29kZUJhc2U2NFBhY2tldCIsImNvbnRlbnRBcnJheSIsInJlc3VsdEJ1ZmZlciIsImVuY29kZUJsb2JBc0FycmF5QnVmZmVyIiwiZnIiLCJGaWxlUmVhZGVyIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJibG9iIiwicmVhZEFzRGF0YVVSTCIsImI2NGRhdGEiLCJ0eXBlZCIsImJhc2ljIiwiYnRvYSIsInV0ZjhkZWNvZGUiLCJkZWNvZGVCYXNlNjRQYWNrZXQiLCJ0cnlEZWNvZGUiLCJhc0FycmF5IiwicmVzdCIsImVuY29kZVBheWxvYWRBc0Jsb2IiLCJlbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciIsInNldExlbmd0aEhlYWRlciIsImVuY29kZU9uZSIsImRvbmVDYWxsYmFjayIsImVhY2hXaXRoSW5kZXgiLCJkZWNvZGVQYXlsb2FkQXNCaW5hcnkiLCJjaHIiLCJlbmNvZGVkUGFja2V0cyIsInRvdGFsTGVuZ3RoIiwicmVzdWx0QXJyYXkiLCJidWZmZXJJbmRleCIsImlzU3RyaW5nIiwiYWIiLCJsZW5TdHIiLCJiaW5hcnlJZGVudGlmaWVyIiwibGVuZ3RoQXJ5IiwiYnVmZmVyVGFpbCIsImJ1ZmZlcnMiLCJ0YWlsQXJyYXkiLCJtc2dMZW5ndGgiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJ1Y3MyZGVjb2RlIiwiZXh0cmEiLCJ1Y3MyZW5jb2RlIiwiY2hlY2tTY2FsYXJWYWx1ZSIsInRvVXBwZXJDYXNlIiwiY3JlYXRlQnl0ZSIsImVuY29kZUNvZGVQb2ludCIsInN5bWJvbCIsImJ5dGVTdHJpbmciLCJyZWFkQ29udGludWF0aW9uQnl0ZSIsImJ5dGVJbmRleCIsImJ5dGVDb3VudCIsImNvbnRpbnVhdGlvbkJ5dGUiLCJkZWNvZGVTeW1ib2wiLCJieXRlMSIsImJ5dGUyIiwiYnl0ZTMiLCJieXRlNCIsIndpdGhOYXRpdmVCbG9iIiwid2l0aE5hdGl2ZUZpbGUiLCJGaWxlIiwiaXNMRSIsImZhY3RvcnkiLCJub0dsb2JhbCIsImNsYXNzMnR5cGUiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0Iiwibm9kZVR5cGUiLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImRvYyIsInRleHQiLCJnZXRBdHRyaWJ1dGUiLCJ0b1R5cGUiLCJqUXVlcnkiLCJzZWxlY3RvciIsImpxdWVyeSIsInRvQXJyYXkiLCJwdXNoU3RhY2siLCJlbGVtcyIsIm1lcmdlIiwicHJldk9iamVjdCIsImVsZW0iLCJlcSIsImV4dGVuZCIsImNvcHlJc0FycmF5IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJleHBhbmRvIiwiaXNSZWFkeSIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsImlzQXJyYXlMaWtlIiwibWFrZUFycmF5IiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJndWlkIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJwdXNoX25hdGl2ZSIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyZGVzY2VuZCIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsInJodG1sIiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiXyIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImFzQ29kZVBvaW50IiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiYWRkQ29tYmluYXRvciIsImRpc2FibGVkIiwibm9kZU5hbWUiLCJjaGlsZE5vZGVzIiwiZWxzIiwic2VlZCIsIm5pZCIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0b1NlbGVjdG9yIiwidGVzdENvbnRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2VVUkkiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsImlubmVySFRNTCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImxhbmciLCJlbGVtTGFuZyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJ0b2tlbnMiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsIm11bHRpcGxlQ29udGV4dHMiLCJjb250ZXh0cyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwidG9rZW4iLCJjb21waWxlZCIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInJvb3RqUXVlcnkiLCJyb290IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInRhcmdldHMiLCJjbG9zZXN0IiwicHJldkFsbCIsImFkZEJhY2siLCJzaWJsaW5nIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50Iiwicm5vdGh0bWx3aGl0ZSIsImNyZWF0ZU9wdGlvbnMiLCJmbGFnIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImxvY2siLCJmaXJlV2l0aCIsIklkZW50aXR5IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsIm5vVmFsdWUiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJhbHdheXMiLCJkZWZlcnJlZCIsInBpcGUiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsInNwZWNpYWwiLCJtaWdodFRocm93Iiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJyZWFkeVdhaXQiLCJ3YWl0IiwiY29tcGxldGVkIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsImJ1bGsiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImxldHRlciIsImNhbWVsQ2FzZSIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZ2V0RGF0YSIsImRhdGFBdHRyIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwiY2xlYXJRdWV1ZSIsInBudW0iLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJjc3MiLCJvbGQiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJzaG93SGlkZSIsInNob3ciLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJ3cmFwTWFwIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwibm9kZXMiLCJodG1sUHJlZmlsdGVyIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsImV4cGVjdFN5bmMiLCJzYWZlQWN0aXZlRWxlbWVudCIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImZpeCIsImhhbmRsZXJRdWV1ZSIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJidXR0b24iLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50Iiwib3JpZ2luYWxFdmVudCIsIm5vQnViYmxlIiwiY2xpY2siLCJsZXZlcmFnZU5hdGl2ZSIsInRyaWdnZXIiLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcm9wcyIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsInByZXBlbmQiLCJiZWZvcmUiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJib3hTdHlsZSIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJ3aWR0aCIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxCb3hTdHlsZXMiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsImN1ckNTUyIsImNvbXB1dGVkIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwiZmluYWxQcm9wTmFtZSIsImZpbmFsIiwiY3NzUHJvcHMiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImRlbHRhIiwiZ2V0V2lkdGhPckhlaWdodCIsImJveFNpemluZ05lZWRlZCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwiVHdlZW4iLCJlYXNpbmciLCJwcm9wSG9va3MiLCJwZXJjZW50IiwiZWFzZWQiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsImRlZmF1bHRQcmVmaWx0ZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImFuaW0iLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcm9wRmlsdGVyIiwic3BlY2lhbEVhc2luZyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInRpbWVyIiwidHdlZW5lciIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJib29sIiwiYXR0ck5hbWVzIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybG9jYWxQcm90b2NvbCIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJtaW1lVHlwZSIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsImlzU3VjY2VzcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJyZXNwb25zZUZpZWxkcyIsImRhdGFGaWx0ZXIiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwiaXNMb2NhbCIsInByb2Nlc3NEYXRhIiwiYWNjZXB0cyIsImpzb24iLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJvdmVycmlkZU1pbWVUeXBlIiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJtb2RpZmllZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJ1bmJpbmQiLCJ1bmRlbGVnYXRlIiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiaCIsImZtdExvbmciLCJmbXRTaG9ydCIsInBsdXJhbCIsInFzIiwicXJ5IiwicGFpcnMiLCJwYWlyIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYXV0aG9yaXR5IiwiaXB2NnVyaSIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwiSXRlbSIsInRpdGxlIiwiYnJvd3NlciIsImFyZ3YiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIk1hbmFnZXIiLCJtYW5hZ2VycyIsInNhbWVOYW1lc3BhY2UiLCJuc3BzIiwibmV3Q29ubmVjdGlvbiIsImZvcmNlTmV3IiwibXVsdGlwbGV4IiwiaW8iLCJjb25uZWN0IiwiZWlvIiwic3VicyIsInJlY29ubmVjdGlvbiIsInJlY29ubmVjdGlvbkF0dGVtcHRzIiwicmVjb25uZWN0aW9uRGVsYXkiLCJyZWNvbm5lY3Rpb25EZWxheU1heCIsInJhbmRvbWl6YXRpb25GYWN0b3IiLCJiYWNrb2ZmIiwiY29ubmVjdGluZyIsImxhc3RQaW5nIiwicGFja2V0QnVmZmVyIiwiX3BhcnNlciIsImVuY29kZXIiLCJFbmNvZGVyIiwiZGVjb2RlciIsIkRlY29kZXIiLCJhdXRvQ29ubmVjdCIsImVtaXRBbGwiLCJuc3AiLCJ1cGRhdGVTb2NrZXRJZHMiLCJnZW5lcmF0ZUlkIiwiZW5naW5lIiwiX3JlY29ubmVjdGlvbiIsIl9yZWNvbm5lY3Rpb25BdHRlbXB0cyIsIl9yZWNvbm5lY3Rpb25EZWxheSIsIl9yYW5kb21pemF0aW9uRmFjdG9yIiwiX3JlY29ubmVjdGlvbkRlbGF5TWF4IiwiX3RpbWVvdXQiLCJtYXliZVJlY29ubmVjdE9uT3BlbiIsInJlY29ubmVjdGluZyIsInJlY29ubmVjdCIsInNraXBSZWNvbm5lY3QiLCJvcGVuU3ViIiwiZXJyb3JTdWIiLCJvbnBpbmciLCJvbnBvbmciLCJvbmRhdGEiLCJvbmRlY29kZWQiLCJvbkNvbm5lY3RpbmciLCJwcm9jZXNzUGFja2V0UXVldWUiLCJzdWJzTGVuZ3RoIiwiZGlzY29ubmVjdCIsIm9ucmVjb25uZWN0IiwiYXR0ZW1wdCIsImhhc0JpbiIsImNvbm5lY3RfZXJyb3IiLCJjb25uZWN0X3RpbWVvdXQiLCJyZWNvbm5lY3RfYXR0ZW1wdCIsInJlY29ubmVjdF9mYWlsZWQiLCJyZWNvbm5lY3RfZXJyb3IiLCJpZHMiLCJhY2tzIiwicmVjZWl2ZUJ1ZmZlciIsInNlbmRCdWZmZXIiLCJjb25uZWN0ZWQiLCJkaXNjb25uZWN0ZWQiLCJzdWJFdmVudHMiLCJCSU5BUllfRVZFTlQiLCJFVkVOVCIsIkNPTk5FQ1QiLCJvbnBhY2tldCIsInJvb3ROYW1lc3BhY2VFcnJvciIsIm9uY29ubmVjdCIsIm9uZXZlbnQiLCJBQ0siLCJvbmFjayIsIkJJTkFSWV9BQ0siLCJESVNDT05ORUNUIiwib25kaXNjb25uZWN0IiwiYWNrIiwiZW1pdEJ1ZmZlcmVkIiwiaXNCdWYiLCJkZWNvbnN0cnVjdFBhY2tldCIsInBhY2tldERhdGEiLCJfZGVjb25zdHJ1Y3RQYWNrZXQiLCJhdHRhY2htZW50cyIsInBsYWNlaG9sZGVyIiwiX3BsYWNlaG9sZGVyIiwibmV3RGF0YSIsInJlY29uc3RydWN0UGFja2V0IiwiX3JlY29uc3RydWN0UGFja2V0IiwicmVtb3ZlQmxvYnMiLCJfcmVtb3ZlQmxvYnMiLCJjdXJLZXkiLCJjb250YWluaW5nT2JqZWN0IiwicGVuZGluZ0Jsb2JzIiwiZmlsZVJlYWRlciIsImJsb2JsZXNzRGF0YSIsIkVSUk9SX1BBQ0tFVCIsImVuY29kZUFzQmluYXJ5IiwiZW5jb2RlQXNTdHJpbmciLCJwYXlsb2FkIiwidHJ5U3RyaW5naWZ5Iiwid3JpdGVFbmNvZGluZyIsImRlY29uc3RydWN0aW9uIiwicmVjb25zdHJ1Y3RvciIsImRlY29kZVN0cmluZyIsIkJpbmFyeVJlY29uc3RydWN0b3IiLCJyZWNvblBhY2siLCJ0YWtlQmluYXJ5RGF0YSIsInRyeVBhcnNlIiwiaXNQYXlsb2FkVmFsaWQiLCJmaW5pc2hlZFJlY29uc3RydWN0aW9uIiwiYmluRGF0YSIsIndpdGhOYXRpdmVCdWZmZXIiLCJ3aXRoTmF0aXZlQXJyYXlCdWZmZXIiLCJnIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJhbHBoYWJldCIsImRlY29kZWQiLCJDZWxsIiwidGlsZSIsInBpZWNlIiwiX3RpbGUiLCJ0ZW1wbGF0ZSIsImNlbGwiLCJ0aWxlQ2xhc3MiLCJDbGllbnQiLCJsb2dpbiIsInNldHVwQ3JlYXRlR2FtZSIsImdhbWUiLCJnYW1lbWFzdGVyIiwiR2FtZU1hc3RlciIsImxpc3RHYW1lcyIsInJlbG9hZCIsImVyYXNlQ29va2llIiwibG9iYnlzIiwibG9iYnkiLCJydWxlc2V0IiwiUlVMRV9TRVRTIiwicGxheWVyIiwiY3JlYXRlZCIsInRpbWVTaW5jZSIsImpvaW5hYmxlIiwiZ2FtZXMiLCJydWxlcyIsInBsYXllcjEiLCJwbGF5ZXIyIiwiZGVmYXVsdEdhbWVOYW1lIiwiY3JlYXRlR2FtZSIsInJlYWRDb29raWUiLCJjcmVhdGVDb29raWUiLCJHYW1lIiwiaXNTZXJ2ZXIiLCJnYW1lTG9nIiwiY3VycmVudE1vdmVDYWNoZSIsInBsYXllckNvdW50IiwiYm9hcmQiLCJnZW5lcmF0ZUNoZWNrZWRCb2FyZCIsImJvYXJkV2lkdGgiLCJib2FyZEhlaWdodCIsInNldHVwTW92ZXMiLCJsb2dFbnRyeSIsImV4ZWN1dGUiLCJtb3ZlIiwicGxheWVyTnVtYmVyIiwic291cmNlQ2VsbCIsImdldENlbGwiLCJ0YXJnZXRDZWxsIiwibW92ZWRQaWVjZUNsYXNzIiwiY2FwdHVyZWRQaWVjZUNsYXNzIiwiY2hlY2tNb3ZlIiwic3ltTG9nRW50cnkiLCJtb3ZlcyIsImRlc3Ryb3llZCIsImdhbWVFbmQiLCJjaGVja1dpbkNvbmRpdGlvbiIsInBpZWNlcyIsImhhc01vdmVkIiwidGFyZ2V0Q2VsbEZVIiwicGllY2VDbGFzcyIsIlBJRUNFX1JFR0lTVFJZIiwicHJvbW90aW9uUGllY2VOYW1lIiwicGllY2VOYW1lIiwiZ2V0UGxheWVyIiwiZ2V0UG9zc2libGVNb3ZlcyIsInBsYXllcnNTdGlsbEFsaXZlIiwibG9zZUNvbmRpdGlvbnMiLCJsb3NlcnMiLCJjaGVja0NvbmRpdGlvbiIsImxvc2VyIiwid2lubmVyIiwicm93IiwiQmxhY2tUaWxlIiwiV2hpdGVUaWxlIiwiS2luZ0RlYWQiLCJwbGF5ZXJzIiwiS2luZyIsIkxvc2VDb25kaXRpb24iLCJyZWdpc3RlciIsIkdvZCIsIlBhd24iLCJSb29rIiwiS25pZ2h0IiwiQmlzaG9wIiwiUXVlZW4iLCJwcmVwYXJlUGxhY2VQaWVjZSIsImNsaWVudCIsIlBsYXllciIsImxvY2FsUGxheWVyIiwicmVuZGVyIiwiZGF0YVRyYW5zZmVyIiwic2V0RGF0YSIsInNlbGVjdFBpZWNlIiwiZGVzZWxlY3RQaWVjZSIsImhhbmRsZUNsaWNrIiwicHJvbW90aW9uQ2FjaGUiLCJoaWRlTm90aWZpY2F0aW9uIiwiZXhlY3V0ZUFjdGlvbiIsInNob3dOb3RpZmljYXRpb24iLCJzaG93RXJyb3IiLCJ0YXJnZXRKUUNlbGwiLCJnZXRqcUNlbGwiLCJzb3VyY2VKcUNlbGwiLCJwcmVwYXJlTW92ZSIsInBhc3NhbnRDbGFzcyIsInNob3dQcm9tb3Rpb25Qcm9tcHQiLCJhZG1pbiIsInJlZHJhd0NlbGwiLCJkZXN0cm95Q2VsbCIsImpxQ2VsbCIsImpxY2VsbCIsImJsb2NrIiwicmV2ZXJzZWQiLCJhY2N1bSIsInJpIiwiU1RSQUlHSFRfRElSRUNUSU9OUyIsIkRJQUdPTkFMX0RJUkVDVElPTlMiLCJBTExfRElSRUNUSU9OUyIsIk1PVklOR19CRUhBVklPUlMiLCJISVRUSU5HIiwiU1RPUFBJTkciLCJQaWVjZSIsIl9uYW1lIiwiZGlyZWN0aW9uIiwibWF4RGlzdGFuY2UiLCJiZWhhdmlvdXIiLCJkaXN0YW5jZSIsInBhc3NhYmxlIiwiQmxhY2tXaGl0ZUNoZXNzUGllY2UiLCJmaWxlbmFtZSIsIm93bmVyQ29sb3IiLCJwb3NzaWJsZU1vdmVzIiwiZ2V0UG9zc2libGVNb3Zlc1dpdGhvdXRQcm9tb3Rpb24iLCJnZXRPd25lckRpcmVjdGlvbiIsImdldE1vdmVzSW5EaXJlY3Rpb24iLCJoaXR0aW5nTW92ZXMiLCJoaXR0aW5nTW92ZSIsImdldFBhc3NhYmxlQ2VsbCIsImxhc3RUdXJuQWN0aW9ucyIsInJlbGF0aXZlTW92ZXMiLCJUaWxlIiwiZGF5cyIsImV4cGlyZXMiLCJkYXRlIiwic2V0VGltZSIsInRvR01UU3RyaW5nIiwiY29va2llIiwibmFtZUVRIiwiczQiLCJzZWNvbmRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NBQWdDO0FBQzFFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQXdELGtCQUFrQjtBQUMxRTtBQUNBLHlEQUFpRCxjQUFjO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBeUMsaUNBQWlDO0FBQzFFLHdIQUFnSCxtQkFBbUIsRUFBRTtBQUNySTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOzs7QUFHQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDbEZhOztBQUViQSxtQkFBTyxDQUFDLHNFQUFELENBQVA7O0FBRUEsSUFBSUMsT0FBTyxHQUFHQyxzQkFBc0IsQ0FBQ0YsbUJBQU8sQ0FBQyw4RUFBRCxDQUFSLENBQXBDOztBQUVBLFNBQVNFLHNCQUFULENBQWdDQyxHQUFo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RUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsTUFBaEMsQ0FBTjs7QUFOUTtBQUFBO0FBT1IscUJBQU10RCw2Q0FBSSxDQUFDc0QsaUJBQUwsQ0FBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsTUFBaEMsQ0FBTjs7QUFQUTtBQUFBO0FBUVIscUJBQU10RCw2Q0FBSSxDQUFDc0QsaUJBQUwsQ0FBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsTUFBaEMsQ0FBTjs7QUFSUTtBQUFBO0FBU1IscUJBQU10RCw2Q0FBSSxDQUFDc0QsaUJBQUwsQ0FBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsUUFBaEMsQ0FBTjs7QUFUUTtBQUFBO0FBVVIscUJBQU10RCw2Q0FBSSxDQUFDc0QsaUJBQUwsQ0FBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsUUFBaEMsQ0FBTjs7QUFWUTtBQUFBO0FBV1IscUJBQU10RCw2Q0FBSSxDQUFDc0QsaUJBQUwsQ0FBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsUUFBaEMsQ0FBTjs7QUFYUTtBQUFBO0FBWVIscUJBQU10RCw2Q0FBSSxDQUFDc0QsaUJBQUwsQ0FBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsUUFBaEMsQ0FBTjs7QUFaUTtBQUFBO0FBYVIscUJBQU10RCw2Q0FBSSxDQUFDc0QsaUJBQUwsQ0FBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsUUFBaEMsQ0FBTjs7QUFiUTtBQUFBO0FBY1IscUJBQU10RCw2Q0FBSSxDQUFDc0QsaUJBQUwsQ0FBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsUUFBaEMsQ0FBTjs7QUFkUTtBQUFBO0FBZVIscUJBQU10RCw2Q0FBSSxDQUFDc0QsaUJBQUwsQ0FBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsUUFBaEMs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Ozs7OztBQ2RqQixlIiwiZmlsZSI6ImFwcC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcIi4vbm9Db25mbGljdFwiKTtcblxudmFyIF9nbG9iYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuaWYgKF9nbG9iYWwuZGVmYXVsdC5fYmFiZWxQb2x5ZmlsbCAmJiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4pIHtcbiAgY29uc29sZS53YXJuKFwiQGJhYmVsL3BvbHlmaWxsIGlzIGxvYWRlZCBtb3JlIHRoYW4gb25jZSBvbiB0aGlzIHBhZ2UuIFRoaXMgaXMgcHJvYmFibHkgbm90IGRlc2lyYWJsZS9pbnRlbmRlZCBcIiArIFwiYW5kIG1heSBoYXZlIGNvbnNlcXVlbmNlcyBpZiBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIHBvbHlmaWxscyBhcmUgYXBwbGllZCBzZXF1ZW50aWFsbHkuIFwiICsgXCJJZiB5b3UgZG8gbmVlZCB0byBsb2FkIHRoZSBwb2x5ZmlsbCBtb3JlIHRoYW4gb25jZSwgdXNlIEBiYWJlbC9wb2x5ZmlsbC9ub0NvbmZsaWN0IFwiICsgXCJpbnN0ZWFkIHRvIGJ5cGFzcyB0aGUgd2FybmluZy5cIik7XG59XG5cbl9nbG9iYWwuZGVmYXVsdC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2VzNlwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3RyaW0tc3RhcnRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy90cmltLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L3ZhbHVlc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2VudHJpZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3Byb21pc2UvZmluYWxseVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvd2ViXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBhZnRlclxuXG5mdW5jdGlvbiBhZnRlcihjb3VudCwgY2FsbGJhY2ssIGVycl9jYikge1xuICAgIHZhciBiYWlsID0gZmFsc2VcbiAgICBlcnJfY2IgPSBlcnJfY2IgfHwgbm9vcFxuICAgIHByb3h5LmNvdW50ID0gY291bnRcblxuICAgIHJldHVybiAoY291bnQgPT09IDApID8gY2FsbGJhY2soKSA6IHByb3h5XG5cbiAgICBmdW5jdGlvbiBwcm94eShlcnIsIHJlc3VsdCkge1xuICAgICAgICBpZiAocHJveHkuY291bnQgPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZnRlciBjYWxsZWQgdG9vIG1hbnkgdGltZXMnKVxuICAgICAgICB9XG4gICAgICAgIC0tcHJveHkuY291bnRcblxuICAgICAgICAvLyBhZnRlciBmaXJzdCBlcnJvciwgcmVzdCBhcmUgcGFzc2VkIHRvIGVycl9jYlxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBiYWlsID0gdHJ1ZVxuICAgICAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgICAgICAgLy8gZnV0dXJlIGVycm9yIGNhbGxiYWNrcyB3aWxsIGdvIHRvIGVycm9yIGhhbmRsZXJcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZXJyX2NiXG4gICAgICAgIH0gZWxzZSBpZiAocHJveHkuY291bnQgPT09IDAgJiYgIWJhaWwpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdClcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCIvKipcbiAqIEFuIGFic3RyYWN0aW9uIGZvciBzbGljaW5nIGFuIGFycmF5YnVmZmVyIGV2ZW4gd2hlblxuICogQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlIGlzIG5vdCBzdXBwb3J0ZWRcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyYXlidWZmZXIsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYXJyYXlidWZmZXIuYnl0ZUxlbmd0aDtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBlbmQgPSBlbmQgfHwgYnl0ZXM7XG5cbiAgaWYgKGFycmF5YnVmZmVyLnNsaWNlKSB7IHJldHVybiBhcnJheWJ1ZmZlci5zbGljZShzdGFydCwgZW5kKTsgfVxuXG4gIGlmIChzdGFydCA8IDApIHsgc3RhcnQgKz0gYnl0ZXM7IH1cbiAgaWYgKGVuZCA8IDApIHsgZW5kICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPiBieXRlcykgeyBlbmQgPSBieXRlczsgfVxuXG4gIGlmIChzdGFydCA+PSBieXRlcyB8fCBzdGFydCA+PSBlbmQgfHwgYnl0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEFycmF5QnVmZmVyKDApO1xuICB9XG5cbiAgdmFyIGFidiA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGVuZCAtIHN0YXJ0KTtcbiAgZm9yICh2YXIgaSA9IHN0YXJ0LCBpaSA9IDA7IGkgPCBlbmQ7IGkrKywgaWkrKykge1xuICAgIHJlc3VsdFtpaV0gPSBhYnZbaV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC5idWZmZXI7XG59O1xuIiwiXG4vKipcbiAqIEV4cG9zZSBgQmFja29mZmAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBCYWNrb2ZmO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYmFja29mZiB0aW1lciB3aXRoIGBvcHRzYC5cbiAqXG4gKiAtIGBtaW5gIGluaXRpYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgWzEwMF1cbiAqIC0gYG1heGAgbWF4IHRpbWVvdXQgWzEwMDAwXVxuICogLSBgaml0dGVyYCBbMF1cbiAqIC0gYGZhY3RvcmAgWzJdXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQmFja29mZihvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICB0aGlzLm1zID0gb3B0cy5taW4gfHwgMTAwO1xuICB0aGlzLm1heCA9IG9wdHMubWF4IHx8IDEwMDAwO1xuICB0aGlzLmZhY3RvciA9IG9wdHMuZmFjdG9yIHx8IDI7XG4gIHRoaXMuaml0dGVyID0gb3B0cy5qaXR0ZXIgPiAwICYmIG9wdHMuaml0dGVyIDw9IDEgPyBvcHRzLmppdHRlciA6IDA7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgYmFja29mZiBkdXJhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24oKXtcbiAgdmFyIG1zID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspO1xuICBpZiAodGhpcy5qaXR0ZXIpIHtcbiAgICB2YXIgcmFuZCA9ICBNYXRoLnJhbmRvbSgpO1xuICAgIHZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTtcbiAgICBtcyA9IChNYXRoLmZsb29yKHJhbmQgKiAxMCkgJiAxKSA9PSAwICA/IG1zIC0gZGV2aWF0aW9uIDogbXMgKyBkZXZpYXRpb247XG4gIH1cbiAgcmV0dXJuIE1hdGgubWluKG1zLCB0aGlzLm1heCkgfCAwO1xufTtcblxuLyoqXG4gKiBSZXNldCB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpe1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtaW5pbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbihtaW4pe1xuICB0aGlzLm1zID0gbWluO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1heGltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1heCA9IGZ1bmN0aW9uKG1heCl7XG4gIHRoaXMubWF4ID0gbWF4O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGppdHRlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0Sml0dGVyID0gZnVuY3Rpb24oaml0dGVyKXtcbiAgdGhpcy5qaXR0ZXIgPSBqaXR0ZXI7XG59O1xuXG4iLCIvKlxuICogYmFzZTY0LWFycmF5YnVmZmVyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE5pa2xhcyB2b24gSGVydHplblxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG4oZnVuY3Rpb24oKXtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIGNoYXJzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG5cbiAgLy8gVXNlIGEgbG9va3VwIHRhYmxlIHRvIGZpbmQgdGhlIGluZGV4LlxuICB2YXIgbG9va3VwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykge1xuICAgIGxvb2t1cFtjaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7XG4gIH1cblxuICBleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyKSB7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLFxuICAgIGksIGxlbiA9IGJ5dGVzLmxlbmd0aCwgYmFzZTY0ID0gXCJcIjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTMpIHtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpXSA+PiAyXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2ldICYgMykgPDwgNCkgfCAoYnl0ZXNbaSArIDFdID4+IDQpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2kgKyAyXSAmIDYzXTtcbiAgICB9XG5cbiAgICBpZiAoKGxlbiAlIDMpID09PSAyKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArIFwiPVwiO1xuICAgIH0gZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMikgKyBcIj09XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U2NDtcbiAgfTtcblxuICBleHBvcnRzLmRlY29kZSA9ICBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsXG4gICAgbGVuID0gYmFzZTY0Lmxlbmd0aCwgaSwgcCA9IDAsXG4gICAgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7XG5cbiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gXCI9XCIpIHtcbiAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09IFwiPVwiKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhcnJheWJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJMZW5ndGgpLFxuICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9NCkge1xuICAgICAgZW5jb2RlZDEgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSldO1xuICAgICAgZW5jb2RlZDIgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsxKV07XG4gICAgICBlbmNvZGVkMyA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzIpXTtcbiAgICAgIGVuY29kZWQ0ID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMyldO1xuXG4gICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMyAmIDMpIDw8IDYpIHwgKGVuY29kZWQ0ICYgNjMpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheWJ1ZmZlcjtcbiAgfTtcbn0pKCk7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qKlxyXG4gKiBDcmVhdGUgYSBibG9iIGJ1aWxkZXIgZXZlbiB3aGVuIHZlbmRvciBwcmVmaXhlcyBleGlzdFxyXG4gKi9cclxuXHJcbnZhciBCbG9iQnVpbGRlciA9IHR5cGVvZiBCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBCbG9iQnVpbGRlciA6XHJcbiAgdHlwZW9mIFdlYktpdEJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IFdlYktpdEJsb2JCdWlsZGVyIDpcclxuICB0eXBlb2YgTVNCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBNU0Jsb2JCdWlsZGVyIDpcclxuICB0eXBlb2YgTW96QmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gTW96QmxvYkJ1aWxkZXIgOiBcclxuICBmYWxzZTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBCbG9iIGNvbnN0cnVjdG9yIGlzIHN1cHBvcnRlZFxyXG4gKi9cclxuXHJcbnZhciBibG9iU3VwcG9ydGVkID0gKGZ1bmN0aW9uKCkge1xyXG4gIHRyeSB7XHJcbiAgICB2YXIgYSA9IG5ldyBCbG9iKFsnaGknXSk7XHJcbiAgICByZXR1cm4gYS5zaXplID09PSAyO1xyXG4gIH0gY2F0Y2goZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufSkoKTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBCbG9iIGNvbnN0cnVjdG9yIHN1cHBvcnRzIEFycmF5QnVmZmVyVmlld3NcclxuICogRmFpbHMgaW4gU2FmYXJpIDYsIHNvIHdlIG5lZWQgdG8gbWFwIHRvIEFycmF5QnVmZmVycyB0aGVyZS5cclxuICovXHJcblxyXG52YXIgYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID0gYmxvYlN1cHBvcnRlZCAmJiAoZnVuY3Rpb24oKSB7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBiID0gbmV3IEJsb2IoW25ldyBVaW50OEFycmF5KFsxLDJdKV0pO1xyXG4gICAgcmV0dXJuIGIuc2l6ZSA9PT0gMjtcclxuICB9IGNhdGNoKGUpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn0pKCk7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgQmxvYkJ1aWxkZXIgaXMgc3VwcG9ydGVkXHJcbiAqL1xyXG5cclxudmFyIGJsb2JCdWlsZGVyU3VwcG9ydGVkID0gQmxvYkJ1aWxkZXJcclxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuYXBwZW5kXHJcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmdldEJsb2I7XHJcblxyXG4vKipcclxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgbWFwcyBBcnJheUJ1ZmZlclZpZXdzIHRvIEFycmF5QnVmZmVyc1xyXG4gKiBVc2VkIGJ5IEJsb2JCdWlsZGVyIGNvbnN0cnVjdG9yIGFuZCBvbGQgYnJvd3NlcnMgdGhhdCBkaWRuJ3RcclxuICogc3VwcG9ydCBpdCBpbiB0aGUgQmxvYiBjb25zdHJ1Y3Rvci5cclxuICovXHJcblxyXG5mdW5jdGlvbiBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSkge1xyXG4gIHJldHVybiBhcnkubWFwKGZ1bmN0aW9uKGNodW5rKSB7XHJcbiAgICBpZiAoY2h1bmsuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcclxuICAgICAgdmFyIGJ1ZiA9IGNodW5rLmJ1ZmZlcjtcclxuXHJcbiAgICAgIC8vIGlmIHRoaXMgaXMgYSBzdWJhcnJheSwgbWFrZSBhIGNvcHkgc28gd2Ugb25seVxyXG4gICAgICAvLyBpbmNsdWRlIHRoZSBzdWJhcnJheSByZWdpb24gZnJvbSB0aGUgdW5kZXJseWluZyBidWZmZXJcclxuICAgICAgaWYgKGNodW5rLmJ5dGVMZW5ndGggIT09IGJ1Zi5ieXRlTGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIGNvcHkgPSBuZXcgVWludDhBcnJheShjaHVuay5ieXRlTGVuZ3RoKTtcclxuICAgICAgICBjb3B5LnNldChuZXcgVWludDhBcnJheShidWYsIGNodW5rLmJ5dGVPZmZzZXQsIGNodW5rLmJ5dGVMZW5ndGgpKTtcclxuICAgICAgICBidWYgPSBjb3B5LmJ1ZmZlcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGJ1ZjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2h1bms7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEJsb2JCdWlsZGVyQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XHJcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gIHZhciBiYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xyXG4gIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KS5mb3JFYWNoKGZ1bmN0aW9uKHBhcnQpIHtcclxuICAgIGJiLmFwcGVuZChwYXJ0KTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIChvcHRpb25zLnR5cGUpID8gYmIuZ2V0QmxvYihvcHRpb25zLnR5cGUpIDogYmIuZ2V0QmxvYigpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gQmxvYkNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xyXG4gIHJldHVybiBuZXcgQmxvYihtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSksIG9wdGlvbnMgfHwge30pO1xyXG59O1xyXG5cclxuaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJykge1xyXG4gIEJsb2JCdWlsZGVyQ29uc3RydWN0b3IucHJvdG90eXBlID0gQmxvYi5wcm90b3R5cGU7XHJcbiAgQmxvYkNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IEJsb2IucHJvdG90eXBlO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcclxuICBpZiAoYmxvYlN1cHBvcnRlZCkge1xyXG4gICAgcmV0dXJuIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA/IEJsb2IgOiBCbG9iQ29uc3RydWN0b3I7XHJcbiAgfSBlbHNlIGlmIChibG9iQnVpbGRlclN1cHBvcnRlZCkge1xyXG4gICAgcmV0dXJuIEJsb2JCdWlsZGVyQ29uc3RydWN0b3I7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcbiIsIlxyXG4vKipcclxuICogRXhwb3NlIGBFbWl0dGVyYC5cclxuICovXHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xyXG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcclxuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcclxuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cclxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcclxuICAgIC5wdXNoKGZuKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcclxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgZnVuY3Rpb24gb24oKSB7XHJcbiAgICB0aGlzLm9mZihldmVudCwgb24pO1xyXG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIG9uLmZuID0gZm47XHJcbiAgdGhpcy5vbihldmVudCwgb24pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXHJcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgLy8gYWxsXHJcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHNwZWNpZmljIGV2ZW50XHJcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xyXG5cclxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXHJcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXHJcbiAgdmFyIGNiO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcclxuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XHJcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXHJcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcblxyXG4gIGlmIChjYWxsYmFja3MpIHtcclxuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XHJcbn07XHJcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhLCBiKXtcbiAgdmFyIGZuID0gZnVuY3Rpb24oKXt9O1xuICBmbi5wcm90b3R5cGUgPSBiLnByb3RvdHlwZTtcbiAgYS5wcm90b3R5cGUgPSBuZXcgZm47XG4gIGEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gYTtcbn07IiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZmxhdE1hcDtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5pbmNsdWRlcztcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZW50cmllcztcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC52YWx1ZXM7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHknKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlByb21pc2VbJ2ZpbmFsbHknXTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkRW5kO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnBhZFN0YXJ0O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy50cmltUmlnaHQ7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcudHJpbUxlZnQ7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM3Lmdsb2JhbCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJykuZ2xvYmFsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi45JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiAvLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBhdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWsgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbnZhciAkaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjknIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoTywga2V5KSkge1xuICAgICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBidWlsdGluRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcblxuIC8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG4gIH1cbiAgcmV0dXJuIGJ1aWx0aW5FeGVjLmNhbGwoUiwgUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpIHtcbiAgdmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG4gIHZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbiAgdmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbiAgdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiAgdmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG4gIHZhciAkYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG4gIHZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbiAgdmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xuICB2YXIgcHJvcGVydHlEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuICB2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiAgdmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG4gIHZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG4gIHZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuICB2YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG4gIHZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xuICB2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbiAgdmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xuICB2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbiAgdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4gIHZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xuICB2YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG4gIHZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG4gIHZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbiAgdmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG4gIHZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuICB2YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG4gIHZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbiAgdmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xuICB2YXIgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJyk7XG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG4gIHZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG4gIHZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbiAgdmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbiAgdmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xuICB2YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKTtcbiAgdmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuICB2YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xuICB2YXIgZFAgPSAkRFAuZjtcbiAgdmFyIGdPUEQgPSAkR09QRC5mO1xuICB2YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuICB2YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbiAgdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbiAgdmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG4gIHZhciBTSEFSRURfQlVGRkVSID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVI7XG4gIHZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG4gIHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheVtQUk9UT1RZUEVdO1xuICB2YXIgJEFycmF5QnVmZmVyID0gJGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbiAgdmFyICREYXRhVmlldyA9ICRidWZmZXIuRGF0YVZpZXc7XG4gIHZhciBhcnJheUZvckVhY2ggPSBjcmVhdGVBcnJheU1ldGhvZCgwKTtcbiAgdmFyIGFycmF5RmlsdGVyID0gY3JlYXRlQXJyYXlNZXRob2QoMik7XG4gIHZhciBhcnJheVNvbWUgPSBjcmVhdGVBcnJheU1ldGhvZCgzKTtcbiAgdmFyIGFycmF5RXZlcnkgPSBjcmVhdGVBcnJheU1ldGhvZCg0KTtcbiAgdmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xuICB2YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbiAgdmFyIGFycmF5SW5jbHVkZXMgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpO1xuICB2YXIgYXJyYXlJbmRleE9mID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSk7XG4gIHZhciBhcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcztcbiAgdmFyIGFycmF5S2V5cyA9IEFycmF5SXRlcmF0b3JzLmtleXM7XG4gIHZhciBhcnJheUVudHJpZXMgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzO1xuICB2YXIgYXJyYXlMYXN0SW5kZXhPZiA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2Y7XG4gIHZhciBhcnJheVJlZHVjZSA9IEFycmF5UHJvdG8ucmVkdWNlO1xuICB2YXIgYXJyYXlSZWR1Y2VSaWdodCA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQ7XG4gIHZhciBhcnJheUpvaW4gPSBBcnJheVByb3RvLmpvaW47XG4gIHZhciBhcnJheVNvcnQgPSBBcnJheVByb3RvLnNvcnQ7XG4gIHZhciBhcnJheVNsaWNlID0gQXJyYXlQcm90by5zbGljZTtcbiAgdmFyIGFycmF5VG9TdHJpbmcgPSBBcnJheVByb3RvLnRvU3RyaW5nO1xuICB2YXIgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmc7XG4gIHZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbiAgdmFyIFRBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbiAgdmFyIFRZUEVEX0NPTlNUUlVDVE9SID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpO1xuICB2YXIgREVGX0NPTlNUUlVDVE9SID0gdWlkKCdkZWZfY29uc3RydWN0b3InKTtcbiAgdmFyIEFMTF9DT05TVFJVQ1RPUlMgPSAkdHlwZWQuQ09OU1RSO1xuICB2YXIgVFlQRURfQVJSQVkgPSAkdHlwZWQuVFlQRUQ7XG4gIHZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG4gIHZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTtcbiAgfSk7XG5cbiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIGlmIChpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpIHJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIChDLCBsZW5ndGgpIHtcbiAgICBpZiAoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbiAoTywgbGlzdCkge1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChpdCwga2V5LCBpbnRlcm5hbCkge1xuICAgIGRQKGl0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfSB9KTtcbiAgfTtcblxuICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKykge1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYgKG1hcHBpbmcgJiYgYUxlbiA+IDIpIG1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxuICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcbiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHZhciBwcm90byA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoO1xuICAgICAgdmFyIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMik7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgTyA9IHZhbGlkYXRlKHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICAgICAgdmFyICRiZWdpbiA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICAgIHZhbGlkYXRlKHRoaXMpO1xuICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpO1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoc3JjLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KVxuICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXVxuICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xuICAgICAgJiYga2V5IGluIHRhcmdldFxuICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xuICB9O1xuICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICBpZiAoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgICYmIGlzT2JqZWN0KGRlc2MpXG4gICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpXG4gICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKVxuICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSlcbiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKVxuICAgICkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYgKCFBTExfQ09OU1RSVUNUT1JTKSB7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogJHNsaWNlLFxuICAgIHNldDogJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gKCkgeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6IGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50c1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKSB7XG4gICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDtcbiAgICB2YXIgTkFNRSA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBLRVk7XG4gICAgdmFyIFNFVFRFUiA9ICdzZXQnICsgS0VZO1xuICAgIHZhciBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdO1xuICAgIHZhciBCYXNlID0gVHlwZWRBcnJheSB8fCB7fTtcbiAgICB2YXIgVEFDID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KTtcbiAgICB2YXIgRk9SQ0VEID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlY7XG4gICAgdmFyIE8gPSB7fTtcbiAgICB2YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdO1xuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7XG4gICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5KDEpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSkgfHwgISRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheSgxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBCYXNlKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5KSkgaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZiAoIUxJQlJBUlkpIFR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl07XG4gICAgdmFyIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3JcbiAgICAgICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpO1xuICAgIHZhciAkaXRlcmF0b3IgPSAkaXRlcmF0b3JzLnZhbHVlcztcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcblxuICAgIGlmIChDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIHtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTXG4gICAgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgQmFzZS5vZi5jYWxsKFR5cGVkQXJyYXksIDEpOyB9KSwgTkFNRSwge1xuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTtcblxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHsgc2V0OiAkc2V0IH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgaWYgKCFMSUJSQVJZICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZykgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyA9IGFycmF5VG9TdHJpbmc7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHsgc2xpY2U6ICRzbGljZSB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwgeyB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nIH0pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYgKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpO1xudmFyIEtFWSA9ICdmaW5kSW5kZXgnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGlmIChodG1sKSBhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCk7XG4gICAgdmFyIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmIChrbGFzcyA9PSAnQXJyYXknKSByZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuKTtcbiAgICB2YXIgdXBUbyA9IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbik7XG4gICAgdmFyIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpO1xuICAgIHZhciBjbG9uZWQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSksICdEYXRlJywge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcbnZhciBwcm90byA9IERhdGUucHJvdG90eXBlO1xuXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG4iLCJ2YXIgRGF0ZVByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xuXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc2VhcmNoXG4gICAgZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkc2VhcmNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkbWluID0gTWF0aC5taW47XG52YXIgJHB1c2ggPSBbXS5wdXNoO1xudmFyICRTUExJVCA9ICdzcGxpdCc7XG52YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xudmFyIE1BWF9VSU5UMzIgPSAweGZmZmZmZmZmO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ3gnLCAneScpIC0+IC94L3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyIFNVUFBPUlRTX1kgPSAhZmFpbHMoZnVuY3Rpb24gKCkgeyBSZWdFeHAoTUFYX1VJTlQzMiwgJ3knKTsgfSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuICRzcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6ICRzcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9ICRzcGxpdDtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gc3BsaXR0ZXIuY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGludGVybmFsU3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByZWdleHAsIHRoaXMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSAkc3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFNVUFBPUlRTX1kgPyByeCA6ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFNVUFBPUlRTX1kgPyBxIDogMDtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgU1VQUE9SVFNfWSA/IFMgOiBTLnNsaWNlKHEpKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSAkbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChTVVBQT1JUU19ZID8gMCA6IHEpKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkR09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAhISRHT1BTLmY7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgSVNfSUUxMSA9ICFnbG9iYWwuQWN0aXZlWE9iamVjdCAmJiAnQWN0aXZlWE9iamVjdCcgaW4gZ2xvYmFsO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpO1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0cyBwYXJzZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB0cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIGluZGV4ID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB1cmkgb3Igb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0ICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNvY2tldCkpIHJldHVybiBuZXcgU29ja2V0KHVyaSwgb3B0cyk7XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgaWYgKHVyaSAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gbnVsbDtcbiAgfVxuXG4gIGlmICh1cmkpIHtcbiAgICB1cmkgPSBwYXJzZXVyaSh1cmkpO1xuICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICBvcHRzLnNlY3VyZSA9IHVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzJyB8fCB1cmkucHJvdG9jb2wgPT09ICd3c3MnO1xuICAgIG9wdHMucG9ydCA9IHVyaS5wb3J0O1xuICAgIGlmICh1cmkucXVlcnkpIG9wdHMucXVlcnkgPSB1cmkucXVlcnk7XG4gIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHBhcnNldXJpKG9wdHMuaG9zdCkuaG9zdDtcbiAgfVxuXG4gIHRoaXMuc2VjdXJlID0gbnVsbCAhPSBvcHRzLnNlY3VyZSA/IG9wdHMuc2VjdXJlXG4gICAgOiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2wpO1xuXG4gIGlmIChvcHRzLmhvc3RuYW1lICYmICFvcHRzLnBvcnQpIHtcbiAgICAvLyBpZiBubyBwb3J0IGlzIHNwZWNpZmllZCBtYW51YWxseSwgdXNlIHRoZSBwcm90b2NvbCBkZWZhdWx0XG4gICAgb3B0cy5wb3J0ID0gdGhpcy5zZWN1cmUgPyAnNDQzJyA6ICc4MCc7XG4gIH1cblxuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWUgfHxcbiAgICAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyA/IGxvY2F0aW9uLmhvc3RuYW1lIDogJ2xvY2FsaG9zdCcpO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24ucG9ydFxuICAgICAgPyBsb2NhdGlvbi5wb3J0XG4gICAgICA6ICh0aGlzLnNlY3VyZSA/IDQ0MyA6IDgwKSk7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5IHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB0aGlzLnF1ZXJ5KSB0aGlzLnF1ZXJ5ID0gcGFyc2Vxcy5kZWNvZGUodGhpcy5xdWVyeSk7XG4gIHRoaXMudXBncmFkZSA9IGZhbHNlICE9PSBvcHRzLnVwZ3JhZGU7XG4gIHRoaXMucGF0aCA9IChvcHRzLnBhdGggfHwgJy9lbmdpbmUuaW8nKS5yZXBsYWNlKC9cXC8kLywgJycpICsgJy8nO1xuICB0aGlzLmZvcmNlSlNPTlAgPSAhIW9wdHMuZm9yY2VKU09OUDtcbiAgdGhpcy5qc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuICB0aGlzLmZvcmNlQmFzZTY0ID0gISFvcHRzLmZvcmNlQmFzZTY0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSAhIW9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW0gfHwgJ3QnO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy50cmFuc3BvcnRzID0gb3B0cy50cmFuc3BvcnRzIHx8IFsncG9sbGluZycsICd3ZWJzb2NrZXQnXTtcbiAgdGhpcy50cmFuc3BvcnRPcHRpb25zID0gb3B0cy50cmFuc3BvcnRPcHRpb25zIHx8IHt9O1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcbiAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuICB0aGlzLnBvbGljeVBvcnQgPSBvcHRzLnBvbGljeVBvcnQgfHwgODQzO1xuICB0aGlzLnJlbWVtYmVyVXBncmFkZSA9IG9wdHMucmVtZW1iZXJVcGdyYWRlIHx8IGZhbHNlO1xuICB0aGlzLmJpbmFyeVR5cGUgPSBudWxsO1xuICB0aGlzLm9ubHlCaW5hcnlVcGdyYWRlcyA9IG9wdHMub25seUJpbmFyeVVwZ3JhZGVzO1xuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gZmFsc2UgIT09IG9wdHMucGVyTWVzc2FnZURlZmxhdGUgPyAob3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB7fSkgOiBmYWxzZTtcblxuICBpZiAodHJ1ZSA9PT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSkgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IHt9O1xuICBpZiAodGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSAmJiBudWxsID09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQgPSAxMDI0O1xuICB9XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZnggfHwgbnVsbDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleSB8fCBudWxsO1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2UgfHwgbnVsbDtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0IHx8IG51bGw7XG4gIHRoaXMuY2EgPSBvcHRzLmNhIHx8IG51bGw7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycyB8fCBudWxsO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIHRoaXMuZm9yY2VOb2RlID0gISFvcHRzLmZvcmNlTm9kZTtcblxuICAvLyBkZXRlY3QgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnRcbiAgdGhpcy5pc1JlYWN0TmF0aXZlID0gKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ3N0cmluZycgJiYgbmF2aWdhdG9yLnByb2R1Y3QudG9Mb3dlckNhc2UoKSA9PT0gJ3JlYWN0bmF0aXZlJyk7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBvciBSZWFjdE5hdGl2ZSBjbGllbnRcbiAgaWYgKHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLmlzUmVhY3ROYXRpdmUpIHtcbiAgICBpZiAob3B0cy5leHRyYUhlYWRlcnMgJiYgT2JqZWN0LmtleXMob3B0cy5leHRyYUhlYWRlcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMubG9jYWxBZGRyZXNzKSB7XG4gICAgICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBvbiBoYW5kc2hha2VcbiAgdGhpcy5pZCA9IG51bGw7XG4gIHRoaXMudXBncmFkZXMgPSBudWxsO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IG51bGw7XG4gIHRoaXMucGluZ1RpbWVvdXQgPSBudWxsO1xuXG4gIC8vIHNldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5waW5nSW50ZXJ2YWxUaW1lciA9IG51bGw7XG4gIHRoaXMucGluZ1RpbWVvdXRUaW1lciA9IG51bGw7XG5cbiAgdGhpcy5vcGVuKCk7XG59XG5cblNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDsgLy8gdGhpcyBpcyBhbiBpbnRcblxuLyoqXG4gKiBFeHBvc2UgZGVwcyBmb3IgbGVnYWN5IGNvbXBhdGliaWxpdHlcbiAqIGFuZCBzdGFuZGFsb25lIGJyb3dzZXIgYWNjZXNzLlxuICovXG5cblNvY2tldC5Tb2NrZXQgPSBTb2NrZXQ7XG5Tb2NrZXQuVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQnKTtcblNvY2tldC50cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG5Tb2NrZXQucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgdHJhbnNwb3J0IG9mIHRoZSBnaXZlbiB0eXBlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICogQHJldHVybiB7VHJhbnNwb3J0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jcmVhdGVUcmFuc3BvcnQgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygnY3JlYXRpbmcgdHJhbnNwb3J0IFwiJXNcIicsIG5hbWUpO1xuICB2YXIgcXVlcnkgPSBjbG9uZSh0aGlzLnF1ZXJ5KTtcblxuICAvLyBhcHBlbmQgZW5naW5lLmlvIHByb3RvY29sIGlkZW50aWZpZXJcbiAgcXVlcnkuRUlPID0gcGFyc2VyLnByb3RvY29sO1xuXG4gIC8vIHRyYW5zcG9ydCBuYW1lXG4gIHF1ZXJ5LnRyYW5zcG9ydCA9IG5hbWU7XG5cbiAgLy8gcGVyLXRyYW5zcG9ydCBvcHRpb25zXG4gIHZhciBvcHRpb25zID0gdGhpcy50cmFuc3BvcnRPcHRpb25zW25hbWVdIHx8IHt9O1xuXG4gIC8vIHNlc3Npb24gaWQgaWYgd2UgYWxyZWFkeSBoYXZlIG9uZVxuICBpZiAodGhpcy5pZCkgcXVlcnkuc2lkID0gdGhpcy5pZDtcblxuICB2YXIgdHJhbnNwb3J0ID0gbmV3IHRyYW5zcG9ydHNbbmFtZV0oe1xuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBzb2NrZXQ6IHRoaXMsXG4gICAgYWdlbnQ6IG9wdGlvbnMuYWdlbnQgfHwgdGhpcy5hZ2VudCxcbiAgICBob3N0bmFtZTogb3B0aW9ucy5ob3N0bmFtZSB8fCB0aGlzLmhvc3RuYW1lLFxuICAgIHBvcnQ6IG9wdGlvbnMucG9ydCB8fCB0aGlzLnBvcnQsXG4gICAgc2VjdXJlOiBvcHRpb25zLnNlY3VyZSB8fCB0aGlzLnNlY3VyZSxcbiAgICBwYXRoOiBvcHRpb25zLnBhdGggfHwgdGhpcy5wYXRoLFxuICAgIGZvcmNlSlNPTlA6IG9wdGlvbnMuZm9yY2VKU09OUCB8fCB0aGlzLmZvcmNlSlNPTlAsXG4gICAganNvbnA6IG9wdGlvbnMuanNvbnAgfHwgdGhpcy5qc29ucCxcbiAgICBmb3JjZUJhc2U2NDogb3B0aW9ucy5mb3JjZUJhc2U2NCB8fCB0aGlzLmZvcmNlQmFzZTY0LFxuICAgIGVuYWJsZXNYRFI6IG9wdGlvbnMuZW5hYmxlc1hEUiB8fCB0aGlzLmVuYWJsZXNYRFIsXG4gICAgdGltZXN0YW1wUmVxdWVzdHM6IG9wdGlvbnMudGltZXN0YW1wUmVxdWVzdHMgfHwgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyxcbiAgICB0aW1lc3RhbXBQYXJhbTogb3B0aW9ucy50aW1lc3RhbXBQYXJhbSB8fCB0aGlzLnRpbWVzdGFtcFBhcmFtLFxuICAgIHBvbGljeVBvcnQ6IG9wdGlvbnMucG9saWN5UG9ydCB8fCB0aGlzLnBvbGljeVBvcnQsXG4gICAgcGZ4OiBvcHRpb25zLnBmeCB8fCB0aGlzLnBmeCxcbiAgICBrZXk6IG9wdGlvbnMua2V5IHx8IHRoaXMua2V5LFxuICAgIHBhc3NwaHJhc2U6IG9wdGlvbnMucGFzc3BocmFzZSB8fCB0aGlzLnBhc3NwaHJhc2UsXG4gICAgY2VydDogb3B0aW9ucy5jZXJ0IHx8IHRoaXMuY2VydCxcbiAgICBjYTogb3B0aW9ucy5jYSB8fCB0aGlzLmNhLFxuICAgIGNpcGhlcnM6IG9wdGlvbnMuY2lwaGVycyB8fCB0aGlzLmNpcGhlcnMsXG4gICAgcmVqZWN0VW5hdXRob3JpemVkOiBvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCB8fCB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCxcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogb3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLFxuICAgIGV4dHJhSGVhZGVyczogb3B0aW9ucy5leHRyYUhlYWRlcnMgfHwgdGhpcy5leHRyYUhlYWRlcnMsXG4gICAgZm9yY2VOb2RlOiBvcHRpb25zLmZvcmNlTm9kZSB8fCB0aGlzLmZvcmNlTm9kZSxcbiAgICBsb2NhbEFkZHJlc3M6IG9wdGlvbnMubG9jYWxBZGRyZXNzIHx8IHRoaXMubG9jYWxBZGRyZXNzLFxuICAgIHJlcXVlc3RUaW1lb3V0OiBvcHRpb25zLnJlcXVlc3RUaW1lb3V0IHx8IHRoaXMucmVxdWVzdFRpbWVvdXQsXG4gICAgcHJvdG9jb2xzOiBvcHRpb25zLnByb3RvY29scyB8fCB2b2lkICgwKSxcbiAgICBpc1JlYWN0TmF0aXZlOiB0aGlzLmlzUmVhY3ROYXRpdmVcbiAgfSk7XG5cbiAgcmV0dXJuIHRyYW5zcG9ydDtcbn07XG5cbmZ1bmN0aW9uIGNsb25lIChvYmopIHtcbiAgdmFyIG8gPSB7fTtcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBvW2ldID0gb2JqW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbztcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB0cmFuc3BvcnQgdG8gdXNlIGFuZCBzdGFydHMgcHJvYmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblNvY2tldC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRyYW5zcG9ydDtcbiAgaWYgKHRoaXMucmVtZW1iZXJVcGdyYWRlICYmIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgJiYgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoJ3dlYnNvY2tldCcpICE9PSAtMSkge1xuICAgIHRyYW5zcG9ydCA9ICd3ZWJzb2NrZXQnO1xuICB9IGVsc2UgaWYgKDAgPT09IHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAvLyBFbWl0IGVycm9yIG9uIG5leHQgdGljayBzbyBpdCBjYW4gYmUgbGlzdGVuZWQgdG9cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgJ05vIHRyYW5zcG9ydHMgYXZhaWxhYmxlJyk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1swXTtcbiAgfVxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG5cbiAgLy8gUmV0cnkgd2l0aCB0aGUgbmV4dCB0cmFuc3BvcnQgaWYgdGhlIHRyYW5zcG9ydCBpcyBkaXNhYmxlZCAoanNvbnA6IGZhbHNlKVxuICB0cnkge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKTtcbiAgICB0aGlzLm9wZW4oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cmFuc3BvcnQub3BlbigpO1xuICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydC4gRGlzYWJsZXMgdGhlIGV4aXN0aW5nIG9uZSAoaWYgYW55KS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgZGVidWcoJ3NldHRpbmcgdHJhbnNwb3J0ICVzJywgdHJhbnNwb3J0Lm5hbWUpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMudHJhbnNwb3J0KSB7XG4gICAgZGVidWcoJ2NsZWFyaW5nIGV4aXN0aW5nIHRyYW5zcG9ydCAlcycsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9XG5cbiAgLy8gc2V0IHVwIHRyYW5zcG9ydFxuICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICB0cmFuc3BvcnRcbiAgLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uRHJhaW4oKTtcbiAgfSlcbiAgLm9uKCdwYWNrZXQnLCBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICB9KVxuICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoZSk7XG4gIH0pXG4gIC5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCd0cmFuc3BvcnQgY2xvc2UnKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFByb2JlcyBhIHRyYW5zcG9ydC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucHJvYmUgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygncHJvYmluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gIHZhciB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lLCB7IHByb2JlOiAxIH0pO1xuICB2YXIgZmFpbGVkID0gZmFsc2U7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25UcmFuc3BvcnRPcGVuICgpIHtcbiAgICBpZiAoc2VsZi5vbmx5QmluYXJ5VXBncmFkZXMpIHtcbiAgICAgIHZhciB1cGdyYWRlTG9zZXNCaW5hcnkgPSAhdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiBzZWxmLnRyYW5zcG9ydC5zdXBwb3J0c0JpbmFyeTtcbiAgICAgIGZhaWxlZCA9IGZhaWxlZCB8fCB1cGdyYWRlTG9zZXNCaW5hcnk7XG4gICAgfVxuICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIG9wZW5lZCcsIG5hbWUpO1xuICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICdwaW5nJywgZGF0YTogJ3Byb2JlJyB9XSk7XG4gICAgdHJhbnNwb3J0Lm9uY2UoJ3BhY2tldCcsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgIGlmICgncG9uZycgPT09IG1zZy50eXBlICYmICdwcm9iZScgPT09IG1zZy5kYXRhKSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIHBvbmcnLCBuYW1lKTtcbiAgICAgICAgc2VsZi51cGdyYWRpbmcgPSB0cnVlO1xuICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGluZycsIHRyYW5zcG9ydCk7XG4gICAgICAgIGlmICghdHJhbnNwb3J0KSByZXR1cm47XG4gICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICAgICAgZGVidWcoJ3BhdXNpbmcgY3VycmVudCB0cmFuc3BvcnQgXCIlc1wiJywgc2VsZi50cmFuc3BvcnQubmFtZSk7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0LnBhdXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgICBkZWJ1ZygnY2hhbmdpbmcgdHJhbnNwb3J0IGFuZCBzZW5kaW5nIHVwZ3JhZGUgcGFja2V0Jyk7XG5cbiAgICAgICAgICBjbGVhbnVwKCk7XG5cbiAgICAgICAgICBzZWxmLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICd1cGdyYWRlJyB9XSk7XG4gICAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlJywgdHJhbnNwb3J0KTtcbiAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgIHNlbGYudXBncmFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5mbHVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCcsIG5hbWUpO1xuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcicpO1xuICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCAoKSB7XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgZmFpbGVkID0gdHJ1ZTtcblxuICAgIGNsZWFudXAoKTtcblxuICAgIHRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gIH1cblxuICAvLyBIYW5kbGUgYW55IGVycm9yIHRoYXQgaGFwcGVucyB3aGlsZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9uZXJyb3IgKGVycikge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcigncHJvYmUgZXJyb3I6ICcgKyBlcnIpO1xuICAgIGVycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgZnJlZXplVHJhbnNwb3J0KCk7XG5cbiAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvcjogJXMnLCBuYW1lLCBlcnIpO1xuXG4gICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydENsb3NlICgpIHtcbiAgICBvbmVycm9yKCd0cmFuc3BvcnQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgY2xvc2VkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25jbG9zZSAoKSB7XG4gICAgb25lcnJvcignc29ja2V0IGNsb3NlZCcpO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb251cGdyYWRlICh0bykge1xuICAgIGlmICh0cmFuc3BvcnQgJiYgdG8ubmFtZSAhPT0gdHJhbnNwb3J0Lm5hbWUpIHtcbiAgICAgIGRlYnVnKCdcIiVzXCIgd29ya3MgLSBhYm9ydGluZyBcIiVzXCInLCB0by5uYW1lLCB0cmFuc3BvcnQubmFtZSk7XG4gICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGluZycsIG9udXBncmFkZSk7XG4gIH1cblxuICB0cmFuc3BvcnQub25jZSgnb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gIHRyYW5zcG9ydC5vbmNlKCdlcnJvcicsIG9uZXJyb3IpO1xuICB0cmFuc3BvcnQub25jZSgnY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcblxuICB0aGlzLm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHRoaXMub25jZSgndXBncmFkaW5nJywgb251cGdyYWRlKTtcblxuICB0cmFuc3BvcnQub3BlbigpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzb2NrZXQgb3BlbicpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG4gIHRoaXMuZmx1c2goKTtcblxuICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXRcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudXBncmFkZSAmJiB0aGlzLnRyYW5zcG9ydC5wYXVzZSkge1xuICAgIGRlYnVnKCdzdGFydGluZyB1cGdyYWRlIHByb2JlcycpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgcmVjZWl2ZTogdHlwZSBcIiVzXCIsIGRhdGEgXCIlc1wiJywgcGFja2V0LnR5cGUsIHBhY2tldC5kYXRhKTtcblxuICAgIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcblxuICAgIC8vIFNvY2tldCBpcyBsaXZlIC0gYW55IHBhY2tldCBjb3VudHNcbiAgICB0aGlzLmVtaXQoJ2hlYXJ0YmVhdCcpO1xuXG4gICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIHRoaXMub25IYW5kc2hha2UoSlNPTi5wYXJzZShwYWNrZXQuZGF0YSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncG9uZyc6XG4gICAgICAgIHRoaXMuc2V0UGluZygpO1xuICAgICAgICB0aGlzLmVtaXQoJ3BvbmcnKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignc2VydmVyIGVycm9yJyk7XG4gICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgIHRoaXMub25FcnJvcihlcnIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbWVzc2FnZSc6XG4gICAgICAgIHRoaXMuZW1pdCgnZGF0YScsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgcGFja2V0LmRhdGEpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ3BhY2tldCByZWNlaXZlZCB3aXRoIHNvY2tldCByZWFkeVN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gaGFuZHNoYWtlIGNvbXBsZXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhhbmRzaGFrZSBvYmpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IYW5kc2hha2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmVtaXQoJ2hhbmRzaGFrZScsIGRhdGEpO1xuICB0aGlzLmlkID0gZGF0YS5zaWQ7XG4gIHRoaXMudHJhbnNwb3J0LnF1ZXJ5LnNpZCA9IGRhdGEuc2lkO1xuICB0aGlzLnVwZ3JhZGVzID0gdGhpcy5maWx0ZXJVcGdyYWRlcyhkYXRhLnVwZ3JhZGVzKTtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBkYXRhLnBpbmdJbnRlcnZhbDtcbiAgdGhpcy5waW5nVGltZW91dCA9IGRhdGEucGluZ1RpbWVvdXQ7XG4gIHRoaXMub25PcGVuKCk7XG4gIC8vIEluIGNhc2Ugb3BlbiBoYW5kbGVyIGNsb3NlcyBzb2NrZXRcbiAgaWYgKCdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgdGhpcy5zZXRQaW5nKCk7XG5cbiAgLy8gUHJvbG9uZyBsaXZlbmVzcyBvZiBzb2NrZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xuICB0aGlzLm9uKCdoZWFydGJlYXQnLCB0aGlzLm9uSGVhcnRiZWF0KTtcbn07XG5cbi8qKlxuICogUmVzZXRzIHBpbmcgdGltZW91dC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uSGVhcnRiZWF0ID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc2VsZi5waW5nVGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICBzZWxmLm9uQ2xvc2UoJ3BpbmcgdGltZW91dCcpO1xuICB9LCB0aW1lb3V0IHx8IChzZWxmLnBpbmdJbnRlcnZhbCArIHNlbGYucGluZ1RpbWVvdXQpKTtcbn07XG5cbi8qKlxuICogUGluZ3Mgc2VydmVyIGV2ZXJ5IGB0aGlzLnBpbmdJbnRlcnZhbGAgYW5kIGV4cGVjdHMgcmVzcG9uc2VcbiAqIHdpdGhpbiBgdGhpcy5waW5nVGltZW91dGAgb3IgY2xvc2VzIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZXRQaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNsZWFyVGltZW91dChzZWxmLnBpbmdJbnRlcnZhbFRpbWVyKTtcbiAgc2VsZi5waW5nSW50ZXJ2YWxUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cml0aW5nIHBpbmcgcGFja2V0IC0gZXhwZWN0aW5nIHBvbmcgd2l0aGluICVzbXMnLCBzZWxmLnBpbmdUaW1lb3V0KTtcbiAgICBzZWxmLnBpbmcoKTtcbiAgICBzZWxmLm9uSGVhcnRiZWF0KHNlbGYucGluZ1RpbWVvdXQpO1xuICB9LCBzZWxmLnBpbmdJbnRlcnZhbCk7XG59O1xuXG4vKipcbiogU2VuZHMgYSBwaW5nIHBhY2tldC5cbipcbiogQGFwaSBwcml2YXRlXG4qL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZW5kUGFja2V0KCdwaW5nJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuZW1pdCgncGluZycpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIG9uIGBkcmFpbmAgZXZlbnRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG5cbiAgLy8gc2V0dGluZyBwcmV2QnVmZmVyTGVuID0gMCBpcyB2ZXJ5IGltcG9ydGFudFxuICAvLyBmb3IgZXhhbXBsZSwgd2hlbiB1cGdyYWRpbmcsIHVwZ3JhZGUgcGFja2V0IGlzIHNlbnQgb3ZlcixcbiAgLy8gYW5kIGEgbm9uemVybyBwcmV2QnVmZmVyTGVuIGNvdWxkIGNhdXNlIHByb2JsZW1zIG9uIGBkcmFpbmBcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcblxuICBpZiAoMCA9PT0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICB0aGlzLmVtaXQoJ2RyYWluJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5mbHVzaCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEZsdXNoIHdyaXRlIGJ1ZmZlcnMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy50cmFuc3BvcnQud3JpdGFibGUgJiZcbiAgICAhdGhpcy51cGdyYWRpbmcgJiYgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICBkZWJ1ZygnZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXQnLCB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCk7XG4gICAgdGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIGN1cnJlbnQgbGVuZ3RoIG9mIHdyaXRlQnVmZmVyXG4gICAgLy8gc3BsaWNlIHdyaXRlQnVmZmVyIGFuZCBjYWxsYmFja0J1ZmZlciBvbiBgZHJhaW5gXG4gICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7XG4gICAgdGhpcy5lbWl0KCdmbHVzaCcpO1xuICB9XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS53cml0ZSA9XG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobXNnLCBvcHRpb25zLCBmbikge1xuICB0aGlzLnNlbmRQYWNrZXQoJ21lc3NhZ2UnLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYWNrZXQgdHlwZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZFBhY2tldCA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCBvcHRpb25zLCBmbikge1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGRhdGEpIHtcbiAgICBmbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgIGZuID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuXG4gIGlmICgnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuY29tcHJlc3MgPSBmYWxzZSAhPT0gb3B0aW9ucy5jb21wcmVzcztcblxuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgZGF0YTogZGF0YSxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH07XG4gIHRoaXMuZW1pdCgncGFja2V0Q3JlYXRlJywgcGFja2V0KTtcbiAgdGhpcy53cml0ZUJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIGlmIChmbikgdGhpcy5vbmNlKCdmbHVzaCcsIGZuKTtcbiAgdGhpcy5mbHVzaCgpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NpbmcnO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UgKCkge1xuICAgIHNlbGYub25DbG9zZSgnZm9yY2VkIGNsb3NlJyk7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zaW5nIC0gdGVsbGluZyB0cmFuc3BvcnQgdG8gY2xvc2UnKTtcbiAgICBzZWxmLnRyYW5zcG9ydC5jbG9zZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW51cEFuZENsb3NlICgpIHtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlJywgY2xlYW51cEFuZENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIGNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiB3YWl0Rm9yVXBncmFkZSAoKSB7XG4gICAgLy8gd2FpdCBmb3IgdXBncmFkZSB0byBmaW5pc2ggc2luY2Ugd2UgY2FuJ3Qgc2VuZCBwYWNrZXRzIHdoaWxlIHBhdXNpbmcgYSB0cmFuc3BvcnRcbiAgICBzZWxmLm9uY2UoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYub25jZSgndXBncmFkZUVycm9yJywgY2xlYW51cEFuZENsb3NlKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgZXJyb3JcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIGRlYnVnKCdzb2NrZXQgZXJyb3IgJWonLCBlcnIpO1xuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLm9uQ2xvc2UoJ3RyYW5zcG9ydCBlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAocmVhc29uLCBkZXNjKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgY2xvc2Ugd2l0aCByZWFzb246IFwiJXNcIicsIHJlYXNvbik7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gY2xlYXIgdGltZXJzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ0ludGVydmFsVGltZXIpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuXG4gICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCdjbG9zZScpO1xuXG4gICAgLy8gZW5zdXJlIHRyYW5zcG9ydCB3b24ndCBzdGF5IG9wZW5cbiAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuXG4gICAgLy8gaWdub3JlIGZ1cnRoZXIgdHJhbnNwb3J0IGNvbW11bmljYXRpb25cbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblxuICAgIC8vIHNldCByZWFkeSBzdGF0ZVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuXG4gICAgLy8gY2xlYXIgc2Vzc2lvbiBpZFxuICAgIHRoaXMuaWQgPSBudWxsO1xuXG4gICAgLy8gZW1pdCBjbG9zZSBldmVudFxuICAgIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24sIGRlc2MpO1xuXG4gICAgLy8gY2xlYW4gYnVmZmVycyBhZnRlciwgc28gdXNlcnMgY2FuIHN0aWxsXG4gICAgLy8gZ3JhYiB0aGUgYnVmZmVycyBvbiBgY2xvc2VgIGV2ZW50XG4gICAgc2VsZi53cml0ZUJ1ZmZlciA9IFtdO1xuICAgIHNlbGYucHJldkJ1ZmZlckxlbiA9IDA7XG4gIH1cbn07XG5cbi8qKlxuICogRmlsdGVycyB1cGdyYWRlcywgcmV0dXJuaW5nIG9ubHkgdGhvc2UgbWF0Y2hpbmcgY2xpZW50IHRyYW5zcG9ydHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2VydmVyIHVwZ3JhZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5maWx0ZXJVcGdyYWRlcyA9IGZ1bmN0aW9uICh1cGdyYWRlcykge1xuICB2YXIgZmlsdGVyZWRVcGdyYWRlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgaiA9IHVwZ3JhZGVzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGlmICh+aW5kZXgodGhpcy50cmFuc3BvcnRzLCB1cGdyYWRlc1tpXSkpIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGZpbHRlcmVkVXBncmFkZXM7XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnQ7XG5cbi8qKlxuICogVHJhbnNwb3J0IGFic3RyYWN0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gVHJhbnNwb3J0IChvcHRzKSB7XG4gIHRoaXMucGF0aCA9IG9wdHMucGF0aDtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWU7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydDtcbiAgdGhpcy5zZWN1cmUgPSBvcHRzLnNlY3VyZTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9IG9wdHMuZm9yY2VOb2RlO1xuXG4gIC8vIHJlc3VsdHMgb2YgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnQgZGV0ZWN0aW9uXG4gIHRoaXMuaXNSZWFjdE5hdGl2ZSA9IG9wdHMuaXNSZWFjdE5hdGl2ZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihUcmFuc3BvcnQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBFbWl0cyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCBkZXNjKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgZXJyLnR5cGUgPSAnVHJhbnNwb3J0RXJyb3InO1xuICBlcnIuZGVzY3JpcHRpb24gPSBkZXNjO1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE9wZW5zIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gICAgdGhpcy5kb09wZW4oKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLmRvQ2xvc2UoKTtcbiAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgbm90IG9wZW4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBvcGVuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBwYWNrZXQgPSBwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpO1xuICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGEgZGVjb2RlZCBwYWNrZXQuXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgWEhSID0gcmVxdWlyZSgnLi9wb2xsaW5nLXhocicpO1xudmFyIEpTT05QID0gcmVxdWlyZSgnLi9wb2xsaW5nLWpzb25wJyk7XG52YXIgd2Vic29ja2V0ID0gcmVxdWlyZSgnLi93ZWJzb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnQgdHJhbnNwb3J0cy5cbiAqL1xuXG5leHBvcnRzLnBvbGxpbmcgPSBwb2xsaW5nO1xuZXhwb3J0cy53ZWJzb2NrZXQgPSB3ZWJzb2NrZXQ7XG5cbi8qKlxuICogUG9sbGluZyB0cmFuc3BvcnQgcG9seW1vcnBoaWMgY29uc3RydWN0b3IuXG4gKiBEZWNpZGVzIG9uIHhociB2cyBqc29ucCBiYXNlZCBvbiBmZWF0dXJlIGRldGVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb2xsaW5nIChvcHRzKSB7XG4gIHZhciB4aHI7XG4gIHZhciB4ZCA9IGZhbHNlO1xuICB2YXIgeHMgPSBmYWxzZTtcbiAgdmFyIGpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgeGQgPSBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSB8fCBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgeHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cblxuICBvcHRzLnhkb21haW4gPSB4ZDtcbiAgb3B0cy54c2NoZW1lID0geHM7XG4gIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcblxuICBpZiAoJ29wZW4nIGluIHhociAmJiAhb3B0cy5mb3JjZUpTT05QKSB7XG4gICAgcmV0dXJuIG5ldyBYSFIob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFqc29ucCkgdGhyb3cgbmV3IEVycm9yKCdKU09OUCBkaXNhYmxlZCcpO1xuICAgIHJldHVybiBuZXcgSlNPTlAob3B0cyk7XG4gIH1cbn1cbiIsIi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gSlNPTlBQb2xsaW5nO1xuXG4vKipcbiAqIENhY2hlZCByZWd1bGFyIGV4cHJlc3Npb25zLlxuICovXG5cbnZhciByTmV3bGluZSA9IC9cXG4vZztcbnZhciByRXNjYXBlZE5ld2xpbmUgPSAvXFxcXG4vZztcblxuLyoqXG4gKiBHbG9iYWwgSlNPTlAgY2FsbGJhY2tzLlxuICovXG5cbnZhciBjYWxsYmFja3M7XG5cbi8qKlxuICogTm9vcC5cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7IH1cblxuLyoqXG4gKiBVbnRpbCBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWwgaXMgc2hpcHBlZC5cbiAqL1xuZnVuY3Rpb24gZ2xvYiAoKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmXG4gICAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93XG4gICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG59XG5cbi8qKlxuICogSlNPTlAgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gSlNPTlBQb2xsaW5nIChvcHRzKSB7XG4gIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTtcblxuICB0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcblxuICAvLyBkZWZpbmUgZ2xvYmFsIGNhbGxiYWNrcyBhcnJheSBpZiBub3QgcHJlc2VudFxuICAvLyB3ZSBkbyB0aGlzIGhlcmUgKGxhemlseSkgdG8gYXZvaWQgdW5uZWVkZWQgZ2xvYmFsIHBvbGx1dGlvblxuICBpZiAoIWNhbGxiYWNrcykge1xuICAgIC8vIHdlIG5lZWQgdG8gY29uc2lkZXIgbXVsdGlwbGUgZW5naW5lcyBpbiB0aGUgc2FtZSBwYWdlXG4gICAgdmFyIGdsb2JhbCA9IGdsb2IoKTtcbiAgICBjYWxsYmFja3MgPSBnbG9iYWwuX19fZWlvID0gKGdsb2JhbC5fX19laW8gfHwgW10pO1xuICB9XG5cbiAgLy8gY2FsbGJhY2sgaWRlbnRpZmllclxuICB0aGlzLmluZGV4ID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAvLyBhZGQgY2FsbGJhY2sgdG8ganNvbnAgZ2xvYmFsXG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKG1zZykge1xuICAgIHNlbGYub25EYXRhKG1zZyk7XG4gIH0pO1xuXG4gIC8vIGFwcGVuZCB0byBxdWVyeSBzdHJpbmdcbiAgdGhpcy5xdWVyeS5qID0gdGhpcy5pbmRleDtcblxuICAvLyBwcmV2ZW50IHNwdXJpb3VzIGVycm9ycyBmcm9tIGJlaW5nIGVtaXR0ZWQgd2hlbiB0aGUgd2luZG93IGlzIHVubG9hZGVkXG4gIGlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLnNjcmlwdCkgc2VsZi5zY3JpcHQub25lcnJvciA9IGVtcHR5O1xuICAgIH0sIGZhbHNlKTtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy5cbiAqL1xuXG5pbmhlcml0KEpTT05QUG9sbGluZywgUG9sbGluZyk7XG5cbi8qXG4gKiBKU09OUCBvbmx5IHN1cHBvcnRzIGJpbmFyeSBhcyBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuXG4vKipcbiAqIENsb3NlcyB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7XG4gICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICB9XG5cbiAgaWYgKHRoaXMuZm9ybSkge1xuICAgIHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSk7XG4gICAgdGhpcy5mb3JtID0gbnVsbDtcbiAgICB0aGlzLmlmcmFtZSA9IG51bGw7XG4gIH1cblxuICBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gIHNjcmlwdC5zcmMgPSB0aGlzLnVyaSgpO1xuICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsIGVycm9yJywgZSk7XG4gIH07XG5cbiAgdmFyIGluc2VydEF0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICBpZiAoaW5zZXJ0QXQpIHtcbiAgICBpbnNlcnRBdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGluc2VydEF0KTtcbiAgfSBlbHNlIHtcbiAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICB9XG4gIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuXG4gIHZhciBpc1VBZ2Vja28gPSAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG5hdmlnYXRvciAmJiAvZ2Vja28vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gIGlmIChpc1VBZ2Vja28pIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICB9LCAxMDApO1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlcyB3aXRoIGEgaGlkZGVuIGlmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICB2YXIgYXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdmFyIGlkID0gdGhpcy5pZnJhbWVJZCA9ICdlaW9faWZyYW1lXycgKyB0aGlzLmluZGV4O1xuICAgIHZhciBpZnJhbWU7XG5cbiAgICBmb3JtLmNsYXNzTmFtZSA9ICdzb2NrZXRpbyc7XG4gICAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZm9ybS5zdHlsZS50b3AgPSAnLTEwMDBweCc7XG4gICAgZm9ybS5zdHlsZS5sZWZ0ID0gJy0xMDAwcHgnO1xuICAgIGZvcm0udGFyZ2V0ID0gaWQ7XG4gICAgZm9ybS5tZXRob2QgPSAnUE9TVCc7XG4gICAgZm9ybS5zZXRBdHRyaWJ1dGUoJ2FjY2VwdC1jaGFyc2V0JywgJ3V0Zi04Jyk7XG4gICAgYXJlYS5uYW1lID0gJ2QnO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoYXJlYSk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgdGhpcy5hcmVhID0gYXJlYTtcbiAgfVxuXG4gIHRoaXMuZm9ybS5hY3Rpb24gPSB0aGlzLnVyaSgpO1xuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlICgpIHtcbiAgICBpbml0SWZyYW1lKCk7XG4gICAgZm4oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRJZnJhbWUgKCkge1xuICAgIGlmIChzZWxmLmlmcmFtZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2VsZi5mb3JtLnJlbW92ZUNoaWxkKHNlbGYuaWZyYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsaW5nIGlmcmFtZSByZW1vdmFsIGVycm9yJywgZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9XCJcIiBzdXBwb3J0ICh0aGFua3MgQ2hyaXMgTGFtYmFjaGVyKVxuICAgICAgdmFyIGh0bWwgPSAnPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OjBcIiBuYW1lPVwiJyArIHNlbGYuaWZyYW1lSWQgKyAnXCI+JztcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaHRtbCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBpZnJhbWUubmFtZSA9IHNlbGYuaWZyYW1lSWQ7XG4gICAgICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6MCc7XG4gICAgfVxuXG4gICAgaWZyYW1lLmlkID0gc2VsZi5pZnJhbWVJZDtcblxuICAgIHNlbGYuZm9ybS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIHNlbGYuaWZyYW1lID0gaWZyYW1lO1xuICB9XG5cbiAgaW5pdElmcmFtZSgpO1xuXG4gIC8vIGVzY2FwZSBcXG4gdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGNvbnZlcnRlZCBpbnRvIFxcclxcbiBieSBzb21lIFVBc1xuICAvLyBkb3VibGUgZXNjYXBpbmcgaXMgcmVxdWlyZWQgZm9yIGVzY2FwZWQgbmV3IGxpbmVzIGJlY2F1c2UgdW5lc2NhcGluZyBvZiBuZXcgbGluZXMgY2FuIGJlIGRvbmUgc2FmZWx5IG9uIHNlcnZlci1zaWRlXG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UockVzY2FwZWROZXdsaW5lLCAnXFxcXFxcbicpO1xuICB0aGlzLmFyZWEudmFsdWUgPSBkYXRhLnJlcGxhY2Uock5ld2xpbmUsICdcXFxcbicpO1xuXG4gIHRyeSB7XG4gICAgdGhpcy5mb3JtLnN1Ym1pdCgpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIGlmICh0aGlzLmlmcmFtZS5hdHRhY2hFdmVudCkge1xuICAgIHRoaXMuaWZyYW1lLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmlmcmFtZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlmcmFtZS5vbmxvYWQgPSBjb21wbGV0ZTtcbiAgfVxufTtcbiIsIi8qIGdsb2JhbCBhdHRhY2hFdmVudCAqL1xuXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nLXhocicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gWEhSO1xubW9kdWxlLmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5cbi8qKlxuICogRW1wdHkgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7fVxuXG4vKipcbiAqIFhIUiBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFhIUiAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHRoaXMueGQgPSAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSkgfHxcbiAgICAgIHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICB0aGlzLnhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLlxuICovXG5cbmluaGVyaXQoWEhSLCBQb2xsaW5nKTtcblxuLyoqXG4gKiBYSFIgc3VwcG9ydHMgYmluYXJ5XG4gKi9cblxuWEhSLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIG9wdHMudXJpID0gdGhpcy51cmkoKTtcbiAgb3B0cy54ZCA9IHRoaXMueGQ7XG4gIG9wdHMueHMgPSB0aGlzLnhzO1xuICBvcHRzLmFnZW50ID0gdGhpcy5hZ2VudCB8fCBmYWxzZTtcbiAgb3B0cy5zdXBwb3J0c0JpbmFyeSA9IHRoaXMuc3VwcG9ydHNCaW5hcnk7XG4gIG9wdHMuZW5hYmxlc1hEUiA9IHRoaXMuZW5hYmxlc1hEUjtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIG9wdHMucmVxdWVzdFRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMuZXh0cmFIZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KG9wdHMpO1xufTtcblxuLyoqXG4gKiBTZW5kcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgaXNCaW5hcnkgPSB0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycgJiYgZGF0YSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KHsgbWV0aG9kOiAnUE9TVCcsIGRhdGE6IGRhdGEsIGlzQmluYXJ5OiBpc0JpbmFyeSB9KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ3N1Y2Nlc3MnLCBmbik7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9zdCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnNlbmRYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd4aHIgcG9sbCcpO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVxLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBzZWxmLm9uRGF0YShkYXRhKTtcbiAgfSk7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9sbCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnBvbGxYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFJlcXVlc3QgY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXF1ZXN0IChvcHRzKSB7XG4gIHRoaXMubWV0aG9kID0gb3B0cy5tZXRob2QgfHwgJ0dFVCc7XG4gIHRoaXMudXJpID0gb3B0cy51cmk7XG4gIHRoaXMueGQgPSAhIW9wdHMueGQ7XG4gIHRoaXMueHMgPSAhIW9wdHMueHM7XG4gIHRoaXMuYXN5bmMgPSBmYWxzZSAhPT0gb3B0cy5hc3luYztcbiAgdGhpcy5kYXRhID0gdW5kZWZpbmVkICE9PSBvcHRzLmRhdGEgPyBvcHRzLmRhdGEgOiBudWxsO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudDtcbiAgdGhpcy5pc0JpbmFyeSA9IG9wdHMuaXNCaW5hcnk7XG4gIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBvcHRzLnN1cHBvcnRzQmluYXJ5O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIHRoaXMuY3JlYXRlKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFJlcXVlc3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBYSFIgb2JqZWN0IGFuZCBzZW5kcyB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvcHRzID0geyBhZ2VudDogdGhpcy5hZ2VudCwgeGRvbWFpbjogdGhpcy54ZCwgeHNjaGVtZTogdGhpcy54cywgZW5hYmxlc1hEUjogdGhpcy5lbmFibGVzWERSIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIHZhciB4aHIgPSB0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRyeSB7XG4gICAgZGVidWcoJ3hociBvcGVuICVzOiAlcycsIHRoaXMubWV0aG9kLCB0aGlzLnVyaSk7XG4gICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJpLCB0aGlzLmFzeW5jKTtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sgJiYgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayh0cnVlKTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaSwgdGhpcy5leHRyYUhlYWRlcnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICBpZiAoJ1BPU1QnID09PSB0aGlzLm1ldGhvZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuaXNCaW5hcnkpIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnKi8qJyk7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIC8vIGllNiBjaGVja1xuICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlcXVlc3RUaW1lb3V0KSB7XG4gICAgICB4aHIudGltZW91dCA9IHRoaXMucmVxdWVzdFRpbWVvdXQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICB9O1xuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25FcnJvcih4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gMikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgICAgICAgaWYgKHNlbGYuc3VwcG9ydHNCaW5hcnkgJiYgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSB7XG4gICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDQgIT09IHhoci5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMgfHwgMTIyMyA9PT0geGhyLnN0YXR1cykge1xuICAgICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBgZXJyb3JgIGV2ZW50IGhhbmRsZXIgdGhhdCdzIHVzZXItc2V0XG4gICAgICAgICAgLy8gZG9lcyBub3QgdGhyb3cgaW4gdGhlIHNhbWUgdGljayBhbmQgZ2V0cyBjYXVnaHQgaGVyZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbkVycm9yKHhoci5zdGF0dXMpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGRlYnVnKCd4aHIgZGF0YSAlcycsIHRoaXMuZGF0YSk7XG4gICAgeGhyLnNlbmQodGhpcy5kYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmaHJvbSB0aGUgY29uc3RydWN0b3JcbiAgICAvLyBhbmQgdGh1cyB0aGUgJ2Vycm9yJyBldmVudCBjYW4gb25seSBiZSBvbmx5IGJvdW5kICphZnRlciogdGhpcyBleGNlcHRpb25cbiAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYub25FcnJvcihlKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuaW5kZXggPSBSZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztcbiAgICBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdID0gdGhpcztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlc3BvbnNlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdzdWNjZXNzJyk7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgaWYgd2UgaGF2ZSBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnZGF0YScsIGRhdGEpO1xuICB0aGlzLm9uU3VjY2VzcygpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5jbGVhbnVwKHRydWUpO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgaG91c2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uIChmcm9tRXJyb3IpIHtcbiAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgdGhpcy54aHIgfHwgbnVsbCA9PT0gdGhpcy54aHIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8geG1saHR0cHJlcXVlc3RcbiAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICB0aGlzLnhoci5vbmxvYWQgPSB0aGlzLnhoci5vbmVycm9yID0gZW1wdHk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gIH1cblxuICBpZiAoZnJvbUVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGVsZXRlIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF07XG4gIH1cblxuICB0aGlzLnhociA9IG51bGw7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGxvYWQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25Mb2FkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZGF0YTtcbiAgdHJ5IHtcbiAgICB2YXIgY29udGVudFR5cGU7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnRlbnRUeXBlID0gdGhpcy54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgaWYgKGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJykge1xuICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlIHx8IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLm9uRXJyb3IoZSk7XG4gIH1cbiAgaWYgKG51bGwgIT0gZGF0YSkge1xuICAgIHRoaXMub25EYXRhKGRhdGEpO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGl0IGhhcyBYRG9tYWluUmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5oYXNYRFIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgWERvbWFpblJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmICF0aGlzLnhzICYmIHRoaXMuZW5hYmxlc1hEUjtcbn07XG5cbi8qKlxuICogQWJvcnRzIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgcGVuZGluZyByZXF1ZXN0cyB3aGVuIHVubG9hZGluZyB0aGUgd2luZG93LiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50XG4gKiBtZW1vcnkgbGVha3MgKGUuZy4gd2hlbiB1c2luZyBJRSkgYW5kIHRvIGVuc3VyZSB0aGF0IG5vIHNwdXJpb3VzIGVycm9yIGlzXG4gKiBlbWl0dGVkLlxuICovXG5cblJlcXVlc3QucmVxdWVzdHNDb3VudCA9IDA7XG5SZXF1ZXN0LnJlcXVlc3RzID0ge307XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gIGlmICh0eXBlb2YgYXR0YWNoRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhdHRhY2hFdmVudCgnb251bmxvYWQnLCB1bmxvYWRIYW5kbGVyKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciB0ZXJtaW5hdGlvbkV2ZW50ID0gJ29ucGFnZWhpZGUnIGluIHNlbGYgPyAncGFnZWhpZGUnIDogJ3VubG9hZCc7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcih0ZXJtaW5hdGlvbkV2ZW50LCB1bmxvYWRIYW5kbGVyLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5sb2FkSGFuZGxlciAoKSB7XG4gIGZvciAodmFyIGkgaW4gUmVxdWVzdC5yZXF1ZXN0cykge1xuICAgIGlmIChSZXF1ZXN0LnJlcXVlc3RzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBSZXF1ZXN0LnJlcXVlc3RzW2ldLmFib3J0KCk7XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4uL3RyYW5zcG9ydCcpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIHllYXN0ID0gcmVxdWlyZSgneWVhc3QnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6cG9sbGluZycpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUG9sbGluZztcblxuLyoqXG4gKiBJcyBYSFIyIHN1cHBvcnRlZD9cbiAqL1xuXG52YXIgaGFzWEhSMiA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xuICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KHsgeGRvbWFpbjogZmFsc2UgfSk7XG4gIHJldHVybiBudWxsICE9IHhoci5yZXNwb25zZVR5cGU7XG59KSgpO1xuXG4vKipcbiAqIFBvbGxpbmcgaW50ZXJmYWNlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBQb2xsaW5nIChvcHRzKSB7XG4gIHZhciBmb3JjZUJhc2U2NCA9IChvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQpO1xuICBpZiAoIWhhc1hIUjIgfHwgZm9yY2VCYXNlNjQpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cbiAgVHJhbnNwb3J0LmNhbGwodGhpcywgb3B0cyk7XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBUcmFuc3BvcnQuXG4gKi9cblxuaW5oZXJpdChQb2xsaW5nLCBUcmFuc3BvcnQpO1xuXG4vKipcbiAqIFRyYW5zcG9ydCBuYW1lLlxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLm5hbWUgPSAncG9sbGluZyc7XG5cbi8qKlxuICogT3BlbnMgdGhlIHNvY2tldCAodHJpZ2dlcnMgcG9sbGluZykuIFdlIHdyaXRlIGEgUElORyBtZXNzYWdlIHRvIGRldGVybWluZVxuICogd2hlbiB0aGUgdHJhbnNwb3J0IGlzIG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9PcGVuID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnBvbGwoKTtcbn07XG5cbi8qKlxuICogUGF1c2VzIHBvbGxpbmcuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdXBvbiBidWZmZXJzIGFyZSBmbHVzaGVkIGFuZCB0cmFuc3BvcnQgaXMgcGF1c2VkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChvblBhdXNlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLnJlYWR5U3RhdGUgPSAncGF1c2luZyc7XG5cbiAgZnVuY3Rpb24gcGF1c2UgKCkge1xuICAgIGRlYnVnKCdwYXVzZWQnKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAncGF1c2VkJztcbiAgICBvblBhdXNlKCk7XG4gIH1cblxuICBpZiAodGhpcy5wb2xsaW5nIHx8ICF0aGlzLndyaXRhYmxlKSB7XG4gICAgdmFyIHRvdGFsID0gMDtcblxuICAgIGlmICh0aGlzLnBvbGxpbmcpIHtcbiAgICAgIGRlYnVnKCd3ZSBhcmUgY3VycmVudGx5IHBvbGxpbmcgLSB3YWl0aW5nIHRvIHBhdXNlJyk7XG4gICAgICB0b3RhbCsrO1xuICAgICAgdGhpcy5vbmNlKCdwb2xsQ29tcGxldGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlYnVnKCdwcmUtcGF1c2UgcG9sbGluZyBjb21wbGV0ZScpO1xuICAgICAgICAtLXRvdGFsIHx8IHBhdXNlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMud3JpdGFibGUpIHtcbiAgICAgIGRlYnVnKCd3ZSBhcmUgY3VycmVudGx5IHdyaXRpbmcgLSB3YWl0aW5nIHRvIHBhdXNlJyk7XG4gICAgICB0b3RhbCsrO1xuICAgICAgdGhpcy5vbmNlKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSB3cml0aW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwYXVzZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBwb2xsaW5nIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUucG9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3BvbGxpbmcnKTtcbiAgdGhpcy5wb2xsaW5nID0gdHJ1ZTtcbiAgdGhpcy5kb1BvbGwoKTtcbiAgdGhpcy5lbWl0KCdwb2xsJyk7XG59O1xuXG4vKipcbiAqIE92ZXJsb2FkcyBvbkRhdGEgdG8gZGV0ZWN0IHBheWxvYWRzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgZGVidWcoJ3BvbGxpbmcgZ290IGRhdGEgJXMnLCBkYXRhKTtcbiAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKHBhY2tldCwgaW5kZXgsIHRvdGFsKSB7XG4gICAgLy8gaWYgaXRzIHRoZSBmaXJzdCBtZXNzYWdlIHdlIGNvbnNpZGVyIHRoZSB0cmFuc3BvcnQgb3BlblxuICAgIGlmICgnb3BlbmluZycgPT09IHNlbGYucmVhZHlTdGF0ZSkge1xuICAgICAgc2VsZi5vbk9wZW4oKTtcbiAgICB9XG5cbiAgICAvLyBpZiBpdHMgYSBjbG9zZSBwYWNrZXQsIHdlIGNsb3NlIHRoZSBvbmdvaW5nIHJlcXVlc3RzXG4gICAgaWYgKCdjbG9zZScgPT09IHBhY2tldC50eXBlKSB7XG4gICAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBvdGhlcndpc2UgYnlwYXNzIG9uRGF0YSBhbmQgaGFuZGxlIHRoZSBtZXNzYWdlXG4gICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICB9O1xuXG4gIC8vIGRlY29kZSBwYXlsb2FkXG4gIHBhcnNlci5kZWNvZGVQYXlsb2FkKGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUsIGNhbGxiYWNrKTtcblxuICAvLyBpZiBhbiBldmVudCBkaWQgbm90IHRyaWdnZXIgY2xvc2luZ1xuICBpZiAoJ2Nsb3NlZCcgIT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGlmIHdlIGdvdCBkYXRhIHdlJ3JlIG5vdCBwb2xsaW5nXG4gICAgdGhpcy5wb2xsaW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwb2xsQ29tcGxldGUnKTtcblxuICAgIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgdGhpcy5wb2xsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnKCdpZ25vcmluZyBwb2xsIC0gdHJhbnNwb3J0IHN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEZvciBwb2xsaW5nLCBzZW5kIGEgY2xvc2UgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBmdW5jdGlvbiBjbG9zZSAoKSB7XG4gICAgZGVidWcoJ3dyaXRpbmcgY2xvc2UgcGFja2V0Jyk7XG4gICAgc2VsZi53cml0ZShbeyB0eXBlOiAnY2xvc2UnIH1dKTtcbiAgfVxuXG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCd0cmFuc3BvcnQgb3BlbiAtIGNsb3NpbmcnKTtcbiAgICBjbG9zZSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGluIGNhc2Ugd2UncmUgdHJ5aW5nIHRvIGNsb3NlIHdoaWxlXG4gICAgLy8gaGFuZHNoYWtpbmcgaXMgaW4gcHJvZ3Jlc3MgKEdILTE2NClcbiAgICBkZWJ1ZygndHJhbnNwb3J0IG5vdCBvcGVuIC0gZGVmZXJyaW5nIGNsb3NlJyk7XG4gICAgdGhpcy5vbmNlKCdvcGVuJywgY2xvc2UpO1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIHBhY2tldHMgcGF5bG9hZC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBkYXRhIHBhY2tldHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRyYWluIGNhbGxiYWNrXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICB2YXIgY2FsbGJhY2tmbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBzZWxmLmVtaXQoJ2RyYWluJyk7XG4gIH07XG5cbiAgcGFyc2VyLmVuY29kZVBheWxvYWQocGFja2V0cywgdGhpcy5zdXBwb3J0c0JpbmFyeSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBzZWxmLmRvV3JpdGUoZGF0YSwgY2FsbGJhY2tmbik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnVyaSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgdmFyIHNjaGVtYSA9IHRoaXMuc2VjdXJlID8gJ2h0dHBzJyA6ICdodHRwJztcbiAgdmFyIHBvcnQgPSAnJztcblxuICAvLyBjYWNoZSBidXN0aW5nIGlzIGZvcmNlZFxuICBpZiAoZmFsc2UgIT09IHRoaXMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICBxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gIH1cblxuICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkgJiYgIXF1ZXJ5LnNpZCkge1xuICAgIHF1ZXJ5LmI2NCA9IDE7XG4gIH1cblxuICBxdWVyeSA9IHBhcnNlcXMuZW5jb2RlKHF1ZXJ5KTtcblxuICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICBpZiAodGhpcy5wb3J0ICYmICgoJ2h0dHBzJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgICgnaHR0cCcgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gODApKSkge1xuICAgIHBvcnQgPSAnOicgKyB0aGlzLnBvcnQ7XG4gIH1cblxuICAvLyBwcmVwZW5kID8gdG8gcXVlcnlcbiAgaWYgKHF1ZXJ5Lmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gJz8nICsgcXVlcnk7XG4gIH1cblxuICB2YXIgaXB2NiA9IHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpICE9PSAtMTtcbiAgcmV0dXJuIHNjaGVtYSArICc6Ly8nICsgKGlwdjYgPyAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nIDogdGhpcy5ob3N0bmFtZSkgKyBwb3J0ICsgdGhpcy5wYXRoICsgcXVlcnk7XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi90cmFuc3BvcnQnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciB5ZWFzdCA9IHJlcXVpcmUoJ3llYXN0Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OndlYnNvY2tldCcpO1xuXG52YXIgQnJvd3NlcldlYlNvY2tldCwgTm9kZVdlYlNvY2tldDtcblxuaWYgKHR5cGVvZiBXZWJTb2NrZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gIEJyb3dzZXJXZWJTb2NrZXQgPSBXZWJTb2NrZXQ7XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICBCcm93c2VyV2ViU29ja2V0ID0gc2VsZi5XZWJTb2NrZXQgfHwgc2VsZi5Nb3pXZWJTb2NrZXQ7XG59IGVsc2Uge1xuICB0cnkge1xuICAgIE5vZGVXZWJTb2NrZXQgPSByZXF1aXJlKCd3cycpO1xuICB9IGNhdGNoIChlKSB7IH1cbn1cblxuLyoqXG4gKiBHZXQgZWl0aGVyIHRoZSBgV2ViU29ja2V0YCBvciBgTW96V2ViU29ja2V0YCBnbG9iYWxzXG4gKiBpbiB0aGUgYnJvd3NlciBvciB0cnkgdG8gcmVzb2x2ZSBXZWJTb2NrZXQtY29tcGF0aWJsZVxuICogaW50ZXJmYWNlIGV4cG9zZWQgYnkgYHdzYCBmb3IgTm9kZS1saWtlIGVudmlyb25tZW50LlxuICovXG5cbnZhciBXZWJTb2NrZXRJbXBsID0gQnJvd3NlcldlYlNvY2tldCB8fCBOb2RlV2ViU29ja2V0O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gV1M7XG5cbi8qKlxuICogV2ViU29ja2V0IHRyYW5zcG9ydCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHtPYmplY3R9IGNvbm5lY3Rpb24gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBXUyAob3B0cykge1xuICB2YXIgZm9yY2VCYXNlNjQgPSAob3B0cyAmJiBvcHRzLmZvcmNlQmFzZTY0KTtcbiAgaWYgKGZvcmNlQmFzZTY0KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG4gIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlO1xuICB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCA9IEJyb3dzZXJXZWJTb2NrZXQgJiYgIW9wdHMuZm9yY2VOb2RlO1xuICB0aGlzLnByb3RvY29scyA9IG9wdHMucHJvdG9jb2xzO1xuICBpZiAoIXRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgV2ViU29ja2V0SW1wbCA9IE5vZGVXZWJTb2NrZXQ7XG4gIH1cbiAgVHJhbnNwb3J0LmNhbGwodGhpcywgb3B0cyk7XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBUcmFuc3BvcnQuXG4gKi9cblxuaW5oZXJpdChXUywgVHJhbnNwb3J0KTtcblxuLyoqXG4gKiBUcmFuc3BvcnQgbmFtZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbldTLnByb3RvdHlwZS5uYW1lID0gJ3dlYnNvY2tldCc7XG5cbi8qXG4gKiBXZWJTb2NrZXRzIHN1cHBvcnQgYmluYXJ5XG4gKi9cblxuV1MucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcblxuLyoqXG4gKiBPcGVucyBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmRvT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLmNoZWNrKCkpIHtcbiAgICAvLyBsZXQgcHJvYmUgdGltZW91dFxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB1cmkgPSB0aGlzLnVyaSgpO1xuICB2YXIgcHJvdG9jb2xzID0gdGhpcy5wcm90b2NvbHM7XG4gIHZhciBvcHRzID0ge1xuICAgIGFnZW50OiB0aGlzLmFnZW50LFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlXG4gIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuICBpZiAodGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICBvcHRzLmhlYWRlcnMgPSB0aGlzLmV4dHJhSGVhZGVycztcbiAgfVxuICBpZiAodGhpcy5sb2NhbEFkZHJlc3MpIHtcbiAgICBvcHRzLmxvY2FsQWRkcmVzcyA9IHRoaXMubG9jYWxBZGRyZXNzO1xuICB9XG5cbiAgdHJ5IHtcbiAgICB0aGlzLndzID1cbiAgICAgIHRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0ICYmICF0aGlzLmlzUmVhY3ROYXRpdmVcbiAgICAgICAgPyBwcm90b2NvbHNcbiAgICAgICAgICA/IG5ldyBXZWJTb2NrZXRJbXBsKHVyaSwgcHJvdG9jb2xzKVxuICAgICAgICAgIDogbmV3IFdlYlNvY2tldEltcGwodXJpKVxuICAgICAgICA6IG5ldyBXZWJTb2NrZXRJbXBsKHVyaSwgcHJvdG9jb2xzLCBvcHRzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG5cbiAgaWYgKHRoaXMud3MuYmluYXJ5VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMud3Muc3VwcG9ydHMgJiYgdGhpcy53cy5zdXBwb3J0cy5iaW5hcnkpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcbiAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnbm9kZWJ1ZmZlcic7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgfVxuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbn07XG5cbi8qKlxuICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIHNvY2tldFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMud3Mub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25PcGVuKCk7XG4gIH07XG4gIHRoaXMud3Mub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgfTtcbiAgdGhpcy53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICBzZWxmLm9uRGF0YShldi5kYXRhKTtcbiAgfTtcbiAgdGhpcy53cy5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3dlYnNvY2tldCBlcnJvcicsIGUpO1xuICB9O1xufTtcblxuLyoqXG4gKiBXcml0ZXMgZGF0YSB0byBzb2NrZXQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgb2YgcGFja2V0cy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIC8vIGVuY29kZVBhY2tldCBlZmZpY2llbnQgYXMgaXQgdXNlcyBXUyBmcmFtaW5nXG4gIC8vIG5vIG5lZWQgZm9yIGVuY29kZVBheWxvYWRcbiAgdmFyIHRvdGFsID0gcGFja2V0cy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdG90YWw7IGkgPCBsOyBpKyspIHtcbiAgICAoZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgcGFyc2VyLmVuY29kZVBhY2tldChwYWNrZXQsIHNlbGYuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICghc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAvLyBhbHdheXMgY3JlYXRlIGEgbmV3IG9iamVjdCAoR0gtNDM3KVxuICAgICAgICAgIHZhciBvcHRzID0ge307XG4gICAgICAgICAgaWYgKHBhY2tldC5vcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gcGFja2V0Lm9wdGlvbnMuY29tcHJlc3M7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSAnc3RyaW5nJyA9PT0gdHlwZW9mIGRhdGEgPyBCdWZmZXIuYnl0ZUxlbmd0aChkYXRhKSA6IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGxlbiA8IHNlbGYucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb21ldGltZXMgdGhlIHdlYnNvY2tldCBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZCBidXQgdGhlIGJyb3dzZXIgZGlkbid0XG4gICAgICAgIC8vIGhhdmUgYSBjaGFuY2Ugb2YgaW5mb3JtaW5nIHVzIGFib3V0IGl0IHlldCwgaW4gdGhhdCBjYXNlIHNlbmQgd2lsbFxuICAgICAgICAvLyB0aHJvdyBhbiBlcnJvclxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChzZWxmLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgICAgLy8gVHlwZUVycm9yIGlzIHRocm93biB3aGVuIHBhc3NpbmcgdGhlIHNlY29uZCBhcmd1bWVudCBvbiBTYWZhcmlcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEsIG9wdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGRlYnVnKCd3ZWJzb2NrZXQgY2xvc2VkIGJlZm9yZSBvbmNsb3NlIGV2ZW50Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAtLXRvdGFsIHx8IGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pKHBhY2tldHNbaV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZG9uZSAoKSB7XG4gICAgc2VsZi5lbWl0KCdmbHVzaCcpO1xuXG4gICAgLy8gZmFrZSBkcmFpblxuICAgIC8vIGRlZmVyIHRvIG5leHQgdGljayB0byBhbGxvdyBTb2NrZXQgdG8gY2xlYXIgd3JpdGVCdWZmZXJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgICAgc2VsZi5lbWl0KCdkcmFpbicpO1xuICAgIH0sIDApO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGNsb3NlXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIFRyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZS5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIHRoaXMud3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy53cy5jbG9zZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLnVyaSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgdmFyIHNjaGVtYSA9IHRoaXMuc2VjdXJlID8gJ3dzcycgOiAnd3MnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnd3NzJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgKCd3cycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gODApKSkge1xuICAgIHBvcnQgPSAnOicgKyB0aGlzLnBvcnQ7XG4gIH1cblxuICAvLyBhcHBlbmQgdGltZXN0YW1wIHRvIFVSSVxuICBpZiAodGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIC8vIGNvbW11bmljYXRlIGJpbmFyeSBzdXBwb3J0IGNhcGFiaWxpdGllc1xuICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkpIHtcbiAgICBxdWVyeS5iNjQgPSAxO1xuICB9XG5cbiAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgLy8gcHJlcGVuZCA/IHRvIHF1ZXJ5XG4gIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9ICc/JyArIHF1ZXJ5O1xuICB9XG5cbiAgdmFyIGlwdjYgPSB0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHJldHVybiBzY2hlbWEgKyAnOi8vJyArIChpcHY2ID8gJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyA6IHRoaXMuaG9zdG5hbWUpICsgcG9ydCArIHRoaXMucGF0aCArIHF1ZXJ5O1xufTtcblxuLyoqXG4gKiBGZWF0dXJlIGRldGVjdGlvbiBmb3IgV2ViU29ja2V0LlxuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHdoZXRoZXIgdGhpcyB0cmFuc3BvcnQgaXMgYXZhaWxhYmxlLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5XUy5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIVdlYlNvY2tldEltcGwgJiYgISgnX19pbml0aWFsaXplJyBpbiBXZWJTb2NrZXRJbXBsICYmIHRoaXMubmFtZSA9PT0gV1MucHJvdG90eXBlLm5hbWUpO1xufTtcbiIsIi8vIGJyb3dzZXIgc2hpbSBmb3IgeG1saHR0cHJlcXVlc3QgbW9kdWxlXG5cbnZhciBoYXNDT1JTID0gcmVxdWlyZSgnaGFzLWNvcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgeGRvbWFpbiA9IG9wdHMueGRvbWFpbjtcblxuICAvLyBzY2hlbWUgbXVzdCBiZSBzYW1lIHdoZW4gdXNpZ24gWERvbWFpblJlcXVlc3RcbiAgLy8gaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWVpbnRlcm5hbHMvYXJjaGl2ZS8yMDEwLzA1LzEzL3hkb21haW5yZXF1ZXN0LXJlc3RyaWN0aW9ucy1saW1pdGF0aW9ucy1hbmQtd29ya2Fyb3VuZHMuYXNweFxuICB2YXIgeHNjaGVtZSA9IG9wdHMueHNjaGVtZTtcblxuICAvLyBYRG9tYWluUmVxdWVzdCBoYXMgYSBmbG93IG9mIG5vdCBzZW5kaW5nIGNvb2tpZSwgdGhlcmVmb3JlIGl0IHNob3VsZCBiZSBkaXNhYmxlZCBhcyBhIGRlZmF1bHQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2VuZ2luZS5pby1jbGllbnQvcHVsbC8yMTdcbiAgdmFyIGVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gWE1MSHR0cFJlcXVlc3QgY2FuIGJlIGRpc2FibGVkIG9uIElFXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgJiYgKCF4ZG9tYWluIHx8IGhhc0NPUlMpKSB7XG4gICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICAvLyBVc2UgWERvbWFpblJlcXVlc3QgZm9yIElFOCBpZiBlbmFibGVzWERSIGlzIHRydWVcbiAgLy8gYmVjYXVzZSBsb2FkaW5nIGJhciBrZWVwcyBmbGFzaGluZyB3aGVuIHVzaW5nIGpzb25wLXBvbGxpbmdcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3l1amlvc2FrYS9zb2NrZS5pby1pZTgtbG9hZGluZy1leGFtcGxlXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWERvbWFpblJlcXVlc3QgJiYgIXhzY2hlbWUgJiYgZW5hYmxlc1hEUikge1xuICAgICAgcmV0dXJuIG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkgeyB9XG5cbiAgaWYgKCF4ZG9tYWluKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgc2VsZltbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpXSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgICB9IGNhdGNoIChlKSB7IH1cbiAgfVxufTtcbiIsIi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZVxuICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlXG4gICAgICAgICAgICAgICAgICA/IGNocm9tZS5zdG9yYWdlLmxvY2FsXG4gICAgICAgICAgICAgICAgICA6IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcbiAgJyMwMDAwQ0MnLCAnIzAwMDBGRicsICcjMDAzM0NDJywgJyMwMDMzRkYnLCAnIzAwNjZDQycsICcjMDA2NkZGJywgJyMwMDk5Q0MnLFxuICAnIzAwOTlGRicsICcjMDBDQzAwJywgJyMwMENDMzMnLCAnIzAwQ0M2NicsICcjMDBDQzk5JywgJyMwMENDQ0MnLCAnIzAwQ0NGRicsXG4gICcjMzMwMENDJywgJyMzMzAwRkYnLCAnIzMzMzNDQycsICcjMzMzM0ZGJywgJyMzMzY2Q0MnLCAnIzMzNjZGRicsICcjMzM5OUNDJyxcbiAgJyMzMzk5RkYnLCAnIzMzQ0MwMCcsICcjMzNDQzMzJywgJyMzM0NDNjYnLCAnIzMzQ0M5OScsICcjMzNDQ0NDJywgJyMzM0NDRkYnLFxuICAnIzY2MDBDQycsICcjNjYwMEZGJywgJyM2NjMzQ0MnLCAnIzY2MzNGRicsICcjNjZDQzAwJywgJyM2NkNDMzMnLCAnIzk5MDBDQycsXG4gICcjOTkwMEZGJywgJyM5OTMzQ0MnLCAnIzk5MzNGRicsICcjOTlDQzAwJywgJyM5OUNDMzMnLCAnI0NDMDAwMCcsICcjQ0MwMDMzJyxcbiAgJyNDQzAwNjYnLCAnI0NDMDA5OScsICcjQ0MwMENDJywgJyNDQzAwRkYnLCAnI0NDMzMwMCcsICcjQ0MzMzMzJywgJyNDQzMzNjYnLFxuICAnI0NDMzM5OScsICcjQ0MzM0NDJywgJyNDQzMzRkYnLCAnI0NDNjYwMCcsICcjQ0M2NjMzJywgJyNDQzk5MDAnLCAnI0NDOTkzMycsXG4gICcjQ0NDQzAwJywgJyNDQ0NDMzMnLCAnI0ZGMDAwMCcsICcjRkYwMDMzJywgJyNGRjAwNjYnLCAnI0ZGMDA5OScsICcjRkYwMENDJyxcbiAgJyNGRjAwRkYnLCAnI0ZGMzMwMCcsICcjRkYzMzMzJywgJyNGRjMzNjYnLCAnI0ZGMzM5OScsICcjRkYzM0NDJywgJyNGRjMzRkYnLFxuICAnI0ZGNjYwMCcsICcjRkY2NjMzJywgJyNGRjk5MDAnLCAnI0ZGOTkzMycsICcjRkZDQzAwJywgJyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiB3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG4gIHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuICAgIC8vIGRvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnIubWVzc2FnZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm47XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKVxuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cblxuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydHMuaW5zdGFuY2VzID0gW107XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIHZhciBwcmV2VGltZTtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcbiAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgZXhwb3J0cy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdmFyIGluZGV4ID0gZXhwb3J0cy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGV4cG9ydHMuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIGk7XG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBleHBvcnRzLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbnN0YW5jZSA9IGV4cG9ydHMuaW5zdGFuY2VzW2ldO1xuICAgIGluc3RhbmNlLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcbnZhciBoYXNCaW5hcnkgPSByZXF1aXJlKCdoYXMtYmluYXJ5MicpO1xudmFyIHNsaWNlQnVmZmVyID0gcmVxdWlyZSgnYXJyYXlidWZmZXIuc2xpY2UnKTtcbnZhciBhZnRlciA9IHJlcXVpcmUoJ2FmdGVyJyk7XG52YXIgdXRmOCA9IHJlcXVpcmUoJy4vdXRmOCcpO1xuXG52YXIgYmFzZTY0ZW5jb2RlcjtcbmlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gIGJhc2U2NGVuY29kZXIgPSByZXF1aXJlKCdiYXNlNjQtYXJyYXlidWZmZXInKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB3ZSBhcmUgcnVubmluZyBhbiBhbmRyb2lkIGJyb3dzZXIuIFRoYXQgcmVxdWlyZXMgdXMgdG8gdXNlXG4gKiBBcnJheUJ1ZmZlciB3aXRoIHBvbGxpbmcgdHJhbnNwb3J0cy4uLlxuICpcbiAqIGh0dHA6Ly9naGluZGEubmV0L2pwZWctYmxvYi1hamF4LWFuZHJvaWQvXG4gKi9cblxudmFyIGlzQW5kcm9pZCA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9BbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBDaGVjayBpZiB3ZSBhcmUgcnVubmluZyBpbiBQaGFudG9tSlMuXG4gKiBVcGxvYWRpbmcgYSBCbG9iIHdpdGggUGhhbnRvbUpTIGRvZXMgbm90IHdvcmsgY29ycmVjdGx5LCBhcyByZXBvcnRlZCBoZXJlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2FyaXlhL3BoYW50b21qcy9pc3N1ZXMvMTEzOTVcbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xudmFyIGlzUGhhbnRvbUpTID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL1BoYW50b21KUy9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogV2hlbiB0cnVlLCBhdm9pZHMgdXNpbmcgQmxvYnMgdG8gZW5jb2RlIHBheWxvYWRzLlxuICogQHR5cGUgYm9vbGVhblxuICovXG52YXIgZG9udFNlbmRCbG9icyA9IGlzQW5kcm9pZCB8fCBpc1BoYW50b21KUztcblxuLyoqXG4gKiBDdXJyZW50IHByb3RvY29sIHZlcnNpb24uXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IDM7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzLlxuICovXG5cbnZhciBwYWNrZXRzID0gZXhwb3J0cy5wYWNrZXRzID0ge1xuICAgIG9wZW46ICAgICAwICAgIC8vIG5vbi13c1xuICAsIGNsb3NlOiAgICAxICAgIC8vIG5vbi13c1xuICAsIHBpbmc6ICAgICAyXG4gICwgcG9uZzogICAgIDNcbiAgLCBtZXNzYWdlOiAgNFxuICAsIHVwZ3JhZGU6ICA1XG4gICwgbm9vcDogICAgIDZcbn07XG5cbnZhciBwYWNrZXRzbGlzdCA9IGtleXMocGFja2V0cyk7XG5cbi8qKlxuICogUHJlbWFkZSBlcnJvciBwYWNrZXQuXG4gKi9cblxudmFyIGVyciA9IHsgdHlwZTogJ2Vycm9yJywgZGF0YTogJ3BhcnNlciBlcnJvcicgfTtcblxuLyoqXG4gKiBDcmVhdGUgYSBibG9iIGFwaSBldmVuIGZvciBibG9iIGJ1aWxkZXIgd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3RcbiAqL1xuXG52YXIgQmxvYiA9IHJlcXVpcmUoJ2Jsb2InKTtcblxuLyoqXG4gKiBFbmNvZGVzIGEgcGFja2V0LlxuICpcbiAqICAgICA8cGFja2V0IHR5cGUgaWQ+IFsgPGRhdGE+IF1cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICA1aGVsbG8gd29ybGRcbiAqICAgICAzXG4gKiAgICAgNFxuICpcbiAqIEJpbmFyeSBpcyBlbmNvZGVkIGluIGFuIGlkZW50aWNhbCBwcmluY2lwbGVcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCB1dGY4ZW5jb2RlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHN1cHBvcnRzQmluYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBzdXBwb3J0c0JpbmFyeTtcbiAgICBzdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB1dGY4ZW5jb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSB1dGY4ZW5jb2RlO1xuICAgIHV0ZjhlbmNvZGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIGRhdGEgPSAocGFja2V0LmRhdGEgPT09IHVuZGVmaW5lZClcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogcGFja2V0LmRhdGEuYnVmZmVyIHx8IHBhY2tldC5kYXRhO1xuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIGRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gbWlnaHQgYmUgYW4gb2JqZWN0IHdpdGggeyBiYXNlNjQ6IHRydWUsIGRhdGE6IGRhdGFBc0Jhc2U2NFN0cmluZyB9XG4gIGlmIChkYXRhICYmIGRhdGEuYmFzZTY0KSB7XG4gICAgcmV0dXJuIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFNlbmRpbmcgZGF0YSBhcyBhIHV0Zi04IHN0cmluZ1xuICB2YXIgZW5jb2RlZCA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuXG4gIC8vIGRhdGEgZnJhZ21lbnQgaXMgb3B0aW9uYWxcbiAgaWYgKHVuZGVmaW5lZCAhPT0gcGFja2V0LmRhdGEpIHtcbiAgICBlbmNvZGVkICs9IHV0ZjhlbmNvZGUgPyB1dGY4LmVuY29kZShTdHJpbmcocGFja2V0LmRhdGEpLCB7IHN0cmljdDogZmFsc2UgfSkgOiBTdHJpbmcocGFja2V0LmRhdGEpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKCcnICsgZW5jb2RlZCk7XG5cbn07XG5cbmZ1bmN0aW9uIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKSB7XG4gIC8vIHBhY2tldCBkYXRhIGlzIGFuIG9iamVjdCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdICsgcGFja2V0LmRhdGEuZGF0YTtcbiAgcmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpO1xufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgaGVscGVycyBmb3IgYmluYXJ5IHR5cGVzXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBjb250ZW50QXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgdmFyIHJlc3VsdEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDEgKyBkYXRhLmJ5dGVMZW5ndGgpO1xuXG4gIHJlc3VsdEJ1ZmZlclswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRlbnRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdEJ1ZmZlcltpKzFdID0gY29udGVudEFycmF5W2ldO1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEJ1ZmZlci5idWZmZXIpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgZnIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQoeyB0eXBlOiBwYWNrZXQudHlwZSwgZGF0YTogZnIucmVzdWx0IH0sIHN1cHBvcnRzQmluYXJ5LCB0cnVlLCBjYWxsYmFjayk7XG4gIH07XG4gIHJldHVybiBmci5yZWFkQXNBcnJheUJ1ZmZlcihwYWNrZXQuZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmIChkb250U2VuZEJsb2JzKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBuZXcgVWludDhBcnJheSgxKTtcbiAgbGVuZ3RoWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIHZhciBibG9iID0gbmV3IEJsb2IoW2xlbmd0aC5idWZmZXIsIHBhY2tldC5kYXRhXSk7XG5cbiAgcmV0dXJuIGNhbGxiYWNrKGJsb2IpO1xufVxuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQgd2l0aCBiaW5hcnkgZGF0YSBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0LCBoYXMgYHR5cGVgIGFuZCBgZGF0YWBcbiAqIEByZXR1cm4ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBjYWxsYmFjaykge1xuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV07XG4gIGlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgcGFja2V0LmRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiNjQgPSBmci5yZXN1bHQuc3BsaXQoJywnKVsxXTtcbiAgICAgIGNhbGxiYWNrKG1lc3NhZ2UgKyBiNjQpO1xuICAgIH07XG4gICAgcmV0dXJuIGZyLnJlYWRBc0RhdGFVUkwocGFja2V0LmRhdGEpO1xuICB9XG5cbiAgdmFyIGI2NGRhdGE7XG4gIHRyeSB7XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlQaG9uZSBTYWZhcmkgZG9lc24ndCBsZXQgeW91IGFwcGx5IHdpdGggdHlwZWQgYXJyYXlzXG4gICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpO1xuICAgIHZhciBiYXNpYyA9IG5ldyBBcnJheSh0eXBlZC5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJhc2ljW2ldID0gdHlwZWRbaV07XG4gICAgfVxuICAgIGI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJhc2ljKTtcbiAgfVxuICBtZXNzYWdlICs9IGJ0b2EoYjY0ZGF0YSk7XG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldC4gQ2hhbmdlcyBmb3JtYXQgdG8gQmxvYiBpZiByZXF1ZXN0ZWQuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBhY2tldCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCB1dGY4ZGVjb2RlKSB7XG4gIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyO1xuICB9XG4gIC8vIFN0cmluZyBkYXRhXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZGF0YS5jaGFyQXQoMCkgPT09ICdiJykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0KGRhdGEuc3Vic3RyKDEpLCBiaW5hcnlUeXBlKTtcbiAgICB9XG5cbiAgICBpZiAodXRmOGRlY29kZSkge1xuICAgICAgZGF0YSA9IHRyeURlY29kZShkYXRhKTtcbiAgICAgIGlmIChkYXRhID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdHlwZSA9IGRhdGEuY2hhckF0KDApO1xuXG4gICAgaWYgKE51bWJlcih0eXBlKSAhPSB0eXBlIHx8ICFwYWNrZXRzbGlzdFt0eXBlXSkge1xuICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogZGF0YS5zdWJzdHJpbmcoMSkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0gfTtcbiAgICB9XG4gIH1cblxuICB2YXIgYXNBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgdHlwZSA9IGFzQXJyYXlbMF07XG4gIHZhciByZXN0ID0gc2xpY2VCdWZmZXIoZGF0YSwgMSk7XG4gIGlmIChCbG9iICYmIGJpbmFyeVR5cGUgPT09ICdibG9iJykge1xuICAgIHJlc3QgPSBuZXcgQmxvYihbcmVzdF0pO1xuICB9XG4gIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiByZXN0IH07XG59O1xuXG5mdW5jdGlvbiB0cnlEZWNvZGUoZGF0YSkge1xuICB0cnkge1xuICAgIGRhdGEgPSB1dGY4LmRlY29kZShkYXRhLCB7IHN0cmljdDogZmFsc2UgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldCBlbmNvZGVkIGluIGEgYmFzZTY0IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSlcbiAqL1xuXG5leHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKG1zZywgYmluYXJ5VHlwZSkge1xuICB2YXIgdHlwZSA9IHBhY2tldHNsaXN0W21zZy5jaGFyQXQoMCldO1xuICBpZiAoIWJhc2U2NGVuY29kZXIpIHtcbiAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogbXNnLnN1YnN0cigxKSB9IH07XG4gIH1cblxuICB2YXIgZGF0YSA9IGJhc2U2NGVuY29kZXIuZGVjb2RlKG1zZy5zdWJzdHIoMSkpO1xuXG4gIGlmIChiaW5hcnlUeXBlID09PSAnYmxvYicgJiYgQmxvYikge1xuICAgIGRhdGEgPSBuZXcgQmxvYihbZGF0YV0pO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogZGF0YSB9O1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKS5cbiAqXG4gKiAgICAgPGxlbmd0aD46ZGF0YVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDExOmhlbGxvIHdvcmxkMjpoaVxuICpcbiAqIElmIGFueSBjb250ZW50cyBhcmUgYmluYXJ5LCB0aGV5IHdpbGwgYmUgZW5jb2RlZCBhcyBiYXNlNjQgc3RyaW5ncy4gQmFzZTY0XG4gKiBlbmNvZGVkIHN0cmluZ3MgYXJlIG1hcmtlZCB3aXRoIGEgYiBiZWZvcmUgdGhlIGxlbmd0aCBzcGVjaWZpZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWQgPSBmdW5jdGlvbiAocGFja2V0cywgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gbnVsbDtcbiAgfVxuXG4gIHZhciBpc0JpbmFyeSA9IGhhc0JpbmFyeShwYWNrZXRzKTtcblxuICBpZiAoc3VwcG9ydHNCaW5hcnkgJiYgaXNCaW5hcnkpIHtcbiAgICBpZiAoQmxvYiAmJiAhZG9udFNlbmRCbG9icykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYihwYWNrZXRzLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIocGFja2V0cywgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjaygnMDonKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UubGVuZ3RoICsgJzonICsgbWVzc2FnZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgIWlzQmluYXJ5ID8gZmFsc2UgOiBzdXBwb3J0c0JpbmFyeSwgZmFsc2UsIGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIGRvbmVDYWxsYmFjayhudWxsLCBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdHMuam9pbignJykpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQXN5bmMgYXJyYXkgbWFwIHVzaW5nIGFmdGVyXG4gKi9cblxuZnVuY3Rpb24gbWFwKGFyeSwgZWFjaCwgZG9uZSkge1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGFyeS5sZW5ndGgpO1xuICB2YXIgbmV4dCA9IGFmdGVyKGFyeS5sZW5ndGgsIGRvbmUpO1xuXG4gIHZhciBlYWNoV2l0aEluZGV4ID0gZnVuY3Rpb24oaSwgZWwsIGNiKSB7XG4gICAgZWFjaChlbCwgZnVuY3Rpb24oZXJyb3IsIG1zZykge1xuICAgICAgcmVzdWx0W2ldID0gbXNnO1xuICAgICAgY2IoZXJyb3IsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICBlYWNoV2l0aEluZGV4KGksIGFyeVtpXSwgbmV4dCk7XG4gIH1cbn1cblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gUG9zc2libGUgYmluYXJ5IGNvbnRlbnRzIGFyZVxuICogZGVjb2RlZCBmcm9tIHRoZWlyIGJhc2U2NCByZXByZXNlbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIHBhY2tldDtcbiAgaWYgKGRhdGEgPT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9ICcnLCBuLCBtc2c7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaHIgPSBkYXRhLmNoYXJBdChpKTtcblxuICAgIGlmIChjaHIgIT09ICc6Jykge1xuICAgICAgbGVuZ3RoICs9IGNocjtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGggPT09ICcnIHx8IChsZW5ndGggIT0gKG4gPSBOdW1iZXIobGVuZ3RoKSkpKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBtc2cgPSBkYXRhLnN1YnN0cihpICsgMSwgbik7XG5cbiAgICBpZiAobGVuZ3RoICE9IG1zZy5sZW5ndGgpIHtcbiAgICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgIH1cblxuICAgIGlmIChtc2cubGVuZ3RoKSB7XG4gICAgICBwYWNrZXQgPSBleHBvcnRzLmRlY29kZVBhY2tldChtc2csIGJpbmFyeVR5cGUsIGZhbHNlKTtcblxuICAgICAgaWYgKGVyci50eXBlID09PSBwYWNrZXQudHlwZSAmJiBlcnIuZGF0YSA9PT0gcGFja2V0LmRhdGEpIHtcbiAgICAgICAgLy8gcGFyc2VyIGVycm9yIGluIGluZGl2aWR1YWwgcGFja2V0IC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJldCA9IGNhbGxiYWNrKHBhY2tldCwgaSArIG4sIGwpO1xuICAgICAgaWYgKGZhbHNlID09PSByZXQpIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBhZHZhbmNlIGN1cnNvclxuICAgIGkgKz0gbjtcbiAgICBsZW5ndGggPSAnJztcbiAgfVxuXG4gIGlmIChsZW5ndGggIT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkgYXMgYmluYXJ5LlxuICpcbiAqIDwxID0gYmluYXJ5LCAwID0gc3RyaW5nPjxudW1iZXIgZnJvbSAwLTk+PG51bWJlciBmcm9tIDAtOT5bLi4uXTxudW1iZXJcbiAqIDI1NT48ZGF0YT5cbiAqXG4gKiBFeGFtcGxlOlxuICogMSAzIDI1NSAxIDIgMywgaWYgdGhlIGJpbmFyeSBjb250ZW50cyBhcmUgaW50ZXJwcmV0ZWQgYXMgOCBiaXQgaW50ZWdlcnNcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAcmV0dXJuIHtBcnJheUJ1ZmZlcn0gZW5jb2RlZCBwYXlsb2FkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyID0gZnVuY3Rpb24ocGFja2V0cywgY2FsbGJhY2spIHtcbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgQXJyYXlCdWZmZXIoMCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZG9uZUNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCBlbmNvZGVkUGFja2V0cykge1xuICAgIHZhciB0b3RhbExlbmd0aCA9IGVuY29kZWRQYWNrZXRzLnJlZHVjZShmdW5jdGlvbihhY2MsIHApIHtcbiAgICAgIHZhciBsZW47XG4gICAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKXtcbiAgICAgICAgbGVuID0gcC5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW4gPSBwLmJ5dGVMZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjICsgbGVuLnRvU3RyaW5nKCkubGVuZ3RoICsgbGVuICsgMjsgLy8gc3RyaW5nL2JpbmFyeSBpZGVudGlmaWVyICsgc2VwYXJhdG9yID0gMlxuICAgIH0sIDApO1xuXG4gICAgdmFyIHJlc3VsdEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO1xuXG4gICAgdmFyIGJ1ZmZlckluZGV4ID0gMDtcbiAgICBlbmNvZGVkUGFja2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgIHZhciBpc1N0cmluZyA9IHR5cGVvZiBwID09PSAnc3RyaW5nJztcbiAgICAgIHZhciBhYiA9IHA7XG4gICAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShwLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBwLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgYWIgPSB2aWV3LmJ1ZmZlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKSB7IC8vIG5vdCB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDA7XG4gICAgICB9IGVsc2UgeyAvLyB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDE7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW5TdHIgPSBhYi5ieXRlTGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHBhcnNlSW50KGxlblN0cltpXSk7XG4gICAgICB9XG4gICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDI1NTtcblxuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSB2aWV3W2ldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEFycmF5LmJ1ZmZlcik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBFbmNvZGUgYXMgQmxvYlxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYiA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZW5jb2RlZCkge1xuICAgICAgdmFyIGJpbmFyeUlkZW50aWZpZXIgPSBuZXcgVWludDhBcnJheSgxKTtcbiAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAxO1xuICAgICAgaWYgKHR5cGVvZiBlbmNvZGVkID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmlld1tpXSA9IGVuY29kZWQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGVkID0gdmlldy5idWZmZXI7XG4gICAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuID0gKGVuY29kZWQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcilcbiAgICAgICAgPyBlbmNvZGVkLmJ5dGVMZW5ndGhcbiAgICAgICAgOiBlbmNvZGVkLnNpemU7XG5cbiAgICAgIHZhciBsZW5TdHIgPSBsZW4udG9TdHJpbmcoKTtcbiAgICAgIHZhciBsZW5ndGhBcnkgPSBuZXcgVWludDhBcnJheShsZW5TdHIubGVuZ3RoICsgMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZW5ndGhBcnlbaV0gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgbGVuZ3RoQXJ5W2xlblN0ci5sZW5ndGhdID0gMjU1O1xuXG4gICAgICBpZiAoQmxvYikge1xuICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtiaW5hcnlJZGVudGlmaWVyLmJ1ZmZlciwgbGVuZ3RoQXJ5LmJ1ZmZlciwgZW5jb2RlZF0pO1xuICAgICAgICBkb25lQ2FsbGJhY2sobnVsbCwgYmxvYik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEJsb2IocmVzdWx0cykpO1xuICB9KTtcbn07XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFN0cmluZ3MgYXJlIGRlY29kZWQgYnlcbiAqIGludGVycHJldGluZyBlYWNoIGJ5dGUgYXMgYSBrZXkgY29kZSBmb3IgZW50cmllcyBtYXJrZWQgdG8gc3RhcnQgd2l0aCAwLiBTZWVcbiAqIGRlc2NyaXB0aW9uIG9mIGVuY29kZVBheWxvYWRBc0JpbmFyeVxuICpcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeSA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGJpbmFyeVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7XG4gICAgYmluYXJ5VHlwZSA9IG51bGw7XG4gIH1cblxuICB2YXIgYnVmZmVyVGFpbCA9IGRhdGE7XG4gIHZhciBidWZmZXJzID0gW107XG5cbiAgd2hpbGUgKGJ1ZmZlclRhaWwuYnl0ZUxlbmd0aCA+IDApIHtcbiAgICB2YXIgdGFpbEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyVGFpbCk7XG4gICAgdmFyIGlzU3RyaW5nID0gdGFpbEFycmF5WzBdID09PSAwO1xuICAgIHZhciBtc2dMZW5ndGggPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAxOyA7IGkrKykge1xuICAgICAgaWYgKHRhaWxBcnJheVtpXSA9PT0gMjU1KSBicmVhaztcblxuICAgICAgLy8gMzEwID0gY2hhciBsZW5ndGggb2YgTnVtYmVyLk1BWF9WQUxVRVxuICAgICAgaWYgKG1zZ0xlbmd0aC5sZW5ndGggPiAzMTApIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIG1zZ0xlbmd0aCArPSB0YWlsQXJyYXlbaV07XG4gICAgfVxuXG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDIgKyBtc2dMZW5ndGgubGVuZ3RoKTtcbiAgICBtc2dMZW5ndGggPSBwYXJzZUludChtc2dMZW5ndGgpO1xuXG4gICAgdmFyIG1zZyA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDAsIG1zZ0xlbmd0aCk7XG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBtc2cgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KG1zZykpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpUGhvbmUgU2FmYXJpIGRvZXNuJ3QgbGV0IHlvdSBhcHBseSB0byB0eXBlZCBhcnJheXNcbiAgICAgICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkobXNnKTtcbiAgICAgICAgbXNnID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBtc2cgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh0eXBlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBidWZmZXJzLnB1c2gobXNnKTtcbiAgICBidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgbXNnTGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0b3RhbCA9IGJ1ZmZlcnMubGVuZ3RoO1xuICBidWZmZXJzLmZvckVhY2goZnVuY3Rpb24oYnVmZmVyLCBpKSB7XG4gICAgY2FsbGJhY2soZXhwb3J0cy5kZWNvZGVQYWNrZXQoYnVmZmVyLCBiaW5hcnlUeXBlLCB0cnVlKSwgaSwgdG90YWwpO1xuICB9KTtcbn07XG4iLCJcbi8qKlxuICogR2V0cyB0aGUga2V5cyBmb3IgYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge0FycmF5fSBrZXlzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMgKG9iail7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBpKSkge1xuICAgICAgYXJyLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59O1xuIiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG5cbnZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZVxuZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0dmFyIG91dHB1dCA9IFtdO1xuXHR2YXIgY291bnRlciA9IDA7XG5cdHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHR2YXIgdmFsdWU7XG5cdHZhciBleHRyYTtcblx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvdXRwdXQ7XG59XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5mdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdHZhciBpbmRleCA9IC0xO1xuXHR2YXIgdmFsdWU7XG5cdHZhciBvdXRwdXQgPSAnJztcblx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHR2YWx1ZSA9IGFycmF5W2luZGV4XTtcblx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHR9XG5cdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0aWYgKHN0cmljdCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoXG5cdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHQnIGlzIG5vdCBhIHNjYWxhciB2YWx1ZSdcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gdHJ1ZTtcbn1cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5mdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCwgc2hpZnQpIHtcblx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiBzaGlmdCkgJiAweDNGKSB8IDB4ODApO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGRjgwKSA9PSAwKSB7IC8vIDEtYnl0ZSBzZXF1ZW5jZVxuXHRcdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcblx0fVxuXHR2YXIgc3ltYm9sID0gJyc7XG5cdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRjgwMCkgPT0gMCkgeyAvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHR9XG5cdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRkYwMDAwKSA9PSAwKSB7IC8vIDMtYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICghY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkpIHtcblx0XHRcdGNvZGVQb2ludCA9IDB4RkZGRDtcblx0XHR9XG5cdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0fVxuXHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTgpICYgMHgwNykgfCAweEYwKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDEyKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHR9XG5cdHN5bWJvbCArPSBzdHJpbmdGcm9tQ2hhckNvZGUoKGNvZGVQb2ludCAmIDB4M0YpIHwgMHg4MCk7XG5cdHJldHVybiBzeW1ib2w7XG59XG5cbmZ1bmN0aW9uIHV0ZjhlbmNvZGUoc3RyaW5nLCBvcHRzKSB7XG5cdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHR2YXIgc3RyaWN0ID0gZmFsc2UgIT09IG9wdHMuc3RyaWN0O1xuXG5cdHZhciBjb2RlUG9pbnRzID0gdWNzMmRlY29kZShzdHJpbmcpO1xuXHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdHZhciBpbmRleCA9IC0xO1xuXHR2YXIgY29kZVBvaW50O1xuXHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdGNvZGVQb2ludCA9IGNvZGVQb2ludHNbaW5kZXhdO1xuXHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KTtcblx0fVxuXHRyZXR1cm4gYnl0ZVN0cmluZztcbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmZ1bmN0aW9uIHJlYWRDb250aW51YXRpb25CeXRlKCkge1xuXHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0fVxuXG5cdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRieXRlSW5kZXgrKztcblxuXHRpZiAoKGNvbnRpbnVhdGlvbkJ5dGUgJiAweEMwKSA9PSAweDgwKSB7XG5cdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHR9XG5cblx0Ly8gSWYgd2UgZW5kIHVwIGhlcmUsIGl04oCZcyBub3QgYSBjb250aW51YXRpb24gYnl0ZVxuXHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVTeW1ib2woc3RyaWN0KSB7XG5cdHZhciBieXRlMTtcblx0dmFyIGJ5dGUyO1xuXHR2YXIgYnl0ZTM7XG5cdHZhciBieXRlNDtcblx0dmFyIGNvZGVQb2ludDtcblxuXHRpZiAoYnl0ZUluZGV4ID4gYnl0ZUNvdW50KSB7XG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHR9XG5cblx0aWYgKGJ5dGVJbmRleCA9PSBieXRlQ291bnQpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBSZWFkIGZpcnN0IGJ5dGVcblx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdGJ5dGVJbmRleCsrO1xuXG5cdC8vIDEtYnl0ZSBzZXF1ZW5jZSAobm8gY29udGludWF0aW9uIGJ5dGVzKVxuXHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdHJldHVybiBieXRlMTtcblx0fVxuXG5cdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRpZiAoKGJ5dGUxICYgMHhFMCkgPT0gMHhDMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4ODApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gMy1ieXRlIHNlcXVlbmNlIChtYXkgaW5jbHVkZSB1bnBhaXJlZCBzdXJyb2dhdGVzKVxuXHRpZiAoKGJ5dGUxICYgMHhGMCkgPT0gMHhFMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MEYpIDw8IDEyKSB8IChieXRlMiA8PCA2KSB8IGJ5dGUzO1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRyZXR1cm4gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkgPyBjb2RlUG9pbnQgOiAweEZGRkQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdGlmICgoYnl0ZTEgJiAweEY4KSA9PSAweEYwKSB7XG5cdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlNCA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MDcpIDw8IDB4MTIpIHwgKGJ5dGUyIDw8IDB4MEMpIHxcblx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwMTAwMDAgJiYgY29kZVBvaW50IDw9IDB4MTBGRkZGKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdH1cblx0fVxuXG5cdHRocm93IEVycm9yKCdJbnZhbGlkIFVURi04IGRldGVjdGVkJyk7XG59XG5cbnZhciBieXRlQXJyYXk7XG52YXIgYnl0ZUNvdW50O1xudmFyIGJ5dGVJbmRleDtcbmZ1bmN0aW9uIHV0ZjhkZWNvZGUoYnl0ZVN0cmluZywgb3B0cykge1xuXHRvcHRzID0gb3B0cyB8fCB7fTtcblx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHRieXRlQXJyYXkgPSB1Y3MyZGVjb2RlKGJ5dGVTdHJpbmcpO1xuXHRieXRlQ291bnQgPSBieXRlQXJyYXkubGVuZ3RoO1xuXHRieXRlSW5kZXggPSAwO1xuXHR2YXIgY29kZVBvaW50cyA9IFtdO1xuXHR2YXIgdG1wO1xuXHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbChzdHJpY3QpKSAhPT0gZmFsc2UpIHtcblx0XHRjb2RlUG9pbnRzLnB1c2godG1wKTtcblx0fVxuXHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHZlcnNpb246ICcyLjEuMicsXG5cdGVuY29kZTogdXRmOGVuY29kZSxcblx0ZGVjb2RlOiB1dGY4ZGVjb2RlXG59O1xuIiwiaW1wb3J0ICogYXMgYmFzZSBmcm9tICcuL2hhbmRsZWJhcnMvYmFzZSc7XG5cbi8vIEVhY2ggb2YgdGhlc2UgYXVnbWVudCB0aGUgSGFuZGxlYmFycyBvYmplY3QuIE5vIG5lZWQgdG8gc2V0dXAgaGVyZS5cbi8vIChUaGlzIGlzIGRvbmUgdG8gZWFzaWx5IHNoYXJlIGNvZGUgYmV0d2VlbiBjb21tb25qcyBhbmQgYnJvd3NlIGVudnMpXG5pbXBvcnQgU2FmZVN0cmluZyBmcm9tICcuL2hhbmRsZWJhcnMvc2FmZS1zdHJpbmcnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2hhbmRsZWJhcnMvZXhjZXB0aW9uJztcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gJy4vaGFuZGxlYmFycy91dGlscyc7XG5pbXBvcnQgKiBhcyBydW50aW1lIGZyb20gJy4vaGFuZGxlYmFycy9ydW50aW1lJztcblxuaW1wb3J0IG5vQ29uZmxpY3QgZnJvbSAnLi9oYW5kbGViYXJzL25vLWNvbmZsaWN0JztcblxuLy8gRm9yIGNvbXBhdGliaWxpdHkgYW5kIHVzYWdlIG91dHNpZGUgb2YgbW9kdWxlIHN5c3RlbXMsIG1ha2UgdGhlIEhhbmRsZWJhcnMgb2JqZWN0IGEgbmFtZXNwYWNlXG5mdW5jdGlvbiBjcmVhdGUoKSB7XG4gIGxldCBoYiA9IG5ldyBiYXNlLkhhbmRsZWJhcnNFbnZpcm9ubWVudCgpO1xuXG4gIFV0aWxzLmV4dGVuZChoYiwgYmFzZSk7XG4gIGhiLlNhZmVTdHJpbmcgPSBTYWZlU3RyaW5nO1xuICBoYi5FeGNlcHRpb24gPSBFeGNlcHRpb247XG4gIGhiLlV0aWxzID0gVXRpbHM7XG4gIGhiLmVzY2FwZUV4cHJlc3Npb24gPSBVdGlscy5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIGhiLlZNID0gcnVudGltZTtcbiAgaGIudGVtcGxhdGUgPSBmdW5jdGlvbihzcGVjKSB7XG4gICAgcmV0dXJuIHJ1bnRpbWUudGVtcGxhdGUoc3BlYywgaGIpO1xuICB9O1xuXG4gIHJldHVybiBoYjtcbn1cblxubGV0IGluc3QgPSBjcmVhdGUoKTtcbmluc3QuY3JlYXRlID0gY3JlYXRlO1xuXG5ub0NvbmZsaWN0KGluc3QpO1xuXG5pbnN0WydkZWZhdWx0J10gPSBpbnN0O1xuXG5leHBvcnQgZGVmYXVsdCBpbnN0O1xuIiwiaW1wb3J0IHtjcmVhdGVGcmFtZSwgZXh0ZW5kLCB0b1N0cmluZ30gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vZXhjZXB0aW9uJztcbmltcG9ydCB7cmVnaXN0ZXJEZWZhdWx0SGVscGVyc30gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7cmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9yc30gZnJvbSAnLi9kZWNvcmF0b3JzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9ICc0LjEuMic7XG5leHBvcnQgY29uc3QgQ09NUElMRVJfUkVWSVNJT04gPSA3O1xuXG5leHBvcnQgY29uc3QgUkVWSVNJT05fQ0hBTkdFUyA9IHtcbiAgMTogJzw9IDEuMC5yYy4yJywgLy8gMS4wLnJjLjIgaXMgYWN0dWFsbHkgcmV2MiBidXQgZG9lc24ndCByZXBvcnQgaXRcbiAgMjogJz09IDEuMC4wLXJjLjMnLFxuICAzOiAnPT0gMS4wLjAtcmMuNCcsXG4gIDQ6ICc9PSAxLngueCcsXG4gIDU6ICc9PSAyLjAuMC1hbHBoYS54JyxcbiAgNjogJz49IDIuMC4wLWJldGEuMScsXG4gIDc6ICc+PSA0LjAuMCdcbn07XG5cbmNvbnN0IG9iamVjdFR5cGUgPSAnW29iamVjdCBPYmplY3RdJztcblxuZXhwb3J0IGZ1bmN0aW9uIEhhbmRsZWJhcnNFbnZpcm9ubWVudChoZWxwZXJzLCBwYXJ0aWFscywgZGVjb3JhdG9ycykge1xuICB0aGlzLmhlbHBlcnMgPSBoZWxwZXJzIHx8IHt9O1xuICB0aGlzLnBhcnRpYWxzID0gcGFydGlhbHMgfHwge307XG4gIHRoaXMuZGVjb3JhdG9ycyA9IGRlY29yYXRvcnMgfHwge307XG5cbiAgcmVnaXN0ZXJEZWZhdWx0SGVscGVycyh0aGlzKTtcbiAgcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyh0aGlzKTtcbn1cblxuSGFuZGxlYmFyc0Vudmlyb25tZW50LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEhhbmRsZWJhcnNFbnZpcm9ubWVudCxcblxuICBsb2dnZXI6IGxvZ2dlcixcbiAgbG9nOiBsb2dnZXIubG9nLFxuXG4gIHJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBpZiAoZm4pIHsgdGhyb3cgbmV3IEV4Y2VwdGlvbignQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBoZWxwZXJzJyk7IH1cbiAgICAgIGV4dGVuZCh0aGlzLmhlbHBlcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlbHBlcnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJIZWxwZXI6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5oZWxwZXJzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24obmFtZSwgcGFydGlhbCkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBleHRlbmQodGhpcy5wYXJ0aWFscywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgcGFydGlhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihgQXR0ZW1wdGluZyB0byByZWdpc3RlciBhIHBhcnRpYWwgY2FsbGVkIFwiJHtuYW1lfVwiIGFzIHVuZGVmaW5lZGApO1xuICAgICAgfVxuICAgICAgdGhpcy5wYXJ0aWFsc1tuYW1lXSA9IHBhcnRpYWw7XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLnBhcnRpYWxzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBpZiAoZm4pIHsgdGhyb3cgbmV3IEV4Y2VwdGlvbignQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBkZWNvcmF0b3JzJyk7IH1cbiAgICAgIGV4dGVuZCh0aGlzLmRlY29yYXRvcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlY29yYXRvcnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5kZWNvcmF0b3JzW25hbWVdO1xuICB9XG59O1xuXG5leHBvcnQgbGV0IGxvZyA9IGxvZ2dlci5sb2c7XG5cbmV4cG9ydCB7Y3JlYXRlRnJhbWUsIGxvZ2dlcn07XG4iLCJpbXBvcnQgcmVnaXN0ZXJJbmxpbmUgZnJvbSAnLi9kZWNvcmF0b3JzL2lubGluZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKGluc3RhbmNlKSB7XG4gIHJlZ2lzdGVySW5saW5lKGluc3RhbmNlKTtcbn1cblxuIiwiaW1wb3J0IHtleHRlbmR9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJEZWNvcmF0b3IoJ2lubGluZScsIGZ1bmN0aW9uKGZuLCBwcm9wcywgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgbGV0IHJldCA9IGZuO1xuICAgIGlmICghcHJvcHMucGFydGlhbHMpIHtcbiAgICAgIHByb3BzLnBhcnRpYWxzID0ge307XG4gICAgICByZXQgPSBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBwYXJ0aWFscyBzdGFjayBmcmFtZSBwcmlvciB0byBleGVjLlxuICAgICAgICBsZXQgb3JpZ2luYWwgPSBjb250YWluZXIucGFydGlhbHM7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IGV4dGVuZCh7fSwgb3JpZ2luYWwsIHByb3BzLnBhcnRpYWxzKTtcbiAgICAgICAgbGV0IHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcmlnaW5hbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcHJvcHMucGFydGlhbHNbb3B0aW9ucy5hcmdzWzBdXSA9IG9wdGlvbnMuZm47XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cbiIsIlxuY29uc3QgZXJyb3JQcm9wcyA9IFsnZGVzY3JpcHRpb24nLCAnZmlsZU5hbWUnLCAnbGluZU51bWJlcicsICdtZXNzYWdlJywgJ25hbWUnLCAnbnVtYmVyJywgJ3N0YWNrJ107XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIGxldCBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgICAgbGluZSxcbiAgICAgIGNvbHVtbjtcbiAgaWYgKGxvYykge1xuICAgIGxpbmUgPSBsb2Muc3RhcnQubGluZTtcbiAgICBjb2x1bW4gPSBsb2Muc3RhcnQuY29sdW1uO1xuXG4gICAgbWVzc2FnZSArPSAnIC0gJyArIGxpbmUgKyAnOicgKyBjb2x1bW47XG4gIH1cblxuICBsZXQgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVycm9yUHJvcHMubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXNbZXJyb3JQcm9wc1tpZHhdXSA9IHRtcFtlcnJvclByb3BzW2lkeF1dO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXhjZXB0aW9uKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGxvYykge1xuICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcblxuICAgICAgLy8gV29yayBhcm91bmQgaXNzdWUgdW5kZXIgc2FmYXJpIHdoZXJlIHdlIGNhbid0IGRpcmVjdGx5IHNldCB0aGUgY29sdW1uIHZhbHVlXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogY29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKG5vcCkge1xuICAgIC8qIElnbm9yZSBpZiB0aGUgYnJvd3NlciBpcyB2ZXJ5IHBhcnRpY3VsYXIgKi9cbiAgfVxufVxuXG5FeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5cbmV4cG9ydCBkZWZhdWx0IEV4Y2VwdGlvbjtcbiIsImltcG9ydCByZWdpc3RlckJsb2NrSGVscGVyTWlzc2luZyBmcm9tICcuL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcnO1xuaW1wb3J0IHJlZ2lzdGVyRWFjaCBmcm9tICcuL2hlbHBlcnMvZWFjaCc7XG5pbXBvcnQgcmVnaXN0ZXJIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJJZiBmcm9tICcuL2hlbHBlcnMvaWYnO1xuaW1wb3J0IHJlZ2lzdGVyTG9nIGZyb20gJy4vaGVscGVycy9sb2cnO1xuaW1wb3J0IHJlZ2lzdGVyTG9va3VwIGZyb20gJy4vaGVscGVycy9sb29rdXAnO1xuaW1wb3J0IHJlZ2lzdGVyV2l0aCBmcm9tICcuL2hlbHBlcnMvd2l0aCc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHRIZWxwZXJzKGluc3RhbmNlKSB7XG4gIHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJFYWNoKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJIZWxwZXJNaXNzaW5nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJJZihpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyTG9nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb29rdXAoaW5zdGFuY2UpO1xuICByZWdpc3RlcldpdGgoaW5zdGFuY2UpO1xufVxuIiwiaW1wb3J0IHthcHBlbmRDb250ZXh0UGF0aCwgY3JlYXRlRnJhbWUsIGlzQXJyYXl9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2Jsb2NrSGVscGVyTWlzc2luZycsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBsZXQgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgICAgZm4gPSBvcHRpb25zLmZuO1xuXG4gICAgaWYgKGNvbnRleHQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBmbih0aGlzKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRleHQgPT09IGZhbHNlIHx8IGNvbnRleHQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICBpZiAoY29udGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmlkcykge1xuICAgICAgICAgIG9wdGlvbnMuaWRzID0gW29wdGlvbnMubmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVycy5lYWNoKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGludmVyc2UodGhpcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgICAgbGV0IGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLm5hbWUpO1xuICAgICAgICBvcHRpb25zID0ge2RhdGE6IGRhdGF9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgfVxuICB9KTtcbn1cbiIsImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGJsb2NrUGFyYW1zLCBjcmVhdGVGcmFtZSwgaXNBcnJheSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm4sXG4gICAgICAgIGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICByZXQgPSAnJyxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dFBhdGg7XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICBjb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7IGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7IH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4ZWNJdGVyYXRpb24oZmllbGQsIGluZGV4LCBsYXN0KSB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBkYXRhLmtleSA9IGZpZWxkO1xuICAgICAgICBkYXRhLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIGRhdGEuZmlyc3QgPSBpbmRleCA9PT0gMDtcbiAgICAgICAgZGF0YS5sYXN0ID0gISFsYXN0O1xuXG4gICAgICAgIGlmIChjb250ZXh0UGF0aCkge1xuICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGZpZWxkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldCA9IHJldCArIGZuKGNvbnRleHRbZmllbGRdLCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dFtmaWVsZF0sIGZpZWxkXSwgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgICBmb3IgKGxldCBqID0gY29udGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJpb3JLZXk7XG5cbiAgICAgICAgZm9yIChsZXQga2V5IGluIGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoY29udGV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAvLyBXZSdyZSBydW5uaW5nIHRoZSBpdGVyYXRpb25zIG9uZSBzdGVwIG91dCBvZiBzeW5jIHNvIHdlIGNhbiBkZXRlY3RcbiAgICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAgIC8vIGFuIGl0ZXJtZWRpYXRlIGtleXMgYXJyYXkuXG4gICAgICAgICAgICBpZiAocHJpb3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmlvcktleSA9IGtleTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cbiIsImltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbigvKiBbYXJncywgXW9wdGlvbnMgKi8pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gQSBtaXNzaW5nIGZpZWxkIGluIGEge3tmb299fSBjb25zdHJ1Y3QuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTb21lb25lIGlzIGFjdHVhbGx5IHRyeWluZyB0byBjYWxsIHNvbWV0aGluZywgYmxvdyB1cC5cbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ01pc3NpbmcgaGVscGVyOiBcIicgKyBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdLm5hbWUgKyAnXCInKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtpc0VtcHR5LCBpc0Z1bmN0aW9ufSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdpZicsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY29uZGl0aW9uYWwpKSB7IGNvbmRpdGlvbmFsID0gY29uZGl0aW9uYWwuY2FsbCh0aGlzKTsgfVxuXG4gICAgLy8gRGVmYXVsdCBiZWhhdmlvciBpcyB0byByZW5kZXIgdGhlIHBvc2l0aXZlIHBhdGggaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBhbmQgbm90IGVtcHR5LlxuICAgIC8vIFRoZSBgaW5jbHVkZVplcm9gIG9wdGlvbiBtYXkgYmUgc2V0IHRvIHRyZWF0IHRoZSBjb25kdGlvbmFsIGFzIHB1cmVseSBub3QgZW1wdHkgYmFzZWQgb24gdGhlXG4gICAgLy8gYmVoYXZpb3Igb2YgaXNFbXB0eS4gRWZmZWN0aXZlbHkgdGhpcyBkZXRlcm1pbmVzIGlmIDAgaXMgaGFuZGxlZCBieSB0aGUgcG9zaXRpdmUgcGF0aCBvciBuZWdhdGl2ZS5cbiAgICBpZiAoKCFvcHRpb25zLmhhc2guaW5jbHVkZVplcm8gJiYgIWNvbmRpdGlvbmFsKSB8fCBpc0VtcHR5KGNvbmRpdGlvbmFsKSkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcigndW5sZXNzJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVyc1snaWYnXS5jYWxsKHRoaXMsIGNvbmRpdGlvbmFsLCB7Zm46IG9wdGlvbnMuaW52ZXJzZSwgaW52ZXJzZTogb3B0aW9ucy5mbiwgaGFzaDogb3B0aW9ucy5oYXNofSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uKC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi8pIHtcbiAgICBsZXQgYXJncyA9IFt1bmRlZmluZWRdLFxuICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIGxldCBsZXZlbCA9IDE7XG4gICAgaWYgKG9wdGlvbnMuaGFzaC5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuaGFzaC5sZXZlbDtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGEubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmRhdGEubGV2ZWw7XG4gICAgfVxuICAgIGFyZ3NbMF0gPSBsZXZlbDtcblxuICAgIGluc3RhbmNlLmxvZyguLi4gYXJncyk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvb2t1cCcsIGZ1bmN0aW9uKG9iaiwgZmllbGQpIHtcbiAgICBpZiAoIW9iaikge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgaWYgKGZpZWxkID09PSAnY29uc3RydWN0b3InICYmICFvYmoucHJvcGVydHlJc0VudW1lcmFibGUoZmllbGQpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gb2JqW2ZpZWxkXTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge2FwcGVuZENvbnRleHRQYXRoLCBibG9ja1BhcmFtcywgY3JlYXRlRnJhbWUsIGlzRW1wdHksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3dpdGgnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHsgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTsgfVxuXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmICghaXNFbXB0eShjb250ZXh0KSkge1xuICAgICAgbGV0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfVxuICB9KTtcbn1cbiIsImltcG9ydCB7aW5kZXhPZn0gZnJvbSAnLi91dGlscyc7XG5cbmxldCBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbGV2ZWxNYXAgPSBpbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcbiAgICAgICAgbGV2ZWwgPSBsZXZlbE1hcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH0sXG5cbiAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcbiAgbG9nOiBmdW5jdGlvbihsZXZlbCwgLi4ubWVzc2FnZSkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWwpIHtcbiAgICAgIGxldCBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICBtZXRob2QgPSAnbG9nJztcbiAgICAgIH1cbiAgICAgIGNvbnNvbGVbbWV0aG9kXSguLi5tZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGxldCByb290ID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3csXG4gICAgICAkSGFuZGxlYmFycyA9IHJvb3QuSGFuZGxlYmFycztcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgSGFuZGxlYmFycy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHJvb3QuSGFuZGxlYmFycyA9PT0gSGFuZGxlYmFycykge1xuICAgICAgcm9vdC5IYW5kbGViYXJzID0gJEhhbmRsZWJhcnM7XG4gICAgfVxuICAgIHJldHVybiBIYW5kbGViYXJzO1xuICB9O1xufVxuIiwiaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vZXhjZXB0aW9uJztcbmltcG9ydCB7IENPTVBJTEVSX1JFVklTSU9OLCBSRVZJU0lPTl9DSEFOR0VTLCBjcmVhdGVGcmFtZSB9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1JldmlzaW9uKGNvbXBpbGVySW5mbykge1xuICBjb25zdCBjb21waWxlclJldmlzaW9uID0gY29tcGlsZXJJbmZvICYmIGNvbXBpbGVySW5mb1swXSB8fCAxLFxuICAgICAgICBjdXJyZW50UmV2aXNpb24gPSBDT01QSUxFUl9SRVZJU0lPTjtcblxuICBpZiAoY29tcGlsZXJSZXZpc2lvbiAhPT0gY3VycmVudFJldmlzaW9uKSB7XG4gICAgaWYgKGNvbXBpbGVyUmV2aXNpb24gPCBjdXJyZW50UmV2aXNpb24pIHtcbiAgICAgIGNvbnN0IHJ1bnRpbWVWZXJzaW9ucyA9IFJFVklTSU9OX0NIQU5HRVNbY3VycmVudFJldmlzaW9uXSxcbiAgICAgICAgICAgIGNvbXBpbGVyVmVyc2lvbnMgPSBSRVZJU0lPTl9DSEFOR0VTW2NvbXBpbGVyUmV2aXNpb25dO1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYW4gb2xkZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArXG4gICAgICAgICAgICAnUGxlYXNlIHVwZGF0ZSB5b3VyIHByZWNvbXBpbGVyIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArIHJ1bnRpbWVWZXJzaW9ucyArICcpIG9yIGRvd25ncmFkZSB5b3VyIHJ1bnRpbWUgdG8gYW4gb2xkZXIgdmVyc2lvbiAoJyArIGNvbXBpbGVyVmVyc2lvbnMgKyAnKS4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVXNlIHRoZSBlbWJlZGRlZCB2ZXJzaW9uIGluZm8gc2luY2UgdGhlIHJ1bnRpbWUgZG9lc24ndCBrbm93IGFib3V0IHRoaXMgcmV2aXNpb24geWV0XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUZW1wbGF0ZSB3YXMgcHJlY29tcGlsZWQgd2l0aCBhIG5ld2VyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgK1xuICAgICAgICAgICAgJ1BsZWFzZSB1cGRhdGUgeW91ciBydW50aW1lIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArIGNvbXBpbGVySW5mb1sxXSArICcpLicpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGUodGVtcGxhdGVTcGVjLCBlbnYpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKCFlbnYpIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdObyBlbnZpcm9ubWVudCBwYXNzZWQgdG8gdGVtcGxhdGUnKTtcbiAgfVxuICBpZiAoIXRlbXBsYXRlU3BlYyB8fCAhdGVtcGxhdGVTcGVjLm1haW4pIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmtub3duIHRlbXBsYXRlIG9iamVjdDogJyArIHR5cGVvZiB0ZW1wbGF0ZVNwZWMpO1xuICB9XG5cbiAgdGVtcGxhdGVTcGVjLm1haW4uZGVjb3JhdG9yID0gdGVtcGxhdGVTcGVjLm1haW5fZDtcblxuICAvLyBOb3RlOiBVc2luZyBlbnYuVk0gcmVmZXJlbmNlcyByYXRoZXIgdGhhbiBsb2NhbCB2YXIgcmVmZXJlbmNlcyB0aHJvdWdob3V0IHRoaXMgc2VjdGlvbiB0byBhbGxvd1xuICAvLyBmb3IgZXh0ZXJuYWwgdXNlcnMgdG8gb3ZlcnJpZGUgdGhlc2UgYXMgcHN1ZWRvLXN1cHBvcnRlZCBBUElzLlxuICBlbnYuVk0uY2hlY2tSZXZpc2lvbih0ZW1wbGF0ZVNwZWMuY29tcGlsZXIpO1xuXG4gIGZ1bmN0aW9uIGludm9rZVBhcnRpYWxXcmFwcGVyKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgICBjb250ZXh0ID0gVXRpbHMuZXh0ZW5kKHt9LCBjb250ZXh0LCBvcHRpb25zLmhhc2gpO1xuICAgICAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIG9wdGlvbnMuaWRzWzBdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJ0aWFsID0gZW52LlZNLnJlc29sdmVQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgb3B0aW9ucyk7XG4gICAgbGV0IHJlc3VsdCA9IGVudi5WTS5pbnZva2VQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgb3B0aW9ucyk7XG5cbiAgICBpZiAocmVzdWx0ID09IG51bGwgJiYgZW52LmNvbXBpbGUpIHtcbiAgICAgIG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXSA9IGVudi5jb21waWxlKHBhcnRpYWwsIHRlbXBsYXRlU3BlYy5jb21waWxlck9wdGlvbnMsIGVudik7XG4gICAgICByZXN1bHQgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV0oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgaWYgKG9wdGlvbnMuaW5kZW50KSB7XG4gICAgICAgIGxldCBsaW5lcyA9IHJlc3VsdC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCFsaW5lc1tpXSAmJiBpICsgMSA9PT0gbCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluZXNbaV0gPSBvcHRpb25zLmluZGVudCArIGxpbmVzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVGhlIHBhcnRpYWwgJyArIG9wdGlvbnMubmFtZSArICcgY291bGQgbm90IGJlIGNvbXBpbGVkIHdoZW4gcnVubmluZyBpbiBydW50aW1lLW9ubHkgbW9kZScpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEp1c3QgYWRkIHdhdGVyXG4gIGxldCBjb250YWluZXIgPSB7XG4gICAgc3RyaWN0OiBmdW5jdGlvbihvYmosIG5hbWUpIHtcbiAgICAgIGlmICghKG5hbWUgaW4gb2JqKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdcIicgKyBuYW1lICsgJ1wiIG5vdCBkZWZpbmVkIGluICcgKyBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialtuYW1lXTtcbiAgICB9LFxuICAgIGxvb2t1cDogZnVuY3Rpb24oZGVwdGhzLCBuYW1lKSB7XG4gICAgICBjb25zdCBsZW4gPSBkZXB0aHMubGVuZ3RoO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoZGVwdGhzW2ldICYmIGRlcHRoc1tpXVtuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGRlcHRoc1tpXVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbGFtYmRhOiBmdW5jdGlvbihjdXJyZW50LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGN1cnJlbnQgPT09ICdmdW5jdGlvbicgPyBjdXJyZW50LmNhbGwoY29udGV4dCkgOiBjdXJyZW50O1xuICAgIH0sXG5cbiAgICBlc2NhcGVFeHByZXNzaW9uOiBVdGlscy5lc2NhcGVFeHByZXNzaW9uLFxuICAgIGludm9rZVBhcnRpYWw6IGludm9rZVBhcnRpYWxXcmFwcGVyLFxuXG4gICAgZm46IGZ1bmN0aW9uKGkpIHtcbiAgICAgIGxldCByZXQgPSB0ZW1wbGF0ZVNwZWNbaV07XG4gICAgICByZXQuZGVjb3JhdG9yID0gdGVtcGxhdGVTcGVjW2kgKyAnX2QnXTtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcblxuICAgIHByb2dyYW1zOiBbXSxcbiAgICBwcm9ncmFtOiBmdW5jdGlvbihpLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgICBsZXQgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldLFxuICAgICAgICAgIGZuID0gdGhpcy5mbihpKTtcbiAgICAgIGlmIChkYXRhIHx8IGRlcHRocyB8fCBibG9ja1BhcmFtcyB8fCBkZWNsYXJlZEJsb2NrUGFyYW1zKSB7XG4gICAgICAgIHByb2dyYW1XcmFwcGVyID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4sIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgICAgfSBlbHNlIGlmICghcHJvZ3JhbVdyYXBwZXIpIHtcbiAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2dyYW1XcmFwcGVyO1xuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbih2YWx1ZSwgZGVwdGgpIHtcbiAgICAgIHdoaWxlICh2YWx1ZSAmJiBkZXB0aC0tKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuX3BhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIG1lcmdlOiBmdW5jdGlvbihwYXJhbSwgY29tbW9uKSB7XG4gICAgICBsZXQgb2JqID0gcGFyYW0gfHwgY29tbW9uO1xuXG4gICAgICBpZiAocGFyYW0gJiYgY29tbW9uICYmIChwYXJhbSAhPT0gY29tbW9uKSkge1xuICAgICAgICBvYmogPSBVdGlscy5leHRlbmQoe30sIGNvbW1vbiwgcGFyYW0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgLy8gQW4gZW1wdHkgb2JqZWN0IHRvIHVzZSBhcyByZXBsYWNlbWVudCBmb3IgbnVsbC1jb250ZXh0c1xuICAgIG51bGxDb250ZXh0OiBPYmplY3Quc2VhbCh7fSksXG5cbiAgICBub29wOiBlbnYuVk0ubm9vcCxcbiAgICBjb21waWxlckluZm86IHRlbXBsYXRlU3BlYy5jb21waWxlclxuICB9O1xuXG4gIGZ1bmN0aW9uIHJldChjb250ZXh0LCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgZGF0YSA9IG9wdGlvbnMuZGF0YTtcblxuICAgIHJldC5fc2V0dXAob3B0aW9ucyk7XG4gICAgaWYgKCFvcHRpb25zLnBhcnRpYWwgJiYgdGVtcGxhdGVTcGVjLnVzZURhdGEpIHtcbiAgICAgIGRhdGEgPSBpbml0RGF0YShjb250ZXh0LCBkYXRhKTtcbiAgICB9XG4gICAgbGV0IGRlcHRocyxcbiAgICAgICAgYmxvY2tQYXJhbXMgPSB0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgPyBbXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocykge1xuICAgICAgaWYgKG9wdGlvbnMuZGVwdGhzKSB7XG4gICAgICAgIGRlcHRocyA9IGNvbnRleHQgIT0gb3B0aW9ucy5kZXB0aHNbMF0gPyBbY29udGV4dF0uY29uY2F0KG9wdGlvbnMuZGVwdGhzKSA6IG9wdGlvbnMuZGVwdGhzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVwdGhzID0gW2NvbnRleHRdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1haW4oY29udGV4dC8qLCBvcHRpb25zKi8pIHtcbiAgICAgIHJldHVybiAnJyArIHRlbXBsYXRlU3BlYy5tYWluKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgfVxuICAgIG1haW4gPSBleGVjdXRlRGVjb3JhdG9ycyh0ZW1wbGF0ZVNwZWMubWFpbiwgbWFpbiwgY29udGFpbmVyLCBvcHRpb25zLmRlcHRocyB8fCBbXSwgZGF0YSwgYmxvY2tQYXJhbXMpO1xuICAgIHJldHVybiBtYWluKGNvbnRleHQsIG9wdGlvbnMpO1xuICB9XG4gIHJldC5pc1RvcCA9IHRydWU7XG5cbiAgcmV0Ll9zZXR1cCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCkge1xuICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5oZWxwZXJzLCBlbnYuaGVscGVycyk7XG5cbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCkge1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5wYXJ0aWFscywgZW52LnBhcnRpYWxzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCB8fCB0ZW1wbGF0ZVNwZWMudXNlRGVjb3JhdG9ycykge1xuICAgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmRlY29yYXRvcnMsIGVudi5kZWNvcmF0b3JzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBvcHRpb25zLmhlbHBlcnM7XG4gICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcHRpb25zLnBhcnRpYWxzO1xuICAgICAgY29udGFpbmVyLmRlY29yYXRvcnMgPSBvcHRpb25zLmRlY29yYXRvcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldC5fY2hpbGQgPSBmdW5jdGlvbihpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyAmJiAhYmxvY2tQYXJhbXMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ211c3QgcGFzcyBibG9jayBwYXJhbXMnKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VEZXB0aHMgJiYgIWRlcHRocykge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignbXVzdCBwYXNzIHBhcmVudCBkZXB0aHMnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCB0ZW1wbGF0ZVNwZWNbaV0sIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICB9O1xuICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICBmdW5jdGlvbiBwcm9nKGNvbnRleHQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBjdXJyZW50RGVwdGhzID0gZGVwdGhzO1xuICAgIGlmIChkZXB0aHMgJiYgY29udGV4dCAhPSBkZXB0aHNbMF0gJiYgIShjb250ZXh0ID09PSBjb250YWluZXIubnVsbENvbnRleHQgJiYgZGVwdGhzWzBdID09PSBudWxsKSkge1xuICAgICAgY3VycmVudERlcHRocyA9IFtjb250ZXh0XS5jb25jYXQoZGVwdGhzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm4oY29udGFpbmVyLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjb250YWluZXIuaGVscGVycywgY29udGFpbmVyLnBhcnRpYWxzLFxuICAgICAgICBvcHRpb25zLmRhdGEgfHwgZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXMgJiYgW29wdGlvbnMuYmxvY2tQYXJhbXNdLmNvbmNhdChibG9ja1BhcmFtcyksXG4gICAgICAgIGN1cnJlbnREZXB0aHMpO1xuICB9XG5cbiAgcHJvZyA9IGV4ZWN1dGVEZWNvcmF0b3JzKGZuLCBwcm9nLCBjb250YWluZXIsIGRlcHRocywgZGF0YSwgYmxvY2tQYXJhbXMpO1xuXG4gIHByb2cucHJvZ3JhbSA9IGk7XG4gIHByb2cuZGVwdGggPSBkZXB0aHMgPyBkZXB0aHMubGVuZ3RoIDogMDtcbiAgcHJvZy5ibG9ja1BhcmFtcyA9IGRlY2xhcmVkQmxvY2tQYXJhbXMgfHwgMDtcbiAgcmV0dXJuIHByb2c7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlUGFydGlhbChwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIGlmICghcGFydGlhbCkge1xuICAgIGlmIChvcHRpb25zLm5hbWUgPT09ICdAcGFydGlhbC1ibG9jaycpIHtcbiAgICAgIHBhcnRpYWwgPSBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFydGlhbCA9IG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIXBhcnRpYWwuY2FsbCAmJiAhb3B0aW9ucy5uYW1lKSB7XG4gICAgLy8gVGhpcyBpcyBhIGR5bmFtaWMgcGFydGlhbCB0aGF0IHJldHVybmVkIGEgc3RyaW5nXG4gICAgb3B0aW9ucy5uYW1lID0gcGFydGlhbDtcbiAgICBwYXJ0aWFsID0gb3B0aW9ucy5wYXJ0aWFsc1twYXJ0aWFsXTtcbiAgfVxuICByZXR1cm4gcGFydGlhbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludm9rZVBhcnRpYWwocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICAvLyBVc2UgdGhlIGN1cnJlbnQgY2xvc3VyZSBjb250ZXh0IHRvIHNhdmUgdGhlIHBhcnRpYWwtYmxvY2sgaWYgdGhpcyBwYXJ0aWFsXG4gIGNvbnN0IGN1cnJlbnRQYXJ0aWFsQmxvY2sgPSBvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ107XG4gIG9wdGlvbnMucGFydGlhbCA9IHRydWU7XG4gIGlmIChvcHRpb25zLmlkcykge1xuICAgIG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCA9IG9wdGlvbnMuaWRzWzBdIHx8IG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aDtcbiAgfVxuXG4gIGxldCBwYXJ0aWFsQmxvY2s7XG4gIGlmIChvcHRpb25zLmZuICYmIG9wdGlvbnMuZm4gIT09IG5vb3ApIHtcbiAgICBvcHRpb25zLmRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgIC8vIFdyYXBwZXIgZnVuY3Rpb24gdG8gZ2V0IGFjY2VzcyB0byBjdXJyZW50UGFydGlhbEJsb2NrIGZyb20gdGhlIGNsb3N1cmVcbiAgICBsZXQgZm4gPSBvcHRpb25zLmZuO1xuICAgIHBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddID0gZnVuY3Rpb24gcGFydGlhbEJsb2NrV3JhcHBlcihjb250ZXh0LCBvcHRpb25zID0ge30pIHtcblxuICAgICAgLy8gUmVzdG9yZSB0aGUgcGFydGlhbC1ibG9jayBmcm9tIHRoZSBjbG9zdXJlIGZvciB0aGUgZXhlY3V0aW9uIG9mIHRoZSBibG9ja1xuICAgICAgLy8gaS5lLiB0aGUgcGFydCBpbnNpZGUgdGhlIGJsb2NrIG9mIHRoZSBwYXJ0aWFsIGNhbGwuXG4gICAgICBvcHRpb25zLmRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBjdXJyZW50UGFydGlhbEJsb2NrO1xuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgaWYgKGZuLnBhcnRpYWxzKSB7XG4gICAgICBvcHRpb25zLnBhcnRpYWxzID0gVXRpbHMuZXh0ZW5kKHt9LCBvcHRpb25zLnBhcnRpYWxzLCBmbi5wYXJ0aWFscyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCAmJiBwYXJ0aWFsQmxvY2spIHtcbiAgICBwYXJ0aWFsID0gcGFydGlhbEJsb2NrO1xuICB9XG5cbiAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBmb3VuZCcpO1xuICB9IGVsc2UgaWYgKHBhcnRpYWwgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIHJldHVybiBwYXJ0aWFsKGNvbnRleHQsIG9wdGlvbnMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyByZXR1cm4gJyc7IH1cblxuZnVuY3Rpb24gaW5pdERhdGEoY29udGV4dCwgZGF0YSkge1xuICBpZiAoIWRhdGEgfHwgISgncm9vdCcgaW4gZGF0YSkpIHtcbiAgICBkYXRhID0gZGF0YSA/IGNyZWF0ZUZyYW1lKGRhdGEpIDoge307XG4gICAgZGF0YS5yb290ID0gY29udGV4dDtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcykge1xuICBpZiAoZm4uZGVjb3JhdG9yKSB7XG4gICAgbGV0IHByb3BzID0ge307XG4gICAgcHJvZyA9IGZuLmRlY29yYXRvcihwcm9nLCBwcm9wcywgY29udGFpbmVyLCBkZXB0aHMgJiYgZGVwdGhzWzBdLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgICBVdGlscy5leHRlbmQocHJvZywgcHJvcHMpO1xuICB9XG4gIHJldHVybiBwcm9nO1xufVxuIiwiLy8gQnVpbGQgb3V0IG91ciBiYXNpYyBTYWZlU3RyaW5nIHR5cGVcbmZ1bmN0aW9uIFNhZmVTdHJpbmcoc3RyaW5nKSB7XG4gIHRoaXMuc3RyaW5nID0gc3RyaW5nO1xufVxuXG5TYWZlU3RyaW5nLnByb3RvdHlwZS50b1N0cmluZyA9IFNhZmVTdHJpbmcucHJvdG90eXBlLnRvSFRNTCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJycgKyB0aGlzLnN0cmluZztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNhZmVTdHJpbmc7XG4iLCJjb25zdCBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG5jb25zdCBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG4gICAgICBwb3NzaWJsZSA9IC9bJjw+XCInYD1dLztcblxuZnVuY3Rpb24gZXNjYXBlQ2hhcihjaHIpIHtcbiAgcmV0dXJuIGVzY2FwZVtjaHJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iai8qICwgLi4uc291cmNlICovKSB7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbaV0sIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgbGV0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gU291cmNlZCBmcm9tIGxvZGFzaFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL1xubGV0IGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcbn1cbmV4cG9ydCB7aXNGdW5jdGlvbn07XG4vKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpID8gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScgOiBmYWxzZTtcbn07XG5cbi8vIE9sZGVyIElFIHZlcnNpb25zIGRvIG5vdCBkaXJlY3RseSBzdXBwb3J0IGluZGV4T2Ygc28gd2UgbXVzdCBpbXBsZW1lbnQgb3VyIG93biwgc2FkbHkuXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkgeyByZXR1cm4gc3RyaW5nOyB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZyYW1lKG9iamVjdCkge1xuICBsZXQgZnJhbWUgPSBleHRlbmQoe30sIG9iamVjdCk7XG4gIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XG4gIHJldHVybiBmcmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG4gIHBhcmFtcy5wYXRoID0gaWRzO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ29udGV4dFBhdGgoY29udGV4dFBhdGgsIGlkKSB7XG4gIHJldHVybiAoY29udGV4dFBhdGggPyBjb250ZXh0UGF0aCArICcuJyA6ICcnKSArIGlkO1xufVxuIiwiLy8gQ3JlYXRlIGEgc2ltcGxlIHBhdGggYWxpYXMgdG8gYWxsb3cgYnJvd3NlcmlmeSB0byByZXNvbHZlXG4vLyB0aGUgcnVudGltZSBvbiBhIHN1cHBvcnRlZCBwYXRoLlxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvY2pzL2hhbmRsZWJhcnMucnVudGltZScpWydkZWZhdWx0J107XG4iLCIvKiBnbG9iYWwgQmxvYiBGaWxlICovXG5cbi8qXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJztcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXSc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNCaW5hcnk7XG5cbi8qKlxuICogQ2hlY2tzIGZvciBiaW5hcnkgZGF0YS5cbiAqXG4gKiBTdXBwb3J0cyBCdWZmZXIsIEFycmF5QnVmZmVyLCBCbG9iIGFuZCBGaWxlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbnl0aGluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBoYXNCaW5hcnkgKG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChoYXNCaW5hcnkob2JqW2ldKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIEJ1ZmZlci5pc0J1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAodHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fFxuICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvaGFzLWJpbmFyeS9wdWxsLzRcbiAgaWYgKG9iai50b0pTT04gJiYgdHlwZW9mIG9iai50b0pTT04gPT09ICdmdW5jdGlvbicgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSAmJiBoYXNCaW5hcnkob2JqW2tleV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqXG4gKiBMb2dpYyBib3Jyb3dlZCBmcm9tIE1vZGVybml6cjpcbiAqXG4gKiAgIC0gaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2NvcnMuanNcbiAqL1xuXG50cnkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAnd2l0aENyZWRlbnRpYWxzJyBpbiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbn0gY2F0Y2ggKGVycikge1xuICAvLyBpZiBYTUxIdHRwIHN1cHBvcnQgaXMgZGlzYWJsZWQgaW4gSUUgdGhlbiBpdCB3aWxsIHRocm93XG4gIC8vIHdoZW4gdHJ5aW5nIHRvIGNyZWF0ZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59OyIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjQuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTktMDUtMDFUMjE6MDRaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNC4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy40XG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDE5LTA0LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIikgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJiByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5hbWVzcGFjZSA9IGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgP1xuXHRcdFx0XHRhcmd1bWVudCArIGxlbmd0aCA6XG5cdFx0XHRcdGFyZ3VtZW50ID4gbGVuZ3RoID9cblx0XHRcdFx0XHRsZW5ndGggOlxuXHRcdFx0XHRcdGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5jb250ZW50RG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHQvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcblx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZVxuXHQvLyBXZSB1c2UgZ2V0Q2xpZW50UmVjdHMoKSB0byBjaGVjayBmb3IgaGlkZGVuL2Rpc2Nvbm5lY3RlZC5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94XG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImdyaWRBcmVhXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uRW5kXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dFbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dTdGFydFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IERhdGUubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtcyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKSB8fFxuICAgIHBsdXJhbChtcywgaCwgJ2hvdXInKSB8fFxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XG4gICAgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJykgfHxcbiAgICBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtcyA8IG4gKiAxLjUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIG4pICsgJyAnICsgbmFtZTtcbiAgfVxuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuIiwiLyoqXHJcbiAqIENvbXBpbGVzIGEgcXVlcnlzdHJpbmdcclxuICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgdmFyIHN0ciA9ICcnO1xyXG5cclxuICBmb3IgKHZhciBpIGluIG9iaikge1xyXG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xyXG4gICAgICBpZiAoc3RyLmxlbmd0aCkgc3RyICs9ICcmJztcclxuICAgICAgc3RyICs9IGVuY29kZVVSSUNvbXBvbmVudChpKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0cjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZXMgYSBzaW1wbGUgcXVlcnlzdHJpbmcgaW50byBhbiBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IHFzXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24ocXMpe1xyXG4gIHZhciBxcnkgPSB7fTtcclxuICB2YXIgcGFpcnMgPSBxcy5zcGxpdCgnJicpO1xyXG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XHJcbiAgICBxcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcclxuICB9XHJcbiAgcmV0dXJuIHFyeTtcclxufTtcclxuIiwiLyoqXHJcbiAqIFBhcnNlcyBhbiBVUklcclxuICpcclxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG52YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcclxuXHJcbnZhciBwYXJ0cyA9IFtcclxuICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJ1xyXG5dO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHtcclxuICAgIHZhciBzcmMgPSBzdHIsXHJcbiAgICAgICAgYiA9IHN0ci5pbmRleE9mKCdbJyksXHJcbiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksXHJcbiAgICAgICAgdXJpID0ge30sXHJcbiAgICAgICAgaSA9IDE0O1xyXG5cclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XHJcbiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYztcclxuICAgICAgICB1cmkuaG9zdCA9IHVyaS5ob3N0LnN1YnN0cmluZygxLCB1cmkuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcclxuICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVyaTtcclxufTtcclxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB1cmwgPSByZXF1aXJlKCcuL3VybCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBNYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gbG9va3VwO1xuXG4vKipcbiAqIE1hbmFnZXJzIGNhY2hlLlxuICovXG5cbnZhciBjYWNoZSA9IGV4cG9ydHMubWFuYWdlcnMgPSB7fTtcblxuLyoqXG4gKiBMb29rcyB1cCBhbiBleGlzdGluZyBgTWFuYWdlcmAgZm9yIG11bHRpcGxleGluZy5cbiAqIElmIHRoZSB1c2VyIHN1bW1vbnM6XG4gKlxuICogICBgaW8oJ2h0dHA6Ly9sb2NhbGhvc3QvYScpO2BcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2InKTtgXG4gKlxuICogV2UgcmV1c2UgdGhlIGV4aXN0aW5nIGluc3RhbmNlIGJhc2VkIG9uIHNhbWUgc2NoZW1lL3BvcnQvaG9zdCxcbiAqIGFuZCB3ZSBpbml0aWFsaXplIHNvY2tldHMgZm9yIGVhY2ggbmFtZXNwYWNlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9va3VwICh1cmksIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiB1cmkgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICB2YXIgcGFyc2VkID0gdXJsKHVyaSk7XG4gIHZhciBzb3VyY2UgPSBwYXJzZWQuc291cmNlO1xuICB2YXIgaWQgPSBwYXJzZWQuaWQ7XG4gIHZhciBwYXRoID0gcGFyc2VkLnBhdGg7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gY2FjaGVbaWRdICYmIHBhdGggaW4gY2FjaGVbaWRdLm5zcHM7XG4gIHZhciBuZXdDb25uZWN0aW9uID0gb3B0cy5mb3JjZU5ldyB8fCBvcHRzWydmb3JjZSBuZXcgY29ubmVjdGlvbiddIHx8XG4gICAgICAgICAgICAgICAgICAgICAgZmFsc2UgPT09IG9wdHMubXVsdGlwbGV4IHx8IHNhbWVOYW1lc3BhY2U7XG5cbiAgdmFyIGlvO1xuXG4gIGlmIChuZXdDb25uZWN0aW9uKSB7XG4gICAgZGVidWcoJ2lnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgIGlvID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghY2FjaGVbaWRdKSB7XG4gICAgICBkZWJ1ZygnbmV3IGlvIGluc3RhbmNlIGZvciAlcycsIHNvdXJjZSk7XG4gICAgICBjYWNoZVtpZF0gPSBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGlvID0gY2FjaGVbaWRdO1xuICB9XG4gIGlmIChwYXJzZWQucXVlcnkgJiYgIW9wdHMucXVlcnkpIHtcbiAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5O1xuICB9XG4gIHJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgsIG9wdHMpO1xufVxuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sO1xuXG4vKipcbiAqIGBjb25uZWN0YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY29ubmVjdCA9IGxvb2t1cDtcblxuLyoqXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzIGZvciBzdGFuZGFsb25lIGJ1aWxkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5NYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG5leHBvcnRzLlNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZWlvID0gcmVxdWlyZSgnZW5naW5lLmlvLWNsaWVudCcpO1xudmFyIFNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDptYW5hZ2VyJyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcbnZhciBCYWNrb2ZmID0gcmVxdWlyZSgnYmFja28yJyk7XG5cbi8qKlxuICogSUU2KyBoYXNPd25Qcm9wZXJ0eVxuICovXG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNYW5hZ2VyO1xuXG4vKipcbiAqIGBNYW5hZ2VyYCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5naW5lIGluc3RhbmNlIG9yIGVuZ2luZSB1cmkvb3B0c1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTWFuYWdlciAodXJpLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYW5hZ2VyKSkgcmV0dXJuIG5ldyBNYW5hZ2VyKHVyaSwgb3B0cyk7XG4gIGlmICh1cmkgJiYgKCdvYmplY3QnID09PSB0eXBlb2YgdXJpKSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCAnL3NvY2tldC5pbyc7XG4gIHRoaXMubnNwcyA9IHt9O1xuICB0aGlzLnN1YnMgPSBbXTtcbiAgdGhpcy5vcHRzID0gb3B0cztcbiAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgMC41KTtcbiAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgIG1pbjogdGhpcy5yZWNvbm5lY3Rpb25EZWxheSgpLFxuICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKClcbiAgfSk7XG4gIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMudXJpID0gdXJpO1xuICB0aGlzLmNvbm5lY3RpbmcgPSBbXTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdmFyIF9wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XG4gIHRoaXMuZW5jb2RlciA9IG5ldyBfcGFyc2VyLkVuY29kZXIoKTtcbiAgdGhpcy5kZWNvZGVyID0gbmV3IF9wYXJzZXIuRGVjb2RlcigpO1xuICB0aGlzLmF1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBQcm9wYWdhdGUgZ2l2ZW4gZXZlbnQgdG8gc29ja2V0cyBhbmQgZW1pdCBvbiBgdGhpc2BcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5lbWl0QWxsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmVtaXQuYXBwbHkodGhpcy5uc3BzW25zcF0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBgc29ja2V0LmlkYCBvZiBhbGwgc29ja2V0c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVNvY2tldElkcyA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmlkID0gdGhpcy5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGdlbmVyYXRlIGBzb2NrZXQuaWRgIGZvciB0aGUgZ2l2ZW4gYG5zcGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbnNwXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKG5zcCkge1xuICByZXR1cm4gKG5zcCA9PT0gJy8nID8gJycgOiAobnNwICsgJyMnKSkgKyB0aGlzLmVuZ2luZS5pZDtcbn07XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKE1hbmFnZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgcmVjb25uZWN0aW9uYCBjb25maWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB0cnVlL2ZhbHNlIGlmIGl0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHJlY29ubmVjdFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb24gPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBjb25maWcuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgYmVmb3JlIGdpdmluZyB1cFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO1xuICB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNaW4odik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuTWFuYWdlci5wcm90b3R5cGUucmFuZG9taXphdGlvbkZhY3RvciA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7XG4gIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3IgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldEppdHRlcih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1heGltdW0gZGVsYXkgYmV0d2VlbiByZWNvbm5lY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheU1heCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWF4KHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29ubmVjdGlvbiB0aW1lb3V0LiBgZmFsc2VgIHRvIGRpc2FibGVcbiAqXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICogc3RhcnRlZCByZWNvbm5lY3RpbmcgeWV0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUubWF5YmVSZWNvbm5lY3RPbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgaWYgKCF0aGlzLnJlY29ubmVjdGluZyAmJiB0aGlzLl9yZWNvbm5lY3Rpb24gJiYgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgLy8ga2VlcHMgcmVjb25uZWN0aW9uIGZyb20gZmlyaW5nIHR3aWNlIGZvciB0aGUgc2FtZSByZWNvbm5lY3Rpb24gbG9vcFxuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9uYWwsIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9wZW4gPVxuTWFuYWdlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChmbiwgb3B0cykge1xuICBkZWJ1ZygncmVhZHlTdGF0ZSAlcycsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIGlmICh+dGhpcy5yZWFkeVN0YXRlLmluZGV4T2YoJ29wZW4nKSkgcmV0dXJuIHRoaXM7XG5cbiAgZGVidWcoJ29wZW5pbmcgJXMnLCB0aGlzLnVyaSk7XG4gIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICB0aGlzLnNraXBSZWNvbm5lY3QgPSBmYWxzZTtcblxuICAvLyBlbWl0IGBvcGVuYFxuICB2YXIgb3BlblN1YiA9IG9uKHNvY2tldCwgJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbm9wZW4oKTtcbiAgICBmbiAmJiBmbigpO1xuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X2Vycm9yYFxuICB2YXIgZXJyb3JTdWIgPSBvbihzb2NrZXQsICdlcnJvcicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGVidWcoJ2Nvbm5lY3RfZXJyb3InKTtcbiAgICBzZWxmLmNsZWFudXAoKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfZXJyb3InLCBkYXRhKTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gZXJyb3InKTtcbiAgICAgIGVyci5kYXRhID0gZGF0YTtcbiAgICAgIGZuKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICBzZWxmLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X3RpbWVvdXRgXG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuXG4gICAgLy8gc2V0IHRpbWVyXG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuICAgICAgb3BlblN1Yi5kZXN0cm95KCk7XG4gICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgIHNvY2tldC5lbWl0KCdlcnJvcicsICd0aW1lb3V0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfdGltZW91dCcsIHRpbWVvdXQpO1xuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5zdWJzLnB1c2gob3BlblN1Yik7XG4gIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnb3BlbicpO1xuXG4gIC8vIGNsZWFyIG9sZCBzdWJzXG4gIHRoaXMuY2xlYW51cCgpO1xuXG4gIC8vIG1hcmsgYXMgb3BlblxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuXG4gIC8vIGFkZCBuZXcgc3Vic1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2RhdGEnLCBiaW5kKHRoaXMsICdvbmRhdGEnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwaW5nJywgYmluZCh0aGlzLCAnb25waW5nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncG9uZycsIGJpbmQodGhpcywgJ29ucG9uZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Vycm9yJywgYmluZCh0aGlzLCAnb25lcnJvcicpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlciwgJ2RlY29kZWQnLCBiaW5kKHRoaXMsICdvbmRlY29kZWQnKSkpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25waW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxhc3RQaW5nID0gbmV3IERhdGUoKTtcbiAgdGhpcy5lbWl0QWxsKCdwaW5nJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucG9uZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0QWxsKCdwb25nJywgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5lbWl0QWxsKCdlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gKlxuICogQHJldHVybiB7U29ja2V0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5zb2NrZXQgPSBmdW5jdGlvbiAobnNwLCBvcHRzKSB7XG4gIHZhciBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNvY2tldC5vbignY29ubmVjdGluZycsIG9uQ29ubmVjdGluZyk7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc29ja2V0LmlkID0gc2VsZi5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5hdXRvQ29ubmVjdCkge1xuICAgICAgLy8gbWFudWFsbHkgY2FsbCBoZXJlIHNpbmNlIGNvbm5lY3RpbmcgZXZlbnQgaXMgZmlyZWQgYmVmb3JlIGxpc3RlbmluZ1xuICAgICAgb25Db25uZWN0aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db25uZWN0aW5nICgpIHtcbiAgICBpZiAoIX5pbmRleE9mKHNlbGYuY29ubmVjdGluZywgc29ja2V0KSkge1xuICAgICAgc2VsZi5jb25uZWN0aW5nLnB1c2goc29ja2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc29ja2V0O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAqXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgdmFyIGluZGV4ID0gaW5kZXhPZih0aGlzLmNvbm5lY3RpbmcsIHNvY2tldCk7XG4gIGlmICh+aW5kZXgpIHRoaXMuY29ubmVjdGluZy5zcGxpY2UoaW5kZXgsIDEpO1xuICBpZiAodGhpcy5jb25uZWN0aW5nLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHRoaXMuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgZGVidWcoJ3dyaXRpbmcgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAocGFja2V0LnF1ZXJ5ICYmIHBhY2tldC50eXBlID09PSAwKSBwYWNrZXQubnNwICs9ICc/JyArIHBhY2tldC5xdWVyeTtcblxuICBpZiAoIXNlbGYuZW5jb2RpbmcpIHtcbiAgICAvLyBlbmNvZGUsIHRoZW4gd3JpdGUgdG8gZW5naW5lIHdpdGggcmVzdWx0XG4gICAgc2VsZi5lbmNvZGluZyA9IHRydWU7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0cykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2VsZi5lbmNvZGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5wcm9jZXNzUGFja2V0UXVldWUoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHsgLy8gYWRkIHBhY2tldCB0byB0aGUgcXVldWVcbiAgICBzZWxmLnBhY2tldEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cbn07XG5cbi8qKlxuICogSWYgcGFja2V0IGJ1ZmZlciBpcyBub24tZW1wdHksIGJlZ2lucyBlbmNvZGluZyB0aGVcbiAqIG5leHQgcGFja2V0IGluIGxpbmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucHJvY2Vzc1BhY2tldFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRCdWZmZXIubGVuZ3RoID4gMCAmJiAhdGhpcy5lbmNvZGluZykge1xuICAgIHZhciBwYWNrID0gdGhpcy5wYWNrZXRCdWZmZXIuc2hpZnQoKTtcbiAgICB0aGlzLnBhY2tldChwYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuXG4gIHZhciBzdWJzTGVuZ3RoID0gdGhpcy5zdWJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3ViID0gdGhpcy5zdWJzLnNoaWZ0KCk7XG4gICAgc3ViLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG5cbiAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsb3NlID1cbk1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdkaXNjb25uZWN0Jyk7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGBvbmNsb3NlYCB3aWxsIG5vdCBmaXJlIGJlY2F1c2VcbiAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICBpZiAodGhpcy5lbmdpbmUpIHRoaXMuZW5naW5lLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1Zygnb25jbG9zZScpO1xuXG4gIHRoaXMuY2xlYW51cCgpO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24pO1xuXG4gIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnJlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgZGVidWcoJ3JlY29ubmVjdCBmYWlsZWQnKTtcbiAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdF9mYWlsZWQnKTtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgIGRlYnVnKCd3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHQnLCBkZWxheSk7XG5cbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIGRlYnVnKCdhdHRlbXB0aW5nIHJlY29ubmVjdCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfYXR0ZW1wdCcsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdGluZycsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG5cbiAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBzZWxmLm9wZW4oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBhdHRlbXB0IGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2Vycm9yJywgZXJyLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3Qgc3VjY2VzcycpO1xuICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZGVsYXkpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMudXBkYXRlU29ja2V0SWRzKCk7XG4gIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0JywgYXR0ZW1wdCk7XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gb247XG5cbi8qKlxuICogSGVscGVyIGZvciBzdWJzY3JpcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEV2ZW50RW1pdHRlcn0gb2JqIHdpdGggYEVtaXR0ZXJgIG1peGluIG9yIGBFdmVudEVtaXR0ZXJgXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gb24gKG9iaiwgZXYsIGZuKSB7XG4gIG9iai5vbihldiwgZm4pO1xuICByZXR1cm4ge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIG9iai5yZW1vdmVMaXN0ZW5lcihldiwgZm4pO1xuICAgIH1cbiAgfTtcbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgdG9BcnJheSA9IHJlcXVpcmUoJ3RvLWFycmF5Jyk7XG52YXIgb24gPSByZXF1aXJlKCcuL29uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgaGFzQmluID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBTb2NrZXQ7XG5cbi8qKlxuICogSW50ZXJuYWwgZXZlbnRzIChibGFja2xpc3RlZCkuXG4gKiBUaGVzZSBldmVudHMgY2FuJ3QgYmUgZW1pdHRlZCBieSB0aGUgdXNlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgZXZlbnRzID0ge1xuICBjb25uZWN0OiAxLFxuICBjb25uZWN0X2Vycm9yOiAxLFxuICBjb25uZWN0X3RpbWVvdXQ6IDEsXG4gIGNvbm5lY3Rpbmc6IDEsXG4gIGRpc2Nvbm5lY3Q6IDEsXG4gIGVycm9yOiAxLFxuICByZWNvbm5lY3Q6IDEsXG4gIHJlY29ubmVjdF9hdHRlbXB0OiAxLFxuICByZWNvbm5lY3RfZmFpbGVkOiAxLFxuICByZWNvbm5lY3RfZXJyb3I6IDEsXG4gIHJlY29ubmVjdGluZzogMSxcbiAgcGluZzogMSxcbiAgcG9uZzogMVxufTtcblxuLyoqXG4gKiBTaG9ydGN1dCB0byBgRW1pdHRlciNlbWl0YC5cbiAqL1xuXG52YXIgZW1pdCA9IEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ7XG5cbi8qKlxuICogYFNvY2tldGAgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQgKGlvLCBuc3AsIG9wdHMpIHtcbiAgdGhpcy5pbyA9IGlvO1xuICB0aGlzLm5zcCA9IG5zcDtcbiAgdGhpcy5qc29uID0gdGhpczsgLy8gY29tcGF0XG4gIHRoaXMuaWRzID0gMDtcbiAgdGhpcy5hY2tzID0ge307XG4gIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmZsYWdzID0ge307XG4gIGlmIChvcHRzICYmIG9wdHMucXVlcnkpIHtcbiAgICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgfVxuICBpZiAodGhpcy5pby5hdXRvQ29ubmVjdCkgdGhpcy5vcGVuKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byBvcGVuLCBjbG9zZSBhbmQgcGFja2V0IGV2ZW50c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc3ViRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdWJzKSByZXR1cm47XG5cbiAgdmFyIGlvID0gdGhpcy5pbztcbiAgdGhpcy5zdWJzID0gW1xuICAgIG9uKGlvLCAnb3BlbicsIGJpbmQodGhpcywgJ29ub3BlbicpKSxcbiAgICBvbihpbywgJ3BhY2tldCcsIGJpbmQodGhpcywgJ29ucGFja2V0JykpLFxuICAgIG9uKGlvLCAnY2xvc2UnLCBiaW5kKHRoaXMsICdvbmNsb3NlJykpXG4gIF07XG59O1xuXG4vKipcbiAqIFwiT3BlbnNcIiB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vcGVuID1cblNvY2tldC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY29ubmVjdGVkKSByZXR1cm4gdGhpcztcblxuICB0aGlzLnN1YkV2ZW50cygpO1xuICB0aGlzLmlvLm9wZW4oKTsgLy8gZW5zdXJlIG9wZW5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5pby5yZWFkeVN0YXRlKSB0aGlzLm9ub3BlbigpO1xuICB0aGlzLmVtaXQoJ2Nvbm5lY3RpbmcnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgYG1lc3NhZ2VgIGV2ZW50LlxuICpcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICBhcmdzLnVuc2hpZnQoJ21lc3NhZ2UnKTtcbiAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogT3ZlcnJpZGUgYGVtaXRgLlxuICogSWYgdGhlIGV2ZW50IGlzIGluIGBldmVudHNgLCBpdCdzIGVtaXR0ZWQgbm9ybWFsbHkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShldikpIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgdmFyIHBhY2tldCA9IHtcbiAgICB0eXBlOiAodGhpcy5mbGFncy5iaW5hcnkgIT09IHVuZGVmaW5lZCA/IHRoaXMuZmxhZ3MuYmluYXJ5IDogaGFzQmluKGFyZ3MpKSA/IHBhcnNlci5CSU5BUllfRVZFTlQgOiBwYXJzZXIuRVZFTlQsXG4gICAgZGF0YTogYXJnc1xuICB9O1xuXG4gIHBhY2tldC5vcHRpb25zID0ge307XG4gIHBhY2tldC5vcHRpb25zLmNvbXByZXNzID0gIXRoaXMuZmxhZ3MgfHwgZmFsc2UgIT09IHRoaXMuZmxhZ3MuY29tcHJlc3M7XG5cbiAgLy8gZXZlbnQgYWNrIGNhbGxiYWNrXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdKSB7XG4gICAgZGVidWcoJ2VtaXR0aW5nIHBhY2tldCB3aXRoIGFjayBpZCAlZCcsIHRoaXMuaWRzKTtcbiAgICB0aGlzLmFja3NbdGhpcy5pZHNdID0gYXJncy5wb3AoKTtcbiAgICBwYWNrZXQuaWQgPSB0aGlzLmlkcysrO1xuICB9XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgdGhpcy5wYWNrZXQocGFja2V0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNlbmRCdWZmZXIucHVzaChwYWNrZXQpO1xuICB9XG5cbiAgdGhpcy5mbGFncyA9IHt9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgcGFja2V0Lm5zcCA9IHRoaXMubnNwO1xuICB0aGlzLmlvLnBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgYG9wZW5gLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygndHJhbnNwb3J0IGlzIG9wZW4gLSBjb25uZWN0aW5nJyk7XG5cbiAgLy8gd3JpdGUgY29ubmVjdCBwYWNrZXQgaWYgbmVjZXNzYXJ5XG4gIGlmICgnLycgIT09IHRoaXMubnNwKSB7XG4gICAgaWYgKHRoaXMucXVlcnkpIHtcbiAgICAgIHZhciBxdWVyeSA9IHR5cGVvZiB0aGlzLnF1ZXJ5ID09PSAnb2JqZWN0JyA/IHBhcnNlcXMuZW5jb2RlKHRoaXMucXVlcnkpIDogdGhpcy5xdWVyeTtcbiAgICAgIGRlYnVnKCdzZW5kaW5nIGNvbm5lY3QgcGFja2V0IHdpdGggcXVlcnkgJXMnLCBxdWVyeSk7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1QsIHF1ZXJ5OiBxdWVyeX0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1R9KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGBjbG9zZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlYXNvblxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1ZygnY2xvc2UgKCVzKScsIHJlYXNvbik7XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgZGVsZXRlIHRoaXMuaWQ7XG4gIHRoaXMuZW1pdCgnZGlzY29ubmVjdCcsIHJlYXNvbik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIHNvY2tldCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIHNhbWVOYW1lc3BhY2UgPSBwYWNrZXQubnNwID09PSB0aGlzLm5zcDtcbiAgdmFyIHJvb3ROYW1lc3BhY2VFcnJvciA9IHBhY2tldC50eXBlID09PSBwYXJzZXIuRVJST1IgJiYgcGFja2V0Lm5zcCA9PT0gJy8nO1xuXG4gIGlmICghc2FtZU5hbWVzcGFjZSAmJiAhcm9vdE5hbWVzcGFjZUVycm9yKSByZXR1cm47XG5cbiAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgIGNhc2UgcGFyc2VyLkNPTk5FQ1Q6XG4gICAgICB0aGlzLm9uY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfRVZFTlQ6XG4gICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5ESVNDT05ORUNUOlxuICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRVJST1I6XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgcGFja2V0LmRhdGEpO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmV2ZW50ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICBkZWJ1ZygnZW1pdHRpbmcgZXZlbnQgJWonLCBhcmdzKTtcblxuICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICBkZWJ1ZygnYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudCcpO1xuICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goYXJncyk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmFjayA9IGZ1bmN0aW9uIChpZCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzZW50ID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcHJldmVudCBkb3VibGUgY2FsbGJhY2tzXG4gICAgaWYgKHNlbnQpIHJldHVybjtcbiAgICBzZW50ID0gdHJ1ZTtcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICBkZWJ1Zygnc2VuZGluZyBhY2sgJWonLCBhcmdzKTtcblxuICAgIHNlbGYucGFja2V0KHtcbiAgICAgIHR5cGU6IGhhc0JpbihhcmdzKSA/IHBhcnNlci5CSU5BUllfQUNLIDogcGFyc2VyLkFDSyxcbiAgICAgIGlkOiBpZCxcbiAgICAgIGRhdGE6IGFyZ3NcbiAgICB9KTtcbiAgfTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgYWNrbm93bGVnZW1lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmFjayA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIGFjayA9IHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFjaykge1xuICAgIGRlYnVnKCdjYWxsaW5nIGFjayAlcyB3aXRoICVqJywgcGFja2V0LmlkLCBwYWNrZXQuZGF0YSk7XG4gICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTtcbiAgICBkZWxldGUgdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ2JhZCBhY2sgJXMnLCBwYWNrZXQuaWQpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnY29ubmVjdCcpO1xuICB0aGlzLmVtaXRCdWZmZXJlZCgpO1xufTtcblxuLyoqXG4gKiBFbWl0IGJ1ZmZlcmVkIGV2ZW50cyAocmVjZWl2ZWQgYW5kIGVtaXR0ZWQpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZW1pdEJ1ZmZlcmVkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IHRoaXMucmVjZWl2ZUJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIGVtaXQuYXBwbHkodGhpcywgdGhpcy5yZWNlaXZlQnVmZmVyW2ldKTtcbiAgfVxuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5wYWNrZXQodGhpcy5zZW5kQnVmZmVyW2ldKTtcbiAgfVxuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc2VydmVyIGRpc2Nvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzZXJ2ZXIgZGlzY29ubmVjdCAoJXMpJywgdGhpcy5uc3ApO1xuICB0aGlzLmRlc3Ryb3koKTtcbiAgdGhpcy5vbmNsb3NlKCdpbyBzZXJ2ZXIgZGlzY29ubmVjdCcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBmb3JjZWQgY2xpZW50L3NlcnZlciBzaWRlIGRpc2Nvbm5lY3Rpb25zLFxuICogdGhpcyBtZXRob2QgZW5zdXJlcyB0aGUgbWFuYWdlciBzdG9wcyB0cmFja2luZyB1cyBhbmRcbiAqIHRoYXQgcmVjb25uZWN0aW9ucyBkb24ndCBnZXQgdHJpZ2dlcmVkIGZvciB0aGlzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZS5cbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN1YnMpIHtcbiAgICAvLyBjbGVhbiBzdWJzY3JpcHRpb25zIHRvIGF2b2lkIHJlY29ubmVjdGlvbnNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vicy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5zdWJzW2ldLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy5zdWJzID0gbnVsbDtcbiAgfVxuXG4gIHRoaXMuaW8uZGVzdHJveSh0aGlzKTtcbn07XG5cbi8qKlxuICogRGlzY29ubmVjdHMgdGhlIHNvY2tldCBtYW51YWxseS5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9XG5Tb2NrZXQucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGRlYnVnKCdwZXJmb3JtaW5nIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHBhcnNlci5ESVNDT05ORUNUIH0pO1xuICB9XG5cbiAgLy8gcmVtb3ZlIHNvY2tldCBmcm9tIHBvb2xcbiAgdGhpcy5kZXN0cm95KCk7XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgLy8gZmlyZSBldmVudHNcbiAgICB0aGlzLm9uY2xvc2UoJ2lvIGNsaWVudCBkaXNjb25uZWN0Jyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGNvbXByZXNzIGZsYWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY29tcHJlc3MgPSBmdW5jdGlvbiAoY29tcHJlc3MpIHtcbiAgdGhpcy5mbGFncy5jb21wcmVzcyA9IGNvbXByZXNzO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgYmluYXJ5IGZsYWdcbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHdoZXRoZXIgdGhlIGVtaXR0ZWQgZGF0YSBjb250YWlucyBiaW5hcnlcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmJpbmFyeSA9IGZ1bmN0aW9uIChiaW5hcnkpIHtcbiAgdGhpcy5mbGFncy5iaW5hcnkgPSBiaW5hcnk7XG4gIHJldHVybiB0aGlzO1xufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnVybCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gdXJsO1xuXG4vKipcbiAqIFVSTCBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtPYmplY3R9IEFuIG9iamVjdCBtZWFudCB0byBtaW1pYyB3aW5kb3cubG9jYXRpb24uXG4gKiAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gd2luZG93LmxvY2F0aW9uLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiB1cmwgKHVyaSwgbG9jKSB7XG4gIHZhciBvYmogPSB1cmk7XG5cbiAgLy8gZGVmYXVsdCB0byB3aW5kb3cubG9jYXRpb25cbiAgbG9jID0gbG9jIHx8ICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnICYmIGxvY2F0aW9uKTtcbiAgaWYgKG51bGwgPT0gdXJpKSB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgbG9jLmhvc3Q7XG5cbiAgLy8gcmVsYXRpdmUgcGF0aCBzdXBwb3J0XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIGlmICgnLycgPT09IHVyaS5jaGFyQXQoMCkpIHtcbiAgICAgIGlmICgnLycgPT09IHVyaS5jaGFyQXQoMSkpIHtcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gbG9jLmhvc3QgKyB1cmk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCEvXihodHRwcz98d3NzPyk6XFwvXFwvLy50ZXN0KHVyaSkpIHtcbiAgICAgIGRlYnVnKCdwcm90b2NvbC1sZXNzIHVybCAlcycsIHVyaSk7XG4gICAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBsb2MpIHtcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgJy8vJyArIHVyaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVyaSA9ICdodHRwczovLycgKyB1cmk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcGFyc2VcbiAgICBkZWJ1ZygncGFyc2UgJXMnLCB1cmkpO1xuICAgIG9iaiA9IHBhcnNldXJpKHVyaSk7XG4gIH1cblxuICAvLyBtYWtlIHN1cmUgd2UgdHJlYXQgYGxvY2FsaG9zdDo4MGAgYW5kIGBsb2NhbGhvc3RgIGVxdWFsbHlcbiAgaWYgKCFvYmoucG9ydCkge1xuICAgIGlmICgvXihodHRwfHdzKSQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgb2JqLnBvcnQgPSAnODAnO1xuICAgIH0gZWxzZSBpZiAoL14oaHR0cHx3cylzJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc0NDMnO1xuICAgIH1cbiAgfVxuXG4gIG9iai5wYXRoID0gb2JqLnBhdGggfHwgJy8nO1xuXG4gIHZhciBpcHY2ID0gb2JqLmhvc3QuaW5kZXhPZignOicpICE9PSAtMTtcbiAgdmFyIGhvc3QgPSBpcHY2ID8gJ1snICsgb2JqLmhvc3QgKyAnXScgOiBvYmouaG9zdDtcblxuICAvLyBkZWZpbmUgdW5pcXVlIGlkXG4gIG9iai5pZCA9IG9iai5wcm90b2NvbCArICc6Ly8nICsgaG9zdCArICc6JyArIG9iai5wb3J0O1xuICAvLyBkZWZpbmUgaHJlZlxuICBvYmouaHJlZiA9IG9iai5wcm90b2NvbCArICc6Ly8nICsgaG9zdCArIChsb2MgJiYgbG9jLnBvcnQgPT09IG9iai5wb3J0ID8gJycgOiAoJzonICsgb2JqLnBvcnQpKTtcblxuICByZXR1cm4gb2JqO1xufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0cy5pbnN0YW5jZXMgPSBbXTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgdmFyIHByZXZUaW1lO1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICBkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICBleHBvcnRzLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuICByZXR1cm4gZGVidWc7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICB2YXIgaW5kZXggPSBleHBvcnRzLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgZXhwb3J0cy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgaTtcbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cG9ydHMuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZXhwb3J0cy5pbnN0YW5jZXNbaV07XG4gICAgaW5zdGFuY2UuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8qZ2xvYmFsIEJsb2IsRmlsZSovXG5cbi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50c1xuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nKTtcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXScpO1xuXG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIGluIHBhY2tldCB3aXRoIGEgbnVtYmVyZWQgcGxhY2Vob2xkZXIuXG4gKiBBbnl0aGluZyB3aXRoIGJsb2JzIG9yIGZpbGVzIHNob3VsZCBiZSBmZWQgdGhyb3VnaCByZW1vdmVCbG9icyBiZWZvcmUgY29taW5nXG4gKiBoZXJlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBzb2NrZXQuaW8gZXZlbnQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggZGVjb25zdHJ1Y3RlZCBwYWNrZXQgYW5kIGxpc3Qgb2YgYnVmZmVyc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciBwYWNrZXREYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBwYWNrID0gcGFja2V0O1xuICBwYWNrLmRhdGEgPSBfZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0RGF0YSwgYnVmZmVycyk7XG4gIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gIHJldHVybiB7cGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzfTtcbn07XG5cbmZ1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGlzQnVmKGRhdGEpKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICBidWZmZXJzLnB1c2goZGF0YSk7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuZXdEYXRhW2ldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBuZXdEYXRhW2tleV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnJlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBidWZmZXJzKSB7XG4gIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gIHJldHVybiBwYWNrZXQ7XG59O1xuXG5mdW5jdGlvbiBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcnNbZGF0YS5udW1dOyAvLyBhcHByb3ByaWF0ZSBidWZmZXIgKHNob3VsZCBiZSBuYXR1cmFsIG9yZGVyIGFueXdheSlcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgcmVtb3ZlcyBCbG9icyBvciBGaWxlcyBmcm9tIGRhdGEgdmlhXG4gKiBGaWxlUmVhZGVyJ3MgcmVhZEFzQXJyYXlCdWZmZXIgbWV0aG9kLiBVc2VkIGJlZm9yZSBlbmNvZGluZ1xuICogZGF0YSBhcyBtc2dwYWNrLiBDYWxscyBjYWxsYmFjayB3aXRoIHRoZSBibG9ibGVzcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5yZW1vdmVCbG9icyA9IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIF9yZW1vdmVCbG9icyhvYmosIGN1cktleSwgY29udGFpbmluZ09iamVjdCkge1xuICAgIGlmICghb2JqKSByZXR1cm4gb2JqO1xuXG4gICAgLy8gY29udmVydCBhbnkgYmxvYlxuICAgIGlmICgod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKSB7XG4gICAgICBwZW5kaW5nQmxvYnMrKztcblxuICAgICAgLy8gYXN5bmMgZmlsZXJlYWRlclxuICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHsgLy8gdGhpcy5yZXN1bHQgPT0gYXJyYXlidWZmZXJcbiAgICAgICAgaWYgKGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICAgICAgICBjb250YWluaW5nT2JqZWN0W2N1cktleV0gPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBibG9ibGVzc0RhdGEgPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vdGhpbmcgcGVuZGluZyBpdHMgY2FsbGJhY2sgdGltZVxuICAgICAgICBpZighIC0tcGVuZGluZ0Jsb2JzKSB7XG4gICAgICAgICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihvYmopOyAvLyBibG9iIC0+IGFycmF5YnVmZmVyXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikpIHsgLy8gaGFuZGxlIGFycmF5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIWlzQnVmKG9iaikpIHsgLy8gYW5kIG9iamVjdFxuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcGVuZGluZ0Jsb2JzID0gMDtcbiAgdmFyIGJsb2JsZXNzRGF0YSA9IGRhdGE7XG4gIF9yZW1vdmVCbG9icyhibG9ibGVzc0RhdGEpO1xuICBpZiAoIXBlbmRpbmdCbG9icykge1xuICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gIH1cbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgYmluYXJ5ID0gcmVxdWlyZSgnLi9iaW5hcnknKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IDQ7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy50eXBlcyA9IFtcbiAgJ0NPTk5FQ1QnLFxuICAnRElTQ09OTkVDVCcsXG4gICdFVkVOVCcsXG4gICdBQ0snLFxuICAnRVJST1InLFxuICAnQklOQVJZX0VWRU5UJyxcbiAgJ0JJTkFSWV9BQ0snXG5dO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQ09OTkVDVCA9IDA7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGRpc2Nvbm5lY3RgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5ESVNDT05ORUNUID0gMTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZXZlbnRgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FVkVOVCA9IDI7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGFja2AuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkFDSyA9IDM7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGVycm9yYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVJST1IgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlICdiaW5hcnkgZXZlbnQnXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9FVkVOVCA9IDU7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGJpbmFyeSBhY2tgLiBGb3IgYWNrcyB3aXRoIGJpbmFyeSBhcmd1bWVudHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9BQ0sgPSA2O1xuXG4vKipcbiAqIEVuY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVuY29kZXIgPSBFbmNvZGVyO1xuXG4vKipcbiAqIERlY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkRlY29kZXIgPSBEZWNvZGVyO1xuXG4vKipcbiAqIEEgc29ja2V0LmlvIEVuY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEVuY29kZXIoKSB7fVxuXG52YXIgRVJST1JfUEFDS0VUID0gZXhwb3J0cy5FUlJPUiArICdcImVuY29kZSBlcnJvclwiJztcblxuLyoqXG4gKiBFbmNvZGUgYSBwYWNrZXQgYXMgYSBzaW5nbGUgc3RyaW5nIGlmIG5vbi1iaW5hcnksIG9yIGFzIGFcbiAqIGJ1ZmZlciBzZXF1ZW5jZSwgZGVwZW5kaW5nIG9uIHBhY2tldCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBwYWNrZXQgb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGhhbmRsZSBlbmNvZGluZ3MgKGxpa2VseSBlbmdpbmUud3JpdGUpXG4gKiBAcmV0dXJuIENhbGxzIGNhbGxiYWNrIHdpdGggQXJyYXkgb2YgZW5jb2RpbmdzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spe1xuICBkZWJ1ZygnZW5jb2RpbmcgcGFja2V0ICVqJywgb2JqKTtcblxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gb2JqLnR5cGUpIHtcbiAgICBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZW5jb2RpbmcgPSBlbmNvZGVBc1N0cmluZyhvYmopO1xuICAgIGNhbGxiYWNrKFtlbmNvZGluZ10pO1xuICB9XG59O1xuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge1N0cmluZ30gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNTdHJpbmcob2JqKSB7XG5cbiAgLy8gZmlyc3QgaXMgdHlwZVxuICB2YXIgc3RyID0gJycgKyBvYmoudHlwZTtcblxuICAvLyBhdHRhY2htZW50cyBpZiB3ZSBoYXZlIHRoZW1cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgc3RyICs9IG9iai5hdHRhY2htZW50cyArICctJztcbiAgfVxuXG4gIC8vIGlmIHdlIGhhdmUgYSBuYW1lc3BhY2Ugb3RoZXIgdGhhbiBgL2BcbiAgLy8gd2UgYXBwZW5kIGl0IGZvbGxvd2VkIGJ5IGEgY29tbWEgYCxgXG4gIGlmIChvYmoubnNwICYmICcvJyAhPT0gb2JqLm5zcCkge1xuICAgIHN0ciArPSBvYmoubnNwICsgJywnO1xuICB9XG5cbiAgLy8gaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgdGhlIGlkXG4gIGlmIChudWxsICE9IG9iai5pZCkge1xuICAgIHN0ciArPSBvYmouaWQ7XG4gIH1cblxuICAvLyBqc29uIGRhdGFcbiAgaWYgKG51bGwgIT0gb2JqLmRhdGEpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRyeVN0cmluZ2lmeShvYmouZGF0YSk7XG4gICAgaWYgKHBheWxvYWQgIT09IGZhbHNlKSB7XG4gICAgICBzdHIgKz0gcGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEVSUk9SX1BBQ0tFVDtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZygnZW5jb2RlZCAlaiBhcyAlcycsIG9iaiwgc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gdHJ5U3RyaW5naWZ5KHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgJ2J1ZmZlciBzZXF1ZW5jZScgYnkgcmVtb3ZpbmcgYmxvYnMsIGFuZFxuICogZGVjb25zdHJ1Y3RpbmcgcGFja2V0IGludG8gb2JqZWN0IHdpdGggcGxhY2Vob2xkZXJzIGFuZFxuICogYSBsaXN0IG9mIGJ1ZmZlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QnVmZmVyfSBlbmNvZGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKSB7XG5cbiAgZnVuY3Rpb24gd3JpdGVFbmNvZGluZyhibG9ibGVzc0RhdGEpIHtcbiAgICB2YXIgZGVjb25zdHJ1Y3Rpb24gPSBiaW5hcnkuZGVjb25zdHJ1Y3RQYWNrZXQoYmxvYmxlc3NEYXRhKTtcbiAgICB2YXIgcGFjayA9IGVuY29kZUFzU3RyaW5nKGRlY29uc3RydWN0aW9uLnBhY2tldCk7XG4gICAgdmFyIGJ1ZmZlcnMgPSBkZWNvbnN0cnVjdGlvbi5idWZmZXJzO1xuXG4gICAgYnVmZmVycy51bnNoaWZ0KHBhY2spOyAvLyBhZGQgcGFja2V0IGluZm8gdG8gYmVnaW5uaW5nIG9mIGRhdGEgbGlzdFxuICAgIGNhbGxiYWNrKGJ1ZmZlcnMpOyAvLyB3cml0ZSBhbGwgdGhlIGJ1ZmZlcnNcbiAgfVxuXG4gIGJpbmFyeS5yZW1vdmVCbG9icyhvYmosIHdyaXRlRW5jb2RpbmcpO1xufVxuXG4vKipcbiAqIEEgc29ja2V0LmlvIERlY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlY29kZXJcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRGVjb2RlcigpIHtcbiAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgIHdpdGggRGVjb2Rlci5cbiAqL1xuXG5FbWl0dGVyKERlY29kZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZWNvZGVzIGFuIGVuY29kZWQgcGFja2V0IHN0cmluZyBpbnRvIHBhY2tldCBKU09OLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBvYmogLSBlbmNvZGVkIHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVjb2Rlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciBwYWNrZXQ7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgIHBhY2tldCA9IGRlY29kZVN0cmluZyhvYmopO1xuICAgIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gcGFja2V0LnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBwYWNrZXQudHlwZSkgeyAvLyBiaW5hcnkgcGFja2V0J3MganNvblxuICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbmV3IEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KTtcblxuICAgICAgLy8gbm8gYXR0YWNobWVudHMsIGxhYmVsZWQgYmluYXJ5IGJ1dCBubyBiaW5hcnkgZGF0YSB0byBmb2xsb3dcbiAgICAgIGlmICh0aGlzLnJlY29uc3RydWN0b3IucmVjb25QYWNrLmF0dGFjaG1lbnRzID09PSAwKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHsgLy8gbm9uLWJpbmFyeSBmdWxsIHBhY2tldFxuICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNCdWYob2JqKSB8fCBvYmouYmFzZTY0KSB7IC8vIHJhdyBiaW5hcnkgZGF0YVxuICAgIGlmICghdGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dvdCBiaW5hcnkgZGF0YSB3aGVuIG5vdCByZWNvbnN0cnVjdGluZyBhIHBhY2tldCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYWNrZXQgPSB0aGlzLnJlY29uc3RydWN0b3IudGFrZUJpbmFyeURhdGEob2JqKTtcbiAgICAgIGlmIChwYWNrZXQpIHsgLy8gcmVjZWl2ZWQgZmluYWwgYnVmZmVyXG4gICAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlOiAnICsgb2JqKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBwYWNrZXQgU3RyaW5nIChKU09OIGRhdGEpXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGRlY29kZVN0cmluZyhzdHIpIHtcbiAgdmFyIGkgPSAwO1xuICAvLyBsb29rIHVwIHR5cGVcbiAgdmFyIHAgPSB7XG4gICAgdHlwZTogTnVtYmVyKHN0ci5jaGFyQXQoMCkpXG4gIH07XG5cbiAgaWYgKG51bGwgPT0gZXhwb3J0cy50eXBlc1twLnR5cGVdKSB7XG4gICAgcmV0dXJuIGVycm9yKCd1bmtub3duIHBhY2tldCB0eXBlICcgKyBwLnR5cGUpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBhdHRhY2htZW50cyBpZiB0eXBlIGJpbmFyeVxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IHAudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IHAudHlwZSkge1xuICAgIHZhciBidWYgPSAnJztcbiAgICB3aGlsZSAoc3RyLmNoYXJBdCgrK2kpICE9PSAnLScpIHtcbiAgICAgIGJ1ZiArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKGkgPT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICAgIGlmIChidWYgIT0gTnVtYmVyKGJ1ZikgfHwgc3RyLmNoYXJBdChpKSAhPT0gJy0nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgYXR0YWNobWVudHMnKTtcbiAgICB9XG4gICAgcC5hdHRhY2htZW50cyA9IE51bWJlcihidWYpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBuYW1lc3BhY2UgKGlmIGFueSlcbiAgaWYgKCcvJyA9PT0gc3RyLmNoYXJBdChpICsgMSkpIHtcbiAgICBwLm5zcCA9ICcnO1xuICAgIHdoaWxlICgrK2kpIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmICgnLCcgPT09IGMpIGJyZWFrO1xuICAgICAgcC5uc3AgKz0gYztcbiAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcC5uc3AgPSAnLyc7XG4gIH1cblxuICAvLyBsb29rIHVwIGlkXG4gIHZhciBuZXh0ID0gc3RyLmNoYXJBdChpICsgMSk7XG4gIGlmICgnJyAhPT0gbmV4dCAmJiBOdW1iZXIobmV4dCkgPT0gbmV4dCkge1xuICAgIHAuaWQgPSAnJztcbiAgICB3aGlsZSAoKytpKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAobnVsbCA9PSBjIHx8IE51bWJlcihjKSAhPSBjKSB7XG4gICAgICAgIC0taTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwLmlkICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICAgIHAuaWQgPSBOdW1iZXIocC5pZCk7XG4gIH1cblxuICAvLyBsb29rIHVwIGpzb24gZGF0YVxuICBpZiAoc3RyLmNoYXJBdCgrK2kpKSB7XG4gICAgdmFyIHBheWxvYWQgPSB0cnlQYXJzZShzdHIuc3Vic3RyKGkpKTtcbiAgICB2YXIgaXNQYXlsb2FkVmFsaWQgPSBwYXlsb2FkICE9PSBmYWxzZSAmJiAocC50eXBlID09PSBleHBvcnRzLkVSUk9SIHx8IGlzQXJyYXkocGF5bG9hZCkpO1xuICAgIGlmIChpc1BheWxvYWRWYWxpZCkge1xuICAgICAgcC5kYXRhID0gcGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVycm9yKCdpbnZhbGlkIHBheWxvYWQnKTtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZygnZGVjb2RlZCAlcyBhcyAlaicsIHN0ciwgcCk7XG4gIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiB0cnlQYXJzZShzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIERlYWxsb2NhdGVzIGEgcGFyc2VyJ3MgcmVzb3VyY2VzXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWNvZGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICB0aGlzLnJlY29uc3RydWN0b3IuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICB9XG59O1xuXG4vKipcbiAqIEEgbWFuYWdlciBvZiBhIGJpbmFyeSBldmVudCdzICdidWZmZXIgc2VxdWVuY2UnLiBTaG91bGRcbiAqIGJlIGNvbnN0cnVjdGVkIHdoZW5ldmVyIGEgcGFja2V0IG9mIHR5cGUgQklOQVJZX0VWRU5UIGlzXG4gKiBkZWNvZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0JpbmFyeVJlY29uc3RydWN0b3J9IGluaXRpYWxpemVkIHJlY29uc3RydWN0b3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KSB7XG4gIHRoaXMucmVjb25QYWNrID0gcGFja2V0O1xuICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gYmluYXJ5IGRhdGEgcmVjZWl2ZWQgZnJvbSBjb25uZWN0aW9uXG4gKiBhZnRlciBhIEJJTkFSWV9FVkVOVCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtCdWZmZXIgfCBBcnJheUJ1ZmZlcn0gYmluRGF0YSAtIHRoZSByYXcgYmluYXJ5IGRhdGEgcmVjZWl2ZWRcbiAqIEByZXR1cm4ge251bGwgfCBPYmplY3R9IHJldHVybnMgbnVsbCBpZiBtb3JlIGJpbmFyeSBkYXRhIGlzIGV4cGVjdGVkIG9yXG4gKiAgIGEgcmVjb25zdHJ1Y3RlZCBwYWNrZXQgb2JqZWN0IGlmIGFsbCBidWZmZXJzIGhhdmUgYmVlbiByZWNlaXZlZC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLnRha2VCaW5hcnlEYXRhID0gZnVuY3Rpb24oYmluRGF0YSkge1xuICB0aGlzLmJ1ZmZlcnMucHVzaChiaW5EYXRhKTtcbiAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IHRoaXMucmVjb25QYWNrLmF0dGFjaG1lbnRzKSB7IC8vIGRvbmUgd2l0aCBidWZmZXIgbGlzdFxuICAgIHZhciBwYWNrZXQgPSBiaW5hcnkucmVjb25zdHJ1Y3RQYWNrZXQodGhpcy5yZWNvblBhY2ssIHRoaXMuYnVmZmVycyk7XG4gICAgdGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgcmV0dXJuIHBhY2tldDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogQ2xlYW5zIHVwIGJpbmFyeSBwYWNrZXQgcmVjb25zdHJ1Y3Rpb24gdmFyaWFibGVzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZWNvblBhY2sgPSBudWxsO1xuICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbn07XG5cbmZ1bmN0aW9uIGVycm9yKG1zZykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGV4cG9ydHMuRVJST1IsXG4gICAgZGF0YTogJ3BhcnNlciBlcnJvcjogJyArIG1zZ1xuICB9O1xufVxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG52YXIgd2l0aE5hdGl2ZUJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIEJ1ZmZlci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJztcbnZhciB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5cbnZhciBpc1ZpZXcgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nID8gQXJyYXlCdWZmZXIuaXNWaWV3KG9iaikgOiAob2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0J1ZihvYmopIHtcbiAgcmV0dXJuICh3aXRoTmF0aXZlQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICAgICAgICh3aXRoTmF0aXZlQXJyYXlCdWZmZXIgJiYgKG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IGlzVmlldyhvYmopKSk7XG59XG4iLCIvKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWVcbiAgICAgICAgICAgICAgICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgPyBjaHJvbWUuc3RvcmFnZS5sb2NhbFxuICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG4gICcjMDAwMENDJywgJyMwMDAwRkYnLCAnIzAwMzNDQycsICcjMDAzM0ZGJywgJyMwMDY2Q0MnLCAnIzAwNjZGRicsICcjMDA5OUNDJyxcbiAgJyMwMDk5RkYnLCAnIzAwQ0MwMCcsICcjMDBDQzMzJywgJyMwMENDNjYnLCAnIzAwQ0M5OScsICcjMDBDQ0NDJywgJyMwMENDRkYnLFxuICAnIzMzMDBDQycsICcjMzMwMEZGJywgJyMzMzMzQ0MnLCAnIzMzMzNGRicsICcjMzM2NkNDJywgJyMzMzY2RkYnLCAnIzMzOTlDQycsXG4gICcjMzM5OUZGJywgJyMzM0NDMDAnLCAnIzMzQ0MzMycsICcjMzNDQzY2JywgJyMzM0NDOTknLCAnIzMzQ0NDQycsICcjMzNDQ0ZGJyxcbiAgJyM2NjAwQ0MnLCAnIzY2MDBGRicsICcjNjYzM0NDJywgJyM2NjMzRkYnLCAnIzY2Q0MwMCcsICcjNjZDQzMzJywgJyM5OTAwQ0MnLFxuICAnIzk5MDBGRicsICcjOTkzM0NDJywgJyM5OTMzRkYnLCAnIzk5Q0MwMCcsICcjOTlDQzMzJywgJyNDQzAwMDAnLCAnI0NDMDAzMycsXG4gICcjQ0MwMDY2JywgJyNDQzAwOTknLCAnI0NDMDBDQycsICcjQ0MwMEZGJywgJyNDQzMzMDAnLCAnI0NDMzMzMycsICcjQ0MzMzY2JyxcbiAgJyNDQzMzOTknLCAnI0NDMzNDQycsICcjQ0MzM0ZGJywgJyNDQzY2MDAnLCAnI0NDNjYzMycsICcjQ0M5OTAwJywgJyNDQzk5MzMnLFxuICAnI0NDQ0MwMCcsICcjQ0NDQzMzJywgJyNGRjAwMDAnLCAnI0ZGMDAzMycsICcjRkYwMDY2JywgJyNGRjAwOTknLCAnI0ZGMDBDQycsXG4gICcjRkYwMEZGJywgJyNGRjMzMDAnLCAnI0ZGMzMzMycsICcjRkYzMzY2JywgJyNGRjMzOTknLCAnI0ZGMzNDQycsICcjRkYzM0ZGJyxcbiAgJyNGRjY2MDAnLCAnI0ZGNjYzMycsICcjRkY5OTAwJywgJyNGRjk5MzMnLCAnI0ZGQ0MwMCcsICcjRkZDQzMzJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcbiAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgLy8gZXhwbGljaXRseVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgd2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcbiAgICAvLyBkb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0JylcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG5cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWdbJ2RlZmF1bHQnXSA9IGNyZWF0ZURlYnVnO1xuZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2U7XG5leHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO1xuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5leHBvcnRzLmVuYWJsZWQgPSBlbmFibGVkO1xuZXhwb3J0cy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cbi8qKlxuICogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICovXG5leHBvcnRzLmluc3RhbmNlcyA9IFtdO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFNlbGVjdCBhIGNvbG9yLlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gIHZhciBoYXNoID0gMCwgaTtcblxuICBmb3IgKGkgaW4gbmFtZXNwYWNlKSB7XG4gICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblxuICB2YXIgcHJldlRpbWU7XG5cbiAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgLy8gZGlzYWJsZWQ/XG4gICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSByZXR1cm47XG5cbiAgICB2YXIgc2VsZiA9IGRlYnVnO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyB0dXJuIHRoZSBgYXJndW1lbnRzYCBpbnRvIGEgcHJvcGVyIEFycmF5XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIC8vIGFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG4gICAgZXhwb3J0cy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cbiAgICB2YXIgbG9nRm4gPSBkZWJ1Zy5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuXG4gIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZGVidWcuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpO1xuICBkZWJ1Zy51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG4gIGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG4gIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZXhwb3J0cy5pbml0KSB7XG4gICAgZXhwb3J0cy5pbml0KGRlYnVnKTtcbiAgfVxuXG4gIGV4cG9ydHMuaW5zdGFuY2VzLnB1c2goZGVidWcpO1xuXG4gIHJldHVybiBkZWJ1Zztcbn1cblxuZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gIHZhciBpbmRleCA9IGV4cG9ydHMuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICBleHBvcnRzLmluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIGV4cG9ydHMubmFtZXMgPSBbXTtcbiAgZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4gIHZhciBpO1xuICB2YXIgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZXhwb3J0cy5pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBleHBvcnRzLmluc3RhbmNlc1tpXTtcbiAgICBpbnN0YW5jZS5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICBpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXlcblxuZnVuY3Rpb24gdG9BcnJheShsaXN0LCBpbmRleCkge1xuICAgIHZhciBhcnJheSA9IFtdXG5cbiAgICBpbmRleCA9IGluZGV4IHx8IDBcblxuICAgIGZvciAodmFyIGkgPSBpbmRleCB8fCAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJheVtpIC0gaW5kZXhdID0gbGlzdFtpXVxuICAgIH1cblxuICAgIHJldHVybiBhcnJheVxufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXycuc3BsaXQoJycpXG4gICwgbGVuZ3RoID0gNjRcbiAgLCBtYXAgPSB7fVxuICAsIHNlZWQgPSAwXG4gICwgaSA9IDBcbiAgLCBwcmV2O1xuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBlbmNvZGUobnVtKSB7XG4gIHZhciBlbmNvZGVkID0gJyc7XG5cbiAgZG8ge1xuICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtcbiAgICBudW0gPSBNYXRoLmZsb29yKG51bSAvIGxlbmd0aCk7XG4gIH0gd2hpbGUgKG51bSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW50ZWdlciB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBpbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gIHZhciBkZWNvZGVkID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVjb2RlZCA9IGRlY29kZWQgKiBsZW5ndGggKyBtYXBbc3RyLmNoYXJBdChpKV07XG4gIH1cblxuICByZXR1cm4gZGVjb2RlZDtcbn1cblxuLyoqXG4gKiBZZWFzdDogQSB0aW55IGdyb3dpbmcgaWQgZ2VuZXJhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgdW5pcXVlIGlkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24geWVhc3QoKSB7XG4gIHZhciBub3cgPSBlbmNvZGUoK25ldyBEYXRlKCkpO1xuXG4gIGlmIChub3cgIT09IHByZXYpIHJldHVybiBzZWVkID0gMCwgcHJldiA9IG5vdztcbiAgcmV0dXJuIG5vdyArJy4nKyBlbmNvZGUoc2VlZCsrKTtcbn1cblxuLy9cbi8vIE1hcCBlYWNoIGNoYXJhY3RlciB0byBpdHMgaW5kZXguXG4vL1xuZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgbWFwW2FscGhhYmV0W2ldXSA9IGk7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIGB5ZWFzdGAsIGBlbmNvZGVgIGFuZCBgZGVjb2RlYCBmdW5jdGlvbnMuXG4vL1xueWVhc3QuZW5jb2RlID0gZW5jb2RlO1xueWVhc3QuZGVjb2RlID0gZGVjb2RlO1xubW9kdWxlLmV4cG9ydHMgPSB5ZWFzdDtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENlbGwge1xuICAgIGNvbnN0cnVjdG9yKHRpbGUsIHBpZWNlKSB7XG4gICAgICAgIHRoaXMuX3RpbGUgPSB0aWxlO1xuICAgICAgICB0aGlzLnBpZWNlID0gcGllY2U7XG4gICAgICAgIHRoaXMueCA9IC0xO1xuICAgICAgICB0aGlzLnkgPSAtMTtcbiAgICB9XG5cbiAgICBnZXQgdGlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbGU7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgdGVtcGxhdGUgPSByZXF1aXJlKFwiLi4vdGVtcGxhdGVzL2NlbGwuaGJzXCIpO1xuICAgICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICAgICAgY2VsbDogdGhpcyxcbiAgICAgICAgICAgIHRpbGVDbGFzczogdGhpcy50aWxlLmNsYXNzZXMsXG4gICAgICAgICAgICBwaWVjZTogdGhpcy5waWVjZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGVtcGxhdGUocGFyYW1zKTtcbiAgICB9XG59IiwiaW1wb3J0IHtyZWFkQ29va2llLCBjcmVhdGVDb29raWUsIGVyYXNlQ29va2llfSBmcm9tICcuL3V0aWxzL2Nvb2tpZSdcbmltcG9ydCBHYW1lTWFzdGVyIGZyb20gJy4vZ2FtZW1hc3RlcidcbmltcG9ydCB0aW1lU2luY2UgZnJvbSBcIi4vdXRpbHMvdGltZVNpbmNlXCI7XG5pbXBvcnQge1JVTEVfU0VUU30gZnJvbSBcIi4vZ2FtZV90eXBlcy9ydWxlc2V0c1wiO1xuXG5cbmNsYXNzIENsaWVudCB7XG4gICAgY29uc3RydWN0b3IodXNlcm5hbWUpIHtcbiAgICAgICAgdGhpcy5sb2dpbih1c2VybmFtZSk7XG4gICAgICAgIHRoaXMuc2V0dXBDcmVhdGVHYW1lKCk7XG4gICAgICAgIHRoaXMuc29ja2V0ID0gaW8oKTtcbiAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnbG9naW4nLCB0aGlzLnVzZXJuYW1lKTtcblxuICAgICAgICB0aGlzLnNvY2tldC5vbignc2V0dXAgZ2FtZScsIGZ1bmN0aW9uIChnYW1lKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWVtYXN0ZXIgPSBuZXcgR2FtZU1hc3Rlcih0aGlzLnNvY2tldCwgdGhpcywgZ2FtZSk7XG4gICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2luZ2FtZScpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKCdsaXN0IGdhbWVzJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdEdhbWVzKGRhdGEpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKCdyZWxvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIGxvZ2luKHVzZXJuYW1lKSB7XG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSB1c2VybmFtZTtcbiAgICAgICAgbGV0IGluZm8gPSAkKCcjdXNlciAuaW5mbycpO1xuICAgICAgICAkKCcudXNlcm5hbWUnLCBpbmZvKS50ZXh0KHVzZXJuYW1lKTtcbiAgICAgICAgJCgnLmxvZ291dCcsIGluZm8pLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXJhc2VDb29raWUoJ3VzZXJuYW1lJyk7XG4gICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2xvZ2dlZC1pbicpO1xuICAgIH1cblxuICAgIGxpc3RHYW1lcyhkYXRhKSB7XG4gICAgICAgICQoJyNteWdhbWVzLCAjbG9iYnlzLCAjc3BlY3RhdGVnYW1lcycpLmVtcHR5KCk7XG5cbiAgICAgICAgLy8gbG9iYnlzXG4gICAgICAgIGZvciAobGV0IGxvYmJ5IG9mIGRhdGEubG9iYnlzKSB7XG4gICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSByZXF1aXJlKFwiLi4vdGVtcGxhdGVzL2xvYmJ5Lmhic1wiKTtcbiAgICAgICAgICAgIGxldCBodG1sID0gdGVtcGxhdGUoe1xuICAgICAgICAgICAgICAgIGlkOiBsb2JieS5pZCxcbiAgICAgICAgICAgICAgICBuYW1lOiBsb2JieS5uYW1lLFxuICAgICAgICAgICAgICAgIHJ1bGVzZXQ6IFJVTEVfU0VUU1tsb2JieS5ydWxlc2V0XS5uYW1lLFxuICAgICAgICAgICAgICAgIHBsYXllcjogbG9iYnkucGxheWVyLFxuICAgICAgICAgICAgICAgIGNyZWF0ZWQ6IHRpbWVTaW5jZShuZXcgRGF0ZShsb2JieS5jcmVhdGVkKSksXG4gICAgICAgICAgICAgICAgam9pbmFibGU6IChsb2JieS5wbGF5ZXIgIT09IHRoaXMudXNlcm5hbWUpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQoJyNsb2JieXMnKS5wcmVwZW5kKGh0bWwpO1xuICAgICAgICB9XG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcubG9iYnkgLmpvaW4nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSAkKGUudGFyZ2V0KS5wYXJlbnRzKCcubG9iYnknKS5kYXRhKCdpZCcpO1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnam9pbiBnYW1lJywgaWQpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgIC8vIGdhbWVzXG4gICAgICAgIGZvciAobGV0IGdhbWUgb2YgZGF0YS5nYW1lcykge1xuICAgICAgICAgICAgbGV0IHRlbXBsYXRlID0gcmVxdWlyZShcIi4uL3RlbXBsYXRlcy9nYW1lcHJldmlldy5oYnNcIik7XG4gICAgICAgICAgICBsZXQgaHRtbCA9IHRlbXBsYXRlKHtcbiAgICAgICAgICAgICAgICBpZDogZ2FtZS5pZCxcbiAgICAgICAgICAgICAgICBuYW1lOiBnYW1lLm5hbWUsXG4gICAgICAgICAgICAgICAgcnVsZXNldDogUlVMRV9TRVRTW2dhbWUucnVsZXMuaWRdLm5hbWUsXG4gICAgICAgICAgICAgICAgcGxheWVyMTogZ2FtZS5wbGF5ZXIxLm5hbWUsXG4gICAgICAgICAgICAgICAgcGxheWVyMjogZ2FtZS5wbGF5ZXIyLm5hbWUsXG4gICAgICAgICAgICAgICAgY3JlYXRlZDogdGltZVNpbmNlKG5ldyBEYXRlKGdhbWUuY3JlYXRlZCkpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGdhbWUucGxheWVyMS5uYW1lID09PSB0aGlzLnVzZXJuYW1lIHx8IGdhbWUucGxheWVyMi5uYW1lID09PSB0aGlzLnVzZXJuYW1lKSB7XG4gICAgICAgICAgICAgICAgJCgnI215Z2FtZXMnKS5wcmVwZW5kKGh0bWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCcjc3BlY3RhdGVnYW1lcycpLnByZXBlbmQoaHRtbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNnYW1lcyAuZ2FtZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGxldCBpZCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5nYW1lJykuZGF0YSgnaWQnKTtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ29wZW4gZ2FtZScsIGlkKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBzZXR1cENyZWF0ZUdhbWUoKSB7XG4gICAgICAgICQoJyNnYW1lbmFtZScpLmF0dHIoJ3BsYWNlaG9sZGVyJywgdGhpcy5kZWZhdWx0R2FtZU5hbWUoKSk7XG5cbiAgICAgICAgLy8gZmlsbCBjaGVzcyB2YXJpYW50c1xuICAgICAgICBmb3IgKGxldCBpZCBvZiBPYmplY3Qua2V5cyhSVUxFX1NFVFMpKSB7XG4gICAgICAgICAgICBsZXQgcnVsZXNldCA9IFJVTEVfU0VUU1tpZF07XG4gICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSByZXF1aXJlKFwiLi4vdGVtcGxhdGVzL3J1bGVzZXQtc2VsZWN0Lmhic1wiKTtcbiAgICAgICAgICAgIGxldCBodG1sID0gdGVtcGxhdGUoe1xuICAgICAgICAgICAgICAgIGlkOiBydWxlc2V0LmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IHJ1bGVzZXQubmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKCcjcnVsZXNldCcpLmFwcGVuZChodG1sKTtcbiAgICAgICAgfVxuICAgICAgICAkKCcjcnVsZXNldCBpbnB1dDpmaXJzdCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcblxuICAgICAgICAkKCcjY3JlYXRlLWdhbWUnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQoJyNjcmVhdG9yJykuc2xpZGVUb2dnbGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgICQoJyNjcmVhdG9yJykub24oJ3N1Ym1pdCcsIHRoaXMuY3JlYXRlR2FtZS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBkZWZhdWx0R2FtZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZXJuYW1lICsgXCIncyBHYW1lXCI7XG4gICAgfVxuXG4gICAgY3JlYXRlR2FtZShldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgbmFtZSA9ICQoJyNnYW1lbmFtZScpLnZhbCgpO1xuICAgICAgICBpZiAobmFtZS5sZW5ndGggPT09IDApXG4gICAgICAgICAgICBuYW1lID0gdGhpcy5kZWZhdWx0R2FtZU5hbWUoKTtcbiAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnY3JlYXRlIGxvYmJ5Jywge1xuICAgICAgICAgICBwbGF5ZXI6IHRoaXMudXNlcm5hbWUsXG4gICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgIHJ1bGVzZXQ6ICQoJ2lucHV0W25hbWU9cnVsZXNldF06Y2hlY2tlZCcpLnZhbCgpXG4gICAgICAgIH0pO1xuICAgICAgICAkKCcjY3JlYXRvcicpLnNsaWRlVG9nZ2xlKCk7XG4gICAgfVxufVxuXG5cbmxldCB1c2VybmFtZSA9IHJlYWRDb29raWUoJ3VzZXJuYW1lJyk7XG5pZiAodXNlcm5hbWUgIT09IG51bGwpIHtcbiAgICBuZXcgQ2xpZW50KHVzZXJuYW1lKTtcbn1cbiQoZG9jdW1lbnQpLm9uKCdzdWJtaXQnLCAnI2xvZ2luJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCB1c2VybmFtZSA9ICQoJyNsb2dpbiBpbnB1dC51c2VybmFtZScpLnZhbCgpO1xuICAgIGlmICh1c2VybmFtZSAhPT0gJycpIHtcbiAgICAgICAgY3JlYXRlQ29va2llKCd1c2VybmFtZScsIHVzZXJuYW1lLCA3KTtcbiAgICAgICAgbmV3IENsaWVudCh1c2VybmFtZSk7XG4gICAgfVxufSk7XG5cbiIsImltcG9ydCBDZWxsIGZyb20gJy4vY2VsbCdcbmltcG9ydCB7V2hpdGVUaWxlLCBCbGFja1RpbGV9IGZyb20gJy4vdGlsZSdcbmltcG9ydCBndWlkIGZyb20gJy4vdXRpbHMvZ3VpZCdcbmltcG9ydCB7UElFQ0VfUkVHSVNUUll9IGZyb20gXCIuL2dhbWVfdHlwZXMvcGllY2VyZWdpc3RyeVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lIHtcbiAgICBjb25zdHJ1Y3RvcihydWxlcywgbmFtZSwgcGxheWVyMSwgcGxheWVyMiwgaXNTZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5pZCA9IGd1aWQoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgICAgICB0aGlzLmNyZWF0ZWQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAvLyBzdG9yZXMgYWxsIG1vdmVzIG9mIHRoZSBnYW1lXG4gICAgICAgIHRoaXMuZ2FtZUxvZyA9IFtdO1xuICAgICAgICAvLyBzdG9yZXMgbW92ZXMgb2YgcGxheWVycyB1bnRpbCBldmVyeSBwbGF5ZXIgaGFzIHN1Ym1pdHRlZFxuICAgICAgICB0aGlzLmN1cnJlbnRNb3ZlQ2FjaGUgPSBbXTtcbiAgICAgICAgdGhpcy5wbGF5ZXIxID0gcGxheWVyMTtcbiAgICAgICAgdGhpcy5wbGF5ZXIxLm51bWJlciA9IDE7XG4gICAgICAgIHRoaXMucGxheWVyMiA9IHBsYXllcjI7XG4gICAgICAgIHRoaXMucGxheWVyMi5udW1iZXIgPSAyO1xuICAgICAgICB0aGlzLnBsYXllckNvdW50ID0gMjtcblxuICAgICAgICB0aGlzLmJvYXJkID0gdGhpcy5nZW5lcmF0ZUNoZWNrZWRCb2FyZChydWxlcy5ib2FyZFdpZHRoLCBydWxlcy5ib2FyZEhlaWdodCk7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gcnVsZXMuYm9hcmRIZWlnaHQ7XG4gICAgICAgIHRoaXMud2lkdGggPSBydWxlcy5ib2FyZFdpZHRoO1xuXG4gICAgICAgIC8vIHNhdmUgY29vcmRzIG9uIGNlbGwgZm9yIGVhc2llciBsb29rdXAgW3ldW3hdXG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5ib2FyZC5sZW5ndGg7IHkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLmJvYXJkW3ldLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNlbGwgPSB0aGlzLmJvYXJkW3ldW3hdO1xuICAgICAgICAgICAgICAgIGNlbGwueCA9IHg7XG4gICAgICAgICAgICAgICAgY2VsbC55ID0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9ubHkgZG8gdGhlIG1vdmVzIG9uIHRoZSBzZXJ2ZXIgYW5kIHRoZW4gcHVzaCB0aGVtIG9udG8gdGhlIGNsaWVudFxuICAgICAgICBpZiAoaXNTZXJ2ZXIpXG4gICAgICAgICAgICBmb3IgKGxldCBsb2dFbnRyeSBvZiBydWxlcy5zZXR1cE1vdmVzKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV4ZWN1dGUobG9nRW50cnkpO1xuICAgICAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGdlbmVyYXRlcyBhIGxvZ0VudHJ5IGZvciBhIG1vdmVcbiAgICAvLyB0aGlzIGxvZ0VudHJ5IGNhbiB0aGVuIGJlIGV4ZWN1dGVkIGJ5IGFsbCBwbGF5ZXJzXG4gICAgc3RhdGljIHByZXBhcmVNb3ZlKHNvdXJjZUNlbGwsIHRhcmdldENlbGwpIHtcbiAgICAgICAgaWYgKCFzb3VyY2VDZWxsLnBpZWNlKSB0aHJvdyAnTm9QaWVjZVRvTW92ZSc7XG5cbiAgICAgICAgbGV0IGxvZ0VudHJ5ID0ge1xuICAgICAgICAgICAgYWN0aW9uOiAnbW92ZScsXG4gICAgICAgICAgICBwbGF5ZXJOdW1iZXI6IHNvdXJjZUNlbGwucGllY2Uub3duZXIubnVtYmVyLFxuICAgICAgICAgICAgbW92ZWRQaWVjZUNsYXNzOiBzb3VyY2VDZWxsLnBpZWNlLmNsYXNzLFxuICAgICAgICAgICAgc291cmNlOiB7eDogc291cmNlQ2VsbC54LCB5OiBzb3VyY2VDZWxsLnl9LFxuICAgICAgICAgICAgdGFyZ2V0OiB7eDogdGFyZ2V0Q2VsbC54LCB5OiB0YXJnZXRDZWxsLnl9LFxuICAgICAgICAgICAgZGVzdHJveWVkOiBmYWxzZSAvLyB0aGlzIGlzIHNldCB3aGVuIHR3byBwaWVjZXMgY29sbGlkZVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0YXJnZXRDZWxsLnBpZWNlKVxuICAgICAgICAgICAgbG9nRW50cnkuY2FwdHVyZWRQaWVjZUNsYXNzID0gdGFyZ2V0Q2VsbC5waWVjZS5jbGFzcztcblxuICAgICAgICByZXR1cm4gbG9nRW50cnk7XG4gICAgfVxuXG4gICAgc3RhdGljIHByZXBhcmVQbGFjZVBpZWNlKHgsIHksIHBsYXllck51bWJlciwgcGllY2VOYW1lKSB7XG4gICAgICAgIGxldCBsb2dFbnRyeSA9IHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3BsYWNlIHBpZWNlJyxcbiAgICAgICAgICAgIHBpZWNlTmFtZTogcGllY2VOYW1lLFxuICAgICAgICAgICAgcGxheWVyTnVtYmVyOiBwbGF5ZXJOdW1iZXIsXG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbG9nRW50cnk7XG4gICAgfVxuXG4gICAgLy8gY2hlY2tzIGlmIGEgbW92ZSBpcyB2YWxpZFxuICAgIGNoZWNrTW92ZShsb2dFbnRyeSkge1xuICAgICAgICAvLyBjaGVjayBpZiB0aGUgcGxheWVyIGFscmVhZHkgbWFkZSBoaXMgbW92ZVxuICAgICAgICBmb3IgKGxldCBtb3ZlIG9mIHRoaXMuY3VycmVudE1vdmVDYWNoZSlcbiAgICAgICAgICAgIGlmIChtb3ZlLnBsYXllck51bWJlciA9PT0gbG9nRW50cnkucGxheWVyTnVtYmVyKVxuICAgICAgICAgICAgICAgIHRocm93ICdPdXRPZlN5bmNFcnJvcjogUGxheWVyIGFscmVhZHkgbWFkZSBoaXMgbW92ZSc7XG5cbiAgICAgICAgbGV0IHNvdXJjZUNlbGwgPSB0aGlzLmdldENlbGwobG9nRW50cnkuc291cmNlKTtcbiAgICAgICAgbGV0IHRhcmdldENlbGwgPSB0aGlzLmdldENlbGwobG9nRW50cnkudGFyZ2V0KTtcbiAgICAgICAgaWYgKCFzb3VyY2VDZWxsLnBpZWNlKSB0aHJvdyAnTm9QaWVjZVRvTW92ZSc7XG4gICAgICAgIGlmIChzb3VyY2VDZWxsLnBpZWNlLmNsYXNzICE9PSBsb2dFbnRyeS5tb3ZlZFBpZWNlQ2xhc3MpIHRocm93ICdPdXRPZlN5bmNFcnJvcjogd3Jvbmcgc291cmNlIHBpZWNlIGNsYXNzJztcbiAgICAgICAgaWYgKGxvZ0VudHJ5LmNhcHR1cmVkUGllY2VDbGFzcyAmJlxuICAgICAgICAgICAgbG9nRW50cnkuY2FwdHVyZWRQaWVjZUNsYXNzICE9PSB0YXJnZXRDZWxsLnBpZWNlLmNsYXNzKSB0aHJvdyAnT3V0T2ZTeW5jRXJyb3I6IHdyb25nIGNhcHR1cmVkIHBpZWNlIGNsYXNzJztcbiAgICB9XG5cbiAgICBleGVjdXRlKGxvZ0VudHJ5KSB7XG4gICAgICAgIGlmIChsb2dFbnRyeS5hY3Rpb24gPT09ICdtb3ZlJykge1xuICAgICAgICAgICAgdGhpcy5jaGVja01vdmUobG9nRW50cnkpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50TW92ZUNhY2hlLnB1c2gobG9nRW50cnkpO1xuXG4gICAgICAgICAgICAvLyB3YWl0IGZvciBvdGhlciBwbGF5ZXJzXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TW92ZUNhY2hlLmxlbmd0aCA8IHRoaXMucGxheWVyQ291bnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdub3RpZmljYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUGxheWVyTWFkZU1vdmUnLFxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJOdW1iZXI6IGxvZ0VudHJ5LnBsYXllck51bWJlclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJ1aWxkIHN5bSBtb3ZlXG4gICAgICAgICAgICBsZXQgc3ltTG9nRW50cnkgPSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnc3ltIG1vdmUnLFxuICAgICAgICAgICAgICAgIG1vdmVzOiB0aGlzLmN1cnJlbnRNb3ZlQ2FjaGVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGFuZCBtYXJrIGNvbGxpZGluZyBwaWVjZVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzeW1Mb2dFbnRyeS5tb3Zlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3ltTG9nRW50cnkubW92ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IGogJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHN5bUxvZ0VudHJ5Lm1vdmVzW2ldLnRhcmdldC54ID09PSBzeW1Mb2dFbnRyeS5tb3Zlc1tqXS50YXJnZXQueCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc3ltTG9nRW50cnkubW92ZXNbaV0udGFyZ2V0LnkgPT09IHN5bUxvZ0VudHJ5Lm1vdmVzW2pdLnRhcmdldC55KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhIGNvbGxpc2lvbiFcbiAgICAgICAgICAgICAgICAgICAgICAgIHN5bUxvZ0VudHJ5Lm1vdmVzW2ldLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jdXJyZW50TW92ZUNhY2hlID0gW107XG4gICAgICAgICAgICB0aGlzLmV4ZWN1dGUoc3ltTG9nRW50cnkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coc3ltTG9nRW50cnkpO1xuICAgICAgICAgICAgbGV0IGdhbWVFbmQgPSB0aGlzLmNoZWNrV2luQ29uZGl0aW9uKCk7XG4gICAgICAgICAgICBpZiAoZ2FtZUVuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUxvZy5wdXNoKGdhbWVFbmQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbc3ltTG9nRW50cnksIGdhbWVFbmRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN5bUxvZ0VudHJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2dFbnRyeS5hY3Rpb24gPT09ICdzeW0gbW92ZScpIHtcbiAgICAgICAgICAgIGxldCBwaWVjZXMgPSBbXTtcblxuICAgICAgICAgICAgLy8gcGljayB1cCBwaWVjZXNcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9nRW50cnkubW92ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgc291cmNlQ2VsbCA9IHRoaXMuZ2V0Q2VsbChsb2dFbnRyeS5tb3Zlc1tpXS5zb3VyY2UpO1xuICAgICAgICAgICAgICAgIHBpZWNlc1tpXSA9IHNvdXJjZUNlbGwucGllY2U7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNvdXJjZUNlbGwucGllY2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHB1dCBwaWVjZSBkb3duXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxvZ0VudHJ5Lm1vdmVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgLy8gZG8gbm90IHB1dCBwaWVjZSBkb3duIGlmIGl0IHdhcyBkZXN0cm95ZWRcbiAgICAgICAgICAgICAgICBpZiAobG9nRW50cnkubW92ZXNbal0uZGVzdHJveWVkKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXRDZWxsID0gdGhpcy5nZXRDZWxsKGxvZ0VudHJ5Lm1vdmVzW2pdLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Q2VsbC5waWVjZSA9IHBpZWNlc1tqXTtcbiAgICAgICAgICAgICAgICB0YXJnZXRDZWxsLnBpZWNlLmhhc01vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZG8gc3BlY2lhbCBtb3Zlc1xuICAgICAgICAgICAgZm9yIChsZXQgbW92ZSBvZiBsb2dFbnRyeS5tb3Zlcykge1xuICAgICAgICAgICAgICAgIGlmIChtb3ZlLnNwZWNpYWwgPT09ICdlbi1wYXNzYW50Jykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0Q2VsbCA9IHRoaXMuZ2V0Q2VsbChtb3ZlLnRhcmdldC54LCBtb3ZlLnNvdXJjZS55KTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRhcmdldENlbGwucGllY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtb3ZlLnNwZWNpYWwgPT09ICdwcm9tb3RlJykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0Q2VsbEZVID0gdGhpcy5nZXRDZWxsKG1vdmUudGFyZ2V0LngsIG1vdmUudGFyZ2V0LnkpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGllY2VDbGFzcyA9IFBJRUNFX1JFR0lTVFJZW21vdmUucHJvbW90aW9uUGllY2VOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBpZWNlID0gbmV3IHBpZWNlQ2xhc3ModGFyZ2V0Q2VsbEZVLnBpZWNlLm93bmVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q2VsbEZVLnBpZWNlID0gcGllY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmdhbWVMb2cucHVzaChsb2dFbnRyeSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9nRW50cnkuYWN0aW9uID09PSAncGxhY2UgcGllY2UnKSB7XG4gICAgICAgICAgICBsZXQgcGllY2VDbGFzcyA9IFBJRUNFX1JFR0lTVFJZW2xvZ0VudHJ5LnBpZWNlTmFtZV07XG4gICAgICAgICAgICBsZXQgcGxheWVyID0gdGhpcy5nZXRQbGF5ZXIobG9nRW50cnkucGxheWVyTnVtYmVyKTtcbiAgICAgICAgICAgIGxldCBwaWVjZSA9IG5ldyBwaWVjZUNsYXNzKHBsYXllcik7XG4gICAgICAgICAgICBsZXQgY2VsbCA9IHRoaXMuZ2V0Q2VsbChsb2dFbnRyeSk7XG4gICAgICAgICAgICBjZWxsLnBpZWNlID0gcGllY2U7XG4gICAgICAgICAgICB0aGlzLmdhbWVMb2cucHVzaChsb2dFbnRyeSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAqZ2V0UG9zc2libGVNb3ZlcyhjZWxsKSB7XG4gICAgICAgIHlpZWxkKiBjZWxsLnBpZWNlLmdldFBvc3NpYmxlTW92ZXModGhpcywgY2VsbC54LCBjZWxsLnkpO1xuICAgIH1cblxuICAgIGNoZWNrV2luQ29uZGl0aW9uKCkge1xuICAgICAgICBsZXQgcGxheWVyc1N0aWxsQWxpdmUgPSBuZXcgU2V0KFt0aGlzLnBsYXllcjEsIHRoaXMucGxheWVyMl0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucnVsZXMubG9zZUNvbmRpdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBsb3NlcnMgPSB0aGlzLnJ1bGVzLmxvc2VDb25kaXRpb25zW2ldLmNoZWNrQ29uZGl0aW9uKHRoaXMpO1xuICAgICAgICAgICAgZm9yIChsZXQgbG9zZXIgb2YgbG9zZXJzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyc1N0aWxsQWxpdmUuZGVsZXRlKGxvc2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAocGxheWVyc1N0aWxsQWxpdmUuc2l6ZSkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2dhbWVFbmQnLFxuICAgICAgICAgICAgICAgICAgICB3aW5uZXI6IDAgLy8gbnVtYmVyIDA6IGRyYXdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2dhbWVFbmQnLFxuICAgICAgICAgICAgICAgICAgICB3aW5uZXI6IFsuLi5wbGF5ZXJzU3RpbGxBbGl2ZV1bMF0ubnVtYmVyXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNhbGxlZCB3aXRoIHgsIHkgb3Ige3g6IGludCwgeTogaW50fSwgdW5kZWZpbmVkXG4gICAgZ2V0Q2VsbCh4LCB5KSB7XG4gICAgICAgIC8vIHBhc3Mgb25seSB0aGUgeCBwYXJhbSB0byBiZSBoYW5kbGVkIGFzIG9iamVjdDoge3g6IDEsIHk6IDF9XG4gICAgICAgIGlmICh5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHkgPSB4Lnk7XG4gICAgICAgICAgICB4ID0geC54O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHkgPCAwIHx8IHkgPj0gdGhpcy5ib2FyZC5sZW5ndGgpIHRocm93IFwiT3V0c2lkZU9mQm9hcmRcIjtcbiAgICAgICAgbGV0IHJvdyA9IHRoaXMuYm9hcmRbeV07XG4gICAgICAgIGlmICh4IDwgMCB8fCB4ID49IHJvdy5sZW5ndGgpIHRocm93IFwiT3V0c2lkZU9mQm9hcmRcIjtcbiAgICAgICAgcmV0dXJuIHJvd1t4XTtcbiAgICB9XG5cbiAgICBnZXRQbGF5ZXIocGxheWVyTnVtYmVyKSB7XG4gICAgICAgIGlmIChwbGF5ZXJOdW1iZXIgPT09IDEpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIxO1xuICAgICAgICBpZiAocGxheWVyTnVtYmVyID09PSAyKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGxheWVyMjtcbiAgICAgICAgdGhyb3cgXCJJbnZhbGlkUGxheWVyTnVtYmVyXCI7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVDaGVja2VkQm9hcmQod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBsZXQgYm9hcmQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgYm9hcmRbeV0gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICAgICAgICAgIGJvYXJkW3ldW3hdID0gbmV3IENlbGwoKCh4ICsgeSkgJSAyID09PSAwID8gbmV3IEJsYWNrVGlsZSgpIDogbmV3IFdoaXRlVGlsZSgpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJvYXJkO1xuICAgIH1cbn0iLCJpbXBvcnQgTG9zZUNvbmRpdGlvbiBmcm9tIFwiLi9sb3NlY29uZGl0aW9uXCI7XG5pbXBvcnQge0tpbmd9IGZyb20gXCIuLi8uLi9waWVjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLaW5nRGVhZCBleHRlbmRzIExvc2VDb25kaXRpb24ge1xuICAgIGNoZWNrQ29uZGl0aW9uKGdhbWUpIHtcbiAgICAgICAgbGV0IHBsYXllcnMgPSBuZXcgU2V0KFtnYW1lLnBsYXllcjEsIGdhbWUucGxheWVyMl0pO1xuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGdhbWUuYm9hcmQubGVuZ3RoOyB5KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgZ2FtZS5ib2FyZFt5XS5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgICAgIGlmIChnYW1lLmJvYXJkW3ldW3hdLnBpZWNlIGluc3RhbmNlb2YgS2luZylcbiAgICAgICAgICAgICAgICAgICAgcGxheWVycy5kZWxldGUoZ2FtZS5ib2FyZFt5XVt4XS5waWVjZS5vd25lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBsYXllcnM7XG4gICAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIExvc2VDb25kaXRpb24ge1xuICAgIC8vIGNoZWNrcyBpZiBhIHBsYXllciBsb3N0IGFjY29yZGluZyB0byB0aGUgY29uZGl0aW9uXG4gICAgLy8gcmV0dXJuIGFuIGFycmF5IHdpdGggYWxsIGxvc2luZyBwbGF5ZXJzXG4gICAgY2hlY2tDb25kaXRpb24oZ2FtZSkge1xuICAgICAgICB0aHJvdyAnTm90SW1wbGVtZW50ZWRFcnJvcidcbiAgICB9O1xufSIsImltcG9ydCB7R29kLCBQYXduLCBSb29rLCBLbmlnaHQsIEJpc2hvcCwgUXVlZW4sIEtpbmd9IGZyb20gXCIuLi9waWVjZVwiO1xuXG5leHBvcnQgbGV0IFBJRUNFX1JFR0lTVFJZID0ge307XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcihwaWVjZSkge1xuICAgIFBJRUNFX1JFR0lTVFJZW3BpZWNlLm5hbWVdID0gcGllY2U7XG59XG5cbnJlZ2lzdGVyKEdvZCk7XG5yZWdpc3RlcihQYXduKTtcbnJlZ2lzdGVyKFJvb2spO1xucmVnaXN0ZXIoS25pZ2h0KTtcbnJlZ2lzdGVyKEJpc2hvcCk7XG5yZWdpc3RlcihRdWVlbik7XG5yZWdpc3RlcihLaW5nKTsiLCJpbXBvcnQgR2FtZSBmcm9tICcuLi9nYW1lJ1xuaW1wb3J0IEtpbmdEZWFkIGZyb20gXCIuL2xvc2VfY29uZGl0aW9ucy9raW5nZGVhZFwiO1xuXG5cbmV4cG9ydCBsZXQgUlVMRV9TRVRTID0ge1xuICAgICdjaGVzcyc6IHtcbiAgICAgICAgaWQ6ICdjaGVzcycsXG4gICAgICAgIG5hbWU6IFwiQ2hlc3NcIixcbiAgICAgICAgbG9zZUNvbmRpdGlvbnM6IFtuZXcgS2luZ0RlYWQoKV0sXG4gICAgICAgIGJvYXJkV2lkdGg6IDgsXG4gICAgICAgIGJvYXJkSGVpZ2h0OiA4LFxuICAgICAgICBzZXR1cE1vdmVzOiBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCA4OyB4KyspIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKHgsIDEsIDIsIFwiUGF3blwiKTtcbiAgICAgICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKHgsIDYsIDEsIFwiUGF3blwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIEdhbWUucHJlcGFyZVBsYWNlUGllY2UoMCwgMCwgMiwgXCJSb29rXCIpO1xuICAgICAgICAgICAgeWllbGQgR2FtZS5wcmVwYXJlUGxhY2VQaWVjZSg3LCAwLCAyLCBcIlJvb2tcIik7XG4gICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKDAsIDcsIDEsIFwiUm9va1wiKTtcbiAgICAgICAgICAgIHlpZWxkIEdhbWUucHJlcGFyZVBsYWNlUGllY2UoNywgNywgMSwgXCJSb29rXCIpO1xuICAgICAgICAgICAgeWllbGQgR2FtZS5wcmVwYXJlUGxhY2VQaWVjZSgxLCAwLCAyLCBcIktuaWdodFwiKTtcbiAgICAgICAgICAgIHlpZWxkIEdhbWUucHJlcGFyZVBsYWNlUGllY2UoNiwgMCwgMiwgXCJLbmlnaHRcIik7XG4gICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKDEsIDcsIDEsIFwiS25pZ2h0XCIpO1xuICAgICAgICAgICAgeWllbGQgR2FtZS5wcmVwYXJlUGxhY2VQaWVjZSg2LCA3LCAxLCBcIktuaWdodFwiKTtcbiAgICAgICAgICAgIHlpZWxkIEdhbWUucHJlcGFyZVBsYWNlUGllY2UoMiwgMCwgMiwgXCJCaXNob3BcIik7XG4gICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKDUsIDAsIDIsIFwiQmlzaG9wXCIpO1xuICAgICAgICAgICAgeWllbGQgR2FtZS5wcmVwYXJlUGxhY2VQaWVjZSgyLCA3LCAxLCBcIkJpc2hvcFwiKTtcbiAgICAgICAgICAgIHlpZWxkIEdhbWUucHJlcGFyZVBsYWNlUGllY2UoNSwgNywgMSwgXCJCaXNob3BcIik7XG4gICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKDQsIDAsIDIsIFwiUXVlZW5cIik7XG4gICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKDQsIDcsIDEsIFwiUXVlZW5cIik7XG4gICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKDMsIDAsIDIsIFwiS2luZ1wiKTtcbiAgICAgICAgICAgIHlpZWxkIEdhbWUucHJlcGFyZVBsYWNlUGllY2UoMywgNywgMSwgXCJLaW5nXCIpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAnY2hlc3MtYXR0YWNrJzoge1xuICAgICAgICBpZDogJ2NoZXNzLWF0dGFjaycsXG4gICAgICAgIG5hbWU6ICdDaGVzcyBBdHRhY2snLFxuICAgICAgICBsb3NlQ29uZGl0aW9uczogW25ldyBLaW5nRGVhZCgpXSxcbiAgICAgICAgYm9hcmRXaWR0aDogNSxcbiAgICAgICAgYm9hcmRIZWlnaHQ6IDYsXG4gICAgICAgIHNldHVwTW92ZXM6IGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDU7IHgrKykge1xuICAgICAgICAgICAgICAgIHlpZWxkIEdhbWUucHJlcGFyZVBsYWNlUGllY2UoeCwgMSwgMiwgXCJQYXduXCIpO1xuICAgICAgICAgICAgICAgIHlpZWxkIEdhbWUucHJlcGFyZVBsYWNlUGllY2UoeCwgNCwgMSwgXCJQYXduXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeWllbGQgR2FtZS5wcmVwYXJlUGxhY2VQaWVjZSgwLCAwLCAyLCBcIlJvb2tcIik7XG4gICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKDAsIDUsIDEsIFwiUm9va1wiKTtcbiAgICAgICAgICAgIHlpZWxkIEdhbWUucHJlcGFyZVBsYWNlUGllY2UoMSwgMCwgMiwgXCJLbmlnaHRcIik7XG4gICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKDEsIDUsIDEsIFwiS25pZ2h0XCIpO1xuICAgICAgICAgICAgeWllbGQgR2FtZS5wcmVwYXJlUGxhY2VQaWVjZSgyLCAwLCAyLCBcIkJpc2hvcFwiKTtcbiAgICAgICAgICAgIHlpZWxkIEdhbWUucHJlcGFyZVBsYWNlUGllY2UoMiwgNSwgMSwgXCJCaXNob3BcIik7XG4gICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKDMsIDAsIDIsIFwiUXVlZW5cIik7XG4gICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKDMsIDUsIDEsIFwiUXVlZW5cIik7XG4gICAgICAgICAgICB5aWVsZCBHYW1lLnByZXBhcmVQbGFjZVBpZWNlKDQsIDAsIDIsIFwiS2luZ1wiKTtcbiAgICAgICAgICAgIHlpZWxkIEdhbWUucHJlcGFyZVBsYWNlUGllY2UoNCwgNSwgMSwgXCJLaW5nXCIpO1xuICAgICAgICB9XG4gICAgfVxufTsiLCJpbXBvcnQgUGxheWVyIGZyb20gJy4vcGxheWVyJ1xuaW1wb3J0IEdhbWUgZnJvbSAnLi9nYW1lJ1xuaW1wb3J0IHtSVUxFX1NFVFN9IGZyb20gJy4vZ2FtZV90eXBlcy9ydWxlc2V0cydcbmltcG9ydCB7UXVlZW4sIFJvb2ssIEJpc2hvcCwgS25pZ2h0LCBQYXdufSBmcm9tIFwiLi9waWVjZVwiO1xuaW1wb3J0IHtQSUVDRV9SRUdJU1RSWX0gZnJvbSBcIi4vZ2FtZV90eXBlcy9waWVjZXJlZ2lzdHJ5XCI7XG5pbXBvcnQgJCBmcm9tIFwianF1ZXJ5XCI7XG5cbi8vIGNsaWVudCBzaWRlXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lTWFzdGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihzb2NrZXQsIGNsaWVudCwgZ2FtZSkge1xuICAgICAgICAvLyBzZXR1cCBnYW1lIGJhc2VkIG9uICdzZXR1cCBnYW1lJyBkYXRhIGZyb20gc2VydmVyXG4gICAgICAgIGxldCBwbGF5ZXIxID0gbmV3IFBsYXllcihnYW1lLnBsYXllcjEubmFtZSk7XG4gICAgICAgIGxldCBwbGF5ZXIyID0gbmV3IFBsYXllcihnYW1lLnBsYXllcjIubmFtZSk7XG5cbiAgICAgICAgdGhpcy5sb2NhbFBsYXllciA9IG51bGw7XG4gICAgICAgIGlmIChwbGF5ZXIxLm5hbWUgPT09IGNsaWVudC51c2VybmFtZSlcbiAgICAgICAgICAgIHRoaXMubG9jYWxQbGF5ZXIgPSBwbGF5ZXIxO1xuICAgICAgICBpZiAocGxheWVyMi5uYW1lID09PSBjbGllbnQudXNlcm5hbWUpXG4gICAgICAgICAgICB0aGlzLmxvY2FsUGxheWVyID0gcGxheWVyMjtcblxuICAgICAgICB0aGlzLmdhbWUgPSBuZXcgR2FtZShSVUxFX1NFVFNbZ2FtZS5ydWxlcy5pZF0sIGdhbWUubmFtZSwgcGxheWVyMSwgcGxheWVyMik7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIHRoaXMuaHRtbC5jc3MoJ3dpZHRoJywgdGhpcy5nYW1lLndpZHRoKjY0K1wicHhcIik7XG5cbiAgICAgICAgJCgnI2JvYXJkLXdyYXBwZXInKS5hcHBlbmQodGhpcy5odG1sKTtcbiAgICAgICAgJCh0aGlzLmh0bWwpLm9uKCdkcmFnc3RhcnQnLCAnW2RyYWdnYWJsZV0nLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgbGV0IGNlbGwgPSB0aGlzLmdldENlbGwoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJy5jZWxsJykpO1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9qc29uJywgSlNPTi5zdHJpbmdpZnkoe3g6IGNlbGwueCwgeTogY2VsbC55fSkpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RQaWVjZShjZWxsKTtcbiAgICAgICAgICAgIC8vVE9ETzogaGFuZGxlIG9ubHkgY2xpY2tcbiAgICAgICAgICAgIC8vdGhpcy5oYW5kbGVDbGljayh0aGlzLmdldENlbGwoJChldmVudC50YXJnZXQpKSk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICQodGhpcy5odG1sKS5vbignZHJhZ2VuZCcsICdbZHJhZ2dhYmxlXScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZW5kJyk7XG4gICAgICAgICAgICB0aGlzLmRlc2VsZWN0UGllY2UoKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgLy8gZW5hYmxlIGRyb3Agb24gcG9zc2libGUgbW92ZSB0YXJnZXRcbiAgICAgICAgJCh0aGlzLmh0bWwpLm9uKCdkcmFnb3ZlcicsICcuY2VsbCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmhhc0NsYXNzKCdwb3NzaWJsZU1vdmUnKSlcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgJCh0aGlzLmh0bWwpLm9uKCdkcm9wJywgJy5wb3NzaWJsZU1vdmUnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgbGV0IHRhcmdldENlbGwgPSB0aGlzLmdldENlbGwoJChldmVudC50YXJnZXQpKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2xpY2sodGFyZ2V0Q2VsbCk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICQodGhpcy5odG1sKS5vbignY2xpY2snLCAnW2RyYWdnYWJsZV0sIC5wb3NzaWJsZU1vdmUnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgbGV0IGNlbGwgPSB0aGlzLmdldENlbGwoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJy5jZWxsJykpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVDbGljayhjZWxsKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnI3Bhd24tcHJvbW90aW9uID4gaW1nJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgICAgICAgICBsZXQgbG9nRW50cnkgPSB0aGlzLnByb21vdGlvbkNhY2hlO1xuICAgICAgICAgICAgbG9nRW50cnkucHJvbW90aW9uUGllY2VOYW1lID0gdGFyZ2V0LmRhdGEoJ25hbWUnKTtcbiAgICAgICAgICAgIHRoaXMuaGlkZU5vdGlmaWNhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnZ2FtZSBhY3Rpb24nLCBsb2dFbnRyeSk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKCdnYW1lIGFjdGlvbicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZGF0YS5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdhY3Rpb24nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3N5bSBtb3ZlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdwbGFjZSBwaWVjZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZ2FtZUVuZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZU5vdGlmaWNhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUuZXhlY3V0ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlQWN0aW9uKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdub3RpZmljYXRpb24nOlxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUGxheWVyTWFkZU1vdmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnBsYXllck51bWJlciA9PT0gdGhpcy5sb2NhbFBsYXllci5udW1iZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd05vdGlmaWNhdGlvbignUGxlYXNlIHdhaXQuLi4nLCAnV2FpdGluZyBmb3Igb3RoZXIgcGxheWVyIHRvIG1ha2UgaGlzIG1vdmUuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Vycm9yKCdVbmtub3duTm90aWZpY2F0aW9uVHlwZTogJytkYXRhLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Vycm9yKCdVbmtub3duR2FtZUFjdGlvbjogJytkYXRhLmFjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5zb2NrZXQub24oJ2Vycm9yIG1lc3NhZ2UnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5zaG93RXJyb3IoZGF0YSk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgaGFuZGxlQ2xpY2soY2VsbCkge1xuICAgICAgICAvLyBleGVjdXRlIG1vdmVcbiAgICAgICAgbGV0IHRhcmdldEpRQ2VsbCA9IHRoaXMuZ2V0anFDZWxsKGNlbGwpO1xuICAgICAgICBpZiAodGFyZ2V0SlFDZWxsLmhhc0NsYXNzKCdwb3NzaWJsZU1vdmUnKSkge1xuICAgICAgICAgICAgbGV0IHNvdXJjZUpxQ2VsbCA9ICQoJ3RkLnNlbGVjdGVkJywgdGhpcy5odG1sKTtcbiAgICAgICAgICAgIGxldCBzb3VyY2VDZWxsID0gdGhpcy5nZXRDZWxsKHNvdXJjZUpxQ2VsbCk7XG5cbiAgICAgICAgICAgIGxldCBsb2dFbnRyeSA9IEdhbWUucHJlcGFyZU1vdmUoc291cmNlQ2VsbCwgY2VsbCk7XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRKUUNlbGwuaGFzQ2xhc3MoJ2VuLXBhc3NhbnQnKSkge1xuICAgICAgICAgICAgICAgIGxvZ0VudHJ5LnNwZWNpYWwgPSAnZW4tcGFzc2FudCc7XG4gICAgICAgICAgICAgICAgLy8gc2hvdWxkIGFsd2F5cyBiZSBhIHBhd25cbiAgICAgICAgICAgICAgICBsb2dFbnRyeS5wYXNzYW50Q2xhc3MgPSB0aGlzLmdhbWUuZ2V0Q2VsbChjZWxsLngsIHNvdXJjZUNlbGwueSkucGllY2UuY2xhc3M7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRKUUNlbGwuaGFzQ2xhc3MoJ3Byb21vdGUnKSkge1xuICAgICAgICAgICAgICAgIGxvZ0VudHJ5LnNwZWNpYWwgPSAncHJvbW90ZSc7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9tb3Rpb25DYWNoZSA9IGxvZ0VudHJ5O1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1Byb21vdGlvblByb21wdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzZWxlY3RQaWVjZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kZXNlbGVjdFBpZWNlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ2dhbWUgYWN0aW9uJywgbG9nRW50cnkpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93IHBvc3NpYmxlIG1vdmVzXG4gICAgICAgIGlmIChjZWxsLnBpZWNlICYmIChjZWxsLnBpZWNlLm93bmVyID09PSB0aGlzLmxvY2FsUGxheWVyIHx8IHRoaXMuYWRtaW4pKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0SlFDZWxsLmhhc0NsYXNzKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICAgICAgLy8gYSBjbGljayBvbiBhIHNlbGVjdGVkIHBpZWNlIGRlc2VsZWN0cyBpdFxuICAgICAgICAgICAgICAgIHRoaXMuZGVzZWxlY3RQaWVjZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3RlZCBoaXMgb3duIHBpZWNlXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RQaWVjZShjZWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIG1ha2UgY2hhbmdlIG9uIHRoZSB2aXN1YWwgYm9hcmRcbiAgICBleGVjdXRlQWN0aW9uKGxvZ0VudHJ5KSB7XG4gICAgICAgIGlmIChsb2dFbnRyeS5hY3Rpb24gPT09ICdwbGFjZSBwaWVjZScpIHtcbiAgICAgICAgICAgIGxldCBjZWxsID0gdGhpcy5nYW1lLmdldENlbGwobG9nRW50cnkpO1xuICAgICAgICAgICAgdGhpcy5yZWRyYXdDZWxsKGNlbGwpXG4gICAgICAgIH1cblxuICAgICAgICAvL1RPRE8gaGFuZGxlIG90aGVyIHdpdGggcmVkcmF3XG4gICAgICAgIGlmIChsb2dFbnRyeS5hY3Rpb24gPT09ICdzeW0gbW92ZScpIHtcbiAgICAgICAgICAgIGZvciAobGV0IG1vdmUgb2YgbG9nRW50cnkubW92ZXMpIHtcbiAgICAgICAgICAgICAgICBsZXQgc291cmNlQ2VsbCA9IHRoaXMuZ2FtZS5nZXRDZWxsKG1vdmUuc291cmNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZHJhd0NlbGwoc291cmNlQ2VsbCk7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldENlbGwgPSB0aGlzLmdhbWUuZ2V0Q2VsbChtb3ZlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWRyYXdDZWxsKHRhcmdldENlbGwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vdmUuc3BlY2lhbCAmJiBtb3ZlLnNwZWNpYWwgPT09ICdlbi1wYXNzYW50Jykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVzdHJveUNlbGwgPSB0aGlzLmdhbWUuZ2V0Q2VsbChtb3ZlLnRhcmdldC54LCBtb3ZlLnNvdXJjZS55KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWRyYXdDZWxsKGRlc3Ryb3lDZWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGRvIHNwZWNpYWwgbW92ZXNcbiAgICAgICAgICAgIC8vIGZvciAobGV0IHNtb3ZlIG9mIGxvZ0VudHJ5Lm1vdmVzKSB7XG4gICAgICAgICAgICAvLyAgICAgaWYgKHNtb3ZlLnNwZWNpYWwgPT09ICdlbi1wYXNzYW50Jykge1xuICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLmdldGpxQ2VsbCh7eDogc21vdmUudGFyZ2V0LngsIHk6IHNtb3ZlLnNvdXJjZS55fSkucmVtb3ZlQ2xhc3Moc21vdmUucGFzc2FudENsYXNzKTtcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyAgICAgaWYgKHNtb3ZlLnNwZWNpYWwgPT09ICdwcm9tb3RlJykge1xuICAgICAgICAgICAgLy8gICAgICAgICBsZXQgdGFyZ2V0SnFDZWxsRlUgPSB0aGlzLmdldGpxQ2VsbChzbW92ZS50YXJnZXQpO1xuICAgICAgICAgICAgLy8gICAgICAgICBsZXQgcGxheWVyID0gdGhpcy5nYW1lLmdldFBsYXllcihzbW92ZS5wbGF5ZXJOdW1iZXIpO1xuICAgICAgICAgICAgLy8gICAgICAgICB0YXJnZXRKcUNlbGxGVS5yZW1vdmVDbGFzcyhuZXcgUGF3bihwbGF5ZXIpLmNsYXNzKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgbGV0IHBpZWNlQ2xhc3MgPSBQSUVDRV9SRUdJU1RSWVtzbW92ZS5wcm9tb3Rpb25QaWVjZU5hbWVdO1xuICAgICAgICAgICAgLy8gICAgICAgICB0YXJnZXRKcUNlbGxGVS5hZGRDbGFzcyhuZXcgcGllY2VDbGFzcyhwbGF5ZXIpLmNsYXNzKTtcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9nRW50cnkuYWN0aW9uID09PSAnZ2FtZUVuZCcpIHtcbiAgICAgICAgICAgIGlmIChsb2dFbnRyeS53aW5uZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dOb3RpZmljYXRpb24oJ0RyYXcnLCAnVGhlIGdhbWUgZW5kZWQgaW4gYSBkcmF3LicpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxvZ0VudHJ5Lndpbm5lciA9PT0gdGhpcy5sb2NhbFBsYXllci5udW1iZXIpIHtcbiAgICAgICAgICAgICAgICAkKCcubWVzc2FnZScsIHRoaXMuaHRtbCkuYWRkQ2xhc3MoJ3dpbicpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd05vdGlmaWNhdGlvbignV2lubmVyJywgJ1lvdSB3b24gdGhpcyBnYW1lLicpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoJy5tZXNzYWdlJywgdGhpcy5odG1sKS5hZGRDbGFzcygnbG9zZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd05vdGlmaWNhdGlvbignMm5kIFBsYWNlJywgJ1lvdSBsb3N0IHRoaXMgZ2FtZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gY2VsbDogY2xhc3MgQ2VsbFxuICAgIHJlZHJhd0NlbGwoY2VsbCkge1xuICAgICAgICBsZXQganFDZWxsID0gdGhpcy5nZXRqcUNlbGwoY2VsbCk7XG4gICAgICAgICQoY2VsbC5yZW5kZXIoKSkuaW5zZXJ0QWZ0ZXIoanFDZWxsKTtcbiAgICAgICAganFDZWxsLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIGdldENlbGwoanFjZWxsKSB7XG4gICAgICAgIGxldCB4ID0ganFjZWxsLmRhdGEoJ3gnKTtcbiAgICAgICAgbGV0IHkgPSBqcWNlbGwuZGF0YSgneScpO1xuICAgICAgICByZXR1cm4gdGhpcy5nYW1lLmJvYXJkW3ldW3hdO1xuICAgIH1cblxuICAgIGdldGpxQ2VsbChjZWxsKSB7XG4gICAgICAgIHJldHVybiAkKCd0ZFtkYXRhLXg9XCInK2NlbGwueCsnXCJdW2RhdGEteT1cIicrY2VsbC55KydcIl0nLCB0aGlzLmh0bWwpO1xuICAgIH1cblxuICAgIHNlbGVjdFBpZWNlKGNlbGwpIHtcbiAgICAgICAgJCgnLnNlbGVjdGVkJywgdGhpcy5odG1sKS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgdGhpcy5nZXRqcUNlbGwoY2VsbCkuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XG5cbiAgICAgICAgJCgnLnBvc3NpYmxlTW92ZScsIHRoaXMuaHRtbCkucmVtb3ZlQ2xhc3MoJ3Bvc3NpYmxlTW92ZScpO1xuICAgICAgICBmb3IgKGxldCBtb3ZlIG9mIHRoaXMuZ2FtZS5nZXRQb3NzaWJsZU1vdmVzKGNlbGwpKSB7XG4gICAgICAgICAgICBsZXQganFjZWxsID0gdGhpcy5nZXRqcUNlbGwobW92ZSk7XG4gICAgICAgICAgICBqcWNlbGwuYWRkQ2xhc3MoJ3Bvc3NpYmxlTW92ZScpO1xuICAgICAgICAgICAgaWYgKG1vdmUuc3BlY2lhbClcbiAgICAgICAgICAgICAgICBqcWNlbGwuYWRkQ2xhc3MobW92ZS5zcGVjaWFsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXNlbGVjdFBpZWNlKCkge1xuICAgICAgICAkKCcuc2VsZWN0ZWQnLCB0aGlzLmh0bWwpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuICAgICAgICAkKCcucG9zc2libGVNb3ZlJywgdGhpcy5odG1sKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdwb3NzaWJsZU1vdmUnKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdlbi1wYXNzYW50JylcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygncHJvbW90ZScpO1xuICAgIH1cblxuICAgIHNob3dOb3RpZmljYXRpb24odGl0bGUsIGNvbnRlbnQpIHtcbiAgICAgICAgJCgnLm1lc3NhZ2UgLnRpdGxlJywgdGhpcy5odG1sKS50ZXh0KHRpdGxlKTtcbiAgICAgICAgJCgnLm1lc3NhZ2UgLmNvbnRlbnQnLCB0aGlzLmh0bWwpLmh0bWwoY29udGVudCk7XG4gICAgICAgICQoJy5vdmVybGF5JywgdGhpcy5odG1sKS5zaG93KCk7XG4gICAgfVxuICAgIHNob3dFcnJvcihtZXNzYWdlKSB7XG4gICAgICAgICQoJy5tZXNzYWdlJywgdGhpcy5odG1sKS5hZGRDbGFzcygnZXJyb3InKTtcbiAgICAgICAgdGhpcy5zaG93Tm90aWZpY2F0aW9uKFxuICAgICAgICAgICAgJ0Vycm9yOiAnICsgbWVzc2FnZSxcbiAgICAgICAgICAgICdUcnkgdG8gPGEgaHJlZj1cIi5cIj5yZWxvYWQ8L2E+LiAnICtcbiAgICAgICAgICAgICdJZiB0aGF0IGRvZXNuXFwndCB3b3JrIHllbGwgYXQgdGhlIGRldjogPGEgaHJlZj1cIm1haWx0bzpzaHlsdXhAZ21haWwuY29tXCI+c2h5bHV4QGdtYWlsLmNvbTwvYT4nKTtcbiAgICB9XG4gICAgaGlkZU5vdGlmaWNhdGlvbigpIHtcbiAgICAgICAgJCgnLm92ZXJsYXknLCB0aGlzLmh0bWwpLmhpZGUoKTtcbiAgICB9XG5cbiAgICBzaG93UHJvbW90aW9uUHJvbXB0KCkge1xuICAgICAgICBsZXQgdGVtcGxhdGUgPSByZXF1aXJlKFwiLi4vdGVtcGxhdGVzL3Byb21vdGUuaGJzXCIpO1xuICAgICAgICBsZXQgaHRtbCA9IHRlbXBsYXRlKHtwaWVjZXM6IFtcbiAgICAgICAgICAgIG5ldyBRdWVlbih0aGlzLmxvY2FsUGxheWVyKSxcbiAgICAgICAgICAgIG5ldyBSb29rKHRoaXMubG9jYWxQbGF5ZXIpLFxuICAgICAgICAgICAgbmV3IEJpc2hvcCh0aGlzLmxvY2FsUGxheWVyKSxcbiAgICAgICAgICAgIG5ldyBLbmlnaHQodGhpcy5sb2NhbFBsYXllcilcbiAgICAgICAgXX0pO1xuICAgICAgICB0aGlzLnNob3dOb3RpZmljYXRpb24oJ1Byb21vdGUgeW91ciBwYXduIScsIGh0bWwpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgbGV0IHRlbXBsYXRlID0gcmVxdWlyZShcIi4uL3RlbXBsYXRlcy9ib2FyZC5oYnNcIik7XG4gICAgICAgIGxldCBodG1sID0gdGVtcGxhdGUoe2dhbWU6IHRoaXMuZ2FtZSwgcGxheWVyOiB0aGlzLmxvY2FsUGxheWVyfSk7XG4gICAgICAgIHRoaXMuaHRtbCA9ICQoaHRtbCk7XG4gICAgfVxufSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY2VsbCkge1xuICAgIHJldHVybiBjZWxsLnJlbmRlcigpO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGdhbWUsIHBsYXllciwgYXJyYXksIGJsb2NrKSB7XG4gICAgbGV0IHJldmVyc2VkID0gKGdhbWUucGxheWVyMiA9PT0gcGxheWVyKTtcblxuICAgIGxldCBhY2N1bSA9ICcnO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7ICsraSkge1xuICAgICAgICBsZXQgcmkgPSByZXZlcnNlZCA/IGFycmF5Lmxlbmd0aCAtIChpKzEpIDogaTtcbiAgICAgICAgYWNjdW0gKz0gYmxvY2suZm4oYXJyYXlbcmldKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtO1xufTsiLCJjb25zdCBTVFJBSUdIVF9ESVJFQ1RJT05TID0gW1xuICAgIHt4OiAxLCB5OiAwfSxcbiAgICB7eDogLTEsIHk6IDB9LFxuICAgIHt4OiAwLCB5OiAxfSxcbiAgICB7eDogMCwgeTogLTF9XG5dO1xuY29uc3QgRElBR09OQUxfRElSRUNUSU9OUyA9IFtcbiAgICB7eDogMSwgeTogMX0sXG4gICAge3g6IC0xLCB5OiAtMX0sXG4gICAge3g6IC0xLCB5OiAxfSxcbiAgICB7eDogMSwgeTogLTF9XG5dO1xuY29uc3QgQUxMX0RJUkVDVElPTlMgPSBbXG4gICAge3g6IDEsIHk6IDB9LFxuICAgIHt4OiAtMSwgeTogMH0sXG4gICAge3g6IDAsIHk6IDF9LFxuICAgIHt4OiAwLCB5OiAtMX0sXG4gICAge3g6IDEsIHk6IDF9LFxuICAgIHt4OiAtMSwgeTogLTF9LFxuICAgIHt4OiAtMSwgeTogMX0sXG4gICAge3g6IDEsIHk6IC0xfVxuXTtcbmNvbnN0IE1PVklOR19CRUhBVklPUlMgPSB7XG4gICAgLy8gZGVmYXVsdDogc3RvcHMgYXQgZmlyc3QgcGllY2Ugd2l0aCBvcHRpb24gdG8ga2lsbCBhbiBlbmVteSBwaWVjZVxuICAgIEhJVFRJTkc6IDAsXG4gICAgLy8gc3RvcHBpbmcgaXMgbGlrZSBoaXR0aW5nIGJ1dCB3aXRob3V0IHRoZSBvcHRpb24gdG8ga2lsbCAocGF3bilcbiAgICBTVE9QUElORzogMVxufTtcblxuY2xhc3MgUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKG93bmVyLCBuYW1lKSB7XG4gICAgICAgIHRoaXMub3duZXIgPSBvd25lcjtcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuaGFzTW92ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfVxuXG4gICAgZ2V0UG9zc2libGVNb3ZlcyhnYW1lLCB4LCB5KSB7XG4gICAgICAgIHRocm93IFwiTm90SW1wbGVtZW50ZWRcIlxuICAgIH1cblxuICAgIGdldCBjbGFzcygpIHtcbiAgICAgICAgdGhyb3cgXCJOb3RJbXBsZW1lbnRlZFwiO1xuICAgIH1cblxuICAgIGdldCBpbWcoKSB7XG4gICAgICAgIHRocm93IFwiTm90SW1wbGVtZW50ZWRcIjtcbiAgICB9XG5cbiAgICAqZ2V0TW92ZXNJbkRpcmVjdGlvbihnYW1lLCB4LCB5LCBkaXJlY3Rpb24sIG1heERpc3RhbmNlID0gOTk5OSwgYmVoYXZpb3VyID0gTU9WSU5HX0JFSEFWSU9SUy5ISVRUSU5HKSB7XG4gICAgICAgIGxldCBwb3MgPSB7eDogeCwgeTogeX07XG4gICAgICAgIGxldCBkaXN0YW5jZSA9IDA7XG5cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGRpc3RhbmNlKys7XG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPiBtYXhEaXN0YW5jZSkgYnJlYWs7XG5cbiAgICAgICAgICAgIHBvcy54ICs9IGRpcmVjdGlvbi54O1xuICAgICAgICAgICAgcG9zLnkgKz0gZGlyZWN0aW9uLnk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBjZWxsID0gZ2FtZS5nZXRDZWxsKHBvcy54LCBwb3MueSk7XG4gICAgICAgICAgICAgICAgaWYgKCFjZWxsLnRpbGUucGFzc2FibGUpIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNlbGwucGllY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlaGF2aW91ciAhPT0gTU9WSU5HX0JFSEFWSU9SUy5TVE9QUElORyAmJiBjZWxsLnBpZWNlLm93bmVyICE9PSB0aGlzLm93bmVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQge3g6IHBvcy54LCB5OiBwb3MueX07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHlpZWxkIHt4OiBwb3MueCwgeTogcG9zLnl9O1xuICAgICAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgICAgICAvLyBicmVhayBpZiBPdXRzaWRlT2ZCb2FyZC4gZWxzZSBpdHMgYW4gdW5leHBlY3RlZCBlcnJvclxuICAgICAgICAgICAgICAgIGlmIChlcnIgIT09IFwiT3V0c2lkZU9mQm9hcmRcIikgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UGFzc2FibGVDZWxsKGdhbWUsIHgsIHkpIHtcbiAgICAgICAgbGV0IGNlbGwgPSBnYW1lLmdldENlbGwoeCwgeSk7XG4gICAgICAgIGlmICghY2VsbC50aWxlLnBhc3NhYmxlKSB0aHJvdyBcIkNlbGxOb3RQYXNzYWJsZVwiO1xuICAgICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG5cbiAgICBnZXRPd25lckRpcmVjdGlvbihwbGF5ZXJOdW1iZXIpIHtcbiAgICAgICAgaWYgKCFwbGF5ZXJOdW1iZXIpXG4gICAgICAgICAgICBwbGF5ZXJOdW1iZXIgPSB0aGlzLm93bmVyLm51bWJlcjtcblxuICAgICAgICBzd2l0Y2gocGxheWVyTnVtYmVyKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt4OiAwLCB5OiAtMX07XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt4OiAwLCB5OiAxfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1Vua25vd25Pd25lckRpcmVjdGlvbic7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIEJsYWNrV2hpdGVDaGVzc1BpZWNlIGV4dGVuZHMgUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKG93bmVyLCBuYW1lLCBmaWxlbmFtZSkge1xuICAgICAgICBzdXBlcihvd25lciwgbmFtZSk7XG4gICAgICAgIHRoaXMuZmlsZW5hbWUgPSBmaWxlbmFtZTtcbiAgICB9XG5cbiAgICBnZXQgb3duZXJDb2xvcigpIHtcbiAgICAgICAgaWYgKHRoaXMub3duZXIubnVtYmVyID09PSAxKSByZXR1cm4gXCJ3aGl0ZVwiO1xuICAgICAgICBpZiAodGhpcy5vd25lci5udW1iZXIgPT09IDIpIHJldHVybiBcImJsYWNrXCI7XG4gICAgICAgIHRocm93IFwiSW52YWxpZE9ud2VyTnVtYmVyXCI7XG4gICAgfVxuXG4gICAgZ2V0IGNsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vd25lckNvbG9yO1xuICAgIH1cblxuICAgIGdldCBpbWcoKSB7XG4gICAgICAgIHJldHVybiBcIi9pbWFnZXMvcGllY2VzL2NoZXNzX3N2Zy9cIiArIHRoaXMubmFtZS50b0xvd2VyQ2FzZSgpICsgXCJfXCIgKyB0aGlzLm93bmVyQ29sb3IgKyBcIi5zdmdcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXduIGV4dGVuZHMgQmxhY2tXaGl0ZUNoZXNzUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKG93bmVyKSB7XG4gICAgICAgIHN1cGVyKG93bmVyLCBcIlBhd25cIik7XG4gICAgfVxuXG4gICAgZ2V0IGNsYXNzKCkge1xuICAgICAgICByZXR1cm4gJ3BpZWNlLXBhd24tJyArIHN1cGVyLmNsYXNzO1xuICAgIH1cblxuICAgIC8vIHRoaXMgbWFya3MgdGhlIHByb21vdGlvbiBtb3Zlc1xuICAgICpnZXRQb3NzaWJsZU1vdmVzKGdhbWUsIHgsIHkpIHtcbiAgICAgICAgbGV0IHBvc3NpYmxlTW92ZXMgPSBbLi4udGhpcy5nZXRQb3NzaWJsZU1vdmVzV2l0aG91dFByb21vdGlvbihnYW1lLCB4LCB5KV07XG4gICAgICAgIGZvciAobGV0IG1vdmUgb2YgcG9zc2libGVNb3Zlcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBnYW1lLmdldENlbGwobW92ZS54LCBtb3ZlLnkgKyB0aGlzLmdldE93bmVyRGlyZWN0aW9uKCkueSk7XG4gICAgICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgICAgIC8vIG1hcmsgYXMgcHJvbW90aW9uIGlmIG5leHQgc3RlcCB3b3VsZCBiZSBvdXRzaWRlIHRoZSBib2FyZFxuICAgICAgICAgICAgICAgIGlmIChlcnIgPT09IFwiT3V0c2lkZU9mQm9hcmRcIikge1xuICAgICAgICAgICAgICAgICAgICBtb3ZlLnNwZWNpYWwgPSAncHJvbW90ZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQqIHBvc3NpYmxlTW92ZXM7XG4gICAgfVxuICAgICpnZXRQb3NzaWJsZU1vdmVzV2l0aG91dFByb21vdGlvbihnYW1lLCB4LCB5KSB7XG4gICAgICAgIC8vIGEgcGF3biBjYW4gbW92ZSB0d28gc3BhY2VzIGlmIGl0IGhhc24ndCBtb3ZlZCB5ZXRcbiAgICAgICAgbGV0IGRpc3RhbmNlID0gKHRoaXMuaGFzTW92ZWQgPyAxIDogMik7XG5cbiAgICAgICAgLy8gbW92ZSBpbiBmcm9udFxuICAgICAgICB5aWVsZCogdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIHRoaXMuZ2V0T3duZXJEaXJlY3Rpb24oKSwgZGlzdGFuY2UsIE1PVklOR19CRUhBVklPUlMuU1RPUFBJTkcpO1xuXG4gICAgICAgIC8vIGRpYWdvbmFsIG1vdmVzIC0gb25seSBhdmFpbGFibGUgaWYgdGhlIG1vdmUgY2FuIGtpbGwgYW4gb3Bwb3NpbmcgcGllY2VcbiAgICAgICAgbGV0IGhpdHRpbmdNb3ZlcyA9IFtcbiAgICAgICAgICAgIHt4OiAxLCB5OiB0aGlzLmdldE93bmVyRGlyZWN0aW9uKCkueX0sXG4gICAgICAgICAgICB7eDogLTEsIHk6IHRoaXMuZ2V0T3duZXJEaXJlY3Rpb24oKS55fSxcbiAgICAgICAgXTtcbiAgICAgICAgZm9yIChsZXQgaGl0dGluZ01vdmUgb2YgaGl0dGluZ01vdmVzKSB7XG4gICAgICAgICAgICAvLyBtb3ZlIG9uZSBmaWVsZCBkaWFnb25hbCBhbmQgY2hlY2tcbiAgICAgICAgICAgIGZvciAobGV0IG1vdmUgb2YgdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIGhpdHRpbmdNb3ZlLCAxKSkge1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciBvcHBvc2luZyBwaWVjZVxuICAgICAgICAgICAgICAgIGlmIChnYW1lLmdldENlbGwobW92ZSkucGllY2UpIHlpZWxkIG1vdmU7XG5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBlbiBwYXNzYW50XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGwgPSB0aGlzLmdldFBhc3NhYmxlQ2VsbChnYW1lLCB4ICsgaGl0dGluZ01vdmUueCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsLnBpZWNlICYmIGNlbGwucGllY2UubmFtZSA9PT0gXCJQYXduXCIgJiYgY2VsbC5waWVjZS5vd25lciAhPT0gdGhpcy5vd25lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgZ2FtZSBoaXN0b3J5XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBsb2dFbnRyeSBvZiB0aGlzLmxhc3RUdXJuQWN0aW9ucyhnYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2dFbnRyeS50YXJnZXQueCA9PT0geCArIGhpdHRpbmdNb3ZlLnggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nRW50cnkudGFyZ2V0LnkgPT09IHkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nRW50cnkuc291cmNlLnggPT09IHggKyBoaXR0aW5nTW92ZS54ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ0VudHJ5LnNvdXJjZS55ID09PSB5ICsgLTIgKiB0aGlzLmdldE93bmVyRGlyZWN0aW9uKGNlbGwucGllY2Uub3duZXIubnVtYmVyKS55KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZS5zcGVjaWFsID0gJ2VuLXBhc3NhbnQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCBtb3ZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RUdXJuQWN0aW9ucyhnYW1lKSB7XG4gICAgICAgIGxldCBsb2dFbnRyeSA9IGdhbWUuZ2FtZUxvZ1tnYW1lLmdhbWVMb2cubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsb2dFbnRyeS5hY3Rpb24gPT09IFwic3ltIG1vdmVcIilcbiAgICAgICAgICAgIHJldHVybiBsb2dFbnRyeS5tb3ZlcztcbiAgICAgICAgaWYgKGxvZ0VudHJ5LmFjdGlvbiA9PT0gXCJtb3ZlXCIpXG4gICAgICAgICAgICByZXR1cm4gW2xvZ0VudHJ5XTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHb2QgZXh0ZW5kcyBCbGFja1doaXRlQ2hlc3NQaWVjZSB7XG4gICAgY29uc3RydWN0b3Iob3duZXIpIHtcbiAgICAgICAgc3VwZXIob3duZXIsIFwiR29kXCIpO1xuICAgIH1cblxuICAgICpnZXRQb3NzaWJsZU1vdmVzKGdhbWUsIHgsIHkpIHtcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBnYW1lLmJvYXJkLmxlbmd0aDsgeSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGdhbWUuYm9hcmRbeV0ubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB7eDogeCwgeTogeX07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgY2xhc3MoKSB7XG4gICAgICAgIHJldHVybiAncGllY2UtZ29kLScgKyBzdXBlci5jbGFzcztcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSb29rIGV4dGVuZHMgQmxhY2tXaGl0ZUNoZXNzUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKG93bmVyKSB7XG4gICAgICAgIHN1cGVyKG93bmVyLCBcIlJvb2tcIik7XG4gICAgfVxuXG4gICAgZ2V0IGNsYXNzKCkge1xuICAgICAgICByZXR1cm4gJ3BpZWNlLXJvb2stJyArIHN1cGVyLmNsYXNzO1xuICAgIH1cblxuICAgICpnZXRQb3NzaWJsZU1vdmVzKGdhbWUsIHgsIHkpIHtcbiAgICAgICAgZm9yIChsZXQgZCA9IDA7IGQgPCBTVFJBSUdIVF9ESVJFQ1RJT05TLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIFNUUkFJR0hUX0RJUkVDVElPTlNbZF0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgS25pZ2h0IGV4dGVuZHMgQmxhY2tXaGl0ZUNoZXNzUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKG93bmVyKSB7XG4gICAgICAgIHN1cGVyKG93bmVyLCBcIktuaWdodFwiKTtcbiAgICB9XG5cbiAgICBnZXQgY2xhc3MoKSB7XG4gICAgICAgIHJldHVybiAncGllY2Uta25pZ2h0LScgKyBzdXBlci5jbGFzcztcbiAgICB9XG5cbiAgICAqZ2V0UG9zc2libGVNb3ZlcyhnYW1lLCB4LCB5KSB7XG4gICAgICAgIGxldCByZWxhdGl2ZU1vdmVzID0gW1xuICAgICAgICAgICAge3g6IDIsIHk6IDF9LFxuICAgICAgICAgICAge3g6IDIsIHk6IC0xfSxcbiAgICAgICAgICAgIHt4OiAtMiwgeTogMX0sXG4gICAgICAgICAgICB7eDogLTIsIHk6IC0xfSxcbiAgICAgICAgICAgIHt4OiAxLCB5OiAyfSxcbiAgICAgICAgICAgIHt4OiAtMSwgeTogMn0sXG4gICAgICAgICAgICB7eDogMSwgeTogLTJ9LFxuICAgICAgICAgICAge3g6IC0xLCB5OiAtMn0sXG4gICAgICAgIF07XG5cbiAgICAgICAgZm9yIChsZXQgZCA9IDA7IGQgPCByZWxhdGl2ZU1vdmVzLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIHJlbGF0aXZlTW92ZXNbZF0sIDEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmlzaG9wIGV4dGVuZHMgQmxhY2tXaGl0ZUNoZXNzUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKG93bmVyKSB7XG4gICAgICAgIHN1cGVyKG93bmVyLCBcIkJpc2hvcFwiKTtcbiAgICB9XG5cbiAgICBnZXQgY2xhc3MoKSB7XG4gICAgICAgIHJldHVybiAncGllY2UtYmlzaG9wLScgKyBzdXBlci5jbGFzcztcbiAgICB9XG5cbiAgICAqZ2V0UG9zc2libGVNb3ZlcyhnYW1lLCB4LCB5KSB7XG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgRElBR09OQUxfRElSRUNUSU9OUy5sZW5ndGg7IGQrKykge1xuICAgICAgICAgICAgeWllbGQqIHRoaXMuZ2V0TW92ZXNJbkRpcmVjdGlvbihnYW1lLCB4LCB5LCBESUFHT05BTF9ESVJFQ1RJT05TW2RdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFF1ZWVuIGV4dGVuZHMgQmxhY2tXaGl0ZUNoZXNzUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKG93bmVyKSB7XG4gICAgICAgIHN1cGVyKG93bmVyLCBcIlF1ZWVuXCIpO1xuICAgIH1cblxuICAgIGdldCBjbGFzcygpIHtcbiAgICAgICAgcmV0dXJuICdwaWVjZS1xdWVlbi0nICsgc3VwZXIuY2xhc3M7XG4gICAgfVxuXG4gICAgKmdldFBvc3NpYmxlTW92ZXMoZ2FtZSwgeCwgeSkge1xuICAgICAgICBmb3IgKGxldCBkID0gMDsgZCA8IEFMTF9ESVJFQ1RJT05TLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIEFMTF9ESVJFQ1RJT05TW2RdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEtpbmcgZXh0ZW5kcyBCbGFja1doaXRlQ2hlc3NQaWVjZSB7XG4gICAgY29uc3RydWN0b3Iob3duZXIpIHtcbiAgICAgICAgc3VwZXIob3duZXIsIFwiS2luZ1wiKTtcbiAgICB9XG5cbiAgICBnZXQgY2xhc3MoKSB7XG4gICAgICAgIHJldHVybiAncGllY2Uta2luZy0nICsgc3VwZXIuY2xhc3M7XG4gICAgfVxuXG4gICAgKmdldFBvc3NpYmxlTW92ZXMoZ2FtZSwgeCwgeSkge1xuICAgICAgICBmb3IgKGxldCBkID0gMDsgZCA8IEFMTF9ESVJFQ1RJT05TLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5nZXRNb3Zlc0luRGlyZWN0aW9uKGdhbWUsIHgsIHksIEFMTF9ESVJFQ1RJT05TW2RdLCAxKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5ZXIge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5udW1iZXIgPSAtMTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGlsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucGFzc2FibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIGdldCBjbGFzc2VzKCkge1xuICAgICAgICB0aHJvdyBcIk5vdEltcGxlbWVudGVkXCI7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmxhY2tUaWxlIGV4dGVuZHMgVGlsZSB7XG4gICAgZ2V0IGNsYXNzZXMoKSB7XG4gICAgICAgIHJldHVybiBbXCJ0aWxlLWJsYWNrXCJdO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFdoaXRlVGlsZSBleHRlbmRzIFRpbGUge1xuICAgIGdldCBjbGFzc2VzKCkge1xuICAgICAgICByZXR1cm4gW1widGlsZS13aGl0ZVwiXTtcbiAgICB9XG59IiwiLy8gQ3JlYXRlIGNvb2tpZVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvb2tpZShuYW1lLCB2YWx1ZSwgZGF5cykge1xuICAgIGxldCBleHBpcmVzO1xuICAgIGlmIChkYXlzKSB7XG4gICAgICAgIGxldCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpKyhkYXlzKjI0KjYwKjYwKjEwMDApKTtcbiAgICAgICAgZXhwaXJlcyA9IFwiOyBleHBpcmVzPVwiK2RhdGUudG9HTVRTdHJpbmcoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV4cGlyZXMgPSBcIlwiO1xuICAgIH1cbiAgICBkb2N1bWVudC5jb29raWUgPSBuYW1lK1wiPVwiK3ZhbHVlK2V4cGlyZXMrXCI7IHBhdGg9L1wiO1xufVxuXG4vLyBSZWFkIGNvb2tpZVxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRDb29raWUobmFtZSkge1xuICAgIGxldCBuYW1lRVEgPSBuYW1lICsgXCI9XCI7XG4gICAgbGV0IGNhID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XG4gICAgZm9yKGxldCBpPTA7aSA8IGNhLmxlbmd0aDtpKyspIHtcbiAgICAgICAgbGV0IGMgPSBjYVtpXTtcbiAgICAgICAgd2hpbGUgKGMuY2hhckF0KDApID09PSAnICcpIHtcbiAgICAgICAgICAgIGMgPSBjLnN1YnN0cmluZygxLGMubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYy5pbmRleE9mKG5hbWVFUSkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBjLnN1YnN0cmluZyhuYW1lRVEubGVuZ3RoLGMubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuLy8gRXJhc2UgY29va2llXG5leHBvcnQgZnVuY3Rpb24gZXJhc2VDb29raWUobmFtZSkge1xuICAgIGNyZWF0ZUNvb2tpZShuYW1lLFwiXCIsLTEpO1xufSIsIi8vIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2NyZWF0ZS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ3VpZCgpIHtcbiAgICBmdW5jdGlvbiBzNCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApXG4gICAgICAgICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICByZXR1cm4gczQoKSArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArXG4gICAgICAgIHM0KCkgKyAnLScgKyBzNCgpICsgczQoKSArIHM0KCk7XG59IiwiLy8gZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMTc3ODM2L2hvdy10by1mb3JtYXQtdGltZS1zaW5jZS14eHgtZS1nLTQtbWludXRlcy1hZ28tc2ltaWxhci10by1zdGFjay1leGNoYW5nZS1zaXRlXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aW1lU2luY2UoZGF0ZSkge1xuICAgIGxldCBzZWNvbmRzID0gTWF0aC5mbG9vcigobmV3IERhdGUoKSAtIGRhdGUpIC8gMTAwMCk7XG5cbiAgICBsZXQgaW50ZXJ2YWwgPSBNYXRoLmZsb29yKHNlY29uZHMgLyAzMTUzNjAwMCk7XG5cbiAgICBpZiAoaW50ZXJ2YWwgPiAxKSB7XG4gICAgICAgIHJldHVybiBpbnRlcnZhbCArIFwiIHllYXJzXCI7XG4gICAgfVxuICAgIGludGVydmFsID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMjU5MjAwMCk7XG4gICAgaWYgKGludGVydmFsID4gMSkge1xuICAgICAgICByZXR1cm4gaW50ZXJ2YWwgKyBcIiBtb250aHNcIjtcbiAgICB9XG4gICAgaW50ZXJ2YWwgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA4NjQwMCk7XG4gICAgaWYgKGludGVydmFsID4gMSkge1xuICAgICAgICByZXR1cm4gaW50ZXJ2YWwgKyBcIiBkYXlzXCI7XG4gICAgfVxuICAgIGludGVydmFsID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMzYwMCk7XG4gICAgaWYgKGludGVydmFsID4gMSkge1xuICAgICAgICByZXR1cm4gaW50ZXJ2YWwgKyBcIiBob3Vyc1wiO1xuICAgIH1cbiAgICBpbnRlcnZhbCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICBpZiAoaW50ZXJ2YWwgPiAxKSB7XG4gICAgICAgIHJldHVybiBpbnRlcnZhbCArIFwiIG1pbnV0ZXNcIjtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGguZmxvb3Ioc2Vjb25kcykgKyBcIiBzZWNvbmRzXCI7XG59IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiICAgICAgICA8dHI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gX19kZWZhdWx0KHJlcXVpcmUoXCIuLi9qcy9oZWxwZXJzL3NwaW5mb3JwbGF5ZXIuanNcIikpLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0uZ2FtZSA6IGRlcHRoc1sxXSksKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnBsYXllciA6IGRlcHRoc1sxXSksZGVwdGgwLHtcIm5hbWVcIjpcInNwaW5mb3JwbGF5ZXJcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMiwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICA8L3RyPlxcblwiO1xufSxcIjJcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgIFwiXG4gICAgKyAoKHN0YWNrMSA9IF9fZGVmYXVsdChyZXF1aXJlKFwiLi4vanMvaGVscGVycy9yZW5kZXJjZWxsLmpzXCIpKS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksZGVwdGgwLHtcIm5hbWVcIjpcInJlbmRlcmNlbGxcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiXFxuXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiYm9hcmRcXFwiPlxcbiAgICA8dGFibGU+XFxuXCJcbiAgICArICgoc3RhY2sxID0gX19kZWZhdWx0KHJlcXVpcmUoXCIuLi9qcy9oZWxwZXJzL3NwaW5mb3JwbGF5ZXIuanNcIikpLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZ2FtZSA6IGRlcHRoMCksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBsYXllciA6IGRlcHRoMCksKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZ2FtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuYm9hcmQgOiBzdGFjazEpLHtcIm5hbWVcIjpcInNwaW5mb3JwbGF5ZXJcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgIDwvdGFibGU+XFxuICAgIDxkaXYgY2xhc3M9XFxcIm92ZXJsYXlcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibWVzc2FnZVxcXCI+XFxuICAgICAgICAgICAgPHAgY2xhc3M9XFxcInRpdGxlXFxcIj5TbyBhbmQgc28gbWVzc2FnZTwvcD5cXG4gICAgICAgICAgICA8cCBjbGFzcz1cXFwiY29udGVudFxcXCI+UGxlYXNlIHJlbG9hZCB0aGUgYXBwPC9wPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlLFwidXNlRGVwdGhzXCI6dHJ1ZX0pOyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiICAgICAgICA8aW1nIGRyYWdnYWJsZT1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcInBpZWNlIFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBpZWNlIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMVtcImNsYXNzXCJdIDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBzcmM9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBpZWNlIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5pbWcgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGFsdD1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGllY2UgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm5hbWUgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIC8+XFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9Y29udGFpbmVyLmxhbWJkYTtcblxuICByZXR1cm4gXCI8dGQgY2xhc3M9XFxcImNlbGwgXCJcbiAgICArIGFsaWFzMigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnRpbGVDbGFzcyB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGlsZUNsYXNzIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJ0aWxlQ2xhc3NcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBkYXRhLXg9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMzKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNlbGwgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnggOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGRhdGEteT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczMoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY2VsbCA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEueSA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5waWVjZSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90ZD5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZ2FtZVxcXCIgZGF0YS1pZD1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmlkIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiaWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwibmFtZVxcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcInJ1bGVzZXRcXFwiPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5ydWxlc2V0IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5ydWxlc2V0IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJydWxlc2V0XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJwbGF5ZXJzXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMucGxheWVyMSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGxheWVyMSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwicGxheWVyMVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCIgdnMuIFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5wbGF5ZXIyIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wbGF5ZXIyIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJwbGF5ZXIyXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjcmVhdGVkXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuY3JlYXRlZCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY3JlYXRlZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiY3JlYXRlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCIgYWdvPC9kaXY+XFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTsiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCIgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJzdWJtaXRcXFwiIGNsYXNzPVxcXCJqb2luXFxcIiB2YWx1ZT1cXFwiSm9pblxcXCI+XFxuXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiICAgICAgICA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiV2FpdGluZy4uLlxcXCIgZGlzYWJsZWQ+XFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWhlbHBlcnMuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImxvYmJ5XFxcIiBkYXRhLWlkPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuaWQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmlkIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJpZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJuYW1lXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwicnVsZXNldFxcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnJ1bGVzZXQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnJ1bGVzZXQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInJ1bGVzZXRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcInBsYXllcnNcXFwiPlBsYXllcnM6IFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5wbGF5ZXIgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBsYXllciA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwicGxheWVyXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjcmVhdGVkXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuY3JlYXRlZCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY3JlYXRlZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiY3JlYXRlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCIgYWdvPC9kaXY+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5qb2luYWJsZSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gaGVscGVycy51bmxlc3MuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmpvaW5hYmxlIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJ1bmxlc3NcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTsiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgPGltZyBjbGFzcz1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwW1wiY2xhc3NcIl0gOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGRhdGEtbmFtZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHNyYz1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmltZyA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+PC9pbWc+XFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCI8ZGl2IGlkPVxcXCJwYXduLXByb21vdGlvblxcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGllY2VzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCI8aW5wdXQgaWQ9XFxcInJ1bGVzZXQtXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmlkIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiaWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwicnVsZXNldFxcXCIgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pZCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaWQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImlkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCI+XFxuPGxhYmVsIGZvcj1cXFwicnVsZXNldC1cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuaWQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmlkIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJpZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvbGFiZWw+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTsiLCIvKiAoaWdub3JlZCkgKi8iXSwic291cmNlUm9vdCI6IiJ9